{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "influxdb-client-python\n======================\n\n.. marker-index-start\n\n.. image:: https://circleci.com/gh/influxdata/influxdb-client-python.svg?style=svg\n   :target: https://circleci.com/gh/influxdata/influxdb-client-python\n   :alt: circleci\n\n\n.. image:: https://codecov.io/gh/influxdata/influxdb-client-python/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/influxdata/influxdb-client-python\n   :alt: codecov\n\n.. image:: https://img.shields.io/circleci/project/github/influxdata/influxdb-client-python/master.svg\n   :target: https://circleci.com/gh/influxdata/influxdb-client-python\n   :alt: ci status\n\n.. image:: https://img.shields.io/pypi/v/influxdb-client.svg\n   :target: https://pypi.org/project/influxdb-client/\n   :alt: pypi package\n\n.. image:: https://anaconda.org/influxdata/influxdb_client/badges/version.svg\n   :target: https://anaconda.org/influxdata/influxdb_client\n   :alt: anaconda.org package\n\n.. image:: https://img.shields.io/pypi/pyversions/influxdb-client.svg\n   :target: https://pypi.python.org/pypi/influxdb-client\n   :alt: supported python versions\n\n.. image:: https://readthedocs.org/projects/influxdb-client/badge/?version=stable\n   :target: https://influxdb-client.readthedocs.io/en/stable/\n   :alt: documentation status\n\n.. image:: https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social\n   :target: https://www.influxdata.com/slack\n   :alt: slack status\n\nthis repository contains the python client library for use with influxdb 2.x and flux. influxdb 3.x users should instead use the lightweight `v3 client library <https://github.com/influxcommunity/influxdb3-python>`_. influxdb 1.x users should use the `v1 client library <https://github.com/influxdata/influxdb-python>`_.\n\nfor ease of migration and a consistent query and write experience, v2 users should consider using influxql and the `v1 client library <https://github.com/influxdata/influxdb-python>`_.\n\nthe api of the **influxdb-client-python** is not the backwards-compatible with the old one - **influxdb-python**.\n\ndocumentation\n-------------\n\nthis section contains links to the client library documentation.\n\n* `product documentation <https://docs.influxdata.com/influxdb/v2.0/tools/client-libraries/>`_, `getting started <#getting-started>`_\n* `examples <https://github.com/influxdata/influxdb-client-python/tree/master/examples>`_\n* `api reference <https://influxdb-client.readthedocs.io/en/stable/api.html>`_\n* `changelog <https://github.com/influxdata/influxdb-client-python/blob/master/changelog.md>`_\n\ninfluxdb 2.0 client features\n----------------------------\n\n- querying data\n    - using the flux language\n    - into csv, raw data, `flux_table <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#l33>`_ structure, `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n    - `how to queries <#queries>`_\n- writing data using\n    - `line protocol <https://docs.influxdata.com/influxdb/latest/reference/syntax/line-protocol>`_\n    - `data point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py#l47>`__\n    - `rxpy <https://rxpy.readthedocs.io/en/latest/>`__ observable\n    - `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n    - `how to writes <#writes>`_\n- `influxdb 2.0 api <https://github.com/influxdata/influxdb/blob/master/http/swagger.yml>`_ client for management\n    - the client is generated from the `swagger <https://github.com/influxdata/influxdb/blob/master/http/swagger.yml>`_ by using the `openapi-generator <https://github.com/openapitools/openapi-generator>`_\n    - organizations & users management\n    - buckets management\n    - tasks management\n    - authorizations\n    - health check\n    - ...\n- `influxdb 1.8 api compatibility`_\n- examples\n    - `connect to influxdb cloud`_\n    - `how to efficiently import large dataset`_\n    - `efficiency write data from iot sensor`_\n    - `how to use jupyter + pandas + influxdb 2`_\n- `advanced usage`_\n    - `gzip support`_\n    - `proxy configuration`_\n    - `nanosecond precision`_\n    - `delete data`_\n    - `handling errors`_\n    - `logging`_\n\ninstallation\n------------\n.. marker-install-start\n\ninfluxdb python library uses `rxpy <https://github.com/reactivex/rxpy>`__ - the reactive extensions for python (rxpy).\n\n**python 3.7** or later is required.\n\n.. note::\n\n    it is recommended to use ``ciso8601`` with client for parsing dates. ``ciso8601`` is much faster than built-in python datetime. since it's written as a ``c`` module the best way is build it from sources:\n\n    **windows**:\n\n    you have to install `visual c++ build tools 2015 <http://go.microsoft.com/fwlink/?linkid=691126&fixforie=.exe>`_ to build ``ciso8601`` by ``pip``.\n\n    **conda**:\n\n    install from sources: ``conda install -c conda-forge/label/cf202003 ciso8601``.\n\npip install\n^^^^^^^^^^^\n\nthe python package is hosted on `pypi <https://pypi.org/project/influxdb-client/>`_, you can install latest version directly:\n\n.. code-block:: sh\n\n   pip install 'influxdb-client[ciso]'\n\nthen import the package:\n\n.. code-block:: python\n\n   import influxdb_client\n\nif your application uses async/await in python you can install with the ``async`` extra::\n\n    $ pip install influxdb-client[async]\n\nfor more info see `how to use asyncio`.\n\nsetuptools\n^^^^^^^^^^\n\ninstall via `setuptools <http://pypi.python.org/pypi/setuptools>`_.\n\n.. code-block:: sh\n\n   python setup.py install --user\n\n(or ``sudo python setup.py install`` to install the package for all users)\n\n.. marker-install-end\n\ngetting started\n---------------\n\nplease follow the `installation`_ and then run the following:\n\n.. marker-query-start\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient, point\n   from influxdb_client.client.write_api import synchronous\n\n   bucket = \"my-bucket\"\n\n   client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\")\n\n   write_api = client.write_api(write_options=synchronous)\n   query_api = client.query_api()\n\n   p = point(\"my_measurement\").tag(\"location\", \"prague\").field(\"temperature\", 25.3)\n\n   write_api.write(bucket=bucket, record=p)\n\n   ## using table structure\n   tables = query_api.query('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n   for table in tables:\n       print(table)\n       for row in table.records:\n           print (row.values)\n\n\n   ## using csv library\n   csv_result = query_api.query_csv('from(bucket:\"my-bucket\") |> range(start: -10m)')\n   val_count = 0\n   for row in csv_result:\n       for cell in row:\n           val_count += 1\n\n\n.. marker-query-end\n\nclient configuration\n--------------------\n\nvia file\n^^^^^^^^\na client can be configured via ``*.ini`` file in segment ``influx2``.\n\nthe following options are supported:\n\n- ``url`` - the url to connect to influxdb\n- ``org`` - default destination organization for writes and queries\n- ``token`` - the token to use for the authorization\n- ``timeout`` - socket timeout in ms (default value is 10000)\n- ``verify_ssl`` - set this to false to skip verifying ssl certificate when calling api from https server\n- ``ssl_ca_cert`` - set this to customize the certificate file to verify the peer\n- ``cert_file`` - path to the certificate that will be used for mtls authentication\n- ``cert_key_file`` - path to the file contains private key for mtls certificate\n- ``cert_key_password`` - string or function which returns password for decrypting the mtls private key\n- ``connection_pool_maxsize`` - set the number of connections to save that can be reused by urllib3\n- ``auth_basic`` - enable http basic authentication when talking to a influxdb 1.8.x without authentication but is accessed via reverse proxy with basic authentication (defaults to false)\n- ``profilers`` - set the list of enabled `flux profilers <https://docs.influxdata.com/influxdb/v2.0/reference/flux/stdlib/profiler/>`_\n\n.. code-block:: python\n\n    self.client = influxdbclient.from_config_file(\"config.ini\")\n\n.. code-block:: ini\n\n    [influx2]\n    url=http://localhost:8086\n    org=my-org\n    token=my-token\n    timeout=6000\n    verify_ssl=false\n\nvia environment properties\n^^^^^^^^^^^^^^^^^^^^^^^^^^\na client can be configured via environment properties.\n\nsupported properties are:\n\n- ``influxdb_v2_url`` - the url to connect to influxdb\n- ``influxdb_v2_org`` - default destination organization for writes and queries\n- ``influxdb_v2_token`` - the token to use for the authorization\n- ``influxdb_v2_timeout`` - socket timeout in ms (default value is 10000)\n- ``influxdb_v2_verify_ssl`` - set this to false to skip verifying ssl certificate when calling api from https server\n- ``influxdb_v2_ssl_ca_cert`` - set this to customize the certificate file to verify the peer\n- ``influxdb_v2_cert_file`` - path to the certificate that will be used for mtls authentication\n- ``influxdb_v2_cert_key_file`` - path to the file contains private key for mtls certificate\n- ``influxdb_v2_cert_key_password`` - string or function which returns password for decrypting the mtls private key\n- ``influxdb_v2_connection_pool_maxsize`` - set the number of connections to save that can be reused by urllib3\n- ``influxdb_v2_auth_basic`` - enable http basic authentication when talking to a influxdb 1.8.x without authentication but is accessed via reverse proxy with basic authentication (defaults to false)\n- ``influxdb_v2_profilers`` - set the list of enabled `flux profilers <https://docs.influxdata.com/influxdb/v2.0/reference/flux/stdlib/profiler/>`_\n\n.. code-block:: python\n\n    self.client = influxdbclient.from_env_properties()\n\nprofile query\n^^^^^^^^^^^^^\n\nthe `flux profiler package <https://docs.influxdata.com/influxdb/v2.0/reference/flux/stdlib/profiler/>`_ provides\nperformance profiling tools for flux queries and operations.\n\nyou can enable printing profiler information of the flux query in client library by:\n\n- set queryoptions.profilers in queryapi,\n- set ``influxdb_v2_profilers`` environment variable,\n- set ``profilers`` option in configuration file.\n\nwhen the profiler is enabled, the result of flux query contains additional tables \"profiler/\\*\".\nin order to have consistent behaviour with enabled/disabled profiler, ``fluxcsvparser`` excludes \"profiler/\\*\" measurements\nfrom result.\n\nexample how to enable profilers using api:\n\n.. code-block:: python\n\n    q = '''\n        from(bucket: stringparam)\n          |> range(start: -5m, stop: now())\n          |> filter(fn: (r) => r._measurement == \"mem\")\n          |> filter(fn: (r) => r._field == \"available\" or r._field == \"free\" or r._field == \"used\")\n          |> aggregatewindow(every: 1m, fn: mean)\n          |> pivot(rowkey:[\"_time\"], columnkey: [\"_field\"], valuecolumn: \"_value\")\n    '''\n    p = {\n        \"stringparam\": \"my-bucket\",\n    }\n\n    query_api = client.query_api(query_options=queryoptions(profilers=[\"query\", \"operator\"]))\n    csv_result = query_api.query(query=q, params=p)\n\n\nexample of a profiler output:\n\n.. code-block:: text\n\n    ===============\n    profiler: query\n    ===============\n\n    from(bucket: stringparam)\n      |> range(start: -5m, stop: now())\n      |> filter(fn: (r) => r._measurement == \"mem\")\n      |> filter(fn: (r) => r._field == \"available\" or r._field == \"free\" or r._field == \"used\")\n      |> aggregatewindow(every: 1m, fn: mean)\n      |> pivot(rowkey:[\"_time\"], columnkey: [\"_field\"], valuecolumn: \"_value\")\n\n    ========================\n    profiler: profiler/query\n    ========================\n    result              : _profiler\n    table               : 0\n    _measurement        : profiler/query\n    totalduration       : 8924700\n    compileduration     : 350900\n    queueduration       : 33800\n    planduration        : 0\n    requeueduration     : 0\n    executeduration     : 8486500\n    concurrency         : 0\n    maxallocated        : 2072\n    totalallocated      : 0\n    flux/query-plan     :\n\n    digraph {\n      readwindowaggregatebytime11\n      // every = 1m, aggregates = [mean], createempty = true, timecolumn = \"_stop\"\n      pivot8\n      generated_yield\n\n      readwindowaggregatebytime11 -> pivot8\n      pivot8 -> generated_yield\n    }\n\n\n    influxdb/scanned-bytes: 0\n    influxdb/scanned-values: 0\n\n    ===========================\n    profiler: profiler/operator\n    ===========================\n    result              : _profiler\n    table               : 1\n    _measurement        : profiler/operator\n    type                : *universe.pivottransformation\n    label               : pivot8\n    count               : 3\n    minduration         : 32600\n    maxduration         : 126200\n    durationsum         : 193400\n    meanduration        : 64466.666666666664\n\n    ===========================\n    profiler: profiler/operator\n    ===========================\n    result              : _profiler\n    table               : 1\n    _measurement        : profiler/operator\n    type                : *influxdb.readwindowaggregatesource\n    label               : readwindowaggregatebytime11\n    count               : 1\n    minduration         : 940500\n    maxduration         : 940500\n    durationsum         : 940500\n    meanduration        : 940500.0\n\nyou can also use callback function to get profilers output.\nreturn value of this callback is type of fluxrecord.\n\nexample how to use profilers with callback:\n\n.. code-block:: python\n\n     class profilerscallback(object):\n        def __init__(self):\n            self.records = []\n\n        def __call__(self, flux_record):\n            self.records.append(flux_record.values)\n\n    callback = profilerscallback()\n\n    query_api = client.query_api(query_options=queryoptions(profilers=[\"query\", \"operator\"], profiler_callback=callback))\n    tables = query_api.query('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n    for profiler in callback.records:\n        print(f'custom processing of profiler result: {profiler}')\n\nexample output of this callback:\n\n.. code-block:: text\n\n    custom processing of profiler result: {'result': '_profiler', 'table': 0, '_measurement': 'profiler/query', 'totalduration': 18843792, 'compileduration': 1078666, 'queueduration': 93375, 'planduration': 0, 'requeueduration': 0, 'executeduration': 17371000, 'concurrency': 0, 'maxallocated': 448, 'totalallocated': 0, 'runtimeerrors': none, 'flux/query-plan': 'digraph {\\r\\n  readrange2\\r\\n  generated_yield\\r\\n\\r\\n  readrange2 -> generated_yield\\r\\n}\\r\\n\\r\\n', 'influxdb/scanned-bytes': 0, 'influxdb/scanned-values': 0}\n    custom processing of profiler result: {'result': '_profiler', 'table': 1, '_measurement': 'profiler/operator', 'type': '*influxdb.readfiltersource', 'label': 'readrange2', 'count': 1, 'minduration': 3274084, 'maxduration': 3274084, 'durationsum': 3274084, 'meanduration': 3274084.0}\n\n\n.. marker-index-end\n\n\nhow to use\n----------\n\nwrites\n^^^^^^\n.. marker-writes-start\n\nthe `writeapi <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write_api.py>`_ supports synchronous, asynchronous and batching writes into influxdb 2.0.\nthe data should be passed as a `influxdb line protocol <https://docs.influxdata.com/influxdb/latest/write_protocols/line_protocol_tutorial/>`_\\ , `data point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py>`_ or observable stream.\n\n.. warning::\n\n    the ``writeapi`` in batching mode (default mode) is suppose to run as a singleton.\n    to flush all your data you should wrap the execution using ``with client.write_api(...) as write_api:`` statement\n    or call ``write_api.close()`` at the end of your script.\n\n*the default instance of writeapi use batching.*\n\nthe data could be written as\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n1. ``string`` or ``bytes`` that is formatted as a influxdb's line protocol\n2. `data point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py#l16>`__ structure\n3. dictionary style mapping with keys: ``measurement``, ``tags``, ``fields`` and ``time`` or custom structure\n4. `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_\n5. `data classes <https://docs.python.org/3/library/dataclasses.html>`_\n6. `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n7. list of above items\n8. a ``batching`` type of write also supports an ``observable`` that produce one of an above item\n\nyou can find write examples at github: `influxdb-client-python/examples <https://github.com/influxdata/influxdb-client-python/tree/master/examples#writes>`__.\n\nbatching\n\"\"\"\"\"\"\"\"\n\nthe batching is configurable by ``write_options``\\ :\n\n.. list-table::\n   :header-rows: 1\n\n   * - property\n     - description\n     - default value\n   * - **batch_size**\n     - the number of data point to collect in a batch\n     - ``1000``\n   * - **flush_interval**\n     - the number of milliseconds before the batch is written\n     - ``1000``\n   * - **jitter_interval**\n     - the number of milliseconds to increase the batch flush interval by a random amount\n     - ``0``\n   * - **retry_interval**\n     - the number of milliseconds to retry first unsuccessful write. the next retry delay is computed using exponential random backoff. the retry interval is used when the influxdb server does not specify \"retry-after\" header.\n     - ``5000``\n   * - **max_retry_time**\n     - maximum total retry timeout in milliseconds.\n     - ``180_000``\n   * - **max_retries**\n     - the number of max retries when write fails\n     - ``5``\n   * - **max_retry_delay**\n     - the maximum delay between each retry attempt in milliseconds\n     - ``125_000``\n   * - **max_close_wait**\n     - the maximum amount of time to wait for batches to flush when `.close()` is called\n     - ``300_000``\n   * - **exponential_base**\n     - the base for the exponential retry delay, the next delay is computed using random exponential backoff as a random value within the interval  ``retry_interval * exponential_base^(attempts-1)`` and ``retry_interval * exponential_base^(attempts)``. example for ``retry_interval=5_000, exponential_base=2, max_retry_delay=125_000, total=5`` retry delays are random distributed values within the ranges of ``[5_000-10_000, 10_000-20_000, 20_000-40_000, 40_000-80_000, 80_000-125_000]``\n     - ``2``\n\n\n.. code-block:: python\n\n    from datetime import datetime, timedelta\n\n    import pandas as pd\n    import reactivex as rx\n    from reactivex import operators as ops\n\n    from influxdb_client import influxdbclient, point, writeoptions\n\n    with influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as _client:\n\n        with _client.write_api(write_options=writeoptions(batch_size=500,\n                                                          flush_interval=10_000,\n                                                          jitter_interval=2_000,\n                                                          retry_interval=5_000,\n                                                          max_retries=5,\n                                                          max_retry_delay=30_000,\n                                                          max_close_wait=300_000,\n                                                          exponential_base=2)) as _write_client:\n\n            \"\"\"\n            write line protocol formatted as string\n            \"\"\"\n            _write_client.write(\"my-bucket\", \"my-org\", \"h2o_feet,location=coyote_creek water_level=1.0 1\")\n            _write_client.write(\"my-bucket\", \"my-org\", [\"h2o_feet,location=coyote_creek water_level=2.0 2\",\n                                                        \"h2o_feet,location=coyote_creek water_level=3.0 3\"])\n\n            \"\"\"\n            write line protocol formatted as byte array\n            \"\"\"\n            _write_client.write(\"my-bucket\", \"my-org\", \"h2o_feet,location=coyote_creek water_level=1.0 1\".encode())\n            _write_client.write(\"my-bucket\", \"my-org\", [\"h2o_feet,location=coyote_creek water_level=2.0 2\".encode(),\n                                                        \"h2o_feet,location=coyote_creek water_level=3.0 3\".encode()])\n\n            \"\"\"\n            write dictionary-style object\n            \"\"\"\n            _write_client.write(\"my-bucket\", \"my-org\", {\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                                        \"fields\": {\"water_level\": 1.0}, \"time\": 1})\n            _write_client.write(\"my-bucket\", \"my-org\", [{\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                                         \"fields\": {\"water_level\": 2.0}, \"time\": 2},\n                                                        {\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                                         \"fields\": {\"water_level\": 3.0}, \"time\": 3}])\n\n            \"\"\"\n            write data point\n            \"\"\"\n            _write_client.write(\"my-bucket\", \"my-org\",\n                                point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 4.0).time(4))\n            _write_client.write(\"my-bucket\", \"my-org\",\n                                [point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 5.0).time(5),\n                                 point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 6.0).time(6)])\n\n            \"\"\"\n            write observable stream\n            \"\"\"\n            _data = rx \\\n                .range(7, 11) \\\n                .pipe(ops.map(lambda i: \"h2o_feet,location=coyote_creek water_level={0}.0 {0}\".format(i)))\n\n            _write_client.write(\"my-bucket\", \"my-org\", _data)\n\n            \"\"\"\n            write pandas dataframe\n            \"\"\"\n            _now = datetime.utcnow()\n            _data_frame = pd.dataframe(data=[[\"coyote_creek\", 1.0], [\"coyote_creek\", 2.0]],\n                                       index=[_now, _now + timedelta(hours=1)],\n                                       columns=[\"location\", \"water_level\"])\n\n            _write_client.write(\"my-bucket\", \"my-org\", record=_data_frame, data_frame_measurement_name='h2o_feet',\n                                data_frame_tag_columns=['location'])\n\n\n\ndefault tags\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nsometimes is useful to store same information in every measurement e.g. ``hostname``, ``location``, ``customer``.\nthe client is able to use static value or env property as a tag value.\n\nthe expressions:\n\n- ``california miner`` - static value\n- ``${env.hostname}`` - environment property\n\nvia api\n_______\n\n.. code-block:: python\n\n    point_settings = pointsettings()\n    point_settings.add_default_tag(\"id\", \"132-987-655\")\n    point_settings.add_default_tag(\"customer\", \"california miner\")\n    point_settings.add_default_tag(\"data_center\", \"${env.data_center}\")\n\n    self.write_client = self.client.write_api(write_options=synchronous, point_settings=point_settings)\n\n.. code-block:: python\n\n    self.write_client = self.client.write_api(write_options=synchronous,\n                                                  point_settings=pointsettings(**{\"id\": \"132-987-655\",\n                                                                                  \"customer\": \"california miner\"}))\n\nvia configuration file\n______________________\n\nin a `init <https://docs.python.org/3/library/configparser.html>`_ configuration file you are able to specify default tags by ``tags`` segment.\n\n.. code-block:: python\n\n    self.client = influxdbclient.from_config_file(\"config.ini\")\n\n.. code-block::\n\n    [influx2]\n    url=http://localhost:8086\n    org=my-org\n    token=my-token\n    timeout=6000\n\n    [tags]\n    id = 132-987-655\n    customer = california miner\n    data_center = ${env.data_center}\n\nyou can also use a `toml <https://toml.io/en/>`_  or a `json <https://www.json.org/json-en.html>`_ format for the configuration file.\n\nvia environment properties\n__________________________\nyou are able to specify default tags by environment properties with prefix ``influxdb_v2_tag_``.\n\nexamples:\n\n- ``influxdb_v2_tag_id``\n- ``influxdb_v2_tag_hostname``\n\n.. code-block:: python\n\n    self.client = influxdbclient.from_env_properties()\n\nsynchronous client\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ndata are writes in a synchronous http request.\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient, point\n   from influxdb_client .client.write_api import synchronous\n\n   client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\")\n   write_api = client.write_api(write_options=synchronous)\n\n   _point1 = point(\"my_measurement\").tag(\"location\", \"prague\").field(\"temperature\", 25.3)\n   _point2 = point(\"my_measurement\").tag(\"location\", \"new york\").field(\"temperature\", 24.3)\n\n   write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n   client.close()\n\n.. marker-writes-end\n\nqueries\n^^^^^^^\n\nthe result retrieved by `queryapi <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/query_api.py>`_  could be formatted as a:\n\n1. flux data structure: `fluxtable <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#l5>`_, `fluxcolumn <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#l22>`_ and `fluxrecord <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#l31>`_\n2. `influxdb_client.client.flux_table.csviterator` which will iterate over csv lines\n3. raw unprocessed results as a ``str`` iterator\n4. `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n\nthe api also support streaming ``fluxrecord`` via `query_stream <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/query_api.py#l77>`_, see example below:\n\n.. code-block:: python\n\n    from influxdb_client import influxdbclient, point, dialect\n    from influxdb_client.client.write_api import synchronous\n\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\")\n\n    write_api = client.write_api(write_options=synchronous)\n    query_api = client.query_api()\n\n    \"\"\"\n    prepare data\n    \"\"\"\n\n    _point1 = point(\"my_measurement\").tag(\"location\", \"prague\").field(\"temperature\", 25.3)\n    _point2 = point(\"my_measurement\").tag(\"location\", \"new york\").field(\"temperature\", 24.3)\n\n    write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n    \"\"\"\n    query: using table structure\n    \"\"\"\n    tables = query_api.query('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n    for table in tables:\n        print(table)\n        for record in table.records:\n            print(record.values)\n\n    print()\n    print()\n\n    \"\"\"\n    query: using bind parameters\n    \"\"\"\n\n    p = {\"_start\": datetime.timedelta(hours=-1),\n         \"_location\": \"prague\",\n         \"_desc\": true,\n         \"_floatparam\": 25.1,\n         \"_every\": datetime.timedelta(minutes=5)\n         }\n\n    tables = query_api.query('''\n        from(bucket:\"my-bucket\") |> range(start: _start)\n            |> filter(fn: (r) => r[\"_measurement\"] == \"my_measurement\")\n            |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n            |> filter(fn: (r) => r[\"location\"] == _location and r[\"_value\"] > _floatparam)\n            |> aggregatewindow(every: _every, fn: mean, createempty: true)\n            |> sort(columns: [\"_time\"], desc: _desc)\n    ''', params=p)\n\n    for table in tables:\n        print(table)\n        for record in table.records:\n            print(str(record[\"_time\"]) + \" - \" + record[\"location\"] + \": \" + str(record[\"_value\"]))\n\n    print()\n    print()\n\n    \"\"\"\n    query: using stream\n    \"\"\"\n    records = query_api.query_stream('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n    for record in records:\n        print(f'temperature in {record[\"location\"]} is {record[\"_value\"]}')\n\n    \"\"\"\n    interrupt a stream after retrieve a required data\n    \"\"\"\n    large_stream = query_api.query_stream('from(bucket:\"my-bucket\") |> range(start: -100d)')\n    for record in large_stream:\n        if record[\"location\"] == \"new york\":\n            print(f'new york temperature: {record[\"_value\"]}')\n            break\n\n    large_stream.close()\n\n    print()\n    print()\n\n    \"\"\"\n    query: using csv library\n    \"\"\"\n    csv_result = query_api.query_csv('from(bucket:\"my-bucket\") |> range(start: -10m)',\n                                     dialect=dialect(header=false, delimiter=\",\", comment_prefix=\"#\", annotations=[],\n                                                     date_time_format=\"rfc3339\"))\n    for csv_line in csv_result:\n        if not len(csv_line) == 0:\n            print(f'temperature in {csv_line[9]} is {csv_line[6]}')\n\n    \"\"\"\n    close client\n    \"\"\"\n    client.close()\n\npandas dataframe\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n.. marker-pandas-start\n\n.. note:: for dataframe querying you should install pandas dependency via ``pip install 'influxdb-client[extra]'``.\n\n.. note:: note that if a query returns more then one table then the client generates a ``dataframe`` for each of them.\n\nthe ``client`` is able to retrieve data in `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_ format thought ``query_data_frame``:\n\n.. code-block:: python\n\n    from influxdb_client import influxdbclient, point, dialect\n    from influxdb_client.client.write_api import synchronous\n\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\")\n\n    write_api = client.write_api(write_options=synchronous)\n    query_api = client.query_api()\n\n    \"\"\"\n    prepare data\n    \"\"\"\n\n    _point1 = point(\"my_measurement\").tag(\"location\", \"prague\").field(\"temperature\", 25.3)\n    _point2 = point(\"my_measurement\").tag(\"location\", \"new york\").field(\"temperature\", 24.3)\n\n    write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n    \"\"\"\n    query: using pandas dataframe\n    \"\"\"\n    data_frame = query_api.query_data_frame('from(bucket:\"my-bucket\") '\n                                            '|> range(start: -10m) '\n                                            '|> pivot(rowkey:[\"_time\"], columnkey: [\"_field\"], valuecolumn: \"_value\") '\n                                            '|> keep(columns: [\"location\", \"temperature\"])')\n    print(data_frame.to_string())\n\n    \"\"\"\n    close client\n    \"\"\"\n    client.close()\n\noutput:\n\n.. code-block:: text\n\n        result table  location  temperature\n    0  _result     0  new york         24.3\n    1  _result     1    prague         25.3\n\n.. marker-pandas-end\n\nexamples\n^^^^^^^^\n\n.. marker-examples-start\n\nhow to efficiently import large dataset\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nthe following example shows how to import dataset with dozen megabytes.\nif you would like to import gigabytes of data then use our multiprocessing example: `import_data_set_multiprocessing.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/import_data_set_multiprocessing.py>`_ for use a full capability of your hardware.\n\n* sources - `import_data_set.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/import_data_set.py>`_\n\n.. code-block:: python\n\n   \"\"\"\n   import vix - cboe volatility index - from \"vix-daily.csv\" file into influxdb 2.0\n\n   https://datahub.io/core/finance-vix#data\n   \"\"\"\n\n   from collections import ordereddict\n   from csv import dictreader\n\n   import reactivex as rx\n   from reactivex import operators as ops\n\n   from influxdb_client import influxdbclient, point, writeoptions\n\n   def parse_row(row: ordereddict):\n       \"\"\"parse row of csv file into point with structure:\n\n           financial-analysis,type=ily close=18.47,high=19.82,low=18.28,open=19.82 1198195200000000000\n\n       csv format:\n           date,vix open,vix high,vix low,vix close\\n\n           2004-01-02,17.96,18.68,17.54,18.22\\n\n           2004-01-05,18.45,18.49,17.44,17.49\\n\n           2004-01-06,17.66,17.67,16.19,16.73\\n\n           2004-01-07,16.72,16.75,15.5,15.5\\n\n           2004-01-08,15.42,15.68,15.32,15.61\\n\n           2004-01-09,16.15,16.88,15.57,16.75\\n\n           ...\n\n       :param row: the row of csv file\n       :return: parsed csv row to [point]\n       \"\"\"\n\n       \"\"\"\n        for better performance is sometimes useful directly create a lineprotocol to avoid unnecessary escaping overhead:\n        \"\"\"\n        # from datetime import timezone\n        # import ciso8601\n        # from influxdb_client.client.write.point import epoch\n        #\n        # time = (ciso8601.parse_datetime(row[\"date\"]).replace(tzinfo=timezone.utc) - epoch).total_seconds() * 1e9\n        # return f\"financial-analysis,type=vix-daily\" \\\n        #        f\" close={float(row['vix close'])},high={float(row['vix high'])},low={float(row['vix low'])},open={float(row['vix open'])} \" \\\n        #        f\" {int(time)}\"\n\n       return point(\"financial-analysis\") \\\n           .tag(\"type\", \"vix-daily\") \\\n           .field(\"open\", float(row['vix open'])) \\\n           .field(\"high\", float(row['vix high'])) \\\n           .field(\"low\", float(row['vix low'])) \\\n           .field(\"close\", float(row['vix close'])) \\\n           .time(row['date'])\n\n\n   \"\"\"\n   converts vix-daily.csv into sequence of datad point\n   \"\"\"\n   data = rx \\\n       .from_iterable(dictreader(open('vix-daily.csv', 'r'))) \\\n       .pipe(ops.map(lambda row: parse_row(row)))\n\n   client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\", debug=true)\n\n   \"\"\"\n   create client that writes data in batches with 50_000 items.\n   \"\"\"\n   write_api = client.write_api(write_options=writeoptions(batch_size=50_000, flush_interval=10_000))\n\n   \"\"\"\n   write data into influxdb\n   \"\"\"\n   write_api.write(bucket=\"my-bucket\", record=data)\n   write_api.close()\n\n   \"\"\"\n   querying max value of cboe volatility index\n   \"\"\"\n   query = 'from(bucket:\"my-bucket\")' \\\n           ' |> range(start: 0, stop: now())' \\\n           ' |> filter(fn: (r) => r._measurement == \"financial-analysis\")' \\\n           ' |> max()'\n   result = client.query_api().query(query=query)\n\n   \"\"\"\n   processing results\n   \"\"\"\n   print()\n   print(\"=== results ===\")\n   print()\n   for table in result:\n       for record in table.records:\n           print('max {0:5} = {1}'.format(record.get_field(), record.get_value()))\n\n   \"\"\"\n   close client\n   \"\"\"\n   client.close()\n\nefficiency write data from iot sensor\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n* sources - `iot_sensor.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/iot_sensor.py>`_\n\n.. code-block:: python\n\n   \"\"\"\n   efficiency write data from iot sensor - write changed temperature every minute\n   \"\"\"\n   import atexit\n   import platform\n   from datetime import timedelta\n\n   import psutil as psutil\n   import reactivex as rx\n   from reactivex import operators as ops\n\n   from influxdb_client import influxdbclient, writeapi, writeoptions\n\n   def on_exit(db_client: influxdbclient, write_api: writeapi):\n       \"\"\"close clients after terminate a script.\n\n       :param db_client: influxdb client\n       :param write_api: writeapi\n       :return: nothing\n       \"\"\"\n       write_api.close()\n       db_client.close()\n\n\n   def sensor_temperature():\n       \"\"\"read a cpu temperature. the [psutil] doesn't support macos so we use [sysctl].\n\n       :return: actual cpu temperature\n       \"\"\"\n       os_name = platform.system()\n       if os_name == 'darwin':\n           from subprocess import check_output\n           output = check_output([\"sysctl\", \"machdep.xcpm.cpu_thermal_level\"])\n           import re\n           return re.findall(r'\\d+', str(output))[0]\n       else:\n           return psutil.sensors_temperatures()[\"coretemp\"][0]\n\n\n   def line_protocol(temperature):\n       \"\"\"create a influxdb line protocol with structure:\n\n           iot_sensor,hostname=mine_sensor_12,type=temperature value=68\n\n       :param temperature: the sensor temperature\n       :return: line protocol to write into influxdb\n       \"\"\"\n\n       import socket\n       return 'iot_sensor,hostname={},type=temperature value={}'.format(socket.gethostname(), temperature)\n\n\n   \"\"\"\n   read temperature every minute; distinct_until_changed - produce only if temperature change\n   \"\"\"\n   data = rx\\\n       .interval(period=timedelta(seconds=60))\\\n       .pipe(ops.map(lambda t: sensor_temperature()),\n             ops.distinct_until_changed(),\n             ops.map(lambda temperature: line_protocol(temperature)))\n\n   _db_client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\", debug=true)\n\n   \"\"\"\n   create client that writes data into influxdb\n   \"\"\"\n   _write_api = _db_client.write_api(write_options=writeoptions(batch_size=1))\n   _write_api.write(bucket=\"my-bucket\", record=data)\n\n\n   \"\"\"\n   call after terminate a script\n   \"\"\"\n   atexit.register(on_exit, _db_client, _write_api)\n\n   input()\n\nconnect to influxdb cloud\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nthe following example demonstrate a simplest way how to write and query date with the influxdb cloud.\n\nat first point you should create an authentication token as is described `here <https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/>`_.\n\nafter that you should configure properties: ``influx_cloud_url``, ``influx_cloud_token``, ``bucket`` and ``org`` in a ``influx_cloud.py`` example.\n\nthe last step is run a python script via: ``python3 influx_cloud.py``.\n\n* sources - `influx_cloud.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/influx_cloud.py>`_\n\n.. code-block:: python\n\n    \"\"\"\n    connect to influxdb 2.0 - write data and query them\n    \"\"\"\n\n    from datetime import datetime\n\n    from influxdb_client import point, influxdbclient\n    from influxdb_client.client.write_api import synchronous\n\n    \"\"\"\n    configure credentials\n    \"\"\"\n    influx_cloud_url = 'https://us-west-2-1.aws.cloud2.influxdata.com'\n    influx_cloud_token = '...'\n    bucket = '...'\n    org = '...'\n\n    client = influxdbclient(url=influx_cloud_url, token=influx_cloud_token)\n    try:\n        kind = 'temperature'\n        host = 'host1'\n        device = 'opt-123'\n\n        \"\"\"\n        write data by point structure\n        \"\"\"\n        point = point(kind).tag('host', host).tag('device', device).field('value', 25.3).time(time=datetime.utcnow())\n\n        print(f'writing to influxdb cloud: {point.to_line_protocol()} ...')\n\n        write_api = client.write_api(write_options=synchronous)\n        write_api.write(bucket=bucket, org=org, record=point)\n\n        print()\n        print('success')\n        print()\n        print()\n\n        \"\"\"\n        query written data\n        \"\"\"\n        query = f'from(bucket: \"{bucket}\") |> range(start: -1d) |> filter(fn: (r) => r._measurement == \"{kind}\")'\n        print(f'querying from influxdb cloud: \"{query}\" ...')\n        print()\n\n        query_api = client.query_api()\n        tables = query_api.query(query=query, org=org)\n\n        for table in tables:\n            for row in table.records:\n                print(f'{row.values[\"_time\"]}: host={row.values[\"host\"]},device={row.values[\"device\"]} '\n                      f'{row.values[\"_value\"]} \u00b0c')\n\n        print()\n        print('success')\n\n    except exception as e:\n        print(e)\n    finally:\n        client.close()\n\nhow to use jupyter + pandas + influxdb 2\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nthe first example shows how to use client capabilities to predict stock price via `keras <https://keras.io>`_, `tensorflow <https://www.tensorflow.org>`_, `sklearn <https://scikit-learn.org/stable/>`_:\n\nthe example is taken from `kaggle <https://www.kaggle.com/chaitanyacc4/predicting-stock-prices-of-apple-inc>`_.\n\n* sources - `stock-predictions.ipynb <notebooks/stock-predictions.ipynb>`_\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/stock-price-prediction.gif\n\nresult:\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/stock-price-prediction-results.png\n\nthe second example shows how to use client capabilities to realtime visualization via `hvplot <https://hvplot.pyviz.org>`_, `streamz <https://streamz.readthedocs.io/en/latest/>`_, `rxpy <https://rxpy.readthedocs.io/en/latest/>`_:\n\n* sources - `realtime-stream.ipynb <notebooks/realtime-stream.ipynb>`_\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/realtime-result.gif\n\nother examples\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nyou can find all examples at github: `influxdb-client-python/examples <https://github.com/influxdata/influxdb-client-python/tree/master/examples#examples>`__.\n\n.. marker-examples-end\n\nadvanced usage\n--------------\n\ngzip support\n^^^^^^^^^^^^\n.. marker-gzip-start\n\n``influxdbclient`` does not enable gzip compression for http requests by default. if you want to enable gzip to reduce transfer data's size, you can call:\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient\n\n   _db_client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\", enable_gzip=true)\n\n.. marker-gzip-end\n\nauthenticate to the influxdb\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.. marker-authenticate-start\n\n``influxdbclient`` supports three options how to authorize a connection:\n\n- `token`\n- `username & password`\n- `http basic`\n\ntoken\n\"\"\"\"\"\n\nuse the ``token`` to authenticate to the influxdb api. in your api requests, an `authorization` header will be send.\nthe header value, provide the word `token` followed by a space and an influxdb api token. the word `token`` is case-sensitive.\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient\n\n   with influxdbclient(url=\"http://localhost:8086\", token=\"my-token\") as client\n\n.. note:: note that this is a preferred way how to authenticate to influxdb api.\n\nusername & password\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nauthenticates via username and password credentials. if successful, creates a new session for the user.\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient\n\n   with influxdbclient(url=\"http://localhost:8086\", username=\"my-user\", password=\"my-password\") as client\n\n.. warning::\n\n    the ``username/password`` auth is based on the http \"basic\" authentication.\n    the authorization expires when the `time-to-live (ttl) <https://docs.influxdata.com/influxdb/latest/reference/config-options/#session-length>`__\n    (default 60 minutes) is reached and client produces ``unauthorized exception``.\n\nhttp basic\n\"\"\"\"\"\"\"\"\"\"\n\nuse this to enable basic authentication when talking to a influxdb 1.8.x that does not use auth-enabled\nbut is protected by a reverse proxy with basic authentication.\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient\n\n   with influxdbclient(url=\"http://localhost:8086\", auth_basic=true, token=\"my-proxy-secret\") as client\n\n\n.. warning:: don't use this when directly talking to influxdb 2.\n\n.. marker-authenticate-end\n\nproxy configuration\n^^^^^^^^^^^^^^^^^^^\n.. marker-proxy-start\n\nyou can configure the client to tunnel requests through an http proxy.\nthe following proxy options are supported:\n\n- ``proxy`` - set this to configure the http proxy to be used, ex. ``http://localhost:3128``\n- ``proxy_headers`` - a dictionary containing headers that will be sent to the proxy. could be used for proxy authentication.\n\n.. code-block:: python\n\n   from influxdb_client import influxdbclient\n\n   with influxdbclient(url=\"http://localhost:8086\",\n                       token=\"my-token\",\n                       org=\"my-org\",\n                       proxy=\"http://localhost:3128\") as client:\n\n.. note::\n\n    if your proxy notify the client with permanent redirect (``http 301``) to **different host**.\n    the client removes ``authorization`` header, because otherwise the contents of ``authorization`` is sent to third parties\n    which is a security vulnerability.\n\n    you can change this behaviour by:\n\n    .. code-block:: python\n\n       from urllib3 import retry\n       retry.default_remove_headers_on_redirect = frozenset()\n       retry.default.remove_headers_on_redirect = retry.default_remove_headers_on_redirect\n\n.. marker-proxy-end\n\ndelete data\n^^^^^^^^^^^\n.. marker-delete-start\n\nthe `delete_api.py <influxdb_client/client/delete_api.py>`_ supports deletes `points <https://v2.docs.influxdata.com/v2.0/reference/glossary/#point>`_ from an influxdb bucket.\n\n.. code-block:: python\n\n    from influxdb_client import influxdbclient\n\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\")\n\n    delete_api = client.delete_api()\n\n    \"\"\"\n    delete data\n    \"\"\"\n    start = \"1970-01-01t00:00:00z\"\n    stop = \"2021-02-01t00:00:00z\"\n    delete_api.delete(start, stop, '_measurement=\"my_measurement\"', bucket='my-bucket', org='my-org')\n\n    \"\"\"\n    close client\n    \"\"\"\n    client.close()\n\n.. marker-delete-end\n\ninfluxdb 1.8 api compatibility\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`influxdb 1.8.0 introduced forward compatibility apis <https://docs.influxdata.com/influxdb/v1.8/tools/api/#influxdb-2-0-api-compatibility-endpoints>`_ for influxdb 2.0. this allow you to easily move from influxdb 1.x to influxdb 2.0 cloud or open source.\n\nthe following forward compatible apis are available:\n\n=======================================================  ====================================================================================================  =======\n api                                                     endpoint                                                                                              description\n=======================================================  ====================================================================================================  =======\n`query_api.py <influxdb_client/client/query_api.py>`_    `/api/v2/query <https://docs.influxdata.com/influxdb/v1.8/tools/api/#apiv2query-http-endpoint>`_      query data in influxdb 1.8.0+ using the influxdb 2.0 api and `flux <https://docs.influxdata.com/flux/latest/>`_ (endpoint should be enabled by `flux-enabled option <https://docs.influxdata.com/influxdb/v1.8/administration/config/#flux-enabled-false>`_)\n`write_api.py <influxdb_client/client/write_api.py>`_    `/api/v2/write <https://docs.influxdata.com/influxdb/v1.8/tools/api/#apiv2write-http-endpoint>`_      write data to influxdb 1.8.0+ using the influxdb 2.0 api\n`ping() <influxdb_client/client/influxdb_client.py>`_    `/ping <https://docs.influxdata.com/influxdb/v1.8/tools/api/#ping-http-endpoint>`_                    check the status of your influxdb instance\n=======================================================  ====================================================================================================  =======\n\nfor detail info see `influxdb 1.8 example <examples/influxdb_18_example.py>`_.\n\nhandling errors\n^^^^^^^^^^^^^^^\n.. marker-handling-errors-start\n\nerrors happen and it's important that your code is prepared for them. all client related  exceptions are delivered from\n``influxdberror``. if the exception cannot be recovered in the client it is returned to the application.\nthese exceptions are left for the developer to handle.\n\nalmost all apis directly return unrecoverable exceptions to be handled this way:\n\n.. code-block:: python\n\n    from influxdb_client import influxdbclient\n    from influxdb_client.client.exceptions import influxdberror\n    from influxdb_client.client.write_api import synchronous\n\n    with influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n        try:\n            client.write_api(write_options=synchronous).write(\"my-bucket\", record=\"mem,tag=a value=86\")\n        except influxdberror as e:\n            if e.response.status == 401:\n                raise exception(f\"insufficient write permissions to 'my-bucket'.\") from e\n            raise\n\n\nthe only exception is **batching** ``writeapi`` (for more info see `batching`_). where you need to register custom callbacks to handle batch events.\nthis is because this api runs in the ``background`` in a ``separate`` thread and isn't possible to directly\nreturn underlying exceptions.\n\n.. code-block:: python\n\n    from influxdb_client import influxdbclient\n    from influxdb_client.client.exceptions import influxdberror\n\n\n    class batchingcallback(object):\n\n        def success(self, conf: (str, str, str), data: str):\n            print(f\"written batch: {conf}, data: {data}\")\n\n        def error(self, conf: (str, str, str), data: str, exception: influxdberror):\n            print(f\"cannot write batch: {conf}, data: {data} due: {exception}\")\n\n        def retry(self, conf: (str, str, str), data: str, exception: influxdberror):\n            print(f\"retryable error occurs for batch: {conf}, data: {data} retry: {exception}\")\n\n\n    with influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n        callback = batchingcallback()\n        with client.write_api(success_callback=callback.success,\n                              error_callback=callback.error,\n                              retry_callback=callback.retry) as write_api:\n            pass\n\nhttp retry strategy\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nby default the client uses a retry strategy only for batching writes (for more info see `batching`_).\nfor other http requests there is no one retry strategy, but it could be configured by ``retries``\nparameter of ``influxdbclient``.\n\nfor more info about how configure http retry see details in `urllib3 documentation <https://urllib3.readthedocs.io/en/latest/reference/index.html?highlight=retry#urllib3.retry>`_.\n\n.. code-block:: python\n\n    from urllib3 import retry\n\n    from influxdb_client import influxdbclient\n\n    retries = retry(connect=5, read=2, redirect=5)\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\", retries=retries)\n\n.. marker-handling-errors-end\n\nnanosecond precision\n^^^^^^^^^^^^^^^^^^^^\n.. marker-nanosecond-start\n\nthe python's `datetime <https://docs.python.org/3/library/datetime.html>`_ doesn't support precision with nanoseconds\nso the library during writes and queries ignores everything after microseconds.\n\nif you would like to use ``datetime`` with nanosecond precision you should use\n`pandas.timestamp <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.timestamp.html#pandas.timestamp>`_\nthat is replacement for python ``datetime.datetime`` object and also you should set a proper ``datetimehelper`` to the client.\n\n* sources - `nanosecond_precision.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/nanosecond_precision.py>`_\n\n.. code-block:: python\n\n    from influxdb_client import point, influxdbclient\n    from influxdb_client.client.util.date_utils_pandas import pandasdatetimehelper\n    from influxdb_client.client.write_api import synchronous\n\n    \"\"\"\n    set pandasdate helper which supports nanoseconds.\n    \"\"\"\n    import influxdb_client.client.util.date_utils as date_utils\n\n    date_utils.date_helper = pandasdatetimehelper()\n\n    \"\"\"\n    prepare client.\n    \"\"\"\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\")\n\n    write_api = client.write_api(write_options=synchronous)\n    query_api = client.query_api()\n\n    \"\"\"\n    prepare data\n    \"\"\"\n\n    point = point(\"h2o_feet\") \\\n        .field(\"water_level\", 10) \\\n        .tag(\"location\", \"pacific\") \\\n        .time('1996-02-25t21:20:00.001001231z')\n\n    print(f'time serialized with nanosecond precision: {point.to_line_protocol()}')\n    print()\n\n    write_api.write(bucket=\"my-bucket\", record=point)\n\n    \"\"\"\n    query: using stream\n    \"\"\"\n    query = '''\n    from(bucket:\"my-bucket\")\n            |> range(start: 0, stop: now())\n            |> filter(fn: (r) => r._measurement == \"h2o_feet\")\n    '''\n    records = query_api.query_stream(query)\n\n    for record in records:\n        print(f'temperature in {record[\"location\"]} is {record[\"_value\"]} at time: {record[\"_time\"]}')\n\n    \"\"\"\n    close client\n    \"\"\"\n    client.close()\n\n.. marker-nanosecond-end\n\nhow to use asyncio\n^^^^^^^^^^^^^^^^^^\n.. marker-asyncio-start\n\nstarting from version 1.27.0 for python 3.7+ the ``influxdb-client`` package supports ``async/await`` based on\n`asyncio <https://docs.python.org/3/library/asyncio.html>`_, `aiohttp <https://docs.aiohttp.org>`_ and `aiocsv <https://pypi.org/project/aiocsv/>`_.\nyou can install ``aiohttp`` and ``aiocsv`` directly:\n\n .. code-block:: bash\n\n    $ python -m pip install influxdb-client aiohttp aiocsv\n\nor use the ``[async]`` extra:\n\n .. code-block:: bash\n\n    $ python -m pip install influxdb-client[async]\n\n.. warning::\n\n    the ``influxdbclientasync`` should be initialised inside ``async coroutine``\n    otherwise there can be unexpected behaviour.\n    for more info see: `why is creating a clientsession outside of an event loop dangerous? <https://docs.aiohttp.org/en/stable/faq.html#why-is-creating-a-clientsession-outside-of-an-event-loop-dangerous>`__.\n\nasync apis\n\"\"\"\"\"\"\"\"\"\"\nall async apis are available via `influxdb_client.client.influxdb_client_async.influxdbclientasync`.\nthe ``async`` version of the client supports following asynchronous apis:\n\n* `influxdb_client.client.write_api_async.writeapiasync`\n* `influxdb_client.client.query_api_async.queryapiasync`\n* `influxdb_client.client.delete_api_async.deleteapiasync`\n* management services into ``influxdb_client.service`` supports async operation\n\nand also check to readiness of the influxdb via ``/ping`` endpoint:\n\n .. code-block:: python\n\n        import asyncio\n\n        from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n        async def main():\n            async with influxdbclientasync(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n                ready = await client.ping()\n                print(f\"influxdb: {ready}\")\n\n\n        if __name__ == \"__main__\":\n            asyncio.run(main())\n\nasync write api\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nthe `influxdb_client.client.write_api_async.writeapiasync` supports ingesting data as:\n\n* ``string`` or ``bytes`` that is formatted as a influxdb's line protocol\n* `data point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py#l16>`__ structure\n* dictionary style mapping with keys: ``measurement``, ``tags``, ``fields`` and ``time`` or custom structure\n* `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_\n* `data classes <https://docs.python.org/3/library/dataclasses.html>`_\n* `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n* list of above items\n\n .. code-block:: python\n\n    import asyncio\n\n    from influxdb_client import point\n    from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n    async def main():\n        async with influxdbclientasync(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n\n            write_api = client.write_api()\n\n            _point1 = point(\"async_m\").tag(\"location\", \"prague\").field(\"temperature\", 25.3)\n            _point2 = point(\"async_m\").tag(\"location\", \"new york\").field(\"temperature\", 24.3)\n\n            successfully = await write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n            print(f\" > successfully: {successfully}\")\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n\n\nasync query api\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nthe `influxdb_client.client.query_api_async.queryapiasync` supports retrieve data as:\n\n* list of `influxdb_client.client.flux_table.fluxtable`\n* stream of `influxdb_client.client.flux_table.fluxrecord` via `typing.asyncgenerator`\n* `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_\n* stream of `pandas dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`_ via `typing.asyncgenerator`\n* raw `str` output\n\n .. code-block:: python\n\n    import asyncio\n\n    from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n    async def main():\n        async with influxdbclientasync(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n            # stream of fluxrecords\n            query_api = client.query_api()\n            records = await query_api.query_stream('from(bucket:\"my-bucket\") '\n                                                   '|> range(start: -10m) '\n                                                   '|> filter(fn: (r) => r[\"_measurement\"] == \"async_m\")')\n            async for record in records:\n                print(record)\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n\n\nasync delete api\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n .. code-block:: python\n\n    import asyncio\n    from datetime import datetime\n\n    from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n    async def main():\n        async with influxdbclientasync(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n            start = datetime.utcfromtimestamp(0)\n            stop = datetime.now()\n            # delete data with location = 'prague'\n            successfully = await client.delete_api().delete(start=start, stop=stop, bucket=\"my-bucket\",\n                                                            predicate=\"location = \\\"prague\\\"\")\n            print(f\" > successfully: {successfully}\")\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n\n\nmanagement api\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n .. code-block:: python\n\n    import asyncio\n\n    from influxdb_client import organizationsservice\n    from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n    async def main():\n        async with influxdbclientasync(url='http://localhost:8086', token='my-token', org='my-org') as client:\n            # initialize async organizationsservice\n            organizations_service = organizationsservice(api_client=client.api_client)\n\n            # find organization with name 'my-org'\n            organizations = await organizations_service.get_orgs(org='my-org')\n            for organization in organizations.orgs:\n                print(f'name: {organization.name}, id: {organization.id}')\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n\n\nproxy and redirects\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nyou can configure the client to tunnel requests through an http proxy.\nthe following proxy options are supported:\n\n- ``proxy`` - set this to configure the http proxy to be used, ex. ``http://localhost:3128``\n- ``proxy_headers`` - a dictionary containing headers that will be sent to the proxy. could be used for proxy authentication.\n\n.. code-block:: python\n\n   from influxdb_client.client.influxdb_client_async import influxdbclientasync\n\n\n   async with influxdbclientasync(url=\"http://localhost:8086\",\n                                  token=\"my-token\",\n                                  org=\"my-org\",\n                                  proxy=\"http://localhost:3128\") as client:\n\n.. note::\n\n    if your proxy notify the client with permanent redirect (``http 301``) to **different host**.\n    the client removes ``authorization`` header, because otherwise the contents of ``authorization`` is sent to third parties\n    which is a security vulnerability.\n\nclient automatically follows http redirects. the default redirect policy is to follow up to ``10`` consecutive requests. the redirects can be configured via:\n\n- ``allow_redirects`` - if set to ``false``, do not follow http redirects. ``true`` by default.\n- ``max_redirects`` - maximum number of http redirects to follow. ``10`` by default.\n\n\n.. marker-asyncio-end\n\nlogging\n^^^^^^^\n.. marker-logging-start\n\nthe client uses python's `logging <https://docs.python.org/3/library/logging.html>`__ facility for logging the library activity. the following logger categories are exposed:\n\n- ``influxdb_client.client.influxdb_client``\n- ``influxdb_client.client.influxdb_client_async``\n- ``influxdb_client.client.write_api``\n- ``influxdb_client.client.write_api_async``\n- ``influxdb_client.client.write.retry``\n- ``influxdb_client.client.write.dataframe_serializer``\n- ``influxdb_client.client.util.multiprocessing_helper``\n- ``influxdb_client.client.http``\n- ``influxdb_client.client.exceptions``\n\nthe default logging level is `warning` without configured logger output. you can use the standard logger interface to change the log level and handler:\n\n.. code-block:: python\n\n    import logging\n    import sys\n\n    from influxdb_client import influxdbclient\n\n    with influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", org=\"my-org\") as client:\n        for _, logger in client.conf.loggers.items():\n            logger.setlevel(logging.debug)\n            logger.addhandler(logging.streamhandler(sys.stdout))\n\ndebugging\n\"\"\"\"\"\"\"\"\"\n\nfor debug purpose you can enable verbose logging of http requests and set the ``debug`` level to all client's logger categories by:\n\n.. code-block:: python\n\n    client = influxdbclient(url=\"http://localhost:8086\", token=\"my-token\", debug=true)\n\n.. note::\n\n    both http request headers and body will be logged to standard output.\n\n.. marker-logging-end\n\nlocal tests\n-----------\n\n.. code-block:: console\n\n    # start/restart influxdb2 on local machine using docker\n    ./scripts/influxdb-restart.sh\n\n    # install requirements\n    pip install -e . --user\n    pip install -e .\\[extra\\] --user\n    pip install -e .\\[test\\] --user\n\n    # run unit & integration tests\n    pytest tests\n\n\ncontributing\n------------\n\nbug reports and pull requests are welcome on github at `https://github.com/influxdata/influxdb-client-python <https://github.com/influxdata/influxdb-client-python>`_.\n\nlicense\n-------\n\nthe gem is available as open source under the terms of the `mit license <https://opensource.org/licenses/mit>`_.\n\n\n",
  "docs_url": null,
  "keywords": "influxdb,influxdb python client",
  "license": "",
  "name": "influxdb-client",
  "package_url": "https://pypi.org/project/influxdb-client/",
  "project_url": "https://pypi.org/project/influxdb-client/",
  "project_urls": {
    "Homepage": "https://github.com/influxdata/influxdb-client-python"
  },
  "release_url": "https://pypi.org/project/influxdb-client/1.39.0/",
  "requires_dist": [
    "reactivex (>=4.0.4)",
    "certifi (>=14.05.14)",
    "python-dateutil (>=2.5.3)",
    "setuptools (>=21.0.0)",
    "urllib3 (>=1.26.0)",
    "aiohttp (>=3.8.1) ; extra == 'async'",
    "aiocsv (>=1.2.2) ; extra == 'async'",
    "ciso8601 (>=2.1.1) ; extra == 'ciso'",
    "pandas (>=0.25.3) ; extra == 'extra'",
    "numpy ; extra == 'extra'",
    "flake8 (>=5.0.3) ; extra == 'test'",
    "coverage (>=4.0.3) ; extra == 'test'",
    "nose (>=1.3.7) ; extra == 'test'",
    "pluggy (>=0.3.1) ; extra == 'test'",
    "py (>=1.4.31) ; extra == 'test'",
    "randomize (>=0.13) ; extra == 'test'",
    "pytest (>=5.0.0) ; extra == 'test'",
    "pytest-cov (>=3.0.0) ; extra == 'test'",
    "pytest-timeout (>=2.1.0) ; extra == 'test'",
    "httpretty (==1.0.5) ; extra == 'test'",
    "psutil (>=5.6.3) ; extra == 'test'",
    "aioresponses (>=0.7.3) ; extra == 'test'",
    "sphinx (==1.8.5) ; extra == 'test'",
    "sphinx-rtd-theme ; extra == 'test'",
    "jinja2 (==3.1.2) ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "influxdb 2.0 python client library",
  "version": "1.39.0",
  "releases": [],
  "developers": [],
  "kwds": "influxdb3 influxdbclient influxdb_18_example influxdb2 influxdb_v2_url",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_influxdb_client",
  "homepage": "https://github.com/influxdata/influxdb-client-python",
  "release_count": 44,
  "dependency_ids": [
    "pypi_aiocsv",
    "pypi_aiohttp",
    "pypi_aioresponses",
    "pypi_certifi",
    "pypi_ciso8601",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_httpretty",
    "pypi_jinja2",
    "pypi_nose",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pluggy",
    "pypi_psutil",
    "pypi_py",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_timeout",
    "pypi_python_dateutil",
    "pypi_randomize",
    "pypi_reactivex",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_urllib3"
  ]
}
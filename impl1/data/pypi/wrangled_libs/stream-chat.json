{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# official python sdk for [stream chat](https://getstream.io/chat/)\n\n[![build](https://github.com/getstream/stream-chat-python/workflows/build/badge.svg)](https://github.com/getstream/stream-chat-python/actions) [![pypi version](https://badge.fury.io/py/stream-chat.svg)](http://badge.fury.io/py/stream-chat) ![pypi - python version](https://img.shields.io/pypi/pyversions/stream-chat.svg) [![checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n<p align=\"center\">\n    <img src=\"./assets/logo.svg\" width=\"50%\" height=\"50%\">\n</p>\n<p align=\"center\">\n    official python api client for stream chat, a service for building chat applications.\n    <br />\n    <a href=\"https://getstream.io/chat/docs/\"><strong>explore the docs \u00bb</strong></a>\n    <br />\n    <br />\n    <a href=\"https://github.com/getstream/python-chat-example\">code samples</a>\n    \u00b7\n    <a href=\"https://github.com/getstream/stream-chat-python/issues\">report bug</a>\n    \u00b7\n    <a href=\"https://github.com/getstream/stream-chat-python/issues\">request feature</a>\n</p>\n\n---\n> ### :bulb: major update in v4.0 <\n> the returned response objects are instances of [`streamresponse`](https://github.com/getstream/stream-chat-python/blob/master/stream_chat/types/stream_response.py) class. it inherits from `dict`, so it's fully backward compatible. additionally, it provides other benefits such as rate limit information (`resp.rate_limit()`), response headers (`resp.headers()`) or status code (`resp.status_code()`).\n---\n\n## \ud83d\udcdd about stream\n\nyou can sign up for a stream account at our [get started](https://getstream.io/chat/get_started/) page.\n\nyou can use this library to access chat api endpoints server-side.\n\nfor the client-side integrations (web and mobile) have a look at the javascript, ios and android sdk libraries ([docs](https://getstream.io/chat/)).\n\n## \u2699\ufe0f installation\n\n```shell\n$ pip install stream-chat\n```\n\n## \u2728 getting started\n\n> :bulb: the library is almost 100% typed. feel free to enable [mypy](https://github.com/python/mypy) for our library. we will introduce more improvements in the future in this area.\n\n```python\nfrom stream_chat import streamchat\n\nchat = streamchat(api_key=\"stream_key\", api_secret=\"stream_secret\")\n\n# add a user\nchat.upsert_user({\"id\": \"chuck\", \"name\": \"chuck\"})\n\n# create a channel about kung-fu\nchannel = chat.channel(\"messaging\", \"kung-fu\")\nchannel.create(\"chuck\")\n\n# add a first message to the channel\nchannel.send_message({\"text\": \"ama about kung-fu\"}, \"chuck\")\n\n# we also expose some response metadata through a custom dictionary\nresp = chat.deactivate_user(\"bruce_lee\")\n\nprint(type(resp)) # <class 'stream_chat.types.stream_response.streamresponse'>\nprint(resp[\"user\"][\"id\"]) # bruce_lee\n\nrate_limit = resp.rate_limit()\nprint(f\"{rate_limit.limit} / {rate_limit.remaining} / {rate_limit.reset}\") # 60 / 59 /2022-01-06 12:35:00+00:00\n\nheaders = resp.headers()\nprint(headers) # { 'content-encoding': 'gzip', 'content-length': '33', ... }\n\nstatus_code = resp.status_code()\nprint(status_code) # 200\n\n```\n\n### async\n\n```python\nimport asyncio\nfrom stream_chat import streamchatasync\n\n\nasync def main():\n    async with streamchatasync(api_key=\"stream_key\", api_secret=\"stream_secret\") as chat:\n        # add a user\n        await chat.upsert_user({\"id\": \"chuck\", \"name\": \"chuck\"})\n\n        # create a channel about kung-fu\n        channel = chat.channel(\"messaging\", \"kung-fu\")\n        await channel.create(\"chuck\")\n\n        # add a first message to the channel\n        await channel.send_message({\"text\": \"ama about kung-fu\"}, \"chuck\")\n\n        # we also expose some response metadata through a custom dictionary\n        resp = await chat.deactivate_user(\"bruce_lee\")\n        print(type(resp)) # <class 'stream_chat.types.stream_response.streamresponse'>\n        print(resp[\"user\"][\"id\"]) # bruce_lee\n\n        rate_limit = resp.rate_limit()\n        print(f\"{rate_limit.limit} / {rate_limit.remaining} / {rate_limit.reset}\") # 60 / 59 / 2022-01-06 12:35:00+00:00\n\n        headers = resp.headers()\n        print(headers) # { 'content-encoding': 'gzip', 'content-length': '33', ... }\n\n        status_code = resp.status_code()\n        print(status_code) # 200\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(main())\n    finally:\n        loop.run_until_complete(loop.shutdown_asyncgens())\n        loop.close()\n\n```\n\n## \u270d\ufe0f contributing\n\nwe welcome code changes that improve this library or fix a problem, please make sure to follow all best practices and add tests if applicable before submitting a pull request on github. we are very happy to merge your code in the official repository. make sure to sign our [contributor license agreement (cla)](https://docs.google.com/forms/d/e/1faipqlscfkskkaji7mhcr7k9reiopqidthrwxuvxnwuq2xkhyg154vq/viewform) first. see our [license file](./license) for more details.\n\nhead over to [contributing.md](./contributing.md) for some development tips.\n\n## \ud83e\uddd1\u200d\ud83d\udcbb we are hiring!\n\nwe've recently closed a [$38 million series b funding round](https://techcrunch.com/2021/03/04/stream-raises-38m-as-its-chat-and-activity-feed-apis-power-communications-for-1b-users/) and we keep actively growing.\nour apis are used by more than a billion end-users, and you'll have a chance to make a huge impact on the product within a team of the strongest engineers all over the world.\n\ncheck out our current openings and apply via [stream's website](https://getstream.io/team/#jobs).\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "stream-chat",
  "package_url": "https://pypi.org/project/stream-chat/",
  "project_url": "https://pypi.org/project/stream-chat/",
  "project_urls": {
    "Bug Tracker": "https://github.com/GetStream/stream-chat-python/issues",
    "Documentation": "https://getstream.io/activity-feeds/docs/python/?language=python",
    "Homepage": "https://github.com/GetStream/stream-chat-python",
    "Release Notes": "https://github.com/GetStream/stream-chat-python/releases/tag/v4.11.0"
  },
  "release_url": "https://pypi.org/project/stream-chat/4.11.0/",
  "requires_dist": [
    "requests (<3,>=2.22.0)",
    "aiodns (>=2.0.0)",
    "aiohttp (<4,>=3.6.0)",
    "aiofile (<4,>=3.1)",
    "pyjwt (<3,>=2.0.0)",
    "typing-extensions ; python_version < \"3.8\"",
    "black ; extra == 'ci'",
    "flake8 ; extra == 'ci'",
    "flake8-isort ; extra == 'ci'",
    "flake8-bugbear ; extra == 'ci'",
    "pytest-cov ; extra == 'ci'",
    "mypy ; extra == 'ci'",
    "types-requests ; extra == 'ci'",
    "pytest ; extra == 'test'",
    "pytest-asyncio ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "client for stream chat.",
  "version": "4.11.0",
  "releases": [],
  "developers": [
    "support@getstream.io",
    "tommaso_barbugli"
  ],
  "kwds": "stream_chat mypy_badge stream_secret stream_key getstream",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_stream_chat",
  "homepage": "https://github.com/getstream/stream-chat-python",
  "release_count": 63,
  "dependency_ids": [
    "pypi_aiodns",
    "pypi_aiofile",
    "pypi_aiohttp",
    "pypi_black",
    "pypi_flake8",
    "pypi_flake8_bugbear",
    "pypi_flake8_isort",
    "pypi_mypy",
    "pypi_pyjwt",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_types_requests",
    "pypi_typing_extensions"
  ]
}
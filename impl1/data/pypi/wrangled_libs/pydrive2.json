{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "|ci| |conda| |pypi|\n\n.. |ci| image:: https://github.com/iterative/pydrive2/workflows/tests/badge.svg?branch=main\n   :target: https://github.com/iterative/pydrive2/actions\n   :alt: gha tests\n\n.. |conda| image:: https://img.shields.io/conda/v/conda-forge/pydrive2.svg?label=conda&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/pydrive2\n   :alt: conda-forge\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pydrive2.svg?label=pip&logo=pypi&logocolor=white\n   :target: https://pypi.org/project/pydrive2\n   :alt: pypi\n\npydrive2\n--------\n\n*pydrive2* is a wrapper library of\n`google-api-python-client <https://github.com/google/google-api-python-client>`_\nthat simplifies many common google drive api v2 tasks. it is an actively\nmaintained fork of `https://pypi.python.org/pypi/pydrive <https://pypi.python.org/pypi/pydrive>`_.\nby the authors and maintainers of the `git for data <https://dvc.org>`_ - dvc\nproject.\n\nproject info\n------------\n\n- package: `https://pypi.python.org/pypi/pydrive2 <https://pypi.python.org/pypi/pydrive2>`_\n- documentation: `https://docs.iterative.ai/pydrive2 <https://docs.iterative.ai/pydrive2>`_\n- source: `https://github.com/iterative/pydrive2 <https://github.com/iterative/pydrive2>`_\n- changelog: `https://github.com/iterative/pydrive2/releases <https://github.com/iterative/pydrive2/releases>`_\n- `running tests </pydrive2/test/readme.rst>`_\n\nfeatures of pydrive2\n--------------------\n\n-  simplifies oauth2.0 into just few lines with flexible settings.\n-  wraps `google drive api v2 <https://developers.google.com/drive/v2/web/about-sdk>`_ into\n   classes of each resource to make your program more object-oriented.\n-  helps common operations else than api calls, such as content fetching\n   and pagination control.\n-  provides `fsspec`_ filesystem implementation.\n\nhow to install\n--------------\n\nyou can install pydrive2 with regular ``pip`` command.\n\n::\n\n    $ pip install pydrive2\n\nto install the current development version from github, use:\n\n::\n\n    $  pip install git+https://github.com/iterative/pydrive2.git#egg=pydrive2\n\noauth made easy\n---------------\n\ndownload *client\\_secrets.json* from google api console and oauth2.0 is\ndone in two lines. you can customize behavior of oauth2 in one settings\nfile *settings.yaml*.\n\n.. code:: python\n\n\n    from pydrive2.auth import googleauth\n    from pydrive2.drive import googledrive\n\n    gauth = googleauth()\n    gauth.localwebserverauth()\n\n    drive = googledrive(gauth)\n\nfile management made easy\n-------------------------\n\nupload/update the file with one method. pydrive2 will do it in the most\nefficient way.\n\n.. code:: python\n\n    file1 = drive.createfile({'title': 'hello.txt'})\n    file1.setcontentstring('hello')\n    file1.upload() # files.insert()\n\n    file1['title'] = 'helloworld.txt'  # change title of the file\n    file1.upload() # files.patch()\n\n    content = file1.getcontentstring()  # 'hello'\n    file1.setcontentstring(content+' world!')  # 'hello world!'\n    file1.upload() # files.update()\n\n    file2 = drive.createfile()\n    file2.setcontentfile('hello.png')\n    file2.upload()\n    print('created file %s with mimetype %s' % (file2['title'],\n    file2['mimetype']))\n    # created file hello.png with mimetype image/png\n\n    file3 = drive.createfile({'id': file2['id']})\n    print('downloading file %s from google drive' % file3['title']) # 'hello.png'\n    file3.getcontentfile('world.png')  # save drive file as a local file\n\n    # or download google docs files in an export format provided.\n    # downloading a docs document as an html file:\n    docsfile.getcontentfile('test.html', mimetype='text/html')\n\nfile listing pagination made easy\n---------------------------------\n\n*pydrive2* handles file listing pagination for you.\n\n.. code:: python\n\n    # auto-iterate through all files that matches this query\n    file_list = drive.listfile({'q': \"'root' in parents\"}).getlist()\n    for file1 in file_list:\n        print('title: {}, id: {}'.format(file1['title'], file1['id']))\n\n    # paginate file lists by specifying number of max results\n    for file_list in drive.listfile({'maxresults': 10}):\n        print('received {} files from files.list()'.format(len(file_list))) # <= 10\n        for file1 in file_list:\n            print('title: {}, id: {}'.format(file1['title'], file1['id']))\n\nfsspec filesystem\n-----------------\n\n*pydrive2* provides easy way to work with your files through `fsspec`_\ncompatible `gdrivefilesystem`_.\n\n.. code:: python\n\n    from pydrive2.fs import gdrivefilesystem\n\n    fs = gdrivefilesystem(\"root\", client_id=my_id, client_secret=my_secret)\n\n    for root, dnames, fnames in fs.walk(\"\"):\n        ...\n\n.. _`gdrivefilesystem`: https://docs.iterative.ai/pydrive2/fsspec/\n\nconcurrent access made easy\n---------------------------\n\nall api functions made to be thread-safe.\n\ncontributors\n------------\n\nthanks to all our contributors!\n\n.. image:: https://contrib.rocks/image?repo=iterative/pydrive2\n   :target: https://github.com/iterative/pydrive2/graphs/contributors\n\n.. _`fsspec`: https://filesystem-spec.readthedocs.io/en/latest/\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "pydrive2",
  "package_url": "https://pypi.org/project/PyDrive2/",
  "project_url": "https://pypi.org/project/PyDrive2/",
  "project_urls": {
    "Changelog": "https://github.com/iterative/PyDrive2/releases",
    "Documentation": "https://docs.iterative.ai/PyDrive2",
    "Homepage": "https://github.com/iterative/PyDrive2"
  },
  "release_url": "https://pypi.org/project/PyDrive2/1.18.1/",
  "requires_dist": [
    "google-api-python-client >=1.12.5",
    "oauth2client >=4.0.0",
    "PyYAML >=3.0",
    "pyOpenSSL >=19.1.0",
    "fsspec >=2021.07.0 ; extra == 'fsspec'",
    "tqdm >=4.0.0 ; extra == 'fsspec'",
    "funcy >=1.14 ; extra == 'fsspec'",
    "appdirs >=1.4.3 ; extra == 'fsspec'",
    "pytest >=4.6.0 ; extra == 'tests'",
    "timeout-decorator ; extra == 'tests'",
    "funcy >=1.14 ; extra == 'tests'",
    "flake8 ; extra == 'tests'",
    "flake8-docstrings ; extra == 'tests'",
    "pytest-mock ; extra == 'tests'",
    "pyinstaller ; extra == 'tests'",
    "black ==23.12.0 ; extra == 'tests'",
    "importlib-resources <6 ; (python_version < \"3.10\") and extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "google drive api made easy. maintained fork of pydrive.",
  "version": "1.18.1",
  "releases": [],
  "developers": [
    "dvc_team",
    "jgwak@dreamylab.com",
    "junyoung_gwak",
    "support@dvc.org"
  ],
  "kwds": "pydrive2 pydrive conda pypi pip",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pydrive2",
  "homepage": "https://github.com/iterative/pydrive2",
  "release_count": 52,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_black",
    "pypi_flake8",
    "pypi_flake8_docstrings",
    "pypi_fsspec",
    "pypi_funcy",
    "pypi_google_api_python_client",
    "pypi_importlib_resources",
    "pypi_oauth2client",
    "pypi_pyinstaller",
    "pypi_pyopenssl",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_pyyaml",
    "pypi_timeout_decorator",
    "pypi_tqdm"
  ]
}
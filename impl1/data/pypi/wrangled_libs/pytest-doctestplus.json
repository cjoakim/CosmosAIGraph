{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "==================\npytest-doctestplus\n==================\n\n.. image:: https://zenodo.org/badge/104253824.svg\n   :target: https://zenodo.org/badge/latestdoi/104253824\n   :alt: zenodo doi\n\n.. image:: https://github.com/scientific-python/pytest-doctestplus/workflows/run%20unit%20tests/badge.svg\n    :target: https://github.com/scientific-python/pytest-doctestplus/actions\n    :alt: ci status\n\nthis package contains a plugin for the `pytest`_ framework that provides\nadvanced doctest support and enables the testing of various text files, such\nas restructuredtext (\".rst\"), markdown (\".md\"), and tex (\".tex\").\n\n.. _pytest: https://pytest.org/en/latest/\n\n\nmotivation\n----------\n\nthis plugin provides advanced features for testing example python code that is\nincluded in python docstrings and in standalone documentation files.\n\ngood documentation for developers contains example code. this is true of both\nstandalone documentation and of documentation that is integrated with the code\nitself. python provides a mechanism for testing code snippets that are provided\nin python docstrings. the unit test framework pytest provides a mechanism for\nrunning doctests against both docstrings in source code and in standalone\ndocumentation files.\n\nthis plugin augments the functionality provided by python and pytest by\nproviding the following features:\n\n* approximate floating point comparison for doctests that produce floating\n  point results (see `floating point comparison`_)\n* skipping particular classes, methods, and functions when running doctests (see `skipping tests`_)\n* handling doctests that use remote data in conjunction with the\n  `pytest-remotedata`_ plugin (see `remote data`_)\n* optional inclusion of ``*.rst`` files for doctests (see `setup and configuration`_)\n* optional inclusion of doctests in docstrings of numpy ufuncs\n\nfurther, ``pytest-doctestplus`` supports editing files to fix incorrect docstrings\n(see `fixing existing docstrings`_).\n\n.. _pytest-remotedata: https://github.com/astropy/pytest-remotedata\n\ninstallation\n------------\n\nthe ``pytest-doctestplus`` plugin can be installed using ``pip``::\n\n    $ pip install pytest-doctestplus\n\nit is also possible to install the latest development version from the source\nrepository::\n\n    $ git clone https://github.com/scientific-python/pytest-doctestplus\n    $ cd pytest-doctestplus\n    $ pip install .\n\nin either case, the plugin will automatically be registered for use with\n``pytest``.\n\nusage\n-----\n\n.. _setup:\n\nsetup and configuration\n~~~~~~~~~~~~~~~~~~~~~~~\n\nthis plugin provides three command line options: ``--doctest-plus`` for enabling\nthe advanced features mentioned above, ``--doctest-rst`` for including\n``*.rst`` files in doctest collection, and ``--doctest-ufunc`` for including\ndoctests in docstrings of numpy ufuncs.\n\nthis plugin can also be enabled by default by adding ``doctest_plus = enabled``\nto the ``[tool:pytest]`` section of the package's ``setup.cfg`` file.\n\nthe plugin is applied to all directories and files that ``pytest`` collects.\nthis means that configuring ``testpaths`` and ``norecursedirs`` in\n``setup.cfg`` also affects the files that will be discovered by\n``pytest-doctestplus``. in addition, this plugin provides a\n``doctest_norecursedirs`` configuration variable that indicates directories\nthat should be ignored by ``pytest-doctestplus`` but do not need to be ignored\nby other ``pytest`` features.\n\nusing ``pytest``'s built-in ``--doctest-modules`` option will override the\nbehavior of this plugin, even if ``doctest_plus = enabled`` in ``setup.cfg``,\nand will cause the default doctest plugin to be used. however, if for some\nreason both ``--doctest-modules`` and ``--doctest-plus`` are given, the\n``pytest-doctestplus`` plugin will be used, regardless of the contents of\n``setup.cfg``.\n\n``pytest-doctestplus`` respects the ``--doctest-continue-on-failure`` flag.\nif set, doctests will report all failing lines, which may be useful to detect\nindependent errors within the same doctest. however, it is likely to generate\nfalse positives when an early failure causes a variable later lines access to\nremain unset or have an unexpected value.\n\nthis plugin respects the doctest options that are used by the built-in doctest\nplugin and are set in ``doctest_optionflags`` in ``setup.cfg``. by default,\n``ellipsis`` and ``normalize_whitespace`` are used. for a description of all\ndoctest settings, see the `doctest documentation\n<https://docs.python.org/3/library/doctest.html#option-flags>`_.\n\nrunning tests in markdown files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nto run doctests in markdown files, invoke pytest with the command line options\n``--doctest-plus --doctest-glob '*.md'``.\n\nif you write doctests inside `github-style triple backtick fenced code blocks\n<https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#fenced-code-blocks>`_,\nthen in order for pytest-doctest to find and run them you need to include an\nextra trailing newline inside your code blocks, like this::\n\n    ```pycon\n    >>> 1 + 2\n    2\n\n    ```\n\ndoctest directives\n~~~~~~~~~~~~~~~~~~\n\nthe ``pytest-doctestplus`` plugin defines `doctest directives`_ that are used\nto control the behavior of particular features. for general information on\ndirectives and how they are used, consult the `documentation`_. the specifics\nof the directives that this plugin defines are described in the sections below.\n\n.. _doctest directives: https://docs.python.org/3/library/doctest.html#directives\n.. _documentation: https://docs.python.org/3/library/doctest.html#directives\n\nsphinx doctest directives\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nyou can use ``testsetup`` and ``testcleanup`` in sphinx rst to run code that is\nnot visible in rendered document. however, due to how ``pytest-doctestplus``\nworks, the code within needs to be prepended by ``>>>``. for example::\n\n  .. testsetup::\n\n      >>> x = 42\n\n  .. testcleanup::\n\n      >>> del x\n\nfloating point comparison\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsome doctests may produce output that contains string representations of\nfloating point values.  floating point representations are often not exact and\ncontain roundoffs in their least significant digits.  depending on the platform\nthe tests are being run on (different python versions, different os, etc.) the\nexact number of digits shown can differ.  because doctests work by comparing\nstrings this can cause such tests to fail.\n\nto address this issue, the ``pytest-doctestplus`` plugin provides support for a\n``float_cmp`` flag that can be used with doctests.  for example:\n\n.. code-block:: python\n\n  >>> 1.0 / 3.0  # doctest: +float_cmp\n  0.333333333333333311\n\n.. code-block:: python\n\n  >>> {'a': 1 / 3., 'b': 2 / 3.}  # doctest: +float_cmp\n  {'a': 0.333333, 'b': 0.666666}\n\nwhen this flag is used, the expected and actual outputs are both parsed to find\nany floating point values in the strings.  those are then converted to actual\npython `float` objects and compared numerically.  this means that small\ndifferences in representation of roundoff digits will be ignored by the\ndoctest.  the values are otherwise compared exactly, so more significant\n(albeit possibly small) differences will still be caught by these tests.\n\nthis flag can be enabled globally by adding it to ``setup.cfg`` as in\n\n.. code-block:: ini\n\n    doctest_optionflags =\n        normalize_whitespace\n        ellipsis\n        float_cmp\n\nignoring warnings\n~~~~~~~~~~~~~~~~~\n\nif code in a doctest emits a warning and you want to make sure that warning is silenced,\nyou can make use of the ``ignore_warnings`` flag. for example:\n\n.. code-block:: python\n\n  >>> import numpy as np\n  >>> np.mean([])  # doctest: +ignore_warnings\n  np.nan\n\nshowing warnings\n~~~~~~~~~~~~~~~~\n\nif code in a doctest emits a warning and you want to make sure that warning is\nshown, you can make use of the ``show_warnings`` flag. this is useful when\nwarnings are turned into errors by pytest, and also because by default warnings\nare printed to stderr. this is the opposite from ``ignore_warnings`` so\nobviously the two flags should not be used together. for example:\n\n.. code-block:: python\n\n  >>> import numpy as np\n  >>> np.mean([])  # doctest: +show_warnings\n  runtimewarning: mean of empty slice.\n  runtimewarning: invalid value encountered in double_scalars\n  np.nan\n\nskipping tests\n~~~~~~~~~~~~~~\n\ndoctest provides the ``+skip`` directive for skipping statements that should\nnot be executed when testing documentation.\n\n.. code-block:: python\n\n    >>> open('file.txt') # doctest: +skip\n\nin sphinx ``.rst`` documentation, whole code example blocks can be skipped with the\ndirective\n\n.. code-block:: rst\n\n    .. doctest-skip::\n\n        >>> import asdf\n        >>> asdf.open('file.asdf')\n\nhowever, it is often useful to be able to skip docstrings associated with\nparticular functions, methods, classes, or even entire files.\n\nskipping all the tests\n^^^^^^^^^^^^^^^^^^^^^^\n\nit is also possible to skip all doctests below a certain line using\na ``doctest-skip-all`` comment.  note the lack of ``::`` at the end\nof the line here.\n\n.. code-block:: rst\n\n    .. doctest-skip-all\n\n       >>> import non_existing\n       >>> non_existing.write_pseudo_code()\n       all the doctests are skipped in the file below\n\n\nskip unconditionally\n^^^^^^^^^^^^^^^^^^^^\n\nthe ``pytest-doctestplus`` plugin provides a way to indicate that certain\ndocstrings should be skipped altogether. this is configured by defining the\nvariable ``__doctest_skip__`` in each module where tests should be skipped. the\nvalue of ``__doctest_skip__`` should be a list of wildcard patterns for all\nfunctions/classes whose doctests should be skipped.  for example::\n\n   __doctest_skip__ = ['myfunction', 'myclass', 'myclass.*']\n\nskips the doctests in a function called ``myfunction``, the doctest for a\nclass called ``myclass``, and all *methods* of ``myclass``.\n\nmodule docstrings may contain doctests as well. to skip the module-level\ndoctests::\n\n    __doctest_skip__  = ['.', 'myfunction', 'myclass']\n\nto skip all doctests in a module::\n\n   __doctest_skip__ = ['*']\n\ndoctest dependencies\n^^^^^^^^^^^^^^^^^^^^\n\nit is also possible to skip certain doctests depending on whether particular\ndependencies are available. this is configured by defining the variable\n``__doctest_requires__`` at the module level. the value of this variable is\na dictionary that indicates the modules that are required to run the doctests\nassociated with particular functions, classes, and methods.\n\nthe keys in the dictionary are wildcard patterns like those described above, or\ntuples of wildcard patterns, indicating which docstrings should be skipped. the\nvalues in the dictionary are lists of module names that are required in order\nfor the given doctests to be executed.\n\nconsider the following example::\n\n    __doctest_requires__ = {('func1', 'func2'): ['scipy']}\n\nhaving this module-level variable will require ``scipy`` to be importable\nin order to run the doctests for functions ``func1`` and ``func2`` in that\nmodule.\n\nsimilarly, in sphinx ``.rst`` documentation, whole code example blocks can be\nconditionally skipped if a dependency is not available.\n\n.. code-block:: rst\n\n    .. doctest-requires:: asdf\n\n        >>> import asdf\n        >>> asdf.open('file.asdf')\n\nfurthermore, if the code only runs for specific versions of the optional dependency,\nyou can add a version check like this:\n\n.. code-block:: rst\n\n    .. doctest-requires:: asdf<3\n\n        >>> import asdf\n        >>> asdf.open('file.asdf')\n\nfinally, it is possible to skip collecting doctests in entire subpackages by\nusing the ``doctest_subpackage_requires`` in the ``[tool:pytest]`` section of\nthe package's ``setup.cfg`` file. the syntax for this option is a list of\n``path = requirements``, e.g.::\n\n    doctest_subpackage_requires =\n        astropy/wcs/* = scipy>2.0;numpy>1.14\n        astropy/cosmology/* = scipy>1.0\n\nmultiple requirements can be specified if separated by semicolons.\n\nremote data\n~~~~~~~~~~~\n\nthe ``pytest-doctestplus`` plugin can be used in conjunction with the\n`pytest-remotedata`_ plugin in order to control doctest code that requires\naccess to data from the internet. in order to make use of these features, the\n``pytest-remotedata`` plugin must be installed, and remote data access must\nbe enabled using the ``--remote-data`` command line option to ``pytest``. see\nthe `pytest-remotedata plugin documentation`__ for more details.\n\nthe following example illustrates how a doctest that uses remote data should be\nmarked:\n\n.. code-block:: python\n\n    >>> from urlib.request import urlopen\n    >>> url = urlopen('http://astropy.org')  # doctest: +remote_data\n\nthe ``+remote_data`` directive indicates that the marked statement should only\nbe executed if the ``--remote-data`` option is given. by default, all\nstatements marked with the remote data directive will be skipped.\n\nwhole code example blocks can also be marked to control access to data from the internet\nthis way:\n\n.. code-block:: python\n\n    .. doctest-remote-data::\n\n        >>> import requests\n        >>> r = requests.get('https://www.astropy.org')\n\n.. _pytest-remotedata: https://github.com/astropy/pytest-remotedata\n__ pytest-remotedata_\n\nsphinx compatibility\n~~~~~~~~~~~~~~~~~~~~\n\nto use the additional directives when building your documentation with sphinx\nyou may want to enable the sphinx extension which registers these directives\nwith sphinx. doing so ensures that sphinx correctly ignores these directives,\nrunning the doctests with sphinx is not supported. to do this, add\n``'pytest_doctestplus.sphinx.doctestplus'`` to your ``extensions`` list in your\n``conf.py`` file.\n\n\nfixing existing docstrings\n--------------------------\nthe plugin has basic support to fix docstrings, this can be enabled by\nrunning ``pytest`` with ``--doctest-plus-generate-diff``.\nwithout further options, this will print out a diff and a list of files that\nwould be modified.  using ``--doctest-plus-generate-diff=overwrite`` will\nmodify the files in-place, so it is recommended to run the check first to\nverify the paths.\nyou may wish to review changes manually and only commit some patches e.g. using ``git commit --patch``.\n\nthe current diff generation is still very basic, for example, it does not account for\nexisting ``...``.  by default a diff is only generated for *failing* doctests.\n\nin general, a mass edit may wish to focus on a specific change and\npossibly include passing tests.  so you can opt-in into the behavior by\nadding a hook to your ``conftest.py``::\n\n    @pytest.hookimpl\n    def pytest_doctestplus_diffhook(info):\n        info[\"use\"] = true  # overwrite all results (even successes)\n        if info[\"fileno\"] is none:\n            # e.g. numpy has c docstrings that cannot be found, we can add\n            # custom logic here to try and find these:\n            info[\"filename\"] = ...\n            info[\"lineno\"] = ...\n\nwhere ``info`` is a dictionary containing the following items:\n\n* ``use``: ``true`` or ``false`` signalling whether to apply the diff.  this is\n  set to ``false`` if a doctest succeeded and ``true`` if the doctest failed.\n* ``name``: the name of the test (e.g. the function being documented)\n* ``filename``: the file that contains the test (this can be wrong in certain\n  situation and in that case ``test_lineno`` will be wrong as well).\n* ``source``: the source code that was executed for this test\n* ``test_lineno``: the line of code where the example block (or function) starts.\n  in some cases, the test file cannot be found and the lineno will be ``none``,\n  you can manually try to fix these.\n* ``example_lineno``: the line number of the example snippet\n  (individual ``>>>``).\n* ``want``: the current documentation.\n* ``got``: the result of executing the example.\n\nyou can modify the dictionary in-place to modify the behavior.\n\nplease note that we assume that this api will be used only occasionally and\nreserve the right to change it at any time.\n\n\ndevelopment status\n------------------\n\nquestions, bug reports, and feature requests can be submitted on `github`_.\n\n.. _github: https://github.com/scientific-python/pytest-doctestplus\n\nlicense\n-------\nthis plugin is licensed under a 3-clause bsd style license - see the\n``license.rst`` file.\n",
  "docs_url": null,
  "keywords": "doctest,rst,pytest,py.test",
  "license": "bsd",
  "name": "pytest-doctestplus",
  "package_url": "https://pypi.org/project/pytest-doctestplus/",
  "project_url": "https://pypi.org/project/pytest-doctestplus/",
  "project_urls": {
    "Homepage": "https://github.com/scientific-python/pytest-doctestplus"
  },
  "release_url": "https://pypi.org/project/pytest-doctestplus/1.1.0/",
  "requires_dist": [
    "pytest >=4.6",
    "setuptools >=30.3.0",
    "packaging >=17.0",
    "numpy ; extra == 'test'",
    "pytest-remotedata >=0.3.2 ; extra == 'test'",
    "sphinx ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "pytest plugin with advanced doctest features.",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "scientific_python_developers"
  ],
  "kwds": "pytest_doctestplus pytest_doctestplus_diffhook pytest doctestplus _doctest",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pytest_doctestplus",
  "homepage": "https://github.com/scientific-python/pytest-doctestplus",
  "release_count": 23,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_pytest_remotedata",
    "pypi_setuptools",
    "pypi_sphinx"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# functions framework for python\n\n[![pypi version](https://badge.fury.io/py/functions-framework.svg)](https://badge.fury.io/py/functions-framework)\n\n[![python unit ci][ff_python_unit_img]][ff_python_unit_link] [![python lint ci][ff_python_lint_img]][ff_python_lint_link] [![python conformace ci][ff_python_conformance_img]][ff_python_conformance_link] ![security scorecard](https://api.securityscorecards.dev/projects/github.com/googlecloudplatform/functions-framework-python/badge)\n\nan open source faas (function as a service) framework for writing portable\npython functions -- brought to you by the google cloud functions team.\n\nthe functions framework lets you write lightweight functions that run in many\ndifferent environments, including:\n\n*   [google cloud functions](https://cloud.google.com/functions/)\n*   your local development machine\n*   [cloud run and cloud run for anthos](https://cloud.google.com/run/)\n*   [knative](https://github.com/knative/)-based environments\n\nthe framework allows you to go from:\n\n```python\ndef hello(request):\n    return \"hello world!\"\n```\n\nto:\n\n```sh\ncurl http://my-url\n# output: hello world!\n```\n\nall without needing to worry about writing an http server or complicated request handling logic.\n\n## features\n\n*   spin up a local development server for quick testing\n*   invoke a function in response to a request\n*   automatically unmarshal events conforming to the [cloudevents](https://cloudevents.io/) spec\n*   portable between serverless platforms\n\n## installation\n\ninstall the functions framework via `pip`:\n\n```sh\npip install functions-framework\n```\n\nor, for deployment, add the functions framework to your `requirements.txt` file:\n\n```\nfunctions-framework==3.*\n```\n\n## quickstarts\n\n### quickstart: http function (hello world)\n\ncreate an `main.py` file with the following contents:\n\n```python\nimport flask\nimport functions_framework\n\n@functions_framework.http\ndef hello(request: flask.request) -> flask.typing.responsereturnvalue:\n    return \"hello world!\"\n```\n\n> your function is passed a single parameter, `(request)`, which is a flask [`request`](https://flask.palletsprojects.com/en/3.0.x/api/#flask.request) object.\n\nrun the following command:\n\n```sh\nfunctions-framework --target hello --debug\n * serving flask app \"hello\" (lazy loading)\n * environment: production\n   warning: this is a development server. do not use it in a production deployment.\n   use a production wsgi server instead.\n * debug mode: on\n * running on http://0.0.0.0:8080/ (press ctrl+c to quit)\n```\n\n(you can also use `functions-framework-python` if you have multiple\nlanguage frameworks installed).\n\nopen http://localhost:8080/ in your browser and see *hello world!*.\n\nor send requests to this function using `curl` from another terminal window:\n\n```sh\ncurl localhost:8080\n# output: hello world!\n```\n\n### quickstart: cloudevent function\n\ncreate an `main.py` file with the following contents:\n\n```python\nimport functions_framework\nfrom cloudevents.http.event import cloudevent\n\n@functions_framework.cloud_event\ndef hello_cloud_event(cloud_event: cloudevent) -> none:\n   print(f\"received event with id: {cloud_event['id']} and data {cloud_event.data}\")\n```\n\n> your function is passed a single [cloudevent](https://github.com/cloudevents/sdk-python/blob/main/cloudevents/sdk/event/v1.py) parameter.\n\nrun the following command to run `hello_cloud_event` target locally:\n\n```sh\nfunctions-framework --target=hello_cloud_event\n```\n\nin a different terminal, `curl` the functions framework server:\n\n```sh\ncurl -x post localhost:8080 \\\n   -h \"content-type: application/cloudevents+json\" \\\n   -d '{\n\t\"specversion\" : \"1.0\",\n\t\"type\" : \"example.com.cloud.event\",\n\t\"source\" : \"https://example.com/cloudevents/pull\",\n\t\"subject\" : \"123\",\n\t\"id\" : \"a234-1234-1234\",\n\t\"time\" : \"2018-04-05t17:31:00z\",\n\t\"data\" : \"hello world\"\n}'\n```\n\noutput from the terminal running `functions-framework`:\n```\nreceived event with id: a234-1234-1234 and data hello world\n``` \n\nmore info on sending [cloudevents](http://cloudevents.io) payloads, see [`examples/cloud_run_cloud_events`](examples/cloud_run_cloud_events/) instruction.\n\n\n### quickstart: error handling\n\nthe framework includes an error handler that is similar to the\n[`flask.flask.errorhandler`](https://flask.palletsprojects.com/en/1.1.x/api/#flask.flask.errorhandler)\nfunction, which allows you to handle specific error types with a decorator:\n\n```python\nimport functions_framework\n\n\n@functions_framework.errorhandler(zerodivisionerror)\ndef handle_zero_division(e):\n    return \"i'm a teapot\", 418\n\n\ndef function(request):\n    1 / 0\n    return \"success\", 200\n```\n\nthis function will catch the `zerodivisionerror` and return a different\nresponse instead.\n\n### quickstart: pub/sub emulator\n1. create a `main.py` file with the following contents:\n\n   ```python\n   def hello(event, context):\n        print(\"received\", context.event_id)\n   ```\n\n1. start the functions framework on port 8080:\n\n   ```sh\n   functions-framework --target=hello --signature-type=event --debug --port=8080\n   ```\n\n1. in a second terminal, start the pub/sub emulator on port 8085.\n\n   ```sh\n   export pubsub_project_id=my-project\n   gcloud beta emulators pubsub start \\\n       --project=$pubsub_project_id \\\n       --host-port=localhost:8085\n   ```\n\n   you should see the following after the pub/sub emulator has started successfully:\n\n   ```none\n   [pubsub] info: server started, listening on 8085\n   ```\n\n1. in a third terminal, create a pub/sub topic and attach a push subscription to the topic, using `http://localhost:8080` as its push endpoint. [publish](https://cloud.google.com/pubsub/docs/quickstart-client-libraries#publish_messages) some messages to the topic. observe your function getting triggered by the pub/sub messages.\n\n   ```sh\n   export pubsub_project_id=my-project\n   export topic_id=my-topic\n   export push_subscription_id=my-subscription\n   $(gcloud beta emulators pubsub env-init)\n\n   git clone https://github.com/googleapis/python-pubsub.git\n   cd python-pubsub/samples/snippets/\n   pip install -r requirements.txt\n\n   python publisher.py $pubsub_project_id create $topic_id\n   python subscriber.py $pubsub_project_id create-push $topic_id $push_subscription_id http://localhost:8080\n   python publisher.py $pubsub_project_id publish $topic_id\n   ```\n\n   you should see the following after the commands have run successfully:\n\n   ```none\n   created topic: projects/my-project/topics/my-topic\n\n   topic: \"projects/my-project/topics/my-topic\"\n   push_config {\n     push_endpoint: \"http://localhost:8080\"\n   }\n   ack_deadline_seconds: 10\n   message_retention_duration {\n     seconds: 604800\n   }\n   .\n   endpoint for subscription is: http://localhost:8080\n\n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   published messages to projects/my-project/topics/my-topic.\n   ```\n\n   and in the terminal where the functions framework is running:\n\n   ```none\n    * serving flask app \"hello\" (lazy loading)\n    * environment: production\n      warning: this is a development server. do not use it in a production deployment.\n      use a production wsgi server instead.\n    * debug mode: on\n    * running on http://0.0.0.0:8080/ (press ctrl+c to quit)\n    * restarting with fsevents reloader\n    * debugger is active!\n    * debugger pin: 911-794-046\n   received 1\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 2\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 5\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 6\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 7\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 8\n   127.0.0.1 - - [11/aug/2021 14:42:22] \"post / http/1.1\" 200 -\n   received 9\n   127.0.0.1 - - [11/aug/2021 14:42:39] \"post / http/1.1\" 200 -\n   received 3\n   127.0.0.1 - - [11/aug/2021 14:42:39] \"post / http/1.1\" 200 -\n   received 4\n   127.0.0.1 - - [11/aug/2021 14:42:39] \"post / http/1.1\" 200 -\n   ```\n\nfor more details on extracting data from a pub/sub event, see\nhttps://cloud.google.com/functions/docs/tutorials/pubsub#functions_helloworld_pubsub_tutorial-python\n\n### quickstart: build a deployable container\n\n1. install [docker](https://store.docker.com/search?type=edition&offering=community) and the [`pack` tool](https://buildpacks.io/docs/install-pack/).\n\n1. build a container from your function using the functions [buildpacks](https://github.com/googlecloudplatform/buildpacks):\n\n        pack build \\\n            --builder gcr.io/buildpacks/builder:v1 \\\n            --env google_function_signature_type=http \\\n            --env google_function_target=hello \\\n            my-first-function\n\n1. start the built container:\n\n        docker run --rm -p 8080:8080 my-first-function\n        # output: serving function...\n\n1. send requests to this function using `curl` from another terminal window:\n\n        curl localhost:8080\n        # output: hello world!\n\n## run your function on serverless platforms\n\n### google cloud functions\n\nthis functions framework is based on the [python runtime on google cloud functions](https://cloud.google.com/functions/docs/concepts/python-runtime).\n\non cloud functions, using the functions framework is not necessary: you don't need to add it to your `requirements.txt` file.\n\nafter you've written your function, you can simply deploy it from your local machine using the `gcloud` command-line tool. [check out the cloud functions quickstart](https://cloud.google.com/functions/docs/quickstart).\n\n### cloud run/cloud run on gke\n\nonce you've written your function and added the functions framework to your `requirements.txt` file, all that's left is to create a container image. [check out the cloud run quickstart](https://cloud.google.com/run/docs/quickstarts/build-and-deploy) for python to create a container image and deploy it to cloud run. you'll write a `dockerfile` when you build your container. this `dockerfile` allows you to specify exactly what goes into your container (including custom binaries, a specific operating system, and more). [here is an example `dockerfile` that calls functions framework.](https://github.com/googlecloudplatform/functions-framework-python/blob/main/examples/cloud_run_http)\n\nif you want even more control over the environment, you can [deploy your container image to cloud run on gke](https://cloud.google.com/run/docs/quickstarts/prebuilt-deploy-gke). with cloud run on gke, you can run your function on a gke cluster, which gives you additional control over the environment (including use of gpu-based instances, longer timeouts and more).\n\n### container environments based on knative\n\ncloud run and cloud run on gke both implement the [knative serving api](https://www.knative.dev/docs/). the functions framework is designed to be compatible with knative environments. just build and deploy your container to a knative environment.\n\n## configure the functions framework\n\nyou can configure the functions framework using command-line flags or environment variables. if you specify both, the environment variable will be ignored.\n\n| command-line flag  | environment variable      | description                                                                                                                                                                                      |\n| ------------------ | ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `--host`           | `host`                    | the host on which the functions framework listens for requests. default: `0.0.0.0`                                                                                                               |\n| `--port`           | `port`                    | the port on which the functions framework listens for requests. default: `8080`                                                                                                                  |\n| `--target`         | `function_target`         | the name of the exported function to be invoked in response to requests. default: `function`                                                                                                     |\n| `--signature-type` | `function_signature_type` | the signature used when writing your function. controls unmarshalling rules and determines which arguments are used to invoke your function. default: `http`; accepted values: `http`, `event` or `cloudevent` |\n| `--source`         | `function_source`         | the path to the file containing your function. default: `main.py` (in the current working directory)                                                                                             |\n| `--debug`          | `debug`                   | a flag that allows to run functions-framework to run in debug mode, including live reloading. default: `false`                                                                                   |\n\n## enable google cloud function events\n\nthe functions framework can unmarshall incoming\ngoogle cloud functions [event](https://cloud.google.com/functions/docs/concepts/events-triggers#events) payloads to `event` and `context` objects.\nthese will be passed as arguments to your function when it receives a request.\nnote that your function must use the `event`-style function signature:\n\n```python\ndef hello(event, context):\n    print(event)\n    print(context)\n```\n\nto enable automatic unmarshalling, set the function signature type to `event`\n using the `--signature-type` command-line flag or the `function_signature_type` environment variable. by default, the http\nsignature will be used and automatic event unmarshalling will be disabled.\n\nfor more details on this signature type, see the google cloud functions\ndocumentation on\n[background functions](https://cloud.google.com/functions/docs/writing/background#cloud_pubsub_example).\n\nsee the [running example](examples/cloud_run_event).\n\n## advanced examples\n\nmore advanced guides can be found in the [`examples/`](examples/) directory.\nyou can also find examples on using the cloudevent python sdk [here](https://github.com/cloudevents/sdk-python).\n\n## contributing\n\ncontributions to this library are welcome and encouraged. see [contributing](contributing.md) for more information on how to get started.\n\n[ff_python_unit_img]: https://github.com/googlecloudplatform/functions-framework-python/workflows/python%20unit%20ci/badge.svg\n[ff_python_unit_link]: https://github.com/googlecloudplatform/functions-framework-python/actions?query=workflow%3a\"python+unit+ci\"\n[ff_python_lint_img]: https://github.com/googlecloudplatform/functions-framework-python/workflows/python%20lint%20ci/badge.svg\n[ff_python_lint_link]: https://github.com/googlecloudplatform/functions-framework-python/actions?query=workflow%3a\"python+lint+ci\"\n[ff_python_conformance_img]: https://github.com/googlecloudplatform/functions-framework-python/workflows/python%20conformance%20ci/badge.svg\n[ff_python_conformance_link]: https://github.com/googlecloudplatform/functions-framework-python/actions?query=workflow%3a\"python+conformance+ci\"\n",
  "docs_url": null,
  "keywords": "functions-framework",
  "license": "",
  "name": "functions-framework",
  "package_url": "https://pypi.org/project/functions-framework/",
  "project_url": "https://pypi.org/project/functions-framework/",
  "project_urls": {
    "Homepage": "https://github.com/googlecloudplatform/functions-framework-python"
  },
  "release_url": "https://pypi.org/project/functions-framework/3.5.0/",
  "requires_dist": [
    "flask <4.0,>=1.0",
    "click <9.0,>=7.0",
    "watchdog >=1.0.0",
    "cloudevents <2.0.0,>=1.2.0",
    "gunicorn >=19.2.0 ; platform_system != \"Windows\""
  ],
  "requires_python": ">=3.5, <4",
  "summary": "an open source faas (function as a service) framework for writing portable python functions -- brought to you by the google cloud functions team.",
  "version": "3.5.0",
  "releases": [],
  "developers": [
    "google_llc",
    "googleapis-packages@google.com"
  ],
  "kwds": "functions_framework ff_python_lint_img ff_python_conformance_img google_function_target ff_python_unit_img",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_functions_framework",
  "homepage": "https://github.com/googlecloudplatform/functions-framework-python",
  "release_count": 30,
  "dependency_ids": [
    "pypi_click",
    "pypi_cloudevents",
    "pypi_flask",
    "pypi_gunicorn",
    "pypi_watchdog"
  ]
}
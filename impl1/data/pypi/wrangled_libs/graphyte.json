{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "graphyte\n========\n\n.. image:: https://img.shields.io/pypi/v/graphyte.svg\n   :target: https://pypi.org/project/graphyte/\n   :alt: graphyte on pypi (python package index)\n\n.. image:: https://github.com/benhoyt/graphyte/actions/workflows/tests.yml/badge.svg\n   :target: https://github.com/benhoyt/graphyte/actions/workflows/tests.yml\n   :alt: github actions tests\n\n\ngraphyte is a small python library that sends data to a graphite metrics\nserver (carbon). we wrote it because the existing `graphitesend`_ library\ndidn\u2019t support python 3, and it also required gevent for asyncronous use.\ngraphyte is tested on python 3.5+ as well as python 2.7, and uses the\nstandard library\u2019s ``threading`` module for asynchronous use.\n\nthe library is `on the python package index (pypi)`_, so to install it, fire up\na command prompt, activate your virtualenv if you\u2019re using one, and type:\n\n::\n\n    pip install graphyte\n\nusing graphyte is simple \u2013 just call ``init()`` to initialize the default\nsender and then ``send()`` to send a message. for example, to send\n``system.sync.foo.bar 42 {timestamp}\\n`` to graphite.example.com:2003\nsynchronously:\n\n.. code:: python\n\n    import graphyte\n    graphyte.init('graphite.example.com', prefix='system.sync')\n    graphyte.send('foo.bar', 42)\n\nif you want to send asynchronously on a background thread (for example, in a\nweb server context), just specify a send interval. for example, this will\nsetup a background thread to send every 10 seconds:\n\n.. code:: python\n\n    graphyte.init('graphite.example.com', prefix='system.async', interval=10)\n    graphyte.send('foo.bar', 42)\n\nif you want to send tagged metrics, the usage is as follows:\n\n.. code:: python\n\n    graphite.send('foo.bar', 42, tags={'ding': 'dong'})\n\nfor more advanced usage, for example if you want to send to multiple servers\nor if you want to subclass ``sender``, you can instantiate instances of\n``sender`` directly. for example, to instantiate two senders sending to\ndifferent   servers (one synchronous, one using a background thread with send\ninterval 10   seconds), use something like the following:\n\n.. code:: python\n\n    sender1 = graphyte.sender('graphite1.example.com', prefix='system.one')\n    sender2 = graphyte.sender('graphite2.example.com', prefix='system.two', interval=10)\n    sender1.send('foo.bar1', 42)\n    sender2.send('foo.bar2', 43)\n\nif you want to send via udp instead of tcp, just add   ``protocol='udp'`` to\nthe ``init()`` or ``sender()`` call.\n\nor, to customize how messages are logged or sent to the socket, subclass\n``sender`` and override ``send_message`` (or even ``send_socket`` if you\nwant to override logging and exception handling):\n\n.. code:: python\n\n    class customsender(graphyte.sender):\n        def send_message(self, message):\n            print('sending bytes in some custom way: {!r}'.format(message))\n\nby default, exceptions that occur when sending a message are logged. if you\nwant to raise and propagate exceptions instead, instantiate ``sender`` with\n``raise_send_errors=true``. it's an error to set ``raise_send_errors`` when\n``interval`` is specified.\n\nsocket sending errors are logged using the python logging system (using\nlogger name \u201cgraphyte\u201d). if the sender is initialized with\n``log_sends=true``, all sends are logged at the info level.\n\nyou can also use graphyte to send metrics directly from the command line:\n\n::\n\n    python -m graphyte foo.bar 42\n\nthere are command line arguments to specify the server and port and other\nconfiguration. type ``python -m graphyte --help`` for help.\n\nread the code in `graphyte.py`_ for more details \u2013 it\u2019s pretty small!\n\ngraphyte was written by `ben hoyt`_ and is licensed with a\npermissive mit license (see `license.txt`_).\n\n**related work:** `delphid`_ has a fork of graphyte which supports the statsd\nprotocol. see the changes on `delphid's branch`_.\n\n\n.. _graphitesend: https://github.com/daniellawrence/graphitesend\n.. _on the python package index (pypi): https://pypi.python.org/pypi/graphyte\n.. _graphyte.py: https://github.com/benhoyt/graphyte/blob/master/graphyte.py\n.. _ben hoyt: http://benhoyt.com/\n.. _license.txt: https://github.com/benhoyt/graphyte/blob/master/license.txt\n.. _delphid: https://github.com/delphid\n.. _delphid's branch: https://github.com/benhoyt/graphyte/compare/master...delphid:statsd_message_style?expand=1",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "graphyte",
  "package_url": "https://pypi.org/project/graphyte/",
  "project_url": "https://pypi.org/project/graphyte/",
  "project_urls": {
    "Homepage": "https://github.com/benhoyt/graphyte"
  },
  "release_url": "https://pypi.org/project/graphyte/1.7.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python 3 compatible library to send data to a graphite metrics server (carbon)",
  "version": "1.7.1",
  "releases": [],
  "developers": [
    "ben_hoyt",
    "benhoyt@gmail.com"
  ],
  "kwds": "_graphyte graphyte graphite2 _graphitesend graphitesend",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_graphyte",
  "homepage": "https://github.com/benhoyt/graphyte",
  "release_count": 9,
  "dependency_ids": []
}
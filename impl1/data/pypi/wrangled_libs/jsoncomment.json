{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.3",
    "topic :: software development :: pre-processors",
    "topic :: text editors :: text processing"
  ],
  "description": "json comment\n============\n\na wrapper to json parsers allowing comments, multiline strings and trailing commas\n\n- - -\n\ndependencies\n------------\n\n* python 3.3+\n* todo new additions\n\n### optional\n\n* ujson 1.30+\n\n- - -\n\ndescription\n-----------\n\njson comment allows to parse json files or strings with:\n\n* single and multi line comments\n* multi line data strings\n* trailing commas in objects and arrays, after the last item\n\nthis package works with any json parser which supports:\n\n* `load(fp, ...)` to parse files\n* `loads(s, ...)` to parse strings\n\nby adding a preprocessor to these calls.\n\n- - -\n\n### comments\n\n* `#`, `;` and `//` are for single line comments\n* `/*` and `*/` enclose multiline comments\n\ninline comments are **not** supported\n\n- - -\n\n### multiline strings\n\nany string can be multiline, even object keys.\n\n* multiline strings start and end with `\"\"\"`, like in python\n* the preprocessor merges all lines to a single json standard string\n* a single trailing space per line is kept, if present\n* new line is not kept. to hard code new lines in the string, use `\\\\n`\n\n- - -\n\ncustom methods\n--------------\n\n### file load\n\n`loadf(path, *args, default = none, **kwargs)`\n\nopens a json file with comments. allows a default value if loading or parsing fails\n\n### file save\n\n`dumpf(json_obj, path, *args, indent=4, **kwargs)`\n\nsaves a json file with indentation\n\n- - -\n\ninstall\n-------\n\n`pip install jsoncomment`\n\nor\n\n* download source\n* `python setup.py install`\n\n- - -\n\nusage\n-----\n\n\tfrom jsoncomment import jsoncomment\n\n\tstring = \"[]\"\n\tjson = jsoncomment()\n\tjson_obj = json.loads(string)\n\n### examples\n\nadded in the /examples directory\n\n- - -\n\n### limitations\n\n* `#`, `;`, `//` and `/*` may be preceded only by whitespaces or tabs on the same line\n* `*/` may be followed only by whitespaces or tabs on the same line\n* the trailing comma must be the last character on the same line\n\n- - -\n\nsource\n------\n\n[source](https://bitbucket.org/dando_real_ita/json-comment/src/default)\ncode available with mit license on bitbucket.\n\n- - -\n\napi\n---\n\nadded in top level `__init__.py`\n\n### how to read the api\n\napi is split in:\n\n\t* `user interface` for common use\n\t* `developer interface` exposing some internals that could be useful\n\nfor each item ( function or class ), there are 2 blocks of comments, above and below item definition:\n\n\t* the top describes the return values\n\t* the bottom describes the item and call variables\n\nif call variables have defaults or use duck typing, every allowed value is described\n\nexample:\n\n\t# return_value\n\t\t# description\n\tfrom .some_module import someclass\n\t\t# someclass description\n\t# (\n\t\t# variable_1,\n\t\t\t# description\n\t\t# variable_2 = something,\n\t\t\t# description\n\n\t\t\t# = default\n\t\t\t\t# description of default value ( something )\n\t\t\t# = something_2\n\t\t\t\t# description of alternate form ( duck typing )\n\t# )\n\ndescribes `return_value = someclass(variable_1, variable_2 = current_value)`\n\n- - -\n\ncontact\n-------\n\ngaspare iengo @ [email](mailto:gaspareiengo@gmail.com)\n\n\n",
  "docs_url": null,
  "keywords": "json comments multiline",
  "license": "mit",
  "name": "jsoncomment",
  "package_url": "https://pypi.org/project/jsoncomment/",
  "project_url": "https://pypi.org/project/jsoncomment/",
  "project_urls": {
    "Homepage": "https://bitbucket.org/Dando_Real_ITA/json-comment"
  },
  "release_url": "https://pypi.org/project/jsoncomment/0.4.2/",
  "requires_dist": [
    "json-spec",
    "ujson (>=1.30) ; extra == 'ujson'"
  ],
  "requires_python": ">=3.3",
  "summary": "a wrapper to json parsers allowing comments, multiline strings and trailing commas",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "gaspare_iengo",
    "gaspareiengo@gmail.com"
  ],
  "kwds": "json_obj jsoncomment json multiline parsers",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jsoncomment",
  "homepage": "https://bitbucket.org/dando_real_ita/json-comment",
  "release_count": 17,
  "dependency_ids": [
    "pypi_json_spec",
    "pypi_ujson"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: end users/desktop",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "opencensus azure monitor exporters\n==================================\n\nopencensus azure monitor exporters are on the path to deprecation. they will be officially unsupported by september 2024. please migrate to the `azure monitor opentelemetry distro <https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-enable?tabs=python>`_ for the recommended \"one-stop-shop\" solution or the `azure monitor opentelemetry exporters <https://learn.microsoft.com/python/api/overview/azure/monitor-opentelemetry-exporter-readme?view=azure-python-preview>`_ for the more hand-on, configurable solution based on `opentelemetry <https://opentelemetry.io/>`_.\ncheck out the `migration guide <https://learn.microsoft.com/en-us/azure/azure-monitor/app/opentelemetry-python-opencensus-migrate?tabs=aspnetcore>`_ on how to easily migrate python code.\n\n|pypi|\n\n.. |pypi| image:: https://badge.fury.io/py/opencensus-ext-azure.svg\n   :target: https://pypi.org/project/opencensus-ext-azure/\n\ninstallation\n------------\n\n::\n\n    pip install opencensus-ext-azure\n\nprerequisites\n-------------\n\n* create an azure monitor resource and get the instrumentation key, more information can be found in the official `docs <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* place your instrumentation key in a `connection string` and directly into your code.\n* alternatively, you can specify your `connection string` in an environment variable ``applicationinsights_connection_string``.\n\nusage\n-----\n\nlog\n~~~\n\nthe **azure monitor log handler** allows you to export python logs to `azure monitor`_.\n\nthis example shows how to send a warning level log to azure monitor.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import azureloghandler\n\n    logger = logging.getlogger(__name__)\n    logger.addhandler(azureloghandler(connection_string='instrumentationkey=<your-instrumentation_key-here>'))\n    logger.warning('hello, world!')\n\ncorrelation\n###########\n\nyou can enrich the logs with trace ids and span ids by using the `logging integration <../opencensus-ext-logging>`_.\n\n* install the `logging integration package <../opencensus-ext-logging>`_ using ``pip install opencensus-ext-logging``.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import azureloghandler\n    from opencensus.ext.azure.trace_exporter import azureexporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import probabilitysampler\n    from opencensus.trace.tracer import tracer\n\n    config_integration.trace_integrations(['logging'])\n\n    logger = logging.getlogger(__name__)\n\n    handler = azureloghandler(connection_string='instrumentationkey=<your-instrumentation_key-here>')\n    handler.setformatter(logging.formatter('%(traceid)s %(spanid)s %(message)s'))\n    logger.addhandler(handler)\n\n    tracer = tracer(\n        exporter=azureexporter(connection_string='instrumentationkey=<your-instrumentation_key-here>'),\n        sampler=probabilitysampler(1.0)\n    )\n\n    logger.warning('before the span')\n    with tracer.span(name='test'):\n        logger.warning('in the span')\n    logger.warning('after the span')\n\ncustom properties\n#################\n\nyou can also add custom properties to your log messages in the *extra* keyword argument using the custom_dimensions field.\n\nwarning: for this feature to work, you need to pass a dictionary to the custom_dimensions field. if you pass arguments of any other type, the logger will ignore them.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import azureloghandler\n\n    logger = logging.getlogger(__name__)\n    logger.addhandler(azureloghandler(connection_string='instrumentationkey=<your-instrumentation_key-here>'))\n\n    properties = {'custom_dimensions': {'key_1': 'value_1', 'key_2': 'value_2'}}\n    logger.warning('action', extra=properties)\n\nmodifying logs\n##############\n\n* you can pass a callback function to the exporter to process telemetry before it is exported.\n* your callback function can return `false` if you do not want this envelope exported.\n* your callback function must accept an `envelope <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#l86>`_ data type as its parameter.\n* you can see the schema for azure monitor data types in the envelopes `here <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py>`_.\n* the `azureloghandler` handles `exceptiondata` and `messagedata` data types.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import azureloghandler\n\n    logger = logging.getlogger(__name__)\n\n    # callback function to append '_hello' to each log message telemetry\n    def callback_function(envelope):\n        envelope.data.basedata.message += '_hello'\n        return true\n\n    handler = azureloghandler(connection_string='instrumentationkey=<your-instrumentation_key-here>')\n    handler.add_telemetry_processor(callback_function)\n    logger.addhandler(handler)\n    logger.warning('hello, world!')\n\nevents\n######\n\nyou can send `customevent` telemetry in exactly the same way you would send `trace` telemetry except using the `azureeventhandler` instead.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import azureeventhandler\n\n    logger = logging.getlogger(__name__)\n    logger.addhandler(azureeventhandler(connection_string='instrumentationkey=<your-instrumentation_key-here>'))\n    logger.setlevel(logging.info)\n    logger.info('hello, world!')\n\nmetrics\n~~~~~~~\n\nthe **azure monitor metrics exporter** allows you to export metrics to `azure monitor`_.\n\n.. code:: python\n\n    from opencensus.ext.azure import metrics_exporter\n    from opencensus.stats import aggregation as aggregation_module\n    from opencensus.stats import measure as measure_module\n    from opencensus.stats import stats as stats_module\n    from opencensus.stats import view as view_module\n    from opencensus.tags import tag_map as tag_map_module\n\n    stats = stats_module.stats\n    view_manager = stats.view_manager\n    stats_recorder = stats.stats_recorder\n\n    carrots_measure = measure_module.measureint(\"carrots\",\n                                                \"number of carrots\",\n                                                \"carrots\")\n    carrots_view = view_module.view(\"carrots_view\",\n                                    \"number of carrots\",\n                                    [],\n                                    carrots_measure,\n                                    aggregation_module.countaggregation())\n\n    def main():\n        # enable metrics\n        # set the interval in seconds to 60s, which is the time interval application insights\n        # aggregates your metrics\n        exporter = metrics_exporter.new_metrics_exporter(\n            connection_string='instrumentationkey=<your-instrumentation-key-here>'\n        )\n        view_manager.register_exporter(exporter)\n\n        view_manager.register_view(carrots_view)\n        mmap = stats_recorder.new_measurement_map()\n        tmap = tag_map_module.tagmap()\n\n        mmap.measure_int_put(carrots_measure, 1000)\n        mmap.record(tmap)\n\n        print(\"done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\nperformance counters\n####################\n\nthe exporter also includes a set of performance counters that are exported to azure monitor by default.\n\n.. code:: python\n\n    import psutil\n    import time\n\n    from opencensus.ext.azure import metrics_exporter\n\n    def main():\n        # performance counters are sent by default. you can disable performance counters by\n        # passing in enable_standard_metrics=false into the constructor of\n        # new_metrics_exporter() \n        _exporter = metrics_exporter.new_metrics_exporter(\n            connection_string='instrumentationkey=<your-instrumentation-key-here>',\n            export_interval=60,\n        )\n\n        for i in range(100):\n            print(psutil.virtual_memory())\n            time.sleep(5)\n\n        print(\"done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\nbelow is a list of performance counters that are currently available:\n\n- available memory (bytes)\n- cpu processor time (percentage)\n- incoming request rate (per second)\n- incoming request average execution time (milliseconds)\n- process cpu usage (percentage)\n- process private bytes (bytes)\n\nmodifying metrics\n#################\n\n* you can pass a callback function to the exporter to process telemetry before it is exported.\n* your callback function can return `false` if you do not want this envelope exported.\n* your callback function must accept an `envelope <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#l86>`_ data type as its parameter.\n* you can see the schema for azure monitor data types in the envelopes `here <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py>`_.\n* the `metricsexporter` handles `metricdata` data types.\n\n.. code:: python\n\n    from opencensus.ext.azure import metrics_exporter\n    from opencensus.stats import aggregation as aggregation_module\n    from opencensus.stats import measure as measure_module\n    from opencensus.stats import stats as stats_module\n    from opencensus.stats import view as view_module\n    from opencensus.tags import tag_map as tag_map_module\n\n    stats = stats_module.stats\n    view_manager = stats.view_manager\n    stats_recorder = stats.stats_recorder\n\n    carrots_measure = measure_module.measureint(\"carrots\",\n                                                \"number of carrots\",\n                                                \"carrots\")\n    carrots_view = view_module.view(\"carrots_view\",\n                                    \"number of carrots\",\n                                    [],\n                                    carrots_measure,\n                                    aggregation_module.countaggregation())\n\n    # callback function to only export the metric if value is greater than 0\n    def callback_function(envelope):\n        return envelope.data.basedata.metrics[0].value > 0\n\n    def main():\n        # enable metrics\n        # set the interval in seconds to 60s, which is the time interval application insights\n        # aggregates your metrics\n        exporter = metrics_exporter.new_metrics_exporter(\n            connection_string='instrumentationkey=<your-instrumentation-key-here>',\n            export_interval=60,\n        )\n        exporter.add_telemetry_processor(callback_function)\n        view_manager.register_exporter(exporter)\n\n        view_manager.register_view(carrots_view)\n        mmap = stats_recorder.new_measurement_map()\n        tmap = tag_map_module.tagmap()\n\n        mmap.measure_int_put(carrots_measure, 1000)\n        mmap.record(tmap)\n\n        print(\"done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\ntrace\n~~~~~\n\nthe **azure monitor trace exporter** allows you to export `opencensus`_ traces to `azure monitor`_.\n\nthis example shows how to send a span \"hello\" to azure monitor.\n\n .. code:: python\n\n    from opencensus.ext.azure.trace_exporter import azureexporter\n    from opencensus.trace.samplers import probabilitysampler\n    from opencensus.trace.tracer import tracer\n\n    tracer = tracer(\n        exporter=azureexporter(\n            connection_string='instrumentationkey=<your-instrumentation-key-here>'\n        ),\n        sampler=probabilitysampler(1.0)\n    )\n\n    with tracer.span(name='hello'):\n        print('hello, world!')\n\nintegrations\n############\n\nopencensus also supports several `integrations <https://github.com/census-instrumentation/opencensus-python#integration>`_ which allows opencensus to integrate with third party libraries.\n\nthis example shows how to integrate with the `requests <https://2.python-requests.org/en/master/>`_ library.\n\n* install the `requests integration package <../opencensus-ext-requests>`_ using ``pip install opencensus-ext-requests``.\n\n.. code:: python\n\n    import requests\n\n    from opencensus.ext.azure.trace_exporter import azureexporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import probabilitysampler\n    from opencensus.trace.tracer import tracer\n\n    config_integration.trace_integrations(['requests'])\n    tracer = tracer(\n        exporter=azureexporter(\n            connection_string='instrumentationkey=<your-instrumentation-key-here>',\n        ),\n        sampler=probabilitysampler(1.0),\n    )\n    with tracer.span(name='parent'):\n        response = requests.get(url='https://www.wikipedia.org/wiki/rabbit')\n\nmodifying traces\n################\n\n* you can pass a callback function to the exporter to process telemetry before it is exported.\n* your callback function can return `false` if you do not want this envelope exported.\n* your callback function must accept an `envelope <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#l86>`_ data type as its parameter.\n* you can see the schema for azure monitor data types in the envelopes `here <https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py>`_.\n* the `azureexporter` handles `data` data types.\n\n.. code:: python\n\n    import requests\n\n    from opencensus.ext.azure.trace_exporter import azureexporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import probabilitysampler\n    from opencensus.trace.tracer import tracer\n\n    config_integration.trace_integrations(['requests'])\n\n    # callback function to add os_type: linux to span properties\n    def callback_function(envelope):\n        envelope.data.basedata.properties['os_type'] = 'linux'\n        return true\n\n    exporter = azureexporter(\n        connection_string='instrumentationkey=<your-instrumentation-key-here>'\n    )\n    exporter.add_telemetry_processor(callback_function)\n    tracer = tracer(exporter=exporter, sampler=probabilitysampler(1.0))\n    with tracer.span(name='parent'):\n        response = requests.get(url='https://www.wikipedia.org/wiki/rabbit')\n\nintegrate with azure functions\n##############################\n\nusers who want to capture custom telemetry in azure functions environments are encouraged to used the opencensus python azure functions `extension <https://github.com/census-ecosystem/opencensus-python-extensions-azure/tree/main/extensions/functions#opencensus-python-azure-functions-extension>`_. more details can be found in this `document <https://docs.microsoft.com/azure/azure-functions/functions-reference-python?tabs=application-level#log-custom-telemetry>`_.\n\nreferences\n----------\n\n* `azure monitor <https://docs.microsoft.com/azure/azure-monitor/>`_\n* `official microsoft docs <https://learn.microsoft.com/previous-versions/azure/azure-monitor/app/opencensus-python>`_\n* `examples <https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure/examples>`_\n* `opencensus project <https://opencensus.io/>`_\n\n.. _azure monitor: https://docs.microsoft.com/azure/azure-monitor/\n.. _opencensus: https://github.com/census-instrumentation/opencensus-python/\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "opencensus-ext-azure",
  "package_url": "https://pypi.org/project/opencensus-ext-azure/",
  "project_url": "https://pypi.org/project/opencensus-ext-azure/",
  "project_urls": {
    "Homepage": "https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure"
  },
  "release_url": "https://pypi.org/project/opencensus-ext-azure/1.1.12/",
  "requires_dist": [
    "azure-core (<2.0.0,>=1.12.0)",
    "azure-identity (<2.0.0,>=1.5.0)",
    "opencensus (<1.0.0,>=0.11.3)",
    "psutil (>=5.6.3)",
    "requests (>=2.19.0)"
  ],
  "requires_python": "",
  "summary": "opencensus azure monitor exporter",
  "version": "1.1.12",
  "releases": [],
  "developers": [
    "census-developers@googlegroups.com",
    "opencensus_authors"
  ],
  "kwds": "azureexporter _azure azureloghandler azure azureeventhandler",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_opencensus_ext_azure",
  "homepage": "https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure",
  "release_count": 29,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_azure_identity",
    "pypi_opencensus",
    "pypi_psutil",
    "pypi_requests"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "typing :: typed"
  ],
  "description": "vector classes and utilities\n<img alt=\"vector logo\" width=\"433\" src=\"https://raw.githubusercontent.com/scikit-hep/vector/main/docs/_images/vector-logo.png\"/>\n\n# vector: arrays of 2d, 3d, and lorentz vectors\n\n[![actions status][actions-badge]][actions-link]\n[![documentation status][rtd-badge]][rtd-link]\n[![pre-commit.ci status][pre-commit-badge]][pre-commit-link]\n[![codecov percentage][codecov-badge]][codecov-link]\n[![github discussion][github-discussions-badge]][github-discussions-link]\n[![gitter][gitter-badge]][gitter-link]\n[![code style: black][black-badge]][black-link]\n\n[![pypi platforms][pypi-platforms]][pypi-link]\n[![pypi version][pypi-version]][pypi-link]\n[![conda latest release][conda-version]][conda-link]\n[![doi][zenodo-badge]][zenodo-link]\n[![license][license-badge]][license-link]\n[![scikit-hep][sk-badge]][sk-link]\n\nvector is a python 3.8+ library (python 3.6 and 3.7 supported till `v0.9.0` and `v1.0.0`, respectively) for 2d, 3d, and [lorentz vectors](https://en.wikipedia.org/wiki/special_relativity#physics_in_spacetime), especially _arrays of vectors_, to solve common physics problems in a numpy-like way.\n\nmain features of vector:\n\n- pure python with numpy as its only dependency. this makes it easier to install.\n- vectors may be represented in a variety of coordinate systems: cartesian, cylindrical, pseudorapidity, and any combination of these with time or proper time for lorentz vectors. in all, there are 12 coordinate systems: {_x_-_y_ vs _\u03c1_-_\u03c6_ in the azimuthal plane} \u00d7 {_z_ vs _\u03b8_ vs _\u03b7_ longitudinally} \u00d7 {_t_ vs _\u03c4_ temporally}.\n- uses names and conventions set by [root](https://root.cern/)'s [tlorentzvector](https://root.cern.ch/doc/master/classtlorentzvector.html) and [math::lorentzvector](https://root.cern.ch/doc/master/classroot_1_1math_1_1lorentzvector.html), as well as [scikit-hep/math](https://github.com/scikit-hep/scikit-hep/tree/master/skhep/math), [uproot-methods tlorentzvector](https://github.com/scikit-hep/uproot3-methods/blob/master/uproot3_methods/classes/tlorentzvector.py), [henryiii/hepvector](https://github.com/henryiii/hepvector), and [coffea.nanoevents.methods.vector](https://coffeateam.github.io/coffea/modules/coffea.nanoevents.methods.vector.html).\n- implemented on a variety of backends:\n  - pure python objects\n  - numpy arrays of vectors (as a [structured array](https://numpy.org/doc/stable/user/basics.rec.html) subclass)\n  - [awkward arrays](https://awkward-array.org/) of vectors\n  - potential for more: cupy, tensorflow, torch, jax...\n- numpy/awkward backends also implemented in [numba](https://numba.pydata.org/) for jit-compiled calculations on vectors.\n- distinction between geometrical vectors, which have a minimum of attribute and method names, and vectors representing momentum, which have synonyms like `pt` = `rho`, `energy` = `t`, `mass` = `tau`.\n\n## installation\n\nto install, use `pip install vector` or your favorite way to install in an environment.\n\n## overview\n\nthis overview is based on the [documentation here](https://vector.readthedocs.io/en/develop/usage/intro.html).\n\n```python\nimport vector\nimport numpy as np\nimport awkward as ak  # at least version 1.2.0\nimport numba as nb\n```\n\n## constructing a vector or an array of vectors\n\nthe easiest way to create one or many vectors is with a helper function:\n\n- `vector.obj` to make a pure python vector object,\n- `vector.arr` to make a numpy array of vectors (or `array`, lowercase, like `np.array`),\n- `vector.awk` to make an awkward array of vectors (or `array`, uppercase, like `ak.array`).\n\n### pure python vectors\n\n```python\n# cartesian 2d vector\nvector.obj(x=3, y=4)\n# same in polar coordinates\nvector.obj(rho=5, phi=0.9273)\n# use \"isclose\" unless they are exactly equal\nvector.obj(x=3, y=4).isclose(vector.obj(rho=5, phi=0.9273))\n# cartesian 3d vector\nvector.obj(x=3, y=4, z=-2)\n# cartesian 4d vector\nvector.obj(x=3, y=4, z=-2, t=10)\n# in rho-phi-eta-t cylindrical coordinates\nvector.obj(rho=5, phi=0.9273, eta=-0.39, t=10)\n# use momentum-synonyms to get a momentum vector\nvector.obj(pt=5, phi=0.9273, eta=-0.39, e=10)\nvector.obj(rho=5, phi=0.9273, eta=-0.39, t=10) == vector.obj(\n    pt=5, phi=0.9273, eta=-0.390035, e=10\n)\n# geometrical vectors have to use geometrical names (\"tau\", not \"mass\")\nvector.obj(rho=5, phi=0.9273, eta=-0.39, t=10).tau\n# momentum vectors can use momentum names (as well as geometrical ones)\nvector.obj(pt=5, phi=0.9273, eta=-0.39, e=10).mass\n# any combination of azimuthal, longitudinal, and temporal coordinates is allowed\nvector.obj(pt=5, phi=0.9273, theta=1.9513, mass=8.4262)\nvector.obj(x=3, y=4, z=-2, t=10).isclose(\n    vector.obj(pt=5, phi=0.9273, theta=1.9513, mass=8.4262)\n)\n\n# test instance type for any level of granularity.\n(\n    # is a vector or array of vectors\n    isinstance(vector.obj(x=1.1, y=2.2), vector.vector),\n    # is 2d (not 3d or 4d)\n    isinstance(vector.obj(x=1.1, y=2.2), vector.vector2d),\n    # is a vector object (not an array)\n    isinstance(vector.obj(x=1.1, y=2.2), vector.vectorobject),\n    # has momentum synonyms\n    isinstance(vector.obj(px=1.1, py=2.2), vector.momentum),\n    # has transverse plane (2d, 3d, or 4d)\n    isinstance(vector.obj(x=1.1, y=2.2, z=3.3, t=4.4), vector.planar),\n    # has all spatial coordinates (3d or 4d)\n    isinstance(vector.obj(x=1.1, y=2.2, z=3.3, t=4.4), vector.spatial),\n    # has temporal coordinates (4d)\n    isinstance(vector.obj(x=1.1, y=2.2, z=3.3, t=4.4), vector.lorentz),\n    # azimuthal coordinate type\n    isinstance(vector.obj(x=1.1, y=2.2, z=3.3, t=4.4).azimuthal, vector.azimuthalxy),\n    # longitudinal coordinate type\n    isinstance(\n        vector.obj(x=1.1, y=2.2, z=3.3, t=4.4).longitudinal, vector.longitudinalz\n    ),\n    # temporal coordinate type\n    isinstance(vector.obj(x=1.1, y=2.2, z=3.3, t=4.4).temporal, vector.temporalt),\n)\n```\n\nthe allowed keyword arguments for 2d vectors are:\n\n- `x` and `y` for cartesian azimuthal coordinates,\n- `px` and `py` for momentum,\n- `rho` and `phi` for polar azimuthal coordinates,\n- `pt` and `phi` for momentum.\n\nfor 3d vectors, you need the above and:\n\n- `z` for the cartesian longitudinal coordinate,\n- `pz` for momentum,\n- `theta` for the spherical polar angle (from $0$ to $\\pi$, inclusive),\n- `eta` for pseudorapidity, which is a kind of spherical polar angle.\n\nfor 4d vectors, you need the above and:\n\n- `t` for the cartesian temporal coordinate,\n- `e` or `energy` to get four-momentum,\n- `tau` for the \"proper time\" (temporal coordinate in the vector's rest coordinate system),\n- `m` or `mass` to get four-momentum.\n\nsince momentum vectors have momentum-synonyms _in addition_ to the geometrical names, any momentum-synonym will make the whole vector a momentum vector.\n\nif you want to bypass the dimension and coordinate system inference through keyword arguments (e.g. for static typing), you can use specialized constructors:\n\n```python\nvector.vectorobject2d.from_xy(1.1, 2.2)\nvector.momentumobject3d.from_rhophiz(1.1, 2.2, 3.3)\nvector.vectorobject4d.from_xyetatau(1.1, 2.2, 3.3, 4.4)\n```\n\nand so on, for all combinations of azimuthal, longitudinal, and temporal coordinates, geometric and momentum-flavored.\n\n### numpy arrays of vectors\n\n```python\n# numpy-like arguments (literally passed through to numpy)\nvector.array(\n    [(1.1, 2.1), (1.2, 2.2), (1.3, 2.3), (1.4, 2.4), (1.5, 2.5)],\n    dtype=[(\"x\", float), (\"y\", float)],\n)\n\n# pandas-like arguments (dict from names to column arrays)\nvector.array({\"x\": [1.1, 1.2, 1.3, 1.4, 1.5], \"y\": [2.1, 2.2, 2.3, 2.4, 2.5]})\n\n# as with objects, the coordinate system and dimension is taken from the names of the fields.\nvector.array(\n    {\n        \"x\": [1.1, 1.2, 1.3, 1.4, 1.5],\n        \"y\": [2.1, 2.2, 2.3, 2.4, 2.5],\n        \"z\": [3.1, 3.2, 3.3, 3.4, 3.5],\n        \"t\": [4.1, 4.2, 4.3, 4.4, 4.5],\n    }\n)\n\nvector.array(\n    {\n        \"pt\": [1.1, 1.2, 1.3, 1.4, 1.5],\n        \"phi\": [2.1, 2.2, 2.3, 2.4, 2.5],\n        \"eta\": [3.1, 3.2, 3.3, 3.4, 3.5],\n        \"m\": [4.1, 4.2, 4.3, 4.4, 4.5],\n    }\n)\n```\n\nexisting numpy arrays can be viewed as arrays of vectors, but it needs to be a [structured array](https://numpy.org/doc/stable/user/basics.rec.html) with recognized field names.\n\n```python\nnp.arange(0, 24, 0.1).view(  # numpy array\n    [\n        (\"x\", float),\n        (\"y\", float),\n        (\"z\", float),\n        (\"t\", float),\n    ]  # interpret groups of four values as named fields\n).view(\n    vector.vectornumpy4d\n)  # give it vector properties and methods\n```\n\nsince `vectornumpy2d`, `vectornumpy3d`, `vectornumpy4d`, and their momentum equivalents are numpy array subclasses, all of the normal numpy methods and functions work on them.\n\n```python\nnp.arange(0, 24, 0.1).view(\n    [(\"x\", float), (\"y\", float), (\"z\", float), (\"t\", float)]\n).view(vector.vectornumpy4d).reshape(6, 5, 2)\n```\n\nall of the keyword arguments and rules that apply to `vector.obj` construction apply to `vector.arr` dtypes.\n\ngeometrical names are used in the dtype, even if momentum-synonyms are used in construction.\n\n```python\nvector.arr({\"px\": [1, 2, 3, 4], \"py\": [1.1, 2.2, 3.3, 4.4], \"pz\": [0.1, 0.2, 0.3, 0.4]})\n```\n\n### awkward arrays of vectors\n\n[awkward arrays](https://awkward-array.org/) are arrays with more complex data structures than numpy allows, such as variable-length lists, nested records, missing and even heterogeneous data (multiple data types: use sparingly).\n\nthe `vector.awk` function behaves exactly like the [ak.array](https://awkward-array.readthedocs.io/en/latest/_auto/ak.array.html) constructor, except that it makes arrays of vectors.\n\n```python\nvector.awk(\n    [\n        [{\"x\": 1, \"y\": 1.1, \"z\": 0.1}, {\"x\": 2, \"y\": 2.2, \"z\": 0.2}],\n        [],\n        [{\"x\": 3, \"y\": 3.3, \"z\": 0.3}],\n        [\n            {\"x\": 4, \"y\": 4.4, \"z\": 0.4},\n            {\"x\": 5, \"y\": 5.5, \"z\": 0.5},\n            {\"x\": 6, \"y\": 6.6, \"z\": 0.6},\n        ],\n    ]\n)\n```\n\nif you want _any_ records named \"`vector2d`\", \"`vector3d`\", \"`vector4d`\", \"`momentum2d`\", \"`momentum3d`\", or \"`momentum4d`\" to be interpreted as vectors, register the behaviors globally.\n\n```python\nvector.register_awkward()\n\nak.array(\n    [\n        [{\"x\": 1, \"y\": 1.1, \"z\": 0.1}, {\"x\": 2, \"y\": 2.2, \"z\": 0.2}],\n        [],\n        [{\"x\": 3, \"y\": 3.3, \"z\": 0.3}],\n        [\n            {\"x\": 4, \"y\": 4.4, \"z\": 0.4},\n            {\"x\": 5, \"y\": 5.5, \"z\": 0.5},\n            {\"x\": 6, \"y\": 6.6, \"z\": 0.6},\n        ],\n    ],\n    with_name=\"vector3d\",\n)\n```\n\nall of the keyword arguments and rules that apply to `vector.obj` construction apply to `vector.awk` field names.\n\n## vector properties\n\nany geometrical coordinate can be computed from vectors in any coordinate system; they'll be provided or computed as needed.\n\n```python\nvector.obj(x=3, y=4).rho\nvector.obj(rho=5, phi=0.9273).x\nvector.obj(rho=5, phi=0.9273).y\nvector.obj(x=1, y=2, z=3).theta\nvector.obj(x=1, y=2, z=3).eta\n```\n\nsome properties are not coordinates, but derived from them.\n\n```python\nvector.obj(x=1, y=2, z=3).costheta\nvector.obj(x=1, y=2, z=3).mag  # spatial magnitude\nvector.obj(x=1, y=2, z=3).mag2  # spatial magnitude squared\n```\n\nthese properties are provided because they can be computed faster or with more numerical stability in different coordinate systems. for instance, the magnitude ignores `phi` in polar coordinates.\n\n```python\nvector.obj(rho=3, phi=0.123456789, z=4).mag2\n```\n\nmomentum vectors have geometrical properties as well as their momentum-synonyms.\n\n```python\nvector.obj(px=3, py=4).rho\nvector.obj(px=3, py=4).pt\nvector.obj(x=1, y=2, z=3, e=4).tau\nvector.obj(x=1, y=2, z=3, e=4).mass\n```\n\nhere's the key thing: _arrays of vectors return arrays of coordinates_.\n\n```python\nvector.arr(\n    {\n        \"x\": [1.0, 2.0, 3.0, 4.0, 5.0],\n        \"y\": [1.1, 2.2, 3.3, 4.4, 5.5],\n        \"z\": [0.1, 0.2, 0.3, 0.4, 0.5],\n    }\n).theta\n\nvector.awk(\n    [\n        [{\"x\": 1, \"y\": 1.1, \"z\": 0.1}, {\"x\": 2, \"y\": 2.2, \"z\": 0.2}],\n        [],\n        [{\"x\": 3, \"y\": 3.3, \"z\": 0.3}],\n        [{\"x\": 4, \"y\": 4.4, \"z\": 0.4}, {\"x\": 5, \"y\": 5.5, \"z\": 0.5}],\n    ]\n).theta\n\n# make a large, random numpy array of 3d momentum vectors.\narray = (\n    np.random.normal(0, 1, 150)\n    .view([(x, float) for x in (\"x\", \"y\", \"z\")])\n    .view(vector.momentumnumpy3d)\n    .reshape(5, 5, 2)\n)\n\n# get the transverse momentum of each one.\narray.pt\n\n# the array and its components have the same shape.\narray.shape\narray.pt.shape\n\n# make a large, random awkward array of 3d momentum vectors.\narray = vector.awk(\n    [\n        [\n            {x: np.random.normal(0, 1) for x in (\"px\", \"py\", \"pz\")}\n            for inner in range(np.random.poisson(1.5))\n        ]\n        for outer in range(50)\n    ]\n)\n\n# get the transverse momentum of each one, in the same nested structure.\narray.pt\n\n# the array and its components have the same list lengths (and can therefore be used together in subsequent calculations).\nak.num(array)\nak.num(array.pt)\n```\n\n## vector methods\n\nvector methods require arguments (in parentheses), which may be scalars or other vectors, depending on the calculation.\n\n```python\nvector.obj(x=3, y=4).rotatez(0.1)\nvector.obj(rho=5, phi=0.4).rotatez(0.1)\n\n# broadcasts a scalar rotation angle of 0.5 to all elements of the numpy array.\nprint(\n    vector.arr({\"rho\": [1, 2, 3, 4, 5], \"phi\": [0.1, 0.2, 0.3, 0.4, 0.5]}).rotatez(0.5)\n)\n\n# matches each rotation angle to an element of the numpy array.\nprint(\n    vector.arr({\"rho\": [1, 2, 3, 4, 5], \"phi\": [0.1, 0.2, 0.3, 0.4, 0.5]}).rotatez(\n        np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n    )\n)\n\n# broadcasts a scalar rotation angle of 0.5 to all elements of the awkward array.\nprint(\n    vector.awk(\n        [[{\"rho\": 1, \"phi\": 0.1}, {\"rho\": 2, \"phi\": 0.2}], [], [{\"rho\": 3, \"phi\": 0.3}]]\n    ).rotatez(0.5)\n)\n\n# broadcasts a rotation angle of 0.1 to both elements of the first list, 0.2 to the empty list, and 0.3 to the only element of the last list.\nprint(\n    vector.awk(\n        [[{\"rho\": 1, \"phi\": 0.1}, {\"rho\": 2, \"phi\": 0.2}], [], [{\"rho\": 3, \"phi\": 0.3}]]\n    ).rotatez([0.1, 0.2, 0.3])\n)\n\n# matches each rotation angle to an element of the awkward array.\nprint(\n    vector.awk(\n        [[{\"rho\": 1, \"phi\": 0.1}, {\"rho\": 2, \"phi\": 0.2}], [], [{\"rho\": 3, \"phi\": 0.3}]]\n    ).rotatez([[0.1, 0.2], [], [0.3]])\n)\n```\n\nsome methods are equivalent to binary operators.\n\n```python\nvector.obj(x=3, y=4).scale(10)\nvector.obj(x=3, y=4) * 10\n10 * vector.obj(x=3, y=4)\nvector.obj(rho=5, phi=0.5) * 10\n```\n\nsome methods involve more than one vector.\n\n```python\nvector.obj(x=1, y=2).add(vector.obj(x=5, y=5))\nvector.obj(x=1, y=2) + vector.obj(x=5, y=5)\nvector.obj(x=1, y=2).dot(vector.obj(x=5, y=5))\nvector.obj(x=1, y=2) @ vector.obj(x=5, y=5)\n```\n\nthe vectors can use different coordinate systems. conversions are necessary, but minimized for speed and numeric stability.\n\n```python\n# both are cartesian, dot product is exact\nvector.obj(x=3, y=4) @ vector.obj(x=6, y=8)\n# one is polar, dot product is approximate\nvector.obj(rho=5, phi=0.9273) @ vector.obj(x=6, y=8)\n# one is polar, dot product is approximate\nvector.obj(x=3, y=4) @ vector.obj(rho=10, phi=0.9273)\n# both are polar, a formula that depends on phi differences is used\nvector.obj(rho=5, phi=0.9273) @ vector.obj(rho=10, phi=0.9273)\n```\n\nin python, some \"operators\" are actually built-in functions, such as `abs`.\n\n```python\nabs(vector.obj(x=3, y=4))\n```\n\nnote that `abs` returns\n\n- `rho` for 2d vectors\n- `mag` for 3d vectors\n- `tau` (`mass`) for 4d vectors\n\nuse the named properties when you want magnitude in a specific number of dimensions; use `abs` when you want the magnitude for any number of dimensions.\n\nthe vectors can be from different backends. normal rules for broadcasting python numbers, numpy arrays, and awkward arrays apply.\n\n```python\nvector.arr({\"x\": [1, 2, 3, 4, 5], \"y\": [0.1, 0.2, 0.3, 0.4, 0.5]}) + vector.obj(\n    x=10, y=5\n)\n\n(\n    vector.awk(\n        [  # an awkward array of vectors\n            [{\"x\": 1, \"y\": 1.1}, {\"x\": 2, \"y\": 2.2}],\n            [],\n            [{\"x\": 3, \"y\": 3.3}],\n            [{\"x\": 4, \"y\": 4.4}, {\"x\": 5, \"y\": 5.5}],\n        ]\n    )\n    + vector.obj(x=10, y=5)  # and a single vector object\n)\n\n(\n    vector.awk(\n        [  # an awkward array of vectors\n            [{\"x\": 1, \"y\": 1.1}, {\"x\": 2, \"y\": 2.2}],\n            [],\n            [{\"x\": 3, \"y\": 3.3}],\n            [{\"x\": 4, \"y\": 4.4}, {\"x\": 5, \"y\": 5.5}],\n        ]\n    )\n    + vector.arr(\n        {\"x\": [4, 3, 2, 1], \"y\": [0.1, 0.1, 0.1, 0.1]}\n    )  # and a numpy array of vectors\n)\n```\n\nsome operations are defined for 2d or 3d vectors, but are usable on higher-dimensional vectors because the additional components can be ignored or are passed through unaffected.\n\n```python\n# deltaphi is a planar operation (defined on the transverse plane)\nvector.obj(rho=1, phi=0.5).deltaphi(vector.obj(rho=2, phi=0.3))\n# but we can use it on 3d vectors\nvector.obj(rho=1, phi=0.5, z=10).deltaphi(vector.obj(rho=2, phi=0.3, theta=1.4))\n# and 4d vectors\nvector.obj(rho=1, phi=0.5, z=10, t=100).deltaphi(\n    vector.obj(rho=2, phi=0.3, theta=1.4, tau=1000)\n)\n# and mixed dimensionality\nvector.obj(rho=1, phi=0.5).deltaphi(vector.obj(rho=2, phi=0.3, theta=1.4, tau=1000))\n```\n\nthis is especially useful for giving 4d vectors all the capabilities of 3d vectors.\n\n```python\nvector.obj(x=1, y=2, z=3).rotatex(np.pi / 4)\nvector.obj(x=1, y=2, z=3, tau=10).rotatex(np.pi / 4)\nvector.obj(pt=1, phi=1.3, eta=2).deltar(vector.obj(pt=2, phi=0.3, eta=1))\nvector.obj(pt=1, phi=1.3, eta=2, mass=5).deltar(\n    vector.obj(pt=2, phi=0.3, eta=1, mass=10)\n)\n```\n\nthe opposite\u2014using low-dimensional vectors in operations defined for higher numbers of dimensions\u2014is sometimes defined. in these cases, a zero longitudinal or temporal component has to be imputed.\n\n```python\nvector.obj(x=1, y=2, z=3) - vector.obj(x=1, y=2)\nvector.obj(x=1, y=2, z=0).is_parallel(vector.obj(x=1, y=2))\n```\n\nand finally, in some cases, the function excludes a higher-dimensional component, even if the input vectors had them.\n\nit would be confusing if the 3d cross-product returned a fourth component.\n\n```python\nvector.obj(x=0.1, y=0.2, z=0.3, t=10).cross(vector.obj(x=0.4, y=0.5, z=0.6, t=20))\n```\n\nthe (current) list of properties and methods is:\n\n**planar (2d, 3d, 4d):**\n\n- `x` (`px`)\n- `y` (`py`)\n- `rho` (`pt`): two-dimensional magnitude\n- `rho2` (`pt2`): two-dimensional magnitude squared\n- `phi`\n- `deltaphi(vector)`: difference in `phi` (signed and rectified to $-\\pi$ through $\\pi$)\n- `rotatez(angle)`\n- `transform2d(obj)`: the `obj` must supply components through `obj[\"xx\"]`, `obj[\"xy\"]`, `obj[\"yx\"]`, `obj[\"yy\"]`\n- `is_parallel(vector, tolerance=1e-5)`: only true _if they're pointing in the same direction_\n- `is_antiparallel(vector, tolerance=1e-5)`: only true _if they're pointing in opposite directions_\n- `is_perpendicular(vector, tolerance=1e-5)`\n\n**spatial (3d, 4d):**\n\n- `z` (`pz`)\n- `theta`\n- `eta`\n- `costheta`\n- `cottheta`\n- `mag` (`p`): three-dimensional magnitude, does not include temporal component\n- `mag2` (`p2`): three-dimensional magnitude squared\n- `cross`: cross-product (strictly 3d)\n- `deltaangle(vector)`: difference in angle (always non-negative)\n- `deltaeta(vector)`: difference in `eta` (signed)\n- `deltar(vector)`: $\\delta r = \\sqrt{\\delta\\phi^2 + \\delta\\eta^2}$\n- `deltar2(vector)`: the above, squared\n- `rotatex(angle)`\n- `rotatey(angle)`\n- `rotate_axis(axis, angle)`: the magnitude of `axis` is ignored, but it must be at least 3d\n- `rotate_euler(phi, theta, psi, order=\"zxz\")`: the arguments are in the same order as [root::math::eulerangles](https://root.cern.ch/doc/master/classroot_1_1math_1_1eulerangles.html), and `order=\"zxz\"` agrees with root's choice of conventions\n- `rotate_nautical(yaw, pitch, roll)`\n- `rotate_quaternion(u, i, j, k)`: again, the conventions match [root::math::quaternion](https://root.cern.ch/doc/master/classroot_1_1math_1_1quaternion.html).\n- `transform3d(obj)`: the `obj` must supply components through `obj[\"xx\"]`, `obj[\"xy\"]`, etc.\n- `is_parallel(vector, tolerance=1e-5)`: only true _if they're pointing in the same direction_\n- `is_antiparallel(vector, tolerance=1e-5)`: only true _if they're pointing in opposite directions_\n- `is_perpendicular(vector, tolerance=1e-5)`\n\n**lorentz (4d only):**\n\n- `t` (`e`, `energy`): follows the [root::math::lorentzvector](https://root.cern/doc/master/lorentzvectorpage.html) behavior of treating spacelike vectors as negative `t` and negative `tau` and truncating wrong-direction timelike vectors\n- `t2` (`e2`, `energy2`)\n- `tau` (`m`, `mass`): see note above\n- `tau2` (`m2`, `mass2`)\n- `beta`: scalar(s) between $0$ (inclusive) and $1$ (exclusive, unless the vector components are infinite)\n- `deltarapidityphi`: $\\delta r_{\\mbox{rapidity}} = \\delta\\phi^2 + \\delta \\mbox{rapidity}^2$\n- `deltarapidityphi2`: the above, squared\n- `gamma`: scalar(s) between $1$ (inclusive) and $\\infty$\n- `rapidity`: scalar(s) between $0$ (inclusive) and $\\infty$\n- `boost_p4(four_vector)`: change coordinate system using another 4d vector as the difference\n- `boost_beta(three_vector)`: change coordinate system using a 3d beta vector (all components between $-1$ and $+1$)\n- `boost(vector)`: uses the dimension of the given `vector` to determine behavior\n- `boostx(beta=none, gamma=none)`: supply `beta` xor `gamma`, but not both\n- `boosty(beta=none, gamma=none)`: supply `beta` xor `gamma`, but not both\n- `boostz(beta=none, gamma=none)`: supply `beta` xor `gamma`, but not both\n- `transform4d(obj)`: the `obj` must supply components through `obj[\"xx\"]`, `obj[\"xy\"]`, etc.\n- `to_beta3()`: turns a `four_vector` (for `boost_p4`) into a `three_vector` (for `boost_beta3`)\n- `is_timelike(tolerance=0)`\n- `is_spacelike(tolerance=0)`\n- `is_lightlike(tolerance=1e-5)`: note the different tolerance\n\n**all numbers of dimensions:**\n\n- `unit()`: note the parentheses\n- `dot(vector)`: can also use the `@` operator\n- `add(vector)`: can also use the `+` operator\n- `subtract(vector)`: can also use the `-` operator\n- `scale(factor)`: can also use the `*` operator\n- `equal(vector)`: can also use the `==` operator, but consider `isclose` instead\n- `not_equal(vector)`: can also use the `!=` operator, but consider `isclose` instead\n- `isclose(vector, rtol=1e-5, atol=1e-8, equal_nan=false)`: works like [np.isclose](https://numpy.org/doc/stable/reference/generated/numpy.isclose.html); arrays also have an [allclose](https://numpy.org/doc/stable/reference/generated/numpy.allclose.html) method\n\n## compiling your python with numba\n\n[numba](https://numba.pydata.org/) is a just-in-time (jit) compiler for a mathematically relevant subset of numpy and python. it allows you to write fast code without leaving the python environment. the drawback of numba is that it can only compile code blocks involving objects and functions that it recognizes.\n\nthe vector library includes extensions to inform numba about vector objects, vector numpy arrays, and vector awkward arrays. at the time of writing, the implementation of vector numpy arrays is incomplete due to [numba/numba#6148](https://github.com/numba/numba/pull/6148).\n\nfor instance, consider the following function:\n\n```python\n@nb.njit\ndef compute_mass(v1, v2):\n    return (v1 + v2).mass\n\n\ncompute_mass(vector.obj(px=1, py=2, pz=3, e=4), vector.obj(px=-1, py=-2, pz=-3, e=4))\n```\n\nwhen the two `momentumobject4d` objects are passed as arguments, numba recognizes them and replaces the python objects with low-level structs. when it compiles the function, it recognizes `+` as the 4d `add` function and recognizes `.mass` as the `tau` component of the result.\n\nalthough this demonstrates that numba can manipulate vector objects, there is no performance advantage (and a likely disadvantage) to compiling a calculation on just a few vectors. the advantage comes when many vectors are involved, in arrays.\n\n```python\n# this is still not a large number. you want millions.\narray = vector.awk(\n    [\n        [\n            dict(\n                {x: np.random.normal(0, 1) for x in (\"px\", \"py\", \"pz\")},\n                e=np.random.normal(10, 1),\n            )\n            for inner in range(np.random.poisson(1.5))\n        ]\n        for outer in range(50)\n    ]\n)\n\n\n@nb.njit\ndef compute_masses(array):\n    out = np.empty(len(array), np.float64)\n    for i, event in enumerate(array):\n        total = vector.obj(px=0.0, py=0.0, pz=0.0, e=0.0)\n        for vec in event:\n            total = total + vec\n        out[i] = total.mass\n    return out\n\n\ncompute_masses(array)\n```\n\n## talks about vector\n\n- 13th september 2022 - [constructing hep vectors and analyzing hep data using vector](https://indi.to/bpmmc) - [pyhep 2022 (virtual)](https://indico.cern.ch/event/1150631/) [\ud83c\udfa5](https://www.youtube.com/watch?v=4ivemzrbe7s&list=plkz9c4onm-vkohkg-skzeg_gklmasgao7&index=15)\n- 20th july 2022 - [analysis grand challenge / hep scientific python ecosystem](https://indico.cern.ch/event/1151329/timetable/#3-analysis-grand-challenge-hep) - [dance/codas@snowmass 2022 computational and data science software training](https://indico.cern.ch/event/1151329/)\n- 25th april 2022 - [foundation libraries (uproot, awkward, hist, mplhep)](https://indico.cern.ch/event/1126109/contributions/4780138/) - [iris-hep agc tools 2022 workshop](https://indico.cern.ch/event/1126109/) [\ud83c\udfa5](https://www.youtube.com/watch?v=o9kvsdmkomy)\n- 3rd november 2021 - [data handling: uproot, awkward & vector](https://indico.cern.ch/event/1076231/contributions/4560398/) - [iris-hep agc tools 2021 workshop](https://indico.cern.ch/event/1076231/) [\ud83c\udfa5](https://indico.cern.ch/event/1076231/contributions/4560398/attachments/2338579/4017718/agc_uproot_awk.mp4)\n\n### status as of april 8, 2021\n\nundoubtedly, there are rough edges, but most of the functionality is there and vector is ready for user-testing. it can only be improved by your feedback!\n\n## contributors \u2728\n\nthanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- all-contributors-list:start - do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/jpivarski\"><img src=\"https://avatars.githubusercontent.com/u/1852447?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>jim pivarski</b></sub></a><br /><a href=\"#maintenance-jpivarski\" title=\"maintenance\">\ud83d\udea7</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=jpivarski\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=jpivarski\" title=\"documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"https://github.com/henryiii\"><img src=\"https://avatars.githubusercontent.com/u/4616906?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>henry schreiner</b></sub></a><br /><a href=\"#maintenance-henryiii\" title=\"maintenance\">\ud83d\udea7</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=henryiii\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=henryiii\" title=\"documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"https://github.com/eduardo-rodrigues\"><img src=\"https://avatars.githubusercontent.com/u/5013581?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>eduardo rodrigues</b></sub></a><br /><a href=\"#maintenance-eduardo-rodrigues\" title=\"maintenance\">\ud83d\udea7</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=eduardo-rodrigues\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/scikit-hep/vector/commits?author=eduardo-rodrigues\" title=\"documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"http://lovelybuggies.com.cn/\"><img src=\"https://avatars.githubusercontent.com/u/29083689?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>n!no</b></sub></a><br /><a href=\"https://github.com/scikit-hep/vector/commits?author=lovelybuggies\" title=\"documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"https://github.com/pfackeldey\"><img src=\"https://avatars.githubusercontent.com/u/18463582?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>peter fackeldey</b></sub></a><br /><a href=\"https://github.com/scikit-hep/vector/commits?author=pfackeldey\" title=\"documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kreczko\"><img src=\"https://avatars.githubusercontent.com/u/1213276?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>luke kreczko</b></sub></a><br /><a href=\"https://github.com/scikit-hep/vector/commits?author=kreczko\" title=\"code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nsmith-\"><img src=\"https://avatars.githubusercontent.com/u/6587412?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>nicholas smith</b></sub></a><br /><a href=\"#ideas-nsmith-\" title=\"ideas, planning, & feedback\">\ud83e\udd14</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/mayou36\"><img src=\"https://avatars.githubusercontent.com/u/17454848?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>jonas eschle</b></sub></a><br /><a href=\"#ideas-mayou36\" title=\"ideas, planning, & feedback\">\ud83e\udd14</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- all-contributors-list:end -->\n\nthis project follows the\n[all-contributors](https://github.com/all-contributors/all-contributors)\nspecification. contributions of any kind welcome! see\n[contributing.md](./.github/contributing.md) for information on setting up a\ndevelopment environment.\n\n## acknowledgements\n\nthis library was primarily developed by jim pivarski, henry schreiner, and eduardo rodrigues.\n\nsupport for this work was provided by the national science foundation cooperative agreement oac-1836650 (iris-hep) and oac-1450377 (diana/hep). any opinions, findings, conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the national science foundation.\n\n[actions-badge]: https://github.com/scikit-hep/vector/actions/workflows/ci.yml/badge.svg\n[actions-link]: https://github.com/scikit-hep/vector/actions\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[black-link]: https://github.com/psf/black\n[codecov-badge]: https://codecov.io/gh/scikit-hep/vector/branch/main/graph/badge.svg?token=ybv60ueorq\n[codecov-link]: https://codecov.io/gh/scikit-hep/vector\n[conda-version]: https://img.shields.io/conda/vn/conda-forge/vector.svg\n[conda-link]: https://github.com/conda-forge/vector-feedstock\n[github-discussions-badge]: https://img.shields.io/static/v1?label=discussions&message=ask&color=blue&logo=github\n[github-discussions-link]: https://github.com/scikit-hep/vector/discussions\n[gitter-badge]: https://badges.gitter.im/scikit-hep/vector.svg\n[gitter-link]: https://gitter.im/scikit-hep/vector?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-badge]: https://img.shields.io/badge/license-bsd_3--clause-blue.svg\n[license-link]: https://opensource.org/licenses/bsd-3-clause\n[pre-commit-badge]: https://results.pre-commit.ci/badge/github/scikit-hep/vector/develop.svg\n[pre-commit-link]: https://results.pre-commit.ci/repo/github/scikit-hep/vector\n[pypi-link]: https://pypi.org/project/vector/\n[pypi-platforms]: https://img.shields.io/pypi/pyversions/vector\n[pypi-version]: https://badge.fury.io/py/vector.svg\n[rtd-badge]: https://readthedocs.org/projects/vector/badge/?version=latest\n[rtd-link]: https://vector.readthedocs.io/en/latest/?badge=latest\n[sk-badge]: https://scikit-hep.org/assets/images/scikit--hep-project-blue.svg\n[sk-link]: https://scikit-hep.org/\n[zenodo-badge]: https://zenodo.org/badge/doi/10.5281/zenodo.7054478.svg\n[zenodo-link]: https://doi.org/10.5281/zenodo.7054478\n",
  "docs_url": null,
  "keywords": "vector",
  "license": "",
  "name": "vector",
  "package_url": "https://pypi.org/project/vector/",
  "project_url": "https://pypi.org/project/vector/",
  "project_urls": {
    "Bug Tracker": "https://github.com/scikit-hep/vector/issues",
    "Changelog": "https://vector.readthedocs.io/en/latest/changelog.html",
    "Discussions": "https://github.com/scikit-hep/vector/discussions",
    "Documentation": "https://vector.readthedocs.io/",
    "Homepage": "https://github.com/scikit-hep/vector"
  },
  "release_url": "https://pypi.org/project/vector/1.1.1.post1/",
  "requires_dist": [
    "numpy>=1.13.3",
    "packaging>=19",
    "awkward>=1.2; extra == 'awkward'",
    "awkward>=1.2; extra == 'dev'",
    "numba>=0.57; python_version < '3.12' and extra == 'dev'",
    "papermill>=2.4; extra == 'dev'",
    "pytest-cov>=3; extra == 'dev'",
    "pytest>=6; extra == 'dev'",
    "xdoctest>=1; extra == 'dev'",
    "awkward>=1.2; extra == 'docs'",
    "ipykernel; extra == 'docs'",
    "myst-parser>0.13; extra == 'docs'",
    "nbsphinx; extra == 'docs'",
    "sphinx-book-theme>=0.0.42; extra == 'docs'",
    "sphinx-copybutton; extra == 'docs'",
    "sphinx-math-dollar; extra == 'docs'",
    "sphinx>=4; extra == 'docs'",
    "papermill>=2.4; extra == 'test'",
    "pytest-cov>=3; extra == 'test'",
    "pytest>=6; extra == 'test'",
    "xdoctest>=1; extra == 'test'",
    "spark-parser; extra == 'test-extras'",
    "uncompyle6; extra == 'test-extras'"
  ],
  "requires_python": ">=3.8",
  "summary": "vector classes and utilities",
  "version": "1.1.1.post1",
  "releases": [],
  "developers": [
    "eduardo.rodrigues@cern.ch",
    "scikit-hep-admins@googlegroups.com"
  ],
  "kwds": "badge badges svg logo code",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_vector",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": [
    "pypi_awkward",
    "pypi_ipykernel",
    "pypi_myst_parser",
    "pypi_nbsphinx",
    "pypi_numba",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_papermill",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_spark_parser",
    "pypi_sphinx",
    "pypi_sphinx_book_theme",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_math_dollar",
    "pypi_uncompyle6",
    "pypi_xdoctest"
  ],
  "documentation_summary": "The HTML text provides detailed information about the Python package \"vector,\" available on PyPI (Python Package Index). Version 1.3.0 of the package was released on March 5, 2024. It is a library for handling 2D, 3D, and Lorentz vectors, particularly arrays of vectors, to address common physics problems in a manner similar to NumPy. The package requires Python 3.8 or higher and is licensed under the BSD License. The authors and maintainers include Jim Pivarski, Henry Schreiner, Eduardo Rodrigues, and the Scikit-HEP admins. The package is designed for developers and researchers in science, particularly in fields like physics and engineering. It supports various coordinate systems and offers features like JIT-compiled calculations with Numba for performance. The documentation provides comprehensive guides on constructing vectors, manipulating arrays of vectors, and utilizing vector properties and methods.",
  "embedding": [
    -0.016478918492794037,
    0.020513705909252167,
    -0.012182224541902542,
    -0.02882395125925541,
    0.0032349079847335815,
    0.008501366712152958,
    0.03179695084691048,
    -0.009676409885287285,
    -0.016181617975234985,
    -0.02665790729224682,
    0.006154819391667843,
    0.0074325017631053925,
    -0.015572860836982727,
    0.0279178936034441,
    -0.00037472197436727583,
    -0.012798060663044453,
    0.0033304686658084393,
    -0.016875319182872772,
    0.01369703933596611,
    0.014751746319234371,
    0.015856003388762474,
    0.0019660736434161663,
    -0.01762564666569233,
    -0.028257664293050766,
    0.002158964751288295,
    0.031202351674437523,
    0.0008016484207473695,
    -0.014978260733187199,
    0.015558703802525997,
    -0.0055354442447423935,
    0.026473864912986755,
    -0.0015979879535734653,
    -0.008140359073877335,
    -0.01206188928335905,
    -0.048049356788396835,
    -0.0005224872147664428,
    0.012621096335351467,
    -0.00919506698846817,
    0.02072606235742569,
    0.017356662079691887,
    0.022849634289741516,
    0.03258975222706795,
    -0.0015431289793923497,
    0.009088887833058834,
    -0.0005362019292078912,
    -0.0025429774541407824,
    0.015544546768069267,
    -0.02958843670785427,
    -0.00988168828189373,
    0.017498232424259186,
    0.025511177256703377,
    0.04796441271901131,
    -0.001044089556671679,
    -0.02487410604953766,
    0.009492366574704647,
    -0.02333097718656063,
    -0.013491760939359665,
    0.04394378140568733,
    -0.0016537316842004657,
    -0.019565176218748093,
    0.006806048098951578,
    0.010065731592476368,
    -0.020386291667819023,
    -0.012861767783761024,
    -0.020938418805599213,
    -0.02020224742591381,
    -0.008650016970932484,
    0.024831635877490044,
    -0.006087572779506445,
    0.009931238368153572,
    0.05022955685853958,
    0.01622409000992775,
    -0.0030278596095740795,
    0.011771667748689651,
    0.03788452595472336,
    -0.012203460559248924,
    -0.030211349949240685,
    0.02517140656709671,
    -0.0055106692016124725,
    -0.02034381963312626,
    -0.003229598980396986,
    0.007397109176963568,
    0.0015050816582515836,
    0.00036498892586678267,
    0.01965012028813362,
    0.007751037832349539,
    -0.009867531247437,
    0.029135407879948616,
    -0.011453131213784218,
    0.002086409367620945,
    0.01116998866200447,
    -0.009570230729877949,
    0.0011086815502494574,
    0.028512492775917053,
    0.010256852954626083,
    0.026148250326514244,
    -0.006034483667463064,
    0.029220350086688995,
    -0.011863688938319683,
    -0.01616746187210083,
    -0.002005005953833461,
    0.006515826564282179,
    -0.04346244037151337,
    -0.011842452920973301,
    -0.04309435561299324,
    -0.017738904803991318,
    -0.016393976286053658,
    -0.006073415745049715,
    0.005241683684289455,
    0.016790375113487244,
    -0.03847912326455116,
    0.019225405529141426,
    -0.013428053818643093,
    -0.040121354162693024,
    0.026247350499033928,
    -0.0011122208088636398,
    0.021646277979016304,
    0.012295481748878956,
    0.0006224720273166895,
    -0.0018138843588531017,
    0.0077864304184913635,
    0.021065834909677505,
    0.017753060907125473,
    -0.02695520780980587,
    0.018956419080495834,
    -0.004247143864631653,
    0.011700881645083427,
    -0.016847005113959312,
    -0.011757509782910347,
    -0.018319347873330116,
    -0.007800587918609381,
    0.025157248601317406,
    0.0027995756827294827,
    -0.01923956163227558,
    -0.0074325017631053925,
    -0.002401405945420265,
    -0.009541916660964489,
    0.012932552956044674,
    -0.024081306532025337,
    -0.01107796747237444,
    0.002072252333164215,
    0.016379818320274353,
    -0.025766007602214813,
    -0.001957225613296032,
    -0.01874406263232231,
    0.029192036017775536,
    0.011934474110603333,
    0.004477197770029306,
    0.004838204942643642,
    -0.01310951728373766,
    0.03493983671069145,
    0.007025483995676041,
    -0.019508548080921173,
    0.02777632139623165,
    -0.011559310369193554,
    0.0002309384581167251,
    -0.014567703939974308,
    -0.006908687297254801,
    -0.013477603904902935,
    -0.017639804631471634,
    0.009421581402420998,
    0.013937710784375668,
    -0.010065731592476368,
    -0.022085148841142654,
    0.01628071814775467,
    0.02964506484568119,
    -0.01613914780318737,
    -0.030041465535759926,
    -0.011191224679350853,
    0.008402266539633274,
    -0.015077360905706882,
    0.011644252575933933,
    -0.047143299132585526,
    -0.020357977598905563,
    0.0008374836761504412,
    0.001517469179816544,
    0.028965521603822708,
    0.012614017352461815,
    -0.023585805669426918,
    0.001260870834812522,
    0.025567807257175446,
    -0.007138741202652454,
    -0.004328547511249781,
    0.04043281078338623,
    -0.004399333149194717,
    -3.3059841371141374e-06,
    0.02107999101281166,
    -0.027493178844451904,
    0.026289820671081543,
    0.00043665949488058686,
    0.026728693395853043,
    0.03230660781264305,
    0.0024031756911426783,
    -0.03309940919280052,
    -0.5939205884933472,
    -0.026799477636814117,
    -0.0031517348252236843,
    -0.05662858486175537,
    0.008451816625893116,
    -0.020499547943472862,
    0.00014068665041122586,
    0.028554964810609818,
    -0.030381236225366592,
    0.029899893328547478,
    -0.017937105149030685,
    0.020074833184480667,
    -0.009428659453988075,
    -0.007864294573664665,
    -0.02528466284275055,
    -0.015204775147140026,
    -0.0013944789534434676,
    -0.032051779329776764,
    -0.006823744624853134,
    0.006048640701919794,
    -0.03754475340247154,
    0.021773692220449448,
    -0.02613409236073494,
    0.020457075908780098,
    0.03066437877714634,
    0.03256143629550934,
    0.02651633508503437,
    0.0018705129623413086,
    0.01967843435704708,
    0.01698857545852661,
    -0.012628174386918545,
    0.0019660736434161663,
    -0.0009644555975683033,
    -0.02289210632443428,
    0.028215192258358,
    0.01122661679983139,
    -0.029220350086688995,
    0.030041465535759926,
    -0.0004543559334706515,
    0.029928207397460938,
    -0.02440692111849785,
    -0.02873900718986988,
    0.004094954580068588,
    0.017767218872904778,
    -0.004629387054592371,
    0.00012763551785610616,
    0.006423805374652147,
    0.008685409091413021,
    -0.016733746975660324,
    -0.018404290080070496,
    0.002647386398166418,
    -0.010122359730303288,
    0.016422290354967117,
    -0.0001782915642252192,
    0.010462131351232529,
    -0.007255537435412407,
    0.018050361424684525,
    -0.0003322505217511207,
    0.003705633105710149,
    -0.007283851969987154,
    -0.0002150116633856669,
    -0.003673779545351863,
    7.991045276867226e-05,
    -0.012720196507871151,
    0.022325819358229637,
    -0.008069573901593685,
    -0.0016103754751384258,
    0.008175752125680447,
    -0.02978663705289364,
    -0.012875924818217754,
    0.014079282060265541,
    0.019961576908826828,
    -0.016153303906321526,
    0.007248458918184042,
    0.017682276666164398,
    0.038139354437589645,
    0.04402872547507286,
    0.003790576010942459,
    -0.007984630763530731,
    0.016733746975660324,
    0.0010184297570958734,
    -0.002615532837808132,
    -0.009025180712342262,
    -0.022056834772229195,
    0.04595409706234932,
    0.022240877151489258,
    -0.012500760145485401,
    0.010306403040885925,
    0.03363737836480141,
    -0.001722747809253633,
    0.01657801866531372,
    0.03941349685192108,
    -0.0019943879451602697,
    -0.04686015471816063,
    0.008784509263932705,
    0.017342504113912582,
    0.004378097597509623,
    0.0023907881695777178,
    -0.038167666643857956,
    -0.010943474248051643,
    -0.01141773909330368,
    -0.024279506877064705,
    -0.012507839128375053,
    -0.014879160560667515,
    -0.019013047218322754,
    0.009534838609397411,
    -0.015827689319849014,
    0.01087268814444542,
    0.012826374731957912,
    -0.012019417248666286,
    -0.01929619163274765,
    -0.035534437745809555,
    -0.010044495575129986,
    -0.01836181990802288,
    0.010596624575555325,
    -0.027818793430924416,
    0.021702906116843224,
    -0.001971382647752762,
    -0.0007366140489466488,
    -0.006002630107104778,
    0.013102439232170582,
    -0.014723432250320911,
    0.015686118975281715,
    0.0059318444691598415,
    0.02435029111802578,
    0.009747195057570934,
    0.014680961146950722,
    -0.0022828399669378996,
    -0.05917687341570854,
    -0.00037781885475851595,
    0.01721508987247944,
    0.025157248601317406,
    0.023486705496907234,
    -0.010865610092878342,
    0.03890383988618851,
    -0.008168673142790794,
    0.03522298112511635,
    0.005245222710072994,
    -0.01567196100950241,
    -0.0008848216384649277,
    0.0010821368778124452,
    -0.015714433044195175,
    -0.0013723584124818444,
    -0.02382647804915905,
    -0.01581353321671486,
    -0.01952270418405533,
    0.015218932181596756,
    0.014992417767643929,
    0.0027464863378554583,
    0.01833350397646427,
    -0.012288402765989304,
    0.001996157690882683,
    -0.024491863325238228,
    0.018291033804416656,
    0.006975933909416199,
    -0.01715846173465252,
    -0.023161090910434723,
    -0.02418040670454502,
    -0.013378503732383251,
    0.007517444901168346,
    0.007743959315121174,
    0.022297505289316177,
    -0.013201539404690266,
    -0.0002599163562990725,
    -0.02099504880607128,
    -0.029305294156074524,
    -0.03131560981273651,
    0.03165537863969803,
    0.00029929092852398753,
    -0.04388715326786041,
    0.007283851969987154,
    -0.00651228753849864,
    -0.005054101347923279,
    0.008416423574090004,
    0.017993733286857605,
    0.01935281977057457,
    0.011566388420760632,
    0.0078926095739007,
    -0.016068361699581146,
    -0.018191933631896973,
    0.0019271415658295155,
    -0.010624938644468784,
    -0.03904540836811066,
    -0.01107796747237444,
    0.023543335497379303,
    0.02800283581018448,
    0.015063203871250153,
    0.0153463464230299,
    0.008281930349767208,
    -0.021561333909630775,
    -0.012125596404075623,
    0.0027659526094794273,
    -0.02435029111802578,
    0.019112147390842438,
    -0.03343918174505234,
    -0.003130499040707946,
    -0.0023394685704261065,
    0.03678026795387268,
    -0.003411872312426567,
    0.021122463047504425,
    0.008515523746609688,
    0.03989483788609505,
    -0.013576703146100044,
    -0.015133989974856377,
    0.01017190981656313,
    -0.0315704382956028,
    0.013251089490950108,
    -0.0298149511218071,
    0.009315402247011662,
    -0.00198023091070354,
    0.040036410093307495,
    -0.0025836792774498463,
    -0.03445849567651749,
    -0.017710590735077858,
    0.002751795342192054,
    0.009322481229901314,
    -0.0008104966254904866,
    0.006091112270951271,
    -0.007871373556554317,
    0.008154516108334064,
    0.003917990252375603,
    -0.00017331444541923702,
    0.02207099087536335,
    0.007283851969987154,
    -0.015063203871250153,
    0.002985388273373246,
    0.0012874155072495341,
    0.011792902834713459,
    0.005496512167155743,
    -0.03539286553859711,
    -0.016889475286006927,
    0.0012281325180083513,
    0.005411569494754076,
    -0.006406108848750591,
    0.002482809592038393,
    -0.007298009004443884,
    0.03805441036820412,
    -0.017031047493219376,
    0.033609066158533096,
    0.006154819391667843,
    -0.0009830368217080832,
    0.01759733259677887,
    0.01850339025259018,
    -0.018050361424684525,
    0.0009529529488645494,
    -0.0037339474074542522,
    0.029248664155602455,
    -0.0027093240059912205,
    0.00506471935659647,
    -0.0039887758903205395,
    0.014213775284588337,
    -0.011007181368768215,
    -0.01897057704627514,
    0.012040653266012669,
    0.005825665779411793,
    -0.02350086346268654,
    -0.0029128328897058964,
    -0.0055885338224470615,
    0.05045606940984726,
    0.012875924818217754,
    0.02715340629220009,
    -0.014135911129415035,
    0.018489234149456024,
    0.013378503732383251,
    0.03666700795292854,
    -0.009626859799027443,
    0.006706948392093182,
    -0.033722322434186935,
    -0.00923753809183836,
    -0.0021731220185756683,
    -0.01369703933596611,
    -0.03856406733393669,
    -0.014334110543131828,
    -0.008296088315546513,
    0.04317929595708847,
    -0.00040303627611137927,
    0.008784509263932705,
    -0.00040546953096054494,
    0.003420720575377345,
    0.0165213905274868,
    -0.0089190024882555,
    -0.05201335623860359,
    0.005907069426029921,
    0.0306926928460598,
    0.006763576529920101,
    -0.005599151365458965,
    -0.007708566263318062,
    0.004257761873304844,
    0.007411266211420298,
    0.016422290354967117,
    0.026388920843601227,
    0.02956012263894081,
    -0.0018138843588531017,
    0.01302457507699728,
    -0.00672464445233345,
    0.008126202039420605,
    0.025100620463490486,
    -0.012238853611052036,
    -0.01696026138961315,
    -0.005892912391573191,
    0.013845689594745636,
    -0.01976337656378746,
    0.006370715796947479,
    -0.0026526954025030136,
    0.05425018444657326,
    0.03125897794961929,
    0.024959050118923187,
    -0.022708063945174217,
    0.006416726857423782,
    -0.00560622988268733,
    -0.006735262461006641,
    -0.030041465535759926,
    0.005365558434277773,
    6.39283680357039e-05,
    0.005839822813868523,
    0.010079888626933098,
    0.011113359592854977,
    -7.368905244220514e-06,
    0.01952270418405533,
    -0.011679645627737045,
    -0.010667409747838974,
    -0.010306403040885925,
    -0.0134492889046669,
    0.009917081333696842,
    0.02803114987909794,
    0.005330165848135948,
    -0.007262615952640772,
    -0.00040281505789607763,
    -0.04300941154360771,
    -0.0009184448863379657,
    -0.013520075008273125,
    0.010589545592665672,
    0.01077358890324831,
    0.006002630107104778,
    -0.024944892153143883,
    -0.005050561856478453,
    0.010341795161366463,
    0.0040064724162220955,
    0.010433817282319069,
    0.027082622051239014,
    -0.008267773315310478,
    0.013994338922202587,
    0.0033817882649600506,
    -0.029390236362814903,
    0.0287956353276968,
    0.005312469322234392,
    0.0179795753210783,
    0.014058046974241734,
    0.003121650777757168,
    -0.004969158209860325,
    0.003691476071253419,
    0.003705633105710149,
    0.0007467895047739148,
    -0.01967843435704708,
    -0.015006575733423233,
    0.013895239681005478,
    -0.009775510057806969,
    0.043604012578725815,
    -0.044538382440805435,
    0.015530389733612537,
    0.0229487344622612,
    0.03400546684861183,
    -0.009152594953775406,
    0.014567703939974308,
    0.019635962322354317,
    0.011807059869170189,
    -0.0012431744253262877,
    0.0034897367004305124,
    -0.019720904529094696,
    0.0024615738075226545,
    0.00019289112242404372,
    0.008664174005389214,
    -0.013994338922202587,
    0.01897057704627514,
    0.002681009704247117,
    0.031910207122564316,
    -0.03307109326124191,
    -0.01613914780318737,
    0.014489839784801006,
    -0.002581909531727433,
    0.01660633273422718,
    -0.016677118837833405,
    -0.02037213370203972,
    -0.03845081105828285,
    -0.009428659453988075,
    -0.02124987728893757,
    0.00207933085039258,
    -0.02040044777095318,
    -0.007736880797892809,
    -0.012982103042304516,
    -0.010865610092878342,
    0.008848216384649277,
    -0.028130250051617622,
    -0.022113462910056114,
    -0.02195773459970951,
    -0.033722322434186935,
    -0.004123269114643335,
    0.0027075542602688074,
    0.03417535126209259,
    -0.013003339059650898,
    0.004102033097296953,
    0.015827689319849014,
    -0.002942916937172413,
    -0.015983417630195618,
    -0.005800890736281872,
    -0.04343412443995476,
    -0.010363031178712845,
    -0.026247350499033928,
    0.008982709608972073,
    0.01366872526705265,
    -0.0184184480458498,
    0.011085045523941517,
    0.014723432250320911,
    0.013852767646312714,
    0.011523917317390442,
    0.007397109176963568,
    0.015034889802336693,
    -0.016818689182400703,
    0.004675397649407387,
    0.04227323830127716,
    -0.011127517558634281,
    0.011644252575933933,
    -0.001429871772415936,
    -0.024081306532025337,
    0.009357874281704426,
    -0.0015192388091236353,
    0.023458391427993774,
    -0.006565376650542021,
    0.02464759163558483,
    -0.017852161079645157,
    -0.013803217560052872,
    0.013031653128564358,
    -0.012706039473414421,
    -0.003822429571300745,
    0.01398726087063551,
    -0.020895948633551598,
    0.02028719149529934,
    0.013222774490714073,
    0.008749116212129593,
    -0.00025770431966520846,
    0.032957836985588074,
    -0.0003114572318736464,
    -0.005050561856478453,
    -0.025978364050388336,
    0.0007874912698753178,
    -0.002259834436699748,
    -0.009478209540247917,
    0.009456973522901535,
    -6.42048689769581e-05,
    0.03983820974826813,
    -0.004636465571820736,
    -0.009641016833484173,
    -0.035591065883636475,
    0.02300536260008812,
    0.05289109796285629,
    0.020457075908780098,
    -0.024859949946403503,
    0.019041361287236214,
    0.0017749522812664509,
    -0.004544443916529417,
    -0.01625240407884121,
    0.004912530072033405,
    -0.007496208883821964,
    -0.01371119637042284,
    0.004675397649407387,
    0.01185660995543003,
    0.005316008348017931,
    -0.019451919943094254,
    -0.011368189007043839,
    -0.021886948496103287,
    -0.038337551057338715,
    0.011807059869170189,
    0.012302560731768608,
    0.025242192670702934,
    -0.013633332215249538,
    0.0009405654272995889,
    0.007517444901168346,
    -0.046322181820869446,
    -0.011148752644658089,
    0.0022049755789339542,
    -0.005054101347923279,
    0.0027571043465286493,
    0.018701590597629547,
    0.042811211198568344,
    0.03168369457125664,
    -0.019423605874180794,
    0.016068361699581146,
    0.0002537226246204227,
    -0.01310951728373766,
    0.02756396494805813,
    -0.014553546905517578,
    0.002440338023006916,
    -0.01613914780318737,
    0.007375873159617186,
    0.016450604423880577,
    -0.01803620532155037,
    -0.005790272727608681,
    -0.011085045523941517,
    0.004084336571395397,
    0.018659118562936783,
    0.03680858016014099,
    0.010440895333886147,
    -0.00744665926322341,
    -0.03142886608839035,
    0.0003822429571300745,
    0.007581152021884918,
    0.00033136570709757507,
    0.034515123814344406,
    -0.037459809333086014,
    0.0009387957979924977,
    0.017965419217944145,
    -0.003387097269296646,
    0.007637780625373125,
    0.01400141790509224,
    -0.009294167160987854,
    0.009888767264783382,
    0.0062822336331009865,
    0.012543232180178165,
    0.03403377905488014,
    -0.007262615952640772,
    0.01207604631781578,
    -0.034713324159383774,
    -0.0037622617091983557,
    -0.0016165691195055842,
    0.02127819135785103,
    0.012769746594130993,
    -0.008586308918893337,
    0.037346553057432175,
    -0.0157852191478014,
    0.016040047630667686,
    -0.002291687997058034,
    -0.0039887758903205395,
    0.023104462772607803,
    -0.000435332243796438,
    -0.025072306394577026,
    -0.011495603248476982,
    -0.04383052513003349,
    -0.036355551332235336,
    -0.0005211599636822939,
    0.0019041361520066857,
    0.019933262839913368,
    0.012635253369808197,
    -0.032816264778375626,
    0.009534838609397411,
    0.014093439094722271,
    -0.0010166601277887821,
    0.035676009953022,
    0.008458894677460194,
    0.040064726024866104,
    0.02774800732731819,
    0.0017749522812664509,
    -0.00893315952271223,
    -0.02388310618698597,
    -0.009662252850830555,
    0.0070537980645895,
    0.03516635298728943,
    0.015020732767879963,
    -0.03519466519355774,
    -0.007963394746184349,
    0.020513705909252167,
    0.006572455167770386,
    -0.02961675077676773,
    -0.03949843719601631,
    0.04439681023359299,
    -0.010363031178712845,
    -0.009966631419956684,
    -0.02569522149860859,
    -0.002530589932575822,
    -0.03239155188202858,
    0.022240877151489258,
    0.013173224404454231,
    -0.003279149066656828,
    0.002999545307829976,
    0.01715846173465252,
    -0.013187382370233536,
    0.02508646436035633,
    4.808452649740502e-05,
    0.03762969374656677,
    0.027988677844405174,
    -0.020046519115567207,
    -0.003949843812733889,
    -0.01564364694058895,
    -0.01018606685101986,
    0.020159777253866196,
    0.006876833736896515,
    0.011318638920783997,
    -0.0047532618045806885,
    -0.03165537863969803,
    0.022793006151914597,
    0.021391447633504868,
    -0.017724746838212013,
    -0.010249773971736431,
    0.004979776218533516,
    0.042697954922914505,
    -0.04125392436981201,
    -0.004926687106490135,
    0.001824502251110971,
    -0.042754583060741425,
    0.016847005113959312,
    0.00919506698846817,
    -0.028993835672736168,
    -0.01946607604622841,
    0.013619175180792809,
    -0.017172617837786674,
    0.018843162804841995,
    0.005730105098336935,
    -0.00960562378168106,
    -0.005687633529305458,
    -0.00834563747048378,
    -0.0021005666349083185,
    -0.023515019565820694,
    -0.01570027507841587,
    9.47865191847086e-05,
    -0.01806451939046383,
    -0.014666804112493992,
    -0.010426738299429417,
    -0.02245323359966278,
    -0.006423805374652147,
    0.023642433807253838,
    0.006476894486695528,
    0.003903833217918873,
    0.03692183643579483,
    -0.010745273903012276,
    0.0008994212257675827,
    0.0019182933028787374,
    0.022028520703315735,
    -0.061442017555236816,
    -0.013477603904902935,
    -0.011715038679540157,
    0.012281324714422226,
    0.012826374731957912,
    -0.0010343565372750163,
    -0.019182933494448662,
    -0.037318237125873566,
    -0.014277482405304909,
    0.04836081340909004,
    0.022269191220402718,
    -0.03162706643342972,
    -0.0028491257689893246,
    0.011311559937894344,
    0.025950049981474876,
    -0.020556176081299782,
    -0.031060779467225075,
    0.03604409471154213,
    -0.03329760953783989,
    0.012507839128375053,
    -0.006816666107624769,
    -0.01809283345937729,
    0.014553546905517578,
    -0.02110830508172512,
    -0.007255537435412407,
    -0.008373952470719814,
    -0.012861767783761024,
    -0.01814946159720421,
    -0.0016820459859445691,
    -0.01372535340487957,
    0.015530389733612537,
    0.018163619562983513,
    -0.03406209498643875,
    -0.016592176631093025,
    -0.014751746319234371,
    0.04654869809746742,
    0.02330266311764717,
    -0.010780666954815388,
    0.007524523418396711,
    0.018928105011582375,
    0.02478916384279728,
    -0.009548995643854141,
    -0.0058893729001283646,
    -0.02476084977388382,
    -0.006126505322754383,
    -0.014008496887981892,
    -0.013583782128989697,
    -0.012231774628162384,
    -0.008904845453798771,
    0.029022149741649628,
    0.0324481800198555,
    -0.005992012098431587,
    -0.014865003526210785,
    -0.010221459902822971,
    -0.02415209263563156,
    -0.002473961329087615,
    -0.005160280037671328,
    0.028172722086310387,
    0.005691173020750284,
    0.022000206634402275,
    0.0005525711458176374,
    -0.00744665926322341,
    -0.0062999301590025425,
    0.02961675077676773,
    -0.024067148566246033,
    -0.003493275959044695,
    -0.012649410404264927,
    0.01713014766573906,
    0.01058246660977602,
    0.01742744818329811,
    -0.02028719149529934,
    -0.00621144799515605,
    0.002907523885369301,
    0.03134392201900482,
    0.0035870668943971395,
    0.020556176081299782,
    -0.010702802799642086,
    -0.01674790494143963,
    -0.032731324434280396,
    0.030183035880327225,
    -0.0036454652436077595,
    0.015558703802525997,
    0.03338254988193512,
    -0.007298009004443884,
    -0.04255638271570206,
    -0.008628780953586102,
    -0.012302560731768608,
    -0.0016616950742900372,
    -0.010653252713382244,
    0.015176461078226566,
    -0.017753060907125473,
    0.018206089735031128,
    -0.01310951728373766,
    -0.010596624575555325,
    0.01309536024928093,
    0.00036498892586678267,
    0.0044205691665410995,
    0.017314190044999123,
    0.02657296322286129,
    0.04060269519686699,
    0.010993024334311485,
    0.025907577946782112,
    -0.00793508067727089,
    0.003641925984993577,
    -0.014242089353501797,
    0.007159976754337549,
    0.01877237670123577,
    0.014291639439761639,
    -0.004448883235454559,
    -0.014185461215674877,
    0.025029834359884262,
    -0.003139347303658724,
    0.011000103317201138,
    0.013689960353076458,
    -0.013909396715462208,
    -0.04971989989280701,
    -0.003949843812733889,
    -0.022750534117221832,
    -0.008473052643239498,
    0.0022014363203197718,
    -0.006629083771258593,
    -0.0074678948149085045,
    -0.008848216384649277,
    -0.010327638126909733,
    0.006756498012691736,
    -0.0022810702212154865,
    0.017031047493219376,
    -0.003072100691497326,
    -0.010094045661389828,
    -0.02970169298350811,
    0.014220853336155415,
    -0.0014006727142259479,
    -0.01049752440303564,
    -0.0036596222780644894,
    0.15810701251029968,
    -0.0037339474074542522,
    0.04666195437312126,
    0.02467590570449829,
    0.002705784747377038,
    0.007121044676750898,
    -0.003985236864537001,
    -0.01754070445895195,
    -0.009202145040035248,
    0.0070537980645895,
    0.04575589671730995,
    0.0137395104393363,
    -0.019197091460227966,
    0.005404490511864424,
    0.006423805374652147,
    -0.00585398031398654,
    -0.02473253570497036,
    -0.05832744389772415,
    -0.01718677580356598,
    0.006402569357305765,
    -0.003896754700690508,
    0.0003041574382223189,
    0.007305087521672249,
    -0.03961169719696045,
    0.000764485914260149,
    0.0020846398547291756,
    -0.03335423767566681,
    0.007255537435412407,
    0.014525231905281544,
    0.004951462149620056,
    -0.0006007939227856696,
    -0.012521996162831783,
    0.00638133380562067,
    0.0014263325138017535,
    -0.022962892428040504,
    -0.015686118975281715,
    0.008267773315310478,
    0.015912633389234543,
    0.018928105011582375,
    0.023076148703694344,
    -0.03131560981273651,
    -0.04524623975157738,
    0.009832138195633888,
    -0.022580647841095924,
    0.021094148978590965,
    0.0055956123396754265,
    -0.024336135014891624,
    0.01701688952744007,
    0.002958843717351556,
    0.018928105011582375,
    -0.002270452445372939,
    -0.02654464915394783,
    0.017342504113912582,
    0.021306505426764488,
    -0.027847107499837875,
    0.013406817801296711,
    0.02621903456747532,
    0.0008029756718315184,
    0.017781376838684082,
    0.012904238887131214,
    -0.007807666435837746,
    0.027549806982278824,
    -0.010044495575129986,
    0.01839013397693634,
    -0.016762061044573784,
    -0.012245931662619114,
    2.3019189029582776e-05,
    0.006834362633526325,
    -0.015445446595549583,
    0.0101577527821064,
    -0.006689251866191626,
    -0.006112347822636366,
    -0.007701487746089697,
    0.005050561856478453,
    -0.009379109367728233,
    -0.01587016135454178,
    0.03406209498643875,
    -0.00010352413664804772,
    -0.015926789492368698,
    0.0020350897684693336,
    -0.007085651624947786,
    -5.950425475020893e-05,
    -0.002742947079241276,
    0.0007463470683433115,
    -0.016861161217093468,
    -0.010646174661815166,
    0.007145819719880819,
    -0.0044099511578679085,
    -0.010391345247626305,
    -0.013633332215249538,
    0.010058652609586716,
    -0.03686520829796791,
    0.00028601859230548143,
    -0.011906160041689873,
    0.012203460559248924,
    0.031853578984737396,
    0.0047957333736121655,
    0.02265143394470215,
    -0.012543232180178165,
    0.0016616950742900372,
    -0.0379977822303772,
    0.049889784306287766,
    0.014086361043155193,
    0.00992415938526392,
    -0.0066361622884869576,
    0.008147438056766987,
    -0.018291033804416656,
    0.004073719028383493,
    -0.0027252507861703634,
    -0.01330063957720995,
    -0.013236932456493378,
    -0.02967337891459465,
    -0.0010272779036313295,
    0.0034171813167631626,
    -0.012295481748878956,
    0.007687330711632967,
    6.674873293377459e-05,
    -0.015742747113108635,
    0.03222166374325752,
    0.023316821083426476,
    -0.0018076905980706215,
    -0.016464760527014732,
    0.0014564164448529482,
    -0.001709475414827466,
    0.011382346041500568,
    -0.01611083187162876,
    -0.034741636365652084,
    0.0035729098599404097,
    -0.008720802143216133,
    0.0037516439333558083,
    0.014447367750108242,
    -0.023458391427993774,
    0.027606435120105743,
    -0.003286227583885193,
    0.0016811611130833626,
    -0.03049449436366558,
    -0.029022149741649628,
    -0.008848216384649277,
    -0.004654162097722292,
    0.0038011937867850065,
    -0.019735062494874,
    -0.015742747113108635,
    0.018659118562936783,
    -0.02508646436035633,
    0.004268379881978035,
    -0.011375267058610916,
    -0.010009102523326874,
    -0.016648804768919945,
    0.00494792265817523,
    0.002645616652444005,
    0.0030154723208397627,
    -0.014277482405304909,
    0.022056834772229195,
    -0.015487918630242348,
    0.009159673936665058,
    -0.03397715091705322,
    -0.010695723816752434,
    -0.022184249013662338,
    0.016889475286006927,
    -0.015771061182022095,
    -0.03179695084691048,
    -0.001709475414827466,
    0.011686724610626698,
    0.007361716125160456,
    -0.031910207122564316,
    -0.017738904803991318,
    -0.17973913252353668,
    0.0011024877894669771,
    0.032844580709934235,
    -0.04309435561299324,
    -0.007588230539113283,
    -0.011438974179327488,
    0.01742744818329811,
    0.0002479712711647153,
    -0.002105875639244914,
    -0.01888563297688961,
    0.02215593494474888,
    0.005804430227726698,
    -0.022708063945174217,
    -0.028470022603869438,
    0.0108160600066185,
    -0.0024633435532450676,
    0.005018708296120167,
    -0.001406866475008428,
    0.029078779742121696,
    0.014723432250320911,
    0.05648701637983322,
    -0.02973000705242157,
    0.018517548218369484,
    0.00206517381593585,
    0.0033817882649600506,
    -0.019182933494448662,
    -0.011743352748453617,
    0.001574097783304751,
    0.017852161079645157,
    -0.023557491600513458,
    0.0171018335968256,
    -0.00015462258306797594,
    0.044368498027324677,
    -0.004526747390627861,
    0.01943776197731495,
    0.01880069077014923,
    0.012606939300894737,
    -0.001614799490198493,
    -0.007609466090798378,
    0.016408132389187813,
    0.031145721673965454,
    0.015034889802336693,
    -0.0055425227619707584,
    -0.015431289561092854,
    -0.0027093240059912205,
    0.011552231386303902,
    0.005082415416836739,
    -0.02888057939708233,
    0.0005034634959883988,
    -0.04586915299296379,
    0.01990494877099991,
    -0.019225405529141426,
    0.03213672339916229,
    0.004395794123411179,
    0.04654869809746742,
    -0.012755588628351688,
    -0.014249168336391449,
    0.00951360259205103,
    0.00951360259205103,
    -0.028158564120531082,
    -0.03208009526133537,
    -0.043660640716552734,
    -0.01698857545852661,
    -0.017031047493219376,
    0.0030774096958339214,
    -0.005068258382380009,
    -0.019168775528669357,
    0.013088282197713852,
    -0.02508646436035633,
    0.014921632595360279,
    -0.006813126616179943,
    0.014511074870824814,
    -0.0052169086411595345,
    0.021844476461410522,
    0.018758218735456467,
    0.023628277704119682,
    -0.009747195057570934,
    0.004010011907666922,
    0.015162304043769836,
    -0.029475178569555283,
    -0.017611490562558174,
    0.012168067507445812,
    0.042811211198568344,
    -0.010193145833909512,
    0.036270610988140106,
    -0.005691173020750284,
    -0.009669330902397633,
    -0.011141674593091011,
    -0.004877137020230293,
    -0.006108808796852827,
    -0.004930226132273674,
    -0.03443017974495888,
    -0.0021660435013473034,
    -0.0026597739197313786,
    0.009761352092027664,
    0.004696633201092482,
    -0.009350795298814774,
    -0.018206089735031128,
    0.008196988143026829,
    -0.017300033941864967,
    0.02830013632774353,
    -0.007067955564707518,
    -0.018234405666589737,
    -0.020825162529945374,
    0.022778848186135292,
    0.01276266761124134,
    -0.04048943892121315,
    0.012224695645272732,
    0.033694010227918625,
    -0.00685559818521142,
    -0.01759733259677887,
    -0.014461524784564972,
    0.013838610611855984,
    0.004923147615045309,
    -0.013413896784186363,
    0.028427550569176674,
    -0.00593538349494338,
    0.011007181368768215,
    0.02107999101281166,
    -0.004650622606277466,
    0.01894226297736168,
    0.014751746319234371,
    -0.025213878601789474,
    0.032731324434280396,
    -0.02248154953122139,
    -0.006462737452238798,
    -0.0953059121966362,
    -0.02476084977388382,
    0.006473355460911989,
    0.012826374731957912,
    -0.036412179470062256,
    0.01704520359635353,
    -0.019635962322354317,
    0.004986854735761881,
    0.0059743160381913185,
    0.004335626028478146,
    0.0025624434929341078,
    -0.011877845972776413,
    -0.017229247838258743,
    0.004845283459872007,
    -0.010271009989082813,
    -0.01217514555901289,
    -0.011580545455217361,
    0.01107796747237444,
    -0.023345135152339935,
    0.01789463311433792,
    -0.004686015658080578,
    -0.023614119738340378,
    -0.018899790942668915,
    0.008147438056766987,
    -0.007588230539113283,
    0.030919207260012627,
    -0.016903633251786232,
    0.01990494877099991,
    -0.0003678646171465516,
    0.013173224404454231,
    -0.005942462477833033,
    -0.014482760801911354,
    0.008968552574515343,
    -0.020542019978165627,
    -0.013980181887745857,
    -0.0063105481676757336,
    -0.041905153542757034,
    -0.03879057988524437,
    0.017710590735077858,
    -0.025015678256750107,
    -0.0036065331660211086,
    -0.009131359867751598,
    -0.011530996300280094,
    0.011807059869170189,
    -0.01671959087252617,
    -0.0011396503541618586,
    -0.014539389871060848,
    0.026884421706199646,
    0.020556176081299782,
    -0.02610577829182148,
    -0.03233492374420166,
    -0.01527556125074625,
    -0.009032259695231915,
    -0.009060573764145374,
    0.009407423436641693,
    0.008005866780877113,
    -0.0022421381436288357,
    0.009527759626507759,
    0.001470573595725,
    -0.02437860704958439,
    -0.035364553332328796,
    0.02215593494474888,
    -0.015473761595785618,
    0.03171200677752495,
    -0.0006600769702345133,
    -0.007552837487310171,
    0.006179594434797764,
    0.014093439094722271,
    0.04470827057957649,
    -0.028229350224137306,
    -0.01524724718183279,
    0.021207405254244804,
    -0.013378503732383251,
    0.022552333772182465,
    0.0007392684929072857,
    0.017031047493219376,
    -0.0198766328394413,
    0.013371424749493599,
    0.031004151329398155,
    -0.020839320495724678,
    0.005103651434183121,
    -0.008005866780877113,
    0.005347861908376217,
    -0.003222520463168621,
    0.010490445420145988,
    0.031145721673965454,
    -0.0018032665830105543,
    0.01085853110998869,
    0.020159777253866196,
    -0.02890889346599579,
    0.008465973660349846,
    -0.014334110543131828,
    0.04193346947431564,
    -0.010419660247862339,
    0.011099202558398247,
    -0.007085651624947786,
    0.00686975521966815,
    -0.024477707222104073,
    -0.027932049706578255,
    0.03768632560968399,
    -0.05815755948424339,
    0.006689251866191626,
    -0.08120539039373398,
    0.027634749189019203,
    0.01929619163274765,
    -0.029843265190720558,
    -0.0016209932509809732,
    -0.03301446512341499,
    0.019720904529094696,
    -0.02154717780649662,
    0.022608963772654533,
    -0.010058652609586716,
    -0.014525231905281544,
    -0.0010334716644138098,
    0.006519366055727005,
    0.008508444763720036,
    -0.010738195851445198,
    -0.01530387531965971,
    0.04411366954445839,
    0.0070891911163926125,
    0.046520382165908813,
    0.01053999550640583,
    -0.009612702764570713,
    0.016847005113959312,
    0.03805441036820412,
    0.02648802101612091,
    -0.015077360905706882,
    0.005907069426029921,
    0.0028986758552491665,
    0.024831635877490044,
    -0.002327081048861146,
    0.00430377246811986,
    0.01572858914732933,
    -0.010426738299429417,
    -0.0026916274800896645,
    0.021773692220449448,
    0.023897264152765274,
    -0.004873597528785467,
    -0.006452119443565607,
    0.011453131213784218,
    0.003871979657560587,
    0.0023200022988021374,
    -0.022708063945174217,
    -0.02435029111802578,
    0.015148147009313107,
    0.00024421076523140073,
    0.01814946159720421,
    -0.004997472744435072,
    0.014206696301698685,
    -0.006250380072742701,
    0.019834162667393684,
    0.01619577594101429,
    0.01366872526705265,
    0.012691881507635117,
    -0.018630804494023323,
    -0.038252610713243484,
    0.02613409236073494,
    -0.0082606952637434,
    0.010164830833673477,
    -0.011941553093492985,
    0.007970473729074001,
    0.0015192388091236353,
    0.0007259961566887796,
    -0.010122359730303288,
    -1.1101747077191249e-05,
    0.005008090753108263,
    -0.011785824783146381,
    -0.03689352422952652,
    -0.05246638506650925,
    -0.004087876062840223,
    0.01696026138961315,
    -0.015544546768069267,
    -0.026063306257128716,
    -0.010681566782295704,
    0.0022474469151347876,
    -0.009464052505791187,
    0.0011440743692219257,
    -0.00983921717852354,
    0.008232380263507366,
    -2.4512324671377428e-05,
    -0.009343716315925121,
    0.002546516712754965,
    0.016323190182447433,
    -0.007637780625373125,
    -0.021731220185756683,
    0.013817374594509602,
    0.03850743919610977,
    0.002293457742780447,
    -0.02794620767235756,
    -0.010709881782531738,
    0.010086966678500175,
    0.008890688419342041,
    0.014284560456871986,
    0.02546870708465576,
    0.016408132389187813,
    0.012967946007847786,
    0.010101123712956905,
    -0.0030048543121665716,
    -0.0020350897684693336,
    -0.011219538748264313,
    0.01786631904542446,
    0.012578624300658703,
    -0.006572455167770386,
    0.0036118419375270605,
    0.014390739612281322,
    -0.0379977822303772,
    -0.03697846829891205,
    -0.007135201711207628,
    -0.016068361699581146,
    -0.0035552133340388536,
    -0.003525129519402981,
    0.005563758779317141,
    0.019890790805220604,
    -0.03358075022697449,
    -0.00575134065002203,
    0.010313481092453003,
    -0.023585805669426918,
    0.004388715606182814,
    -0.004084336571395397,
    -0.007340480573475361,
    -0.021731220185756683,
    0.027408234775066376,
    -0.012345031835138798,
    0.015020732767879963,
    0.027578121051192284,
    -0.013392660766839981,
    0.019508548080921173,
    0.02517140656709671,
    0.03989483788609505,
    0.009003945626318455,
    0.02102336287498474,
    0.014723432250320911,
    -0.02970169298350811,
    -0.0016024119686335325,
    -0.02341592125594616,
    -0.00016501924255862832,
    0.002482809592038393,
    -0.028073621913790703,
    -0.004696633201092482,
    -0.0034331080969423056,
    0.00856507383286953,
    0.08675499260425568,
    0.005786733701825142,
    0.008883609436452389,
    0.002435029251500964,
    -0.033694010227918625,
    -0.0007751037483103573,
    0.040149666368961334,
    -0.017809690907597542,
    -0.007729801815003157,
    -0.01490747556090355,
    -0.0006764461868442595,
    0.003429568838328123,
    -0.017965419217944145,
    -0.008083730936050415,
    -0.004232986830174923,
    -0.005659319460391998,
    -0.03502478078007698,
    0.021533019840717316,
    -0.028583278879523277,
    0.007347559090703726,
    0.02017393335700035,
    0.01633734628558159,
    0.022113462910056114,
    0.008770352229475975,
    -0.029078779742121696,
    -0.002473961329087615,
    -0.0059212264604866505,
    2.6890284061664715e-05,
    -0.005609769374132156,
    -0.04425524175167084,
    -0.00010833534906851128,
    0.034713324159383774,
    -0.04051775485277176,
    -0.038224294781684875,
    -0.003847204614430666,
    0.005439883563667536,
    -0.010596624575555325,
    -0.003148195566609502,
    0.012493682093918324,
    0.01211851742118597,
    -0.008381030522286892,
    0.00044218963012099266,
    -0.0210516769438982,
    -0.03165537863969803,
    -0.01533218938857317,
    -0.005354940891265869,
    -0.022283349186182022,
    -0.010263931006193161,
    -0.05866721644997597
  ]
}
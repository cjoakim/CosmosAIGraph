{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development"
  ],
  "description": "pyannotate: auto-generate pep-484 annotations\n=============================================\n\ninsert annotations into your source code based on call arguments and\nreturn types observed at runtime.\n\nfor license and copyright see the end of this file.\n\nblog post: http://mypy-lang.blogspot.com/2017/11/dropbox-releases-pyannotate-auto.html\n\nhow to use\n==========\n\nsee also the example directory.\n\nphase 1: collecting types at runtime\n------------------------------------\n\n- install the usual way (see \"red tape\" section below)\n- add `from pyannotate_runtime import collect_types` to your test\n- early in your test setup, call `collect_types.init_types_collection()`\n- bracket your test execution between calls to `collect_types.start()` and\n  `collect_types.stop()` (or use the context manager below)\n- when done, call `collect_types.dump_stats(filename)`\n\nall calls between the `start()` and `stop()` calls will be analyzed\nand the observed types will be written (in json form) to the filename\nyou pass to `dump_stats()`.  you can have multiple start/stop pairs\nper dump call.\n\nif you'd like to automatically collect types when you run `pytest`,\nsee `example/example_conftest.py` and `example/readme.md`.\n\ninstead of using `start()` and `stop()` you can also use a context\nmanager:\n```\ncollect_types.init_types_collection()\nwith collect_types.collect():\n    <your code here>\ncollect_types.dump_stats(<filename>)\n```\n\nphase 2: inserting types into your source code\n----------------------------------------------\n\nthe command-line tool `pyannotate` can add annotations into your\nsource code based on the annotations collected in phase 1.  the key\narguments are:\n\n- use `--type-info file` to tell it the file you passed to `dump_stats()`\n- positional arguments are source files you want to annotate\n- with no other flags the tool will print a diff indicating what it\n  proposes to do but won't do anything.  review the output.\n- add `-w` to make the tool actually update your files.\n  (use git or some other way to keep a backup.)\n\nat this point you should probably run mypy and iterate.  you probably\nwill have to tweak the changes to make mypy completely happy.\n\nnotes and tips\n--------------\n\n- it's best to do one file at a time, at least until you're\n  comfortable with the tool.\n- the tool doesn't touch functions that already have an annotation.\n- the tool can generate either of:\n  - type comments, i.e. python 2 style annotations\n  - inline type annotations, i.e. python 3 style annotations, using `--py3` in v1.0.7+\n\nred tape\n========\n\ninstallation\n------------\n\nthis should work for python 2.7 as well as for python 3.4 and higher.\n\n```\npip install pyannotate\n```\n\nthis installs several items:\n\n- a runtime module, pyannotate_runtime/collect_types.py, which collects\n  and dumps types observed at runtime using a profiling hook.\n\n- a library package, pyannotate_tools, containing code that can read the\n  data dumped by the runtime module and insert annotations into your\n  source code.\n\n- an entry point, pyannotate, which runs the library package on your files.\n\nfor dependencies, see setup.py and requirements.txt.\n\ntesting etc.\n------------\n\nto run the unit tests, use pytest:\n\n```\npytest\n```\n\nto do\n-----\n\nwe'd love your help with some of these issues:\n\n- better documentation.\n- python 3 code generation.\n- refactor the tool modules (currently its legacy architecture shines through).\n\nacknowledgments\n---------------\n\nthe following people contributed significantly to this tool:\n\n- tony grue\n- sergei vorobev\n- jukka lehtosalo\n- guido van rossum\n\nlicence etc.\n------------\n\n1. license: apache 2.0.\n2. copyright attribution: copyright (c) 2017 dropbox, inc.\n3. external contributions to the project should be subject to\n   dropbox's contributor license agreement (cla):\n   https://opensource.dropbox.com/cla/\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "pyannotate",
  "package_url": "https://pypi.org/project/pyannotate/",
  "project_url": "https://pypi.org/project/pyannotate/",
  "project_urls": {
    "Homepage": "https://github.com/dropbox/pyannotate"
  },
  "release_url": "https://pypi.org/project/pyannotate/1.2.0/",
  "requires_dist": [
    "six",
    "mypy-extensions",
    "typing (>=3.5.3); python_version < \"3.5\""
  ],
  "requires_python": "",
  "summary": "pyannotate: auto-generate pep-484 annotations",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "dropbox",
    "guido@dropbox.com"
  ],
  "kwds": "pyannotate_runtime pyannotate_tools init_types_collection collect_types pyannotate",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_pyannotate",
  "homepage": "https://github.com/dropbox/pyannotate",
  "release_count": 9,
  "dependency_ids": [
    "pypi_mypy_extensions",
    "pypi_six",
    "pypi_typing"
  ]
}
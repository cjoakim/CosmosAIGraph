{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: customer service",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: other audience",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: information analysis",
    "topic :: system :: filesystems"
  ],
  "description": "# lasio\r\n\r\n<p align=\"center\">\r\n<a href=\"https://lasio.readthedocs.io/en/stable/\"><strong>documentation</strong> (stable)</a> \u00e2\u20ac\u00a2\r\n<a href=\"https://lasio.readthedocs.io/en/latest/\"><strong>documentation</strong> (main branch)</a>\r\n</p>\r\n\r\n[![run tests](https://github.com/kinverarity1/lasio/actions/workflows/ci-tests.yml/badge.svg)](https://github.com/kinverarity1/lasio/actions/workflows/ci-tests.yml)\r\n[![pypi version](https://img.shields.io/pypi/v/lasio.svg)](https://pypi.python.org/pypi/lasio/)\r\n[![code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/en/stable/the_black_code_style/index.html)\r\n[![license](http://img.shields.io/badge/license-mit-blue.svg)](https://github.com/kinverarity1/lasio/blob/master/license)\r\n\r\nread and write log ascii standard files with python.\r\n\r\nthis is a python 3.7+ package to read and write log ascii standard\r\n(las) files, used for borehole data such as geophysical, geological, or\r\npetrophysical logs. it's compatible with versions 1.2 and 2.0 of the las file\r\nspecification, published by the [canadian well logging\r\nsociety](https://www.cwls.org/products/#products-las). support for las 3 is \r\n[being worked on](https://github.com/kinverarity1/lasio/issues/5).\r\n\r\nlasio is primarily for reading and writing data and metadata to and from \r\nlas files. it is designed to read as many las files as possible, including\r\nthose containing common errors and non-compliant formatting. it can be used\r\ndirectly, but you may want to consider using some other packages, depending\r\non your priorities:\r\n\r\n- [welly](https://github.com/agile-geoscience/welly) is a python package that \r\n  uses lasio for i/o but provides a **lot** more functionality aimed at working\r\n  with curves, wells, and projects. i would recommend starting there in most \r\n  cases, to avoid re-inventing the wheel!\r\n- [lascheck](https://github.com/mandarjkulkarni/lascheck) is focused on\r\n  checking whether your las file meets the specifications.\r\n- [lasr](https://github.com/donald-keighley/lasr) is an r package which \r\n  is designed to read large amounts of data quickly from las files; this is \r\n  a great thing to check out if speed is a priority for you, as lasio is not \r\n  particularly fast.\r\n- lidar surveys are also called \"las files\", but they are quite different and\r\n  lasio will not help you -- check out [laspy](https://github.com/laspy/laspy)\r\n  instead.\r\n\r\nlasio [stopped](https://github.com/kinverarity1/lasio/issues/364) \r\nsupporting python 2.7 in august 2020. the final version of lasio with python 2.7 support \r\nis version 0.26.\r\n\r\n## code of conduct\r\n\r\nsee our [code of conduct](https://lasio.readthedocs.io/en/latest/contributing.html#code-of-conduct).\r\n\r\n## quick start\r\n\r\nfor the minimum working requirements, you'll need numpy installed. install\r\nlasio with:\r\n\r\n```bash\r\n$ pip install lasio\r\n```\r\n\r\nto make sure you have everything, use this to ensure pandas, chardet, and\r\nopenpyxl are also installed:\r\n\r\n```bash\r\n$ pip install lasio[all]\r\n```\r\n\r\nexample session:\r\n\r\n```python\r\n>>> import lasio\r\n```\r\n\r\nyou can read the file using a filename, file-like object, or url:\r\n\r\n```python\r\n>>> las = lasio.read(\"sample_rev.las\")\r\n```\r\n\r\ndata is accessible both directly as numpy arrays\r\n\r\n```python\r\n>>> las.keys()\r\n['dept', 'dt', 'rhob', 'nphi', 'sflu', 'sfla', 'ilm', 'ild']\r\n>>> las['sflu']\r\narray([ 123.45,  123.45,  123.45, ...,  123.45,  123.45,  123.45])\r\n>>> las['dept']\r\narray([ 1670.   ,  1669.875,  1669.75 , ...,  1669.75 ,  1670.   ,\r\n        1669.875])\r\n```\r\n\r\nand as ``curveitem`` objects with associated metadata:\r\n\r\n```python\r\n>>> las.curves\r\n[curveitem(mnemonic=dept, unit=m, value=, descr=1  depth, original_mnemonic=dept, data.shape=(29897,)),\r\ncurveitem(mnemonic=dt, unit=us/m, value=, descr=2  sonic transit time, original_mnemonic=dt, data.shape=(29897,)),\r\ncurveitem(mnemonic=rhob, unit=k/m3, value=, descr=3  bulk density, original_mnemonic=rhob, data.shape=(29897,)),\r\ncurveitem(mnemonic=nphi, unit=v/v, value=, descr=4   neutron porosity, original_mnemonic=nphi, data.shape=(29897,)),\r\ncurveitem(mnemonic=sflu, unit=ohmm, value=, descr=5  rxo resistivity, original_mnemonic=sflu, data.shape=(29897,)),\r\ncurveitem(mnemonic=sfla, unit=ohmm, value=, descr=6  shallow resistivity, original_mnemonic=sfla, data.shape=(29897,)),\r\ncurveitem(mnemonic=ilm, unit=ohmm, value=, descr=7  medium resistivity, original_mnemonic=ilm, data.shape=(29897,)),\r\ncurveitem(mnemonic=ild, unit=ohmm, value=, descr=8  deep resistivity, original_mnemonic=ild, data.shape=(29897,))]\r\n```\r\n\r\nheader information is parsed into simple headeritem objects, and stored in a\r\ndictionary for each section of the header:\r\n\r\n```python\r\n>>> las.version\r\n[headeritem(mnemonic=vers, unit=, value=1.2, descr=cwls log ascii standard -version 1.2, original_mnemonic=vers),\r\nheaderitem(mnemonic=wrap, unit=, value=no, descr=one line per depth step, original_mnemonic=wrap)]\r\n>>> las.well\r\n[headeritem(mnemonic=strt, unit=m, value=1670.0, descr=, original_mnemonic=strt),\r\nheaderitem(mnemonic=stop, unit=m, value=1660.0, descr=, original_mnemonic=stop),\r\nheaderitem(mnemonic=step, unit=m, value=-0.125, descr=, original_mnemonic=step),\r\nheaderitem(mnemonic=null, unit=, value=-999.25, descr=, original_mnemonic=null),\r\nheaderitem(mnemonic=comp, unit=, value=any oil company ltd., descr=company, original_mnemonic=comp),\r\nheaderitem(mnemonic=well, unit=, value=any et al oil well #12, descr=well, original_mnemonic=well),\r\nheaderitem(mnemonic=fld, unit=, value=edam, descr=field, original_mnemonic=fld),\r\nheaderitem(mnemonic=loc, unit=, value=a9-16-49, descr=location, original_mnemonic=loc),\r\nheaderitem(mnemonic=prov, unit=, value=saskatchewan, descr=province, original_mnemonic=prov),\r\nheaderitem(mnemonic=srvc, unit=, value=any logging company ltd., descr=service company, original_mnemonic=srvc),\r\nheaderitem(mnemonic=date, unit=, value=25-dec-1988, descr=log date, original_mnemonic=date),\r\nheaderitem(mnemonic=uwi, unit=, value=100091604920, descr=unique well id, original_mnemonic=uwi)]\r\n>>> las.params\r\n[headeritem(mnemonic=bht, unit=degc, value=35.5, descr=bottom hole temperature, original_mnemonic=bht),\r\nheaderitem(mnemonic=bs, unit=mm, value=200.0, descr=bit size, original_mnemonic=bs),\r\nheaderitem(mnemonic=fd, unit=k/m3, value=1000.0, descr=fluid density, original_mnemonic=fd),\r\nheaderitem(mnemonic=matr, unit=, value=0.0, descr=neutron matrix(0=lime,1=sand,2=dolo), original_mnemonic=matr),\r\nheaderitem(mnemonic=mden, unit=, value=2710.0, descr=logging matrix density, original_mnemonic=mden),\r\nheaderitem(mnemonic=rmf, unit=ohmm, value=0.216, descr=mud filtrate resistivity, original_mnemonic=rmf),\r\nheaderitem(mnemonic=dfd, unit=k/m3, value=1525.0, descr=drill fluid density, original_mnemonic=dfd)]\r\n```\r\n\r\nthe data is stored as a 2d numpy array:\r\n\r\n```python\r\n>>> las.data\r\narray([[ 1670.   ,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ],\r\n       [ 1669.875,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ],\r\n       [ 1669.75 ,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ],\r\n       ...,\r\n       [ 1669.75 ,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ],\r\n       [ 1670.   ,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ],\r\n       [ 1669.875,   123.45 ,  2550.   , ...,   123.45 ,   110.2  ,   105.6  ]])\r\n```\r\n\r\nyou can also retrieve and load data as a ``pandas`` dataframe, build las files\r\nfrom scratch, write them back to disc, and export to excel, amongst other\r\nthings.\r\n\r\nsee the [package documentation](https://lasio.readthedocs.io/en/latest/) for\r\nmore details.\r\n\r\n## contributing\r\n\r\ncontributions are invited and welcome.\r\n\r\nsee [contributing](https://lasio.readthedocs.io/en/latest/contributing.html) for how to get started.\r\n\r\n## license\r\n\r\n[mit](https://github.com/kinverarity1/lasio/blob/master/license)\r\n",
  "docs_url": null,
  "keywords": "science geophysics io",
  "license": "mit",
  "name": "lasio",
  "package_url": "https://pypi.org/project/lasio/",
  "project_url": "https://pypi.org/project/lasio/",
  "project_urls": {
    "Homepage": "https://github.com/kinverarity1/lasio"
  },
  "release_url": "https://pypi.org/project/lasio/0.31/",
  "requires_dist": [
    "numpy",
    "pandas ; extra == 'all'",
    "chardet ; extra == 'all'",
    "openpyxl ; extra == 'all'",
    "pandas ; extra == 'test'",
    "chardet ; extra == 'test'",
    "openpyxl ; extra == 'test'",
    "pytest (>=3.6) ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "coverage ; extra == 'test'",
    "codecov ; extra == 'test'",
    "pytest-benchmark ; extra == 'test'",
    "black ; extra == 'test'"
  ],
  "requires_python": ">=3",
  "summary": "read/write well data from log ascii standard (las) files",
  "version": "0.31",
  "releases": [],
  "developers": [
    "kent_inverarity",
    "kinverarity@hotmail.com"
  ],
  "kwds": "lasio the_black_code_style laspy code documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_lasio",
  "homepage": "https://github.com/kinverarity1/lasio",
  "release_count": 37,
  "dependency_ids": [
    "pypi_black",
    "pypi_chardet",
    "pypi_codecov",
    "pypi_coverage",
    "pypi_numpy",
    "pypi_openpyxl",
    "pypi_pandas",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov"
  ]
}
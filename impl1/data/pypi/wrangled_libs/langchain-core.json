{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": "# \ud83e\udd9c\ud83c\udf4e\ufe0f langchain core\n\n[![downloads](https://static.pepy.tech/badge/langchain_core/month)](https://pepy.tech/project/langchain_core)\n[![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://opensource.org/licenses/mit)\n\n## quick install\n\n```bash\npip install langchain-core\n```\n\n## what is it?\n\nlangchain core contains the base abstractions that power the rest of the langchain ecosystem. \nthese abstractions are designed to be as modular and simple as possible. \nexamples of these abstractions include those for language models, document loaders, embedding models, vectorstores, retrievers, and more. \nthe benefit of having these abstractions is that any provider can implement the required interface and then easily be used in the rest of the langchain ecosystem.\n\nfor full documentation see the [api reference](https://api.python.langchain.com/en/stable/core_api_reference.html).\n\n## what is langchain expression language?\n\nlangchain core also contains langchain expression language, or lcel, a runtime that allows users to compose arbitrary sequences together and get several benefits that are important when building llm applications. \nwe call these sequences \u201crunnables\u201d.\n\nall runnables expose the same interface with single-invocation, batch, streaming and async methods. \nthis design is useful because it is not enough to have a single sync interface when building an llm application.  \nbatch is needed for efficient processing of many inputs.\nstreaming (and streaming of intermediate steps) is needed to show the user that progress is being made. \nasync interfaces are nice when moving into production. \nrather than having to write multiple implementations for all of those, lcel allows you to write a runnable once and invoke it in many different ways.\n\nfor more check out the [lcel docs](https://python.langchain.com/docs/expression_language/).\n\n![langchain stack](../../docs/static/img/langchain_stack.png)\n\n## \ud83d\udcd5 releases & versioning\n\n`langchain-core` is currently on version `0.1.x`.\n\nas `langchain-core` contains the base abstractions and runtime for the whole langchain ecosystem, we will communicate any breaking changes with advance notice and version bumps. the exception for this is anything in `langchain_core.beta`. the reason for `langchain_core.beta` is that given the rate of change of the field, being able to move quickly is still a priority, and this module is our attempt to do so.\n\nminor version increases will occur for:\n\n- breaking changes for any public interfaces not in `langchain_core.beta`\n\npatch version increases will occur for:\n\n- bug fixes\n- new features\n- any changes to private interfaces\n- any changes to `langchain_core.beta`\n\n## \ud83d\udc81 contributing\n\nas an open-source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infrastructure, or better documentation.\n\nfor detailed information on how to contribute, see the [contributing guide](https://python.langchain.com/docs/contributing/).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "langchain-core",
  "package_url": "https://pypi.org/project/langchain-core/",
  "project_url": "https://pypi.org/project/langchain-core/",
  "project_urls": {
    "Homepage": "https://github.com/langchain-ai/langchain",
    "Repository": "https://github.com/langchain-ai/langchain"
  },
  "release_url": "https://pypi.org/project/langchain-core/0.1.3/",
  "requires_dist": [
    "PyYAML (>=5.3)",
    "anyio (>=3,<5)",
    "jinja2 (>=3,<4) ; extra == \"extended-testing\"",
    "jsonpatch (>=1.33,<2.0)",
    "langsmith (>=0.0.63,<0.1.0)",
    "packaging (>=23.2,<24.0)",
    "pydantic (>=1,<3)",
    "requests (>=2,<3)",
    "tenacity (>=8.1.0,<9.0.0)"
  ],
  "requires_python": ">=3.8.1,<4.0",
  "summary": "building applications with llms through composability",
  "version": "0.1.3",
  "releases": [],
  "developers": [],
  "kwds": "langchain_core langchain_stack langchain documentation api",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_langchain_core",
  "homepage": "https://github.com/langchain-ai/langchain",
  "release_count": 19,
  "dependency_ids": [
    "pypi_anyio",
    "pypi_jinja2",
    "pypi_jsonpatch",
    "pypi_langsmith",
    "pypi_packaging",
    "pypi_pydantic",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_tenacity"
  ]
}
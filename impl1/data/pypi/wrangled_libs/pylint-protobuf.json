{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: software development :: quality assurance"
  ],
  "description": "pylint-protobuf\n===============\n\n`pylint-protobuf` is a pylint plugin for making pylint aware of generated\nfields from protobuf types.\n\n## install\n\ninstall from pypi via:\n\n    pip install pylint-protobuf\n\nadd or update `pylintrc` to load `pylint-protobuf`:\n\n    [master]\n    load-plugins=pylint_protobuf\n\n## example\n\n    $ cat <<eof >person.proto\n    message person {\n      required string name = 1;\n    }\n    eof\n    $ protoc person.proto --python_out=.\n    $ cat <<eof >readme.py\n    from person_pb2 import person\n    p = person('all arguments must be kwargs')\n    p.invalid_field = 'value'\n    p.name = 123\n    eof\n    $ pip install pylint-protobuf\n    $ pylint --load-plugins=pylint_protobuf readme.py\n    ************* module readme\n    readme.py:2:4: e5904: positional arguments are not allowed in message constructors and will raise typeerror (protobuf-no-posargs)\n    readme.py:3:0: e5901: field 'invalid_field' does not appear in the declared fields of protobuf-generated class 'person' and will raise attributeerror on access (protobuf-undefined-attribute)\n    readme.py:4:0: e5903: field \"person.name\" is of type 'str' and value 123 will raise typeerror at runtime (protobuf-type-error)\n\n## supported python versions\n\n`pylint-protobuf` supports python 3.8 at a minimum.\n\n## known issues\n\n`pylint-protobuf` does not currently support the following concepts:\n\n* some features of extensions: non-nested extensions, hasextension(),\n  clearextension(), type checking\n\n## alternatives\n\n### mypy-protobuf\n\na `protoc` compiler plugin for generating `.pyi` stubs from `.proto` files.\nfully-featured and well supported, a useful extension to a `mypy` workflow.\nmay be better suited to your usecase if you control the entire pipeline. may\n_not_ be suited if you are a downstream consumer of generated `_pb2.py` modules\nwith no access to the original `.proto` definitions, in which case\n`pylint-protobuf` may be better suited for your use.\n",
  "docs_url": null,
  "keywords": "pylint,plugin,protobuf",
  "license": "mit",
  "name": "pylint-protobuf",
  "package_url": "https://pypi.org/project/pylint-protobuf/",
  "project_url": "https://pypi.org/project/pylint-protobuf/",
  "project_urls": {
    "Homepage": "https://github.com/nelfin/pylint-protobuf"
  },
  "release_url": "https://pypi.org/project/pylint-protobuf/0.22.0/",
  "requires_dist": [
    "astroid",
    "pylint",
    "protobuf"
  ],
  "requires_python": "",
  "summary": "a plugin for making pylint aware of the fields of protobuf-generated classes",
  "version": "0.22.0",
  "releases": [],
  "developers": [
    "andrew_haigh",
    "hello@nelf.in"
  ],
  "kwds": "pylint_protobuf protobuf pylint pylintrc proto",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pylint_protobuf",
  "homepage": "https://github.com/nelfin/pylint-protobuf",
  "release_count": 42,
  "dependency_ids": [
    "pypi_astroid",
    "pypi_protobuf",
    "pypi_pylint"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "a powerful caching library for python, with ttl support and multiple algorithm options. (https://github.com/lonelyenvoy/python-memoization)\n# python-memoization\n\n[![repository][repositorysvg]][repository] [![build status][travismaster]][travis] [![codacy badge][codacysvg]][codacy]\n[![coverage status][coverallssvg]][coveralls] [![downloads][downloadssvg]][repository]\n<br>\n[![prs welcome][prsvg]][pr] [![license][licensesvg]][license] [![supports python][pythonsvg]][python]\n\n\na powerful caching library for python, with ttl support and multiple algorithm options.\n\nif you like this work, please [star](https://github.com/lonelyenvoy/python-memoization) it on github.\n\n## why choose this library?\n\nperhaps you know about [```functools.lru_cache```](https://docs.python.org/3/library/functools.html#functools.lru_cache)\nin python 3, and you may be wondering why we are reinventing the wheel.\n\nwell, actually not. this lib is based on ```functools```. please find below the comparison with ```lru_cache```.\n\n|features|```functools.lru_cache```|```memoization```|\n|--------|-------------------|-----------|\n|configurable max size|\u2714\ufe0f|\u2714\ufe0f|\n|thread safety|\u2714\ufe0f|\u2714\ufe0f|\n|flexible argument typing (typed & untyped)|\u2714\ufe0f|always typed|\n|cache statistics|\u2714\ufe0f|\u2714\ufe0f|\n|lru (least recently used) as caching algorithm|\u2714\ufe0f|\u2714\ufe0f|\n|lfu (least frequently used) as caching algorithm|no support|\u2714\ufe0f|\n|fifo (first in first out) as caching algorithm|no support|\u2714\ufe0f|\n|extensibility for new caching algorithms|no support|\u2714\ufe0f|\n|ttl (time-to-live) support|no support|\u2714\ufe0f|\n|support for unhashable arguments (dict, list, etc.)|no support|\u2714\ufe0f|\n|custom cache keys|no support|\u2714\ufe0f|\n|on-demand partial cache clearing|no support|\u2714\ufe0f|\n|iterating through the cache|no support|\u2714\ufe0f|\n|python version|3.2+|3.4+|\n\n```memoization``` solves some drawbacks of ```functools.lru_cache```:\n\n1. ```lru_cache``` does not support __unhashable types__, which means function arguments cannot contain dict or list.\n\n```python\n>>> from functools import lru_cache\n>>> @lru_cache()\n... def f(x): return x\n... \n>>> f([1, 2])  # unsupported\ntraceback (most recent call last):\n  file \"<stdin>\", line 1, in <module>\ntypeerror: unhashable type: 'list'\n```\n\n2. ```lru_cache``` is vulnerable to [__hash collision attack__](https://learncryptography.com/hash-functions/hash-collision-attack)\n   and can be hacked or compromised. using this technique, attackers can make your program __unexpectedly slow__ by\n   feeding the cached function with certain cleverly designed inputs. however, in ```memoization```, caching is always\n   typed, which means ```f(3)``` and ```f(3.0)``` will be treated as different calls and cached separately. also,\n   you can build your own cache key with a unique hashing strategy. these measures __prevents the attack__ from\n   happening (or at least makes it a lot harder).\n\n```python\n>>> hash((1,))\n3430019387558\n>>> hash(3430019387558.0)  # two different arguments with an identical hash value\n3430019387558\n```\n\n3. unlike `lru_cache`, `memoization` is designed to be highly extensible, which make it easy for developers to add and integrate\n__any caching algorithms__ (beyond fifo, lru and lfu) into this library. see [contributing guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/contributing.md) for further detail.\n\n\n## installation\n\n```bash\npip install -u memoization\n```\n\n\n## 1-minute tutorial\n\n```python\nfrom memoization import cached\n\n@cached\ndef func(arg):\n    ...  # do something slow\n```\n\nsimple enough - the results of ```func()``` are cached. \nrepetitive calls to ```func()``` with the same arguments run ```func()``` only once, enhancing performance.\n\n>:warning:__warning:__ for functions with unhashable arguments, the default setting may not enable `memoization` to work properly. see [custom cache keys](https://github.com/lonelyenvoy/python-memoization#custom-cache-keys) section below for details.\n\n## 15-minute tutorial\n\nyou will learn about the advanced features in the following tutorial, which enable you to customize `memoization` .\n\nconfigurable options include `ttl`, `max_size`, `algorithm`, `thread_safe`, `order_independent` and `custom_key_maker`.\n\n### ttl (time-to-live)\n\n```python\n@cached(ttl=5)  # the cache expires after 5 seconds\ndef expensive_db_query(user_id):\n    ...\n```\n\nfor impure functions, ttl (in second) will be a solution. this will be useful when the function returns resources that is valid only for a short time, e.g. fetching something from databases.\n\n### limited cache capacity\n \n```python\n@cached(max_size=128)  # the cache holds no more than 128 items\ndef get_a_very_large_object(filename):\n    ...\n```\n\nby default, if you don't specify ```max_size```, the cache can hold unlimited number of items.\nwhen the cache is fully occupied, the former data will be overwritten by a certain algorithm described below.\n\n### choosing your caching algorithm\n\n```python\nfrom memoization import cached, cachingalgorithmflag\n\n@cached(max_size=128, algorithm=cachingalgorithmflag.lfu)  # the cache overwrites items using the lfu algorithm\ndef func(arg):\n    ...\n```\n\npossible values for ```algorithm``` are:\n\n- `cachingalgorithmflag.lru`: _least recently used_  (default)\n- `cachingalgorithmflag.lfu`: _least frequently used_ \n- `cachingalgorithmflag.fifo`: _first in first out_ \n\nthis option is valid only when a ```max_size``` is explicitly specified.\n\n### thread safe?\n\n```python\n@cached(thread_safe=false)\ndef func(arg):\n    ...\n```\n\n```thread_safe``` is ```true``` by default. setting it to ```false``` enhances performance.\n\n### order-independent cache key\n\nby default, the following function calls will be treated differently and cached twice, which means the cache misses at the second call.\n\n```python\nfunc(a=1, b=1)\nfunc(b=1, a=1)\n```\n\nyou can avoid this behavior by passing an `order_independent` argument to the decorator, although it will slow down the performance a little bit. \n\n```python\n@cached(order_independent=true)\ndef func(**kwargs):\n    ...\n```\n\n### custom cache keys\n\nprior to memorize your function inputs and outputs (i.e. putting them into a cache), `memoization` needs to\nbuild a __cache key__ using the inputs, so that the outputs can be retrieved later.\n\n> by default, `memoization` tries to combine all your function\narguments and calculate its hash value using `hash()`. if it turns out that parts of your arguments are\nunhashable, `memoization` will fall back to turning them into a string using `str()`. this behavior relies\non the assumption that the string exactly represents the internal state of the arguments, which is true for\nbuilt-in types.\n\nhowever, this is not true for all objects. __if you pass objects which are\ninstances of non-built-in classes, sometimes you will need to override the default key-making procedure__,\nbecause the `str()` function on these objects may not hold the correct information about their states.\n\nhere are some suggestions. __implementations of a valid key maker__:\n\n- must be a function with the same signature as the cached function.\n- must produce unique keys, which means two sets of different arguments always map to two different keys.\n- must produce hashable keys, and a key is comparable with another key (`memoization` only needs to check for their equality).\n- should compute keys efficiently and produce small objects as keys.\n\nexample:\n\n```python\ndef get_employee_id(employee):\n    return employee.id  # returns a string or a integer\n\n@cached(custom_key_maker=get_employee_id)\ndef calculate_performance(employee):\n    ...\n```\n\nnote that writing a robust key maker function can be challenging in some situations. if you find it difficult,\nfeel free to ask for help by submitting an [issue](https://github.com/lonelyenvoy/python-memoization/issues).\n\n\n### knowing how well the cache is behaving\n\n```python\n>>> @cached\n... def f(x): return x\n... \n>>> f.cache_info()\ncacheinfo(hits=0, misses=0, current_size=0, max_size=none, algorithm=<cachingalgorithmflag.lru: 2>, ttl=none, thread_safe=true, order_independent=false, use_custom_key=false)\n```\n\nwith ```cache_info```, you can retrieve the number of ```hits``` and ```misses``` of the cache, and other information indicating the caching status.\n\n- `hits`: the number of cache hits\n- `misses`: the number of cache misses\n- `current_size`: the number of items that were cached\n- `max_size`: the maximum number of items that can be cached (user-specified)\n- `algorithm`: caching algorithm (user-specified)\n- `ttl`: time-to-live value (user-specified)\n- `thread_safe`: whether the cache is thread safe (user-specified)\n- `order_independent`: whether the cache is kwarg-order-independent (user-specified)\n- `use_custom_key`: whether a custom key maker is used\n\n### other apis\n\n- access the original undecorated function `f` by `f.__wrapped__`.\n- clear the cache by `f.cache_clear()`.\n- check whether the cache is empty by `f.cache_is_empty()`.\n- check whether the cache is full by `f.cache_is_full()`.\n- disable `syntaxwarning` by `memoization.suppress_warnings()`.\n\n## advanced api references\n\n<details>\n<summary>details</summary>\n\n### checking whether the cache contains something\n\n#### cache_contains_argument(function_arguments, alive_only)\n\n```\nreturn true if the cache contains a cached item with the specified function call arguments\n\n:param function_arguments:  can be a list, a tuple or a dict.\n                            - full arguments: use a list to represent both positional arguments and keyword\n                              arguments. the list contains two elements, a tuple (positional arguments) and\n                              a dict (keyword arguments). for example,\n                                f(1, 2, 3, a=4, b=5, c=6)\n                              can be represented by:\n                                [(1, 2, 3), {'a': 4, 'b': 5, 'c': 6}]\n                            - positional arguments only: when the arguments does not include keyword arguments,\n                              a tuple can be used to represent positional arguments. for example,\n                                f(1, 2, 3)\n                              can be represented by:\n                                (1, 2, 3)\n                            - keyword arguments only: when the arguments does not include positional arguments,\n                              a dict can be used to represent keyword arguments. for example,\n                                f(a=4, b=5, c=6)\n                              can be represented by:\n                                {'a': 4, 'b': 5, 'c': 6}\n\n:param alive_only:          whether to check alive cache item only (default to true).\n\n:return:                    true if the desired cached item is present, false otherwise.\n```\n\n#### cache_contains_result(return_value, alive_only)\n\n```\nreturn true if the cache contains a cache item with the specified user function return value. o(n) time\ncomplexity.\n\n:param return_value:        a return value coming from the user function.\n\n:param alive_only:          whether to check alive cache item only (default to true).\n\n:return:                    true if the desired cached item is present, false otherwise.\n```\n\n### iterating through the cache\n\n#### cache_arguments()\n\n```\nget user function arguments of all alive cache elements\n\nsee also: cache_items()\n\nexample:\n   @cached\n   def f(a, b, c, d):\n       ...\n   f(1, 2, c=3, d=4)\n   for argument in f.cache_arguments():\n       print(argument)  # ((1, 2), {'c': 3, 'd': 4})\n\n:return: an iterable which iterates through a list of a tuple containing a tuple (positional arguments) and\n        a dict (keyword arguments)\n```\n\n#### cache_results()\n\n```\nget user function return values of all alive cache elements\n\nsee also: cache_items()\n\nexample:\n   @cached\n   def f(a):\n       return a\n   f('hello')\n   for result in f.cache_results():\n       print(result)  # 'hello'\n\n:return: an iterable which iterates through a list of user function result (of any type)\n```\n\n#### cache_items()\n\n```\nget cache items, i.e. entries of all alive cache elements, in the form of (argument, result).\n\nargument: a tuple containing a tuple (positional arguments) and a dict (keyword arguments).\nresult: a user function return value of any type.\n\nsee also: cache_arguments(), cache_results().\n\nexample:\n   @cached\n   def f(a, b, c, d):\n       return 'the answer is ' + str(a)\n   f(1, 2, c=3, d=4)\n   for argument, result in f.cache_items():\n       print(argument)  # ((1, 2), {'c': 3, 'd': 4})\n       print(result)    # 'the answer is 1'\n\n:return: an iterable which iterates through a list of (argument, result) entries\n```\n\n#### cache_for_each()\n\n```\nperform the given action for each cache element in an order determined by the algorithm until all\nelements have been processed or the action throws an error\n\n:param consumer:           an action function to process the cache elements. must have 3 arguments:\n                             def consumer(user_function_arguments, user_function_result, is_alive): ...\n                           user_function_arguments is a tuple holding arguments in the form of (args, kwargs).\n                             args is a tuple holding positional arguments.\n                             kwargs is a dict holding keyword arguments.\n                             for example, for a function: foo(a, b, c, d), calling it by: foo(1, 2, c=3, d=4)\n                             user_function_arguments == ((1, 2), {'c': 3, 'd': 4})\n                           user_function_result is a return value coming from the user function.\n                           is_alive is a boolean value indicating whether the cache is still alive\n                           (if a ttl is given).\n```\n\n### removing something from the cache\n\n#### cache_clear()\n\n```\nclear the cache and its statistics information\n```\n\n#### cache_remove_if(predicate)\n\n```\nremove all cache elements that satisfy the given predicate\n\n:param predicate:           a predicate function to judge whether the cache elements should be removed. must\n                            have 3 arguments, and returns true or false:\n                              def consumer(user_function_arguments, user_function_result, is_alive): ...\n                            user_function_arguments is a tuple holding arguments in the form of (args, kwargs).\n                              args is a tuple holding positional arguments.\n                              kwargs is a dict holding keyword arguments.\n                              for example, for a function: foo(a, b, c, d), calling it by: foo(1, 2, c=3, d=4)\n                              user_function_arguments == ((1, 2), {'c': 3, 'd': 4})\n                            user_function_result is a return value coming from the user function.\n                            is_alive is a boolean value indicating whether the cache is still alive\n                            (if a ttl is given).\n\n:return:                    true if at least one element is removed, false otherwise.\n```\n\n</details>\n\n## q&a\n\n1. **q: there are duplicated code in `memoization` and most of them can be eliminated by using another level of\nabstraction (e.g. classes and multiple inheritance). why not refactor?**\n\n   a: we would like to keep the code in a proper level of abstraction. however, these abstractions make it run slower.\nas this is a caching library focusing on speed, we have to give up some elegance for better performance. refactoring\nis our future work.\n\n\n2. **q: i have submitted an issue and not received a reply for a long time. anyone can help me?**\n\n   a: sorry! we are not working full-time, but working voluntarily on this project, so you might experience some delay.\nwe appreciate your patience.\n\n\n## contributing\n\nthis project welcomes contributions from anyone.\n- [read contributing guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/contributing.md) first.\n- [submit bugs](https://github.com/lonelyenvoy/python-memoization/issues) and help us verify fixes.\n- [submit pull requests](https://github.com/lonelyenvoy/python-memoization/pulls) for bug fixes and features and discuss existing proposals. please make sure that your pr passes the tests in ```test.py```.\n- [see contributors](https://github.com/lonelyenvoy/python-memoization/blob/master/contributors.md) of this project.\n\n\n## license\n\n[the mit license](https://github.com/lonelyenvoy/python-memoization/blob/master/license)\n\n\n[pythonsvg]: https://img.shields.io/pypi/pyversions/memoization.svg\n[python]: https://www.python.org\n\n[travismaster]: https://travis-ci.com/lonelyenvoy/python-memoization.svg?branch=master\n[travis]: https://travis-ci.com/lonelyenvoy/python-memoization\n\n[coverallssvg]: https://coveralls.io/repos/github/lonelyenvoy/python-memoization/badge.svg?branch=master\n[coveralls]: https://coveralls.io/github/lonelyenvoy/python-memoization?branch=master\n\n[repositorysvg]: https://img.shields.io/pypi/v/memoization\n[repository]: https://pypi.org/project/memoization\n\n[downloadssvg]: https://img.shields.io/pypi/dm/memoization\n\n[prsvg]: https://img.shields.io/badge/pull_requests-welcome-blue.svg\n[pr]: https://github.com/lonelyenvoy/python-memoization#contributing\n\n[licensesvg]: https://img.shields.io/badge/license-mit-blue.svg\n[license]: https://github.com/lonelyenvoy/python-memoization/blob/master/license\n\n[codacysvg]: https://api.codacy.com/project/badge/grade/52c68fb9de6b4b149e77e8e173616db6\n[codacy]: https://www.codacy.com/manual/petrinchor/python-memoization?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=lonelyenvoy/python-memoization&amp;utm_campaign=badge_grade\n\n\n",
  "docs_url": null,
  "keywords": "memoization memorization remember decorator cache caching function callable functional ttl limited capacity fast high-performance optimization",
  "license": "mit",
  "name": "memoization",
  "package_url": "https://pypi.org/project/memoization/",
  "project_url": "https://pypi.org/project/memoization/",
  "project_urls": {
    "Homepage": "https://github.com/lonelyenvoy/python-memoization"
  },
  "release_url": "https://pypi.org/project/memoization/0.4.0/",
  "requires_dist": [],
  "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
  "summary": "a powerful caching library for python, with ttl support and multiple algorithm options. (https://github.com/lonelyenvoy/python-memoization)",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "lonelyenvoy",
    "petrinchor@gmail.com"
  ],
  "kwds": "lru_cache __cache cachingalgorithmflag cache_arguments cache",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_memoization",
  "homepage": "https://github.com/lonelyenvoy/python-memoization",
  "release_count": 10,
  "dependency_ids": [],
  "documentation_summary": "The HTML text describes \"memoization,\" a powerful caching library for Python, released under version 0.4.0 on August 1, 2021. It supports Time-To-Live (TTL) and multiple caching algorithms, offering enhancements over Python's `functools.lru_cache` by supporting unhashable types, preventing hash collision attacks, and providing extensibility for new caching algorithms. The library is designed to be thread-safe, allows for custom cache keys, and includes features for on-demand partial cache clearing and iterating through the cache. It requires Python 3.4 or newer but is not compatible with Python 3.0 to 3.3. The project is open-source, licensed under the MIT License, and encourages contributions from the community.",
  "embedding": [
    -0.008652478456497192,
    0.011127603240311146,
    -0.0038869918789714575,
    -0.05499657616019249,
    -0.029896719381213188,
    0.0033379325177520514,
    0.017862731590867043,
    -0.016775071620941162,
    -0.030203495174646378,
    -0.021544044837355614,
    0.016217296943068504,
    0.029868829995393753,
    -0.00395671371370554,
    -0.0030311564914882183,
    -0.008038926869630814,
    -0.017374679446220398,
    0.029729386791586876,
    -0.025546077638864517,
    0.029422610998153687,
    -0.01066046766936779,
    0.035725463181734085,
    8.257678564405069e-05,
    -0.028488337993621826,
    -0.020400606095790863,
    -0.021795043721795082,
    -0.000724235491361469,
    0.012856705114245415,
    -0.03491669148206711,
    0.010263052769005299,
    0.007376569323241711,
    0.03265770524740219,
    -0.009147503413259983,
    -0.03943466395139694,
    -0.017709344625473022,
    -0.03525135666131973,
    -0.011343740858137608,
    -0.00015338801313191652,
    -0.0012663226807489991,
    0.05524757504463196,
    -0.004479627124965191,
    0.02390064112842083,
    -0.008589728735387325,
    -0.0034756329841911793,
    -0.009475195780396461,
    -0.018030064180493355,
    0.004859611392021179,
    0.005019971635192633,
    -0.03131904453039169,
    -0.03502824530005455,
    -0.0010763306636363268,
    0.016691405326128006,
    0.020051997154951096,
    -0.012563873082399368,
    -0.011999126523733139,
    0.014543972909450531,
    -0.011002103798091412,
    -0.002550075761973858,
    0.030649714171886444,
    -0.024277139455080032,
    -0.001441498752683401,
    0.015924464911222458,
    -0.006295880768448114,
    -0.033717475831508636,
    -0.0355023555457592,
    0.020567938685417175,
    -0.012954315170645714,
    -0.013658505864441395,
    0.0015068629290908575,
    0.007627567742019892,
    0.028753280639648438,
    -0.006878057960420847,
    0.05017182603478432,
    0.007704261690378189,
    -0.01019333116710186,
    0.031542155891656876,
    -0.02313370257616043,
    -0.024611804634332657,
    0.04319964349269867,
    0.00397065794095397,
    0.008059843443334103,
    0.011448323726654053,
    -0.00010763306636363268,
    0.012954315170645714,
    0.047884948551654816,
    0.0119294049218297,
    0.040633879601955414,
    -0.0022241263650357723,
    0.00437155831605196,
    -0.002727866405621171,
    -0.007557846140116453,
    0.01332384068518877,
    -0.004800347611308098,
    0.016384629532694817,
    0.023579921573400497,
    -0.013881615363061428,
    0.019285056740045547,
    -0.013860698789358139,
    0.01512963604182005,
    -0.008917422033846378,
    -0.019703388214111328,
    -0.00993536040186882,
    0.015157525427639484,
    -0.008777977898716927,
    -0.010820827446877956,
    -0.04760606214404106,
    -0.020051997154951096,
    0.0024803539272397757,
    -0.01197820995002985,
    0.026577960699796677,
    0.00972619466483593,
    -0.04501241073012352,
    0.05432724580168724,
    0.003048586891964078,
    -0.03937888890504837,
    0.0010527996346354485,
    -0.0044935718178749084,
    0.02939472161233425,
    -0.01651012897491455,
    -0.009049893356859684,
    -0.019787054508924484,
    0.0018267118139192462,
    -0.002940518083050847,
    0.01920139044523239,
    0.011992153711616993,
    0.012452318333089352,
    -0.0119294049218297,
    0.009558862075209618,
    -0.003156655700877309,
    -0.01920139044523239,
    -0.00874311663210392,
    0.024067973718047142,
    0.01862967200577259,
    -0.01706790365278721,
    0.00890347734093666,
    -0.018587838858366013,
    0.0004385938518680632,
    -0.01319834217429161,
    -0.01981494389474392,
    -0.014934414997696877,
    -0.0041728513315320015,
    -0.001920836279168725,
    0.02550424449145794,
    -0.005410413723438978,
    0.006790905725210905,
    -0.00845725741237402,
    0.04308808967471123,
    -0.003250780049711466,
    0.0031078504398465157,
    -0.007320791948586702,
    -0.016524072736501694,
    -0.006686323322355747,
    -0.02825128473341465,
    -0.04283709079027176,
    0.018587838858366013,
    -0.010067831724882126,
    -0.004483113531023264,
    -0.012305902317166328,
    -0.01991255395114422,
    -0.013567867688834667,
    -0.01670534908771515,
    0.01939661242067814,
    0.0209026038646698,
    -0.01141346339136362,
    -0.001702084089629352,
    0.011329797096550465,
    0.026048073545098305,
    0.05100848898291588,
    -0.010548911988735199,
    0.004263489507138729,
    0.015701355412602425,
    -0.008687339723110199,
    0.03756612166762352,
    -0.013832810334861279,
    0.0036081045400351286,
    -0.021976320073008537,
    0.0022398135624825954,
    0.006651462055742741,
    0.0015364947030320764,
    -0.008129565045237541,
    0.013170452788472176,
    0.004472655244171619,
    0.008206258527934551,
    0.009510057047009468,
    0.013226230628788471,
    -0.02643851563334465,
    -0.010046915151178837,
    0.0030084967147558928,
    -0.0003518773301038891,
    0.015283023938536644,
    0.0012802670244127512,
    0.007690317463129759,
    0.028892725706100464,
    -0.014432418160140514,
    -0.013261090964078903,
    -0.5733922719955444,
    0.007606651168316603,
    -0.040494438260793686,
    -0.01956394501030445,
    -0.01977311074733734,
    -0.010716244578361511,
    0.004653932061046362,
    0.006198270246386528,
    -0.027344901114702225,
    -0.002621540566906333,
    -0.009279974736273289,
    0.028809059411287308,
    -0.004155420698225498,
    -0.01712368056178093,
    -0.015645578503608704,
    -0.0208049938082695,
    0.0037824090104550123,
    -0.01630096323788166,
    -0.008366619236767292,
    0.0079692043364048,
    -0.009454279206693172,
    0.01893644779920578,
    -0.021181490272283554,
    0.021195435896515846,
    -0.01042341347783804,
    0.014160502701997757,
    -0.012961287051439285,
    0.004591182339936495,
    0.017207346856594086,
    0.02074921503663063,
    -0.01671929471194744,
    0.031235378235578537,
    0.0220460407435894,
    -0.01334475725889206,
    0.06314008682966232,
    -0.010799910873174667,
    0.006693295203149319,
    0.03714779019355774,
    0.001385721261613071,
    0.031848929822444916,
    -0.022464372217655182,
    -0.031542155891656876,
    0.01482286024838686,
    0.020777104422450066,
    0.007467207498848438,
    -0.0038033255841583014,
    0.010005082003772259,
    0.030872825533151627,
    0.003228120505809784,
    -0.025211412459611893,
    0.0075020682998001575,
    0.012863676995038986,
    -0.017207346856594086,
    -0.016273073852062225,
    0.015255135484039783,
    0.005553343333303928,
    0.0017230006633326411,
    -0.00988655537366867,
    0.002747040009126067,
    0.007285930681973696,
    0.005563801620155573,
    0.013909504748880863,
    -0.005023457575589418,
    0.0030607881490141153,
    -0.04629529267549515,
    0.04169365391135216,
    -0.011699322611093521,
    -0.02420741878449917,
    0.016956347972154617,
    -0.024486305192112923,
    0.01634279638528824,
    -0.00742537435144186,
    -0.003862589132040739,
    -0.011050909757614136,
    0.023621754720807076,
    0.043339088559150696,
    0.03011982887983322,
    -0.010360663756728172,
    0.0061912983655929565,
    0.018852781504392624,
    0.025434521958231926,
    0.022589871659874916,
    0.0008022367837838829,
    -0.053574252873659134,
    0.03848644718527794,
    0.025518188253045082,
    -0.005075749009847641,
    -0.003789381356909871,
    0.01805795356631279,
    0.021404599770903587,
    -0.005720675922930241,
    0.009537945501506329,
    -0.011448323726654053,
    -0.032825034111738205,
    -0.005452246870845556,
    0.008345702663064003,
    -0.029311055317521095,
    0.0022450427059084177,
    -0.01609179750084877,
    -0.05131526291370392,
    -0.005473163444548845,
    -0.02628512866795063,
    0.019326889887452126,
    0.022743260487914085,
    0.019898608326911926,
    -0.003013725858181715,
    -0.002048078691586852,
    -0.0018720310181379318,
    0.031207488849759102,
    -0.017416512593626976,
    -0.01568741165101528,
    -0.030705492943525314,
    0.008791922591626644,
    -0.014725249260663986,
    0.005724161863327026,
    -0.02741462178528309,
    0.03357803076505661,
    0.014216280542314053,
    0.01533880177885294,
    0.0008318685577251017,
    -0.00838056392967701,
    -0.0019678985700011253,
    0.004291378427296877,
    -0.002307792427018285,
    0.02261776104569435,
    0.0013778775464743376,
    0.0358927957713604,
    0.003733603749424219,
    -0.03078915923833847,
    0.002661630744114518,
    0.01128099113702774,
    0.017974287271499634,
    -0.0036499376874417067,
    -0.009663444943726063,
    0.034888800233602524,
    -0.01176904421299696,
    0.013302924111485481,
    -0.0025797076523303986,
    0.023063980042934418,
    -0.021334879100322723,
    -0.011580795049667358,
    0.00027104359469376504,
    0.003419855609536171,
    -0.018546005710959435,
    -0.03129115700721741,
    -0.022673537954688072,
    -0.012647539377212524,
    -0.0023653130047023296,
    -0.01780695468187332,
    0.0061703817918896675,
    -0.016789015382528305,
    0.016426462680101395,
    -0.02007988654077053,
    0.03170948475599289,
    -0.0019400097662582994,
    0.00570673169568181,
    -0.005490593612194061,
    0.009293919429183006,
    -0.01461369451135397,
    -0.00972619466483593,
    -0.004427336156368256,
    0.007983149029314518,
    0.0009682618547230959,
    0.0038904778193682432,
    -0.04350642114877701,
    -0.007571790367364883,
    -0.007704261690378189,
    0.029840942472219467,
    -0.012047931551933289,
    -0.043701641261577606,
    -0.005745078437030315,
    -0.019884664565324783,
    -0.0034791191574186087,
    0.01094632688909769,
    0.0005643110489472747,
    0.025225356221199036,
    -0.02851622737944126,
    0.01759778894484043,
    -0.016105741262435913,
    -0.01376308873295784,
    0.006919891107827425,
    0.019675498828291893,
    -0.03594857454299927,
    -0.010005082003772259,
    0.021711377426981926,
    0.0021021130960434675,
    0.005842688959091902,
    -0.017360733821988106,
    -0.01639857329428196,
    0.0022659592796117067,
    0.018169507384300232,
    0.0016314907697960734,
    -0.032880812883377075,
    -0.005856633186340332,
    0.0004067832778673619,
    0.022687481716275215,
    0.018769115209579468,
    -0.019856777042150497,
    0.009921415708959103,
    0.03525135666131973,
    0.008610645309090614,
    -0.0006261891685426235,
    -0.002968406770378351,
    -0.01651012897491455,
    -0.009224197827279568,
    -0.010562856681644917,
    0.025643687695264816,
    -0.016022074967622757,
    0.023579921573400497,
    -0.02033088542521,
    0.016175463795661926,
    -0.008241119794547558,
    -0.013093759305775166,
    -0.019675498828291893,
    -0.0019522111397236586,
    0.03516769036650658,
    -0.017472289502620697,
    0.01427903026342392,
    -0.007920399308204651,
    -0.031904708594083786,
    0.026201462373137474,
    0.03098437935113907,
    -0.004141476470977068,
    -0.001159996842034161,
    0.00895228236913681,
    -0.014627639204263687,
    0.02410980686545372,
    0.00324729410931468,
    -6.82511308696121e-05,
    -0.024040086194872856,
    0.005229136906564236,
    0.016942404210567474,
    -0.004950249567627907,
    -0.005392983090132475,
    0.03870955854654312,
    0.021599821746349335,
    0.03115171194076538,
    -0.018448395654559135,
    0.019438445568084717,
    -0.031012268736958504,
    -0.003412883495911956,
    0.01614757440984249,
    0.019285056740045547,
    -0.02597835287451744,
    -0.015199358575046062,
    0.013693367131054401,
    0.017360733821988106,
    0.01078596618026495,
    -0.01868544891476631,
    0.006846683565527201,
    0.00448659947142005,
    0.00018585224461276084,
    -0.0123128741979599,
    -0.0027017206884920597,
    0.003527924418449402,
    -0.018336839973926544,
    0.01634279638528824,
    0.010095720179378986,
    0.030566047877073288,
    0.010019026696681976,
    0.010632578283548355,
    0.0007865493535064161,
    0.01226406916975975,
    -0.008764033205807209,
    0.010988160036504269,
    -0.050785377621650696,
    -0.008108648471534252,
    -0.024723360314965248,
    -0.0007490738644264638,
    0.001805795356631279,
    -0.014543972909450531,
    -0.04278131201863289,
    -0.0330202579498291,
    -0.027177568525075912,
    0.028181562200188637,
    0.0184205062687397,
    0.033856917172670364,
    0.03126326575875282,
    0.005417386069893837,
    -0.0025169579312205315,
    -0.03497246652841568,
    -0.03527924418449402,
    0.01754201203584671,
    0.013832810334861279,
    0.01759778894484043,
    -0.03497246652841568,
    -0.0383748933672905,
    0.010263052769005299,
    0.0012950829695910215,
    0.002391458721831441,
    0.014767082408070564,
    0.01702607050538063,
    -0.006641003768891096,
    -0.0007965718396008015,
    -0.050478603690862656,
    -0.004406419582664967,
    0.03999244049191475,
    -0.008603673428297043,
    -0.024249251931905746,
    0.0006379546830430627,
    0.012612678110599518,
    0.006407435983419418,
    -0.005734620150178671,
    0.0123128741979599,
    0.027289122343063354,
    0.007662428542971611,
    0.006334227975457907,
    0.0016497927717864513,
    -0.0014040232636034489,
    -0.010827799327671528,
    0.02970149740576744,
    -0.016649572178721428,
    -0.003048586891964078,
    -0.008018010295927525,
    0.02695445716381073,
    -0.004517974331974983,
    0.02116754651069641,
    0.003639479400590062,
    0.01181784924119711,
    0.014292974025011063,
    -0.001088532037101686,
    -0.009621611796319485,
    -0.012556901201605797,
    0.010604689829051495,
    0.031486377120018005,
    0.004667876288294792,
    -0.011789960786700249,
    0.005598662421107292,
    -0.025852853432297707,
    -0.004570265766233206,
    0.004849153105169535,
    0.003747548209503293,
    0.025950463488698006,
    -0.006923377513885498,
    -0.0074811517260968685,
    0.047940727323293686,
    -0.006198270246386528,
    0.0041519347578287125,
    0.013881615363061428,
    0.009579778648912907,
    -0.0021387171000242233,
    0.01355392299592495,
    0.004741084296256304,
    -0.009823805652558804,
    0.011155492626130581,
    -0.011922432109713554,
    0.00964950118213892,
    -0.005713703576475382,
    0.018978280946612358,
    0.016538016498088837,
    0.010813855566084385,
    0.03767767548561096,
    -0.015771077945828438,
    -0.04102432355284691,
    0.0010981187224388123,
    -0.02116754651069641,
    -0.0036325070541352034,
    0.017458345741033554,
    -0.006386519409716129,
    0.047940727323293686,
    0.006449269130825996,
    0.026424571871757507,
    0.027916619554162025,
    -0.006553851533681154,
    0.017876675352454185,
    0.0032856410834938288,
    -0.007202264852821827,
    0.01733284629881382,
    0.029617831110954285,
    -0.016802961006760597,
    0.007181348279118538,
    0.014599750749766827,
    0.008331757970154285,
    0.019800998270511627,
    0.029617831110954285,
    -0.007369596976786852,
    -0.052542369812726974,
    -0.04216776043176651,
    0.03151426464319229,
    0.0063412003219127655,
    -0.01101604849100113,
    -0.021557988598942757,
    0.00013563073298428208,
    -0.02726123481988907,
    0.018071897327899933,
    -0.02364964410662651,
    -0.005392983090132475,
    -0.0074811517260968685,
    0.03522346541285515,
    0.0005734620499424636,
    0.007739122491329908,
    0.023217368870973587,
    -0.019103780388832092,
    0.007495096419006586,
    0.0006213957676663995,
    -0.013219257816672325,
    -0.012968259863555431,
    -0.022492261603474617,
    0.0107371611520648,
    0.01691451482474804,
    0.005811314098536968,
    -0.009300891309976578,
    -0.0011268790112808347,
    0.01427903026342392,
    0.015296968631446362,
    -0.01733284629881382,
    -0.0189922247081995,
    -0.04587696120142937,
    0.022645648568868637,
    -0.011985181830823421,
    0.04342275485396385,
    -0.019898608326911926,
    -0.021195435896515846,
    0.024611804634332657,
    -4.173777142568724e-06,
    0.0008357904152944684,
    0.028432561084628105,
    -0.0002192969259340316,
    -0.030872825533151627,
    0.009189336560666561,
    0.00039262103382498026,
    0.012319847010076046,
    0.0050652907229959965,
    -0.009949304163455963,
    0.006769989151507616,
    -0.018225286155939102,
    -0.008575784973800182,
    0.006815308704972267,
    -0.02261776104569435,
    -0.007017501629889011,
    -0.009286947548389435,
    0.008764033205807209,
    0.0006706368294544518,
    0.0067421006970107555,
    0.018741227686405182,
    -0.0043611000292003155,
    -0.005389497149735689,
    0.033550143241882324,
    0.0039846021682024,
    0.028474394232034683,
    -0.010702299885451794,
    0.03483302518725395,
    -0.005790397524833679,
    0.004225142765790224,
    -0.0014075093204155564,
    -0.04133109748363495,
    0.0075020682998001575,
    0.013944365084171295,
    0.004427336156368256,
    -0.00015186285600066185,
    0.002741810865700245,
    -0.01971733197569847,
    -0.002985837170854211,
    0.003177572274580598,
    0.034888800233602524,
    -0.0028254769276827574,
    -0.017346790060400963,
    -0.019675498828291893,
    -0.007017501629889011,
    -0.008004065603017807,
    -0.0059751602821052074,
    0.006372574716806412,
    -0.007132542785257101,
    -0.0034651746973395348,
    -0.018908558413386345,
    0.0035610422492027283,
    -0.004029921721667051,
    -0.005009513348340988,
    0.022213373333215714,
    -0.029729386791586876,
    -0.00241237529553473,
    -0.0008859029621817172,
    0.022324929013848305,
    0.006292394828051329,
    -0.0004937176709063351,
    -0.011134576052427292,
    -0.032936591655015945,
    -0.008415424264967442,
    -0.008366619236767292,
    0.012368652038276196,
    -0.004877041559666395,
    0.006620087195187807,
    0.022548038512468338,
    0.028209451586008072,
    0.02529507875442505,
    -0.003820755984634161,
    0.010493135079741478,
    0.011622628197073936,
    0.024486305192112923,
    0.0039846021682024,
    -0.016802961006760597,
    0.015283023938536644,
    -0.006512018386274576,
    -0.009949304163455963,
    0.032099928706884384,
    -0.008185341954231262,
    -0.01567346602678299,
    -0.034582026302814484,
    -0.014181419275701046,
    0.042195647954940796,
    0.014725249260663986,
    -0.011029993183910847,
    -0.021976320073008537,
    -0.032155707478523254,
    -0.02245042845606804,
    -0.003097392152994871,
    0.006658434402197599,
    0.00742537435144186,
    -0.023565977811813354,
    -0.0020742244087159634,
    0.019020114094018936,
    -0.009328780695796013,
    0.033494364470243454,
    0.030231384560465813,
    -0.013672450557351112,
    -0.02229703962802887,
    0.019522111862897873,
    0.029924606904387474,
    0.015910521149635315,
    -0.0177511777728796,
    0.00115738227032125,
    -0.03201626241207123,
    -0.026048073545098305,
    -0.011908488348126411,
    0.00015959762095008045,
    0.005330233834683895,
    0.009168419986963272,
    0.01406986452639103,
    0.007223181426525116,
    -0.0011756842723116279,
    -0.011329797096550465,
    -0.01908983662724495,
    0.022283095866441727,
    -0.018755171447992325,
    -0.03882111236453056,
    -0.015380634926259518,
    -0.005392983090132475,
    -0.04760606214404106,
    0.0028045603539794683,
    0.013254119083285332,
    0.008959254249930382,
    0.010507078841328621,
    -0.006923377513885498,
    0.0021735779009759426,
    -0.008206258527934551,
    -0.01920139044523239,
    0.03884899988770485,
    0.011127603240311146,
    0.02410980686545372,
    0.02136276848614216,
    0.016105741262435913,
    -0.012647539377212524,
    -0.009865638799965382,
    0.015408523380756378,
    0.003140968270599842,
    0.03558602184057236,
    0.02120937965810299,
    -0.02804211899638176,
    -0.01303798146545887,
    0.01743045635521412,
    0.0072301533073186874,
    -0.010283969342708588,
    -0.023552032187581062,
    0.01078596618026495,
    0.023370755836367607,
    0.024179529398679733,
    -0.018615728244185448,
    -0.015534022822976112,
    -0.009823805652558804,
    -0.004158907104283571,
    -0.03137482330203056,
    -0.0027958452701568604,
    0.019326889887452126,
    -0.019996220245957375,
    -0.02872539311647415,
    0.047466620802879333,
    0.02830706164240837,
    -0.019522111862897873,
    -0.02111176960170269,
    -0.01563163287937641,
    -0.01014452613890171,
    -0.026117796078324318,
    -0.008812839165329933,
    0.003792867297306657,
    0.006309825461357832,
    0.03527924418449402,
    -0.017667511478066444,
    -0.0015321371611207724,
    0.0526818111538887,
    -0.017374679446220398,
    -0.0024245765525847673,
    -0.014348751865327358,
    -0.023816976696252823,
    0.04233509302139282,
    -0.004239086993038654,
    -0.014188392087817192,
    -0.01609179750084877,
    -0.017528066411614418,
    -0.017472289502620697,
    -0.01733284629881382,
    -0.02054004929959774,
    -0.0214743223041296,
    -0.0027383246924728155,
    0.00817139819264412,
    0.025532132014632225,
    -0.018336839973926544,
    -0.009384557604789734,
    0.0021526613272726536,
    0.0029021711088716984,
    -0.013226230628788471,
    -0.0017046986613422632,
    0.00109288957901299,
    0.004730626009404659,
    -0.010214247740805149,
    -0.0029074002522975206,
    -0.026271184906363487,
    -0.0052151926793158054,
    0.012975231744349003,
    -0.00869431160390377,
    -0.009712249971926212,
    -0.010409468784928322,
    0.05951455235481262,
    -0.03823544830083847,
    0.0358927957713604,
    0.002440263982862234,
    0.007474179845303297,
    -0.017402566969394684,
    0.002677318174391985,
    -0.008011037483811378,
    -0.0015556681901216507,
    0.03890477865934372,
    -0.010381580330431461,
    -0.04127532243728638,
    -0.02581102028489113,
    -0.003789381356909871,
    0.0213767122477293,
    0.005326747428625822,
    -0.006665406748652458,
    0.0005124554154463112,
    -0.004678334575146437,
    0.019159557297825813,
    -0.01599418744444847,
    0.006114603951573372,
    0.020400606095790863,
    -0.010514051653444767,
    0.013058898039162159,
    0.024695470929145813,
    -0.004263489507138729,
    0.02028905227780342,
    0.01857389509677887,
    -0.004598154220730066,
    -0.017514122650027275,
    -0.01614757440984249,
    -0.009768027812242508,
    -0.01853206194937229,
    0.008045898750424385,
    -0.0320720411837101,
    0.017458345741033554,
    -0.008018010295927525,
    -0.021585877984762192,
    -0.0077809556387364864,
    0.016956347972154617,
    -0.008422397077083588,
    -0.015534022822976112,
    -0.013233202509582043,
    0.04336697608232498,
    0.009921415708959103,
    0.014418473467230797,
    -0.009035948663949966,
    -0.0052744559943675995,
    -0.014007114805281162,
    0.014753138646483421,
    -0.03279714658856392,
    -0.02504407986998558,
    -0.014781027100980282,
    0.02307792380452156,
    0.012159486301243305,
    -0.011950320564210415,
    -0.01505991443991661,
    0.014160502701997757,
    -0.02794450707733631,
    -0.02695445716381073,
    -0.018378673121333122,
    0.025016190484166145,
    0.011545934714376926,
    0.00215440453030169,
    0.00895228236913681,
    0.013484201394021511,
    0.022338872775435448,
    0.019215336069464684,
    -0.0076136235147714615,
    -0.006654948461800814,
    0.0034024252090603113,
    0.006926863454282284,
    0.011218241415917873,
    0.007334736175835133,
    -0.01120429765433073,
    -0.01738862320780754,
    0.004786403384059668,
    -0.011455295607447624,
    -0.010353690944612026,
    0.030705492943525314,
    -0.030538160353899002,
    -0.010730189271271229,
    -0.029199501499533653,
    -0.003820755984634161,
    -0.017974287271499634,
    0.0033797654323279858,
    -0.0038939639925956726,
    -0.014418473467230797,
    0.004545863252133131,
    -0.005490593612194061,
    0.015896575525403023,
    -0.018699394538998604,
    -0.008018010295927525,
    -0.0060379100032150745,
    -0.013379618525505066,
    0.011294935829937458,
    -0.015966298058629036,
    -0.03611590713262558,
    -0.001538237789645791,
    0.008471202105283737,
    0.027958452701568604,
    0.011315852403640747,
    0.02313370257616043,
    0.01563163287937641,
    -0.001077202265150845,
    0.0045110019855201244,
    -0.020818937569856644,
    0.013219257816672325,
    -0.025546077638864517,
    0.014669472351670265,
    0.03413580730557442,
    0.007258042227476835,
    0.02229703962802887,
    -0.006403949577361345,
    0.04378530755639076,
    -0.007034932263195515,
    0.0022589871659874916,
    0.0004115766496397555,
    -0.031207488849759102,
    -0.03307603299617767,
    -0.008087731897830963,
    0.021293045952916145,
    -0.014090781100094318,
    0.0056579262018203735,
    0.02328708954155445,
    -0.0006876314873807132,
    0.008269008249044418,
    -0.031486377120018005,
    0.002084682695567608,
    -0.02477913722395897,
    0.0030642743222415447,
    0.0036359932273626328,
    0.010618634521961212,
    -0.022534094750881195,
    -0.00392185291275382,
    -0.007404457777738571,
    0.005291886627674103,
    0.010646522976458073,
    0.21351611614227295,
    0.0042321146465837955,
    -0.0026842902880162,
    0.01582685485482216,
    0.013051926158368587,
    0.04386897385120392,
    0.01853206194937229,
    0.008324786089360714,
    -0.015757132321596146,
    0.028697503730654716,
    -0.004427336156368256,
    -0.029366834089159966,
    -0.029143722727894783,
    0.007522984873503447,
    -0.005288400687277317,
    -0.011378602124750614,
    -0.012821843847632408,
    -0.030482381582260132,
    -0.013282007537782192,
    -0.0030433577485382557,
    -0.016984237357974052,
    -0.0005277070449665189,
    -0.02872539311647415,
    -0.01278001070022583,
    0.02958994358778,
    -0.0069512659683823586,
    -0.0032734398264437914,
    -0.0356975756585598,
    0.012333790771663189,
    -0.014599750749766827,
    -0.02105599083006382,
    -0.007718206383287907,
    -0.0028899696189910173,
    0.011029993183910847,
    -0.04345064237713814,
    0.003348390804603696,
    0.00450054369866848,
    -0.025992296636104584,
    0.01022121962159872,
    0.013379618525505066,
    0.016063908115029335,
    -0.023914586752653122,
    -0.008994115516543388,
    -0.031848929822444916,
    -0.0033745362889021635,
    -0.00012942113971803337,
    -0.026117796078324318,
    0.010046915151178837,
    -0.014864693395793438,
    0.02556002140045166,
    -0.037649787962436676,
    -0.04102432355284691,
    -0.004263489507138729,
    0.01582685485482216,
    -0.008931365795433521,
    0.005696273408830166,
    -0.013170452788472176,
    0.008080760017037392,
    0.015701355412602425,
    0.005068776663392782,
    -0.03566968813538551,
    0.020010164007544518,
    0.007773983757942915,
    0.007599679287523031,
    -0.042864978313446045,
    0.021014157682657242,
    -0.04621162638068199,
    -0.007362624630331993,
    0.004158907104283571,
    0.0007765268674120307,
    -0.009558862075209618,
    -0.02363569848239422,
    -0.00949611235409975,
    0.03232304006814957,
    -0.01001205388456583,
    -0.018908558413386345,
    0.031430598348379135,
    0.026633737608790398,
    0.014808915555477142,
    0.031542155891656876,
    0.00034250845783390105,
    -0.0027801578398793936,
    -0.00713951513171196,
    0.015854742377996445,
    -0.002157890470698476,
    -0.011476212181150913,
    0.02659190446138382,
    -0.01554796751588583,
    -0.01068138424307108,
    0.0014258113224059343,
    -0.0184205062687397,
    -0.0034390289802104235,
    -0.004779431037604809,
    7.097463821992278e-05,
    0.010304885916411877,
    0.016691405326128006,
    0.012257097288966179,
    0.00988655537366867,
    -0.009042920544743538,
    -0.007871594280004501,
    -0.024040086194872856,
    0.04774550721049309,
    0.019075891003012657,
    0.008687339723110199,
    -0.00212128646671772,
    -0.014348751865327358,
    -0.02602018602192402,
    0.00895228236913681,
    0.010744133032858372,
    -0.016858737915754318,
    0.011441351845860481,
    -0.037538230419158936,
    0.014948359690606594,
    -0.006201756652444601,
    -0.0066793509759008884,
    -0.0007930857827886939,
    -0.025239301845431328,
    -0.014055919833481312,
    0.0012192603899165988,
    0.008164426311850548,
    -0.00915447622537613,
    -0.018350785598158836,
    0.01070927269756794,
    -0.021223323419690132,
    -0.013470256701111794,
    -0.006937321741133928,
    -0.045458629727363586,
    0.01708184741437435,
    -0.012410485185682774,
    -0.02344047836959362,
    0.014878638088703156,
    -0.006613115314394236,
    -0.0032455509062856436,
    0.024751247838139534,
    0.0018406561575829983,
    -0.02592257410287857,
    -0.02953416481614113,
    -0.006201756652444601,
    -0.0234823115170002,
    0.008499090559780598,
    -0.016858737915754318,
    -0.017555955797433853,
    0.00941941887140274,
    -0.0053685805760324,
    0.0009177135652862489,
    -0.025699464604258537,
    -0.019229279831051826,
    0.009781972505152225,
    0.0033867377787828445,
    0.0032002318184822798,
    -0.016412517055869102,
    0.0018615727312862873,
    -0.0019591832533478737,
    -0.006825766991823912,
    0.014488195069134235,
    -0.01966155506670475,
    -0.013951337896287441,
    -0.01599418744444847,
    0.02313370257616043,
    0.014627639204263687,
    -0.02670346014201641,
    -0.0010650008916854858,
    0.00011008422734448686,
    0.013142564333975315,
    -0.02380303107202053,
    -0.03042660467326641,
    -0.1752527803182602,
    0.0074811517260968685,
    -0.002719151321798563,
    -0.03240670636296272,
    0.022952424362301826,
    -0.028641726821660995,
    0.00817139819264412,
    -0.00812259316444397,
    -0.020874714478850365,
    -0.004200740251690149,
    0.013477228581905365,
    -0.010207274928689003,
    0.004908416420221329,
    -0.02617357298731804,
    -0.00789251085370779,
    -0.019438445568084717,
    0.013058898039162159,
    -0.006926863454282284,
    0.01485074870288372,
    -0.003005010774359107,
    0.038263339549303055,
    -0.028753280639648438,
    0.02033088542521,
    0.00871522817760706,
    0.008784949779510498,
    -0.022534094750881195,
    -0.004444766324013472,
    -0.011329797096550465,
    0.01047919038683176,
    -0.030147718265652657,
    -0.019117724150419235,
    -0.000387391890399158,
    0.029813053086400032,
    0.014230224303901196,
    0.01996833086013794,
    0.028321005403995514,
    0.0072929030284285545,
    -0.002354854717850685,
    -0.0010083519155159593,
    0.02380303107202053,
    0.02928316779434681,
    0.023036090657114983,
    0.01660773903131485,
    -0.0220460407435894,
    -0.02607596293091774,
    -0.004441280383616686,
    0.006041396409273148,
    -0.018699394538998604,
    0.00923814158886671,
    -0.007125570438802242,
    0.051203709095716476,
    -0.01050010696053505,
    0.013470256701111794,
    0.0026529154274612665,
    0.026466405019164085,
    -0.014390585012733936,
    0.02473730407655239,
    0.00627147825434804,
    0.01404894795268774,
    0.005968188401311636,
    0.007174375932663679,
    -0.012501123361289501,
    0.014390585012733936,
    0.02132093533873558,
    -0.0009055121918208897,
    -0.04094065725803375,
    -0.02210181951522827,
    0.018852781504392624,
    -0.024193473160266876,
    0.008561840280890465,
    -0.011573823168873787,
    0.03201626241207123,
    0.008157453499734402,
    0.013902531936764717,
    0.00469576520845294,
    0.03943466395139694,
    -0.028223395347595215,
    2.139316165994387e-05,
    0.013756115920841694,
    0.015952354297041893,
    -0.011078798212110996,
    0.029980385676026344,
    0.002806303557008505,
    -0.007223181426525116,
    0.005218678619712591,
    -0.017151569947600365,
    0.00819928664714098,
    -0.004057810176163912,
    -0.020512161776423454,
    0.005556829739362001,
    0.01706790365278721,
    -0.020735271275043488,
    0.006393491290509701,
    -0.018908558413386345,
    -0.018769115209579468,
    0.0320720411837101,
    -0.010632578283548355,
    -0.0153666902333498,
    0.028293117880821228,
    -0.03310392424464226,
    -0.0027540121227502823,
    0.01181784924119711,
    -0.018016120418906212,
    -0.023105813190340996,
    0.029980385676026344,
    0.022952424362301826,
    -0.03566968813538551,
    0.005166387185454369,
    0.018490228801965714,
    0.0011948577594012022,
    0.004971166141331196,
    0.011789960786700249,
    0.03078915923833847,
    0.019438445568084717,
    -0.027819009497761726,
    0.0059960768558084965,
    0.016775071620941162,
    -0.015603744424879551,
    0.0048944721929728985,
    0.007376569323241711,
    0.04810805991292,
    -0.0069303493946790695,
    -0.01278001070022583,
    0.012786982581019402,
    -0.013944365084171295,
    -0.018099786713719368,
    -0.11177802830934525,
    -0.0358927957713604,
    0.006006535142660141,
    0.025546077638864517,
    -0.01857389509677887,
    0.008561840280890465,
    -0.0009944075718522072,
    0.002326966030523181,
    -0.018615728244185448,
    0.022589871659874916,
    0.0037440620362758636,
    0.007753067184239626,
    -0.012703316286206245,
    0.00281327567063272,
    -0.012389568611979485,
    -0.006546879652887583,
    -0.029896719381213188,
    0.006417894270271063,
    -0.007355652749538422,
    0.013226230628788471,
    0.002511728787794709,
    -0.010074803605675697,
    -0.02178109809756279,
    0.0061912983655929565,
    -0.008945310488343239,
    0.00949611235409975,
    -0.02302214689552784,
    0.021962374448776245,
    0.002529159188270569,
    0.024751247838139534,
    -0.0076833451166749,
    -0.0015425954479724169,
    -0.02130698971450329,
    -0.0177511777728796,
    0.023398645222187042,
    0.0215719323605299,
    0.0008545281598344445,
    -0.0025657631922513247,
    0.030817046761512756,
    -0.017723288387060165,
    -0.0011408233549445868,
    0.007718206383287907,
    -0.0038381866179406643,
    -0.005919382907450199,
    0.01451608445495367,
    -0.007606651168316603,
    -0.007697289809584618,
    0.019884664565324783,
    0.010883577167987823,
    -0.007976177148520947,
    -0.013449340127408504,
    -0.004960707854479551,
    -0.0016689662588760257,
    0.002225869335234165,
    0.03896055743098259,
    -0.0177511777728796,
    -0.011964265257120132,
    0.005030429922044277,
    -0.016217296943068504,
    0.011713266372680664,
    -0.00972619466483593,
    0.0007490738644264638,
    -0.003855617018416524,
    0.01975916512310505,
    0.042446646839380264,
    0.007031446322798729,
    0.029729386791586876,
    0.006135520525276661,
    0.014627639204263687,
    0.00356975756585598,
    0.0031252808403223753,
    0.0018964336486533284,
    -0.028948502615094185,
    0.018016120418906212,
    -0.02044243924319744,
    -0.0044935718178749084,
    0.010827799327671528,
    -0.02151615545153618,
    0.00636560283601284,
    0.009217225015163422,
    -0.01924322359263897,
    0.0012445346219465137,
    -0.041721541434526443,
    -0.012410485185682774,
    -0.02225520648062229,
    -0.004207712132483721,
    0.01904800347983837,
    0.01929900236427784,
    0.01567346602678299,
    -0.04133109748363495,
    0.01588263176381588,
    0.01306586991995573,
    0.02628512866795063,
    -0.0045737517066299915,
    -0.01651012897491455,
    0.010988160036504269,
    -0.00034229058655910194,
    0.01430691871792078,
    0.003963685594499111,
    0.006839711219072342,
    -0.025727353990077972,
    -0.03539079800248146,
    -0.06938716024160385,
    0.00812259316444397,
    0.0265361275523901,
    -0.02742856554687023,
    0.026103852316737175,
    -0.025587910786271095,
    0.007003557402640581,
    -0.03642268106341362,
    0.013058898039162159,
    0.01027002464979887,
    -0.031848929822444916,
    -0.01960577815771103,
    -0.00511060981079936,
    -0.01122521422803402,
    0.0009368870523758233,
    -0.01324714720249176,
    0.03374536335468292,
    -0.008520007133483887,
    0.028781170025467873,
    0.03296447917819023,
    3.033988832612522e-05,
    0.03193259611725807,
    0.016649572178721428,
    0.009189336560666561,
    -0.013937393203377724,
    0.0031235378701239824,
    -0.020302996039390564,
    0.03157004341483116,
    -0.002070738235488534,
    -0.008387535810470581,
    0.016775071620941162,
    -0.007836733013391495,
    -0.002483840100467205,
    0.004378530662506819,
    0.017765121534466743,
    0.032044149935245514,
    0.03653423860669136,
    -0.003897450165823102,
    0.016942404210567474,
    -0.014655527658760548,
    -0.011957293376326561,
    -0.0320720411837101,
    0.027721397578716278,
    -0.028293117880821228,
    -0.006937321741133928,
    -0.009586751461029053,
    0.003283898113295436,
    0.019173502922058105,
    0.027442511171102524,
    0.00993536040186882,
    0.0442873053252697,
    0.016928458586335182,
    -0.012368652038276196,
    -0.04135898873209953,
    0.004239086993038654,
    -0.006442296784371138,
    0.037845008075237274,
    0.0017395595787093043,
    -0.008018010295927525,
    -0.018978280946612358,
    0.024388695135712624,
    0.009321807883679867,
    0.011378602124750614,
    -0.0063377139158546925,
    0.008080760017037392,
    -0.037175677716732025,
    -0.059793438762426376,
    -0.008331757970154285,
    0.002640714170411229,
    -0.001920836279168725,
    -0.007244097534567118,
    -0.032880812883377075,
    0.0033501337748020887,
    0.013212285935878754,
    0.01174812763929367,
    -0.018239229917526245,
    -0.005720675922930241,
    0.006041396409273148,
    -0.036088015884160995,
    0.028753280639648438,
    0.0302592720836401,
    -0.03502824530005455,
    -0.021795043721795082,
    -0.003848644904792309,
    0.042028315365314484,
    0.011183381080627441,
    -0.024556027725338936,
    0.012117653153836727,
    0.006180840078741312,
    0.018741227686405182,
    -0.010834772139787674,
    -0.0027819008100777864,
    -0.0178487878292799,
    -0.011545934714376926,
    0.018085841089487076,
    0.008596701547503471,
    -0.009349697269499302,
    -0.007955260574817657,
    0.006083229556679726,
    -0.01308678649365902,
    0.014934414997696877,
    -0.023816976696252823,
    0.01796034164726734,
    0.007418402470648289,
    -0.021083880215883255,
    0.0050652907229959965,
    -0.02546241134405136,
    -0.024960413575172424,
    0.004720167722553015,
    0.03176526352763176,
    0.02214365266263485,
    -0.0012018299894407392,
    -0.00417982367798686,
    0.017095791175961494,
    -0.024974357336759567,
    0.03714779019355774,
    0.027079956606030464,
    0.007536929566413164,
    -0.015868688002228737,
    0.006376061122864485,
    0.0017604761524125934,
    0.004089185036718845,
    0.04883316531777382,
    -0.010123609565198421,
    0.025378745049238205,
    0.030538160353899002,
    0.016998181119561195,
    -0.02716362290084362,
    0.004378530662506819,
    -0.0023374243173748255,
    -0.011364657431840897,
    0.02095838077366352,
    -0.024402638897299767,
    -0.03698045760393143,
    -0.01687268167734146,
    -0.030398717150092125,
    0.0420004278421402,
    -0.005002541001886129,
    -0.02525324560701847,
    0.0750206857919693,
    0.009977193549275398,
    -0.023621754720807076,
    0.00969830621033907,
    -0.00819928664714098,
    0.02187870815396309,
    0.029115835204720497,
    0.0009691333980299532,
    0.007034932263195515,
    0.0014327835524454713,
    -0.00122187496162951,
    -0.0009299148805439472,
    -0.010228191502392292,
    -0.03695256635546684,
    -0.023607810959219933,
    0.01409775298088789,
    -0.004141476470977068,
    0.021850820630788803,
    0.005968188401311636,
    -0.009098698385059834,
    0.01687268167734146,
    0.022645648568868637,
    -0.028181562200188637,
    -0.027693510055541992,
    -0.012452318333089352,
    -0.0036150766536593437,
    0.047104064375162125,
    0.005528940819203854,
    0.006553851533681154,
    -0.07306847721338272,
    0.02592257410287857,
    0.0027958452701568604,
    0.0015208073891699314,
    -0.005619578994810581,
    -0.004521460272371769,
    0.0026285129133611917,
    -0.018350785598158836,
    0.0014842033851891756,
    0.00548362173140049,
    0.022854814305901527,
    -0.012703316286206245,
    0.00845725741237402,
    -0.015896575525403023,
    -0.04557018727064133,
    0.023063980042934418,
    -0.0026110822800546885,
    -0.00261979759670794,
    0.006125062238425016,
    -0.04554229602217674
  ]
}
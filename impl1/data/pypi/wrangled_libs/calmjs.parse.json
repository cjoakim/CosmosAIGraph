{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "calmjs.parse\n============\n\na collection of parsers and helper libraries for understanding\necmascript; a near feature complete fork of |slimit|_.  a cli front-end\nfor this package is shipped separately as |crimp|_.\n\n.. image:: https://github.com/calmjs/calmjs.parse/actions/workflows/build.yml/badge.svg?branch=1.3.1\n    :target: https://github.com/calmjs/calmjs.parse/actions/workflows/build.yml?query=branch:1.3.1\n.. image:: https://ci.appveyor.com/api/projects/status/5dj8dnu9gmj02msu/branch/1.3.1?svg=true\n    :target: https://ci.appveyor.com/project/metatoaster/calmjs-parse/branch/1.3.1\n.. image:: https://coveralls.io/repos/github/calmjs/calmjs.parse/badge.svg?branch=1.3.1\n    :target: https://coveralls.io/github/calmjs/calmjs.parse?branch=1.3.1\n\n.. |calmjs.parse| replace:: ``calmjs.parse``\n.. |crimp| replace:: ``crimp``\n.. |ply| replace:: ``ply``\n.. |slimit| replace:: ``slimit``\n.. _crimp: https://pypi.python.org/pypi/crimp\n.. _ply: https://pypi.python.org/pypi/ply\n.. _slimit: https://pypi.python.org/pypi/slimit\n\n\nintroduction\n------------\n\nfor any kind of build system that operates with javascript code in\nconjunction with a module system, the ability to understand what modules\na given set of sources require or provide is paramount.  as the calmjs\nproject provides a framework that produces and consume these module\ndefinitions, the the ability to have a comprehensive understanding of\ngiven javascript sources is a given.  this goal was originally achieved\nusing |slimit|_, a javascript minifier library that also provided a\ncomprehensive parser class that was built using python lex-yacc (i.e.\n|ply|_).\n\nhowever, as of mid-2017, it was noted that |slimit| remained in a\nminimum state of maintenance for more than four years (its most recent\nrelease, 0.8.1, was made 2013-03-26), along with a number of serious\noutstanding issues have left unattended and unresolved for the duration\nof that time span.  as the development of the calmjs framework require\nthose issues to be rectified as soon as possible, a decision to fork the\nparser portion of |slimit| was made. this was done in order to cater to\nthe interests current to calmjs project at that moment in time.\n\nthe fork was initial cut from another fork of |slimit| (specifically\n`lelit/slimit <https://github.com/lelit/slimit>`_), as it introduced and\naggregated a number of bug fixes from various sources.  to ensure a\nbetter quality control and assurance, a number of problematic changes\nintroduced by that fork were removed.   also, new tests were created to\nbring coverage to full, and issues reported on the |slimit| tracker were\nnoted and formalized into test cases where applicable.  finally, grammar\nrules were updated to ensure better conformance with the ecma-262 (es5)\nspecification.\n\nthe goal of |calmjs.parse| is to provide a similar api that |slimit| had\nprovided, except done in a much more extensible manner with more\ncorrectness checks in place.  this however resulted in some operations\nthat might take longer than what |slimit| had achieved, such as the\npretty printing of output.\n\na cli front-end that makes use of this package is provided through\n|crimp|_.\n\n\ninstallation\n------------\n\nthe following command may be executed to source the latest stable\nversion of |calmjs.parse| wheel from pypi for installation into the\ncurrent python environment.\n\n.. code:: console\n\n    $ pip install calmjs.parse\n\nas this package uses |ply|, it requires the generation of optimization\nmodules for its lexer.  the wheel distribution of |calmjs.parse| does\nnot require this extra step as it contains these pre-generated modules\nfor |ply| up to version 3.11 (the latest version available at the time\nof previous release), however the version of |ply| that is installed is\nbeyond the supported version, the following caveats will apply.\n\nif a more recent release of |ply| becomes available and the environment\nupgrades to that version, those pre-generated modules may become\nincompatible, which may result in a decreased performance and/or errors.\na corrective action can be achieved through a `manual optimization`_\nstep if a newer version of |calmjs.parse| is not available, or |ply| may\nbe downgraded back to version 3.11 if possible.\n\nalternatively, install a more recent version of |calmjs.parse| wheel\nthat has the most complete set of pre-generated modules built.\n\nonce the package is installed, the installation may be `tested`_ or be\n`used directly`_.\n\nmanual installation and packaging requirements\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*this section is for developers and advanced users; contains important\ninformation for package maintainers for os distributions (e.g. linux)\nthat will prevent less than ideal experiences for downstream users.*\n\ndevelopment is still ongoing with |calmjs.parse|, for the latest\nfeatures and bug fixes, the development version may be installed through\ngit like so:\n\n.. code:: console\n\n    $ pip install ply setuptools  # this must be done first; see below for reason\n    $ pip install -e git+https://github.com/calmjs/calmjs.parse.git#egg=calmjs.parse\n\nnote that all dependencies must be pre-installed ``setup.py build`` step\nto run, otherwise the build step required to create the pre-generated\nmodules will result in failure.\n\nif |ply| isn't installed:\n\n.. code:: console\n\n    $ python -m pip install -e .\n    ...\n    running egg_info\n    ...\n    warning: cannot find distribution for 'ply'; using default value,\n    assuming 'ply==3.11' for pre-generated modules\n    error: cannot find pre-generated modules for the assumed 'ply'\n    version from above and/or cannot `import ply` to build generated\n    modules, aborting build; please either ensure that the source\n    archive containing the pre-generate modules is being used, or that\n    the python package 'ply' is installed and available for import\n    before attempting to use the setup.py to build this package; please\n    refer to the top level readme for further details\n\nif ``setuptools`` isn't installed:\n\n.. code:: console\n\n    $ python -m pip install -e .\n    ...\n    running egg_info\n    ...\n    traceback (most recent call last):\n      ...\n    modulenotfounderror: no module named 'pkg_resources'\n\nnaturally, the git repository can be cloned directly and execute\n``python setup.py develop`` while inside the root of the source\ndirectory; again, both |ply| and ``setuptools`` must already have be\navailable for import.\n\nas the git repository does not contain any pre-generated modules or\ncode, the above message is likely to be seen by developers or distro\nmaintainers who are on their first try at interacting with this\nsoftware.  however, the zip archives released on pypi starting from\nversion 1.3.0 do contain these modules fully pre-generated, thus they\nmay be used as part of a standard installation step, i.e. without\nrequiring |ply| be available for import before usage of the ``setup.py``\nfor any purpose.  while the same warning message about |ply| being\nmissing may be shown, the pre-generated modules will allow the build\nstep to proceed as normal.\n\nmanual optimization\n~~~~~~~~~~~~~~~~~~~\n\nas lex and yacc require the generation of symbol tables, a way to\noptimize the performance is to cache the results.  for |ply|, this is\ndone using an auto-generated module.  however, the generated file is\nmarked with a version number, as the results may be specific to the\ninstalled version of |ply|.  in |calmjs.parse| this is handled by giving\nthem a name specific to the version of |ply| and the major python\nversion, as both together does result in subtle differences in the\noutputs and expectations of the auto-generated modules.\n\ntypically, the process for this optimization is automatic and a correct\nsymbol table will be generated, however there are cases where this will\nfail, so for this reason |calmjs.parse| provide a helper module and\nexecutable that can be optionally invoked to ensure that the correct\nencoding be used to generate that file.  other reasons where this may be\nnecessary is to allow system administrators to do so for their end\nusers, as they may not have write privileges at that level.\n\nto execute the optimizer from the shell, the provided helper script may\nbe used like so:\n\n.. code:: console\n\n    $ python -m calmjs.parse.parsers.optimize\n\nif warnings appear that warn that tokens are defined but not used, they\nmay be safely ignored.\n\nthis step is generally optionally for users who installed this package\nfrom pypi via a python wheel, provided the caveats as outlined in the\ninstallation section are addressed.\n\n.. _tested:\n\ntesting the installation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nto ensure that the |calmjs.parse| installation is functioning correctly,\nthe built-in testsuite can be executed by the following:\n\n.. code:: console\n\n    $ python -m unittest calmjs.parse.tests.make_suite\n\nif there are failures, please file an issue on the `issue tracker\n<https://github.com/calmjs/calmjs.parse/issues>`_ with the full\ntraceback, and/or the method of installation.  please also include\napplicable information about the environment, such as the version of\nthis software, python version, operating system environments, the\nversion of |ply| that was installed, plus other information related to\nthe issue at hand.\n\n\nusage\n-----\n\n.. _used directly:\n\nas this is a parser library, no executable shell commands are provided.\nthere is however a helper callable object provided at the top level for\nimmediate access to the parsing feature.  it may be used like so:\n\n.. code:: pycon\n\n    >>> from calmjs.parse import es5\n    >>> program_source = '''\n    ... // simple program\n    ... var main = function(greet) {\n    ...     var hello = \"hello \" + greet;\n    ...     return hello;\n    ... };\n    ... console.log(main('world'));\n    ... '''\n    >>> program = es5(program_source)\n    >>> # for a simple repr-like nested view of the ast\n    >>> program  # equivalent to repr(program)\n    <es5program @3:1 ?children=[\n      <varstatement @3:1 ?children=[\n        <vardecl @3:5 identifier=<identifier ...>, initializer=<funcexpr ...>>\n      ]>,\n      <exprstatement @7:1 expr=<functioncall @7:1 args=<arguments ...>,\n        identifier=<dotaccessor ...>>>\n    ]>\n    >>> # automatic reconstruction of ast into source, without having to\n    >>> # call something like `.to_ecma()`\n    >>> print(program)  # equivalent to str(program)\n    var main = function(greet) {\n      var hello = \"hello \" + greet;\n      return hello;\n    };\n    console.log(main('world'));\n\n    >>>\n\nplease note the change in indentation as the default printer has its own\nindentation scheme.  if comments are needed, the parser can be called\nusing ``with_comments=true``:\n\n.. code:: pycon\n\n    >>> program_wc = es5(program_source, with_comments=true)\n    >>> print(program_wc)\n    // simple program\n    var main = function(greet) {\n      var hello = \"hello \" + greet;\n      return hello;\n    };\n    console.log(main('world'));\n\n    >>>\n\nalso note that there are limitations with the capturing of comments as\ndocumented in the `limitations`_ section.\n\nthe parser classes are organized under the ``calmjs.parse.parsers``\nmodule, with each language being under their own module.  a\ncorresponding lexer class with the same name is also provided under the\n``calmjs.parse.lexers`` module.  for the moment, only es5 support is\nimplemented.\n\npretty/minified printing\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nthere is also a set of pretty printing helpers for turning the ast back\ninto a string.  these are available as functions or class constructors,\nand are produced by composing various lower level classes available in\nthe ``calmjs.parse.unparsers`` and related modules.\n\nthere is a default short-hand helper for turning the previously produced\nast back into a string, which can be manually invoked with certain\nparameters, such as what characters to use for indentation: (note that\nthe ``__str__`` call implicitly invoked through ``print`` shown\npreviously is implemented through this).\n\n.. code:: pycon\n\n    >>> from calmjs.parse.unparsers.es5 import pretty_print\n    >>> print(pretty_print(program, indent_str='    '))\n    var main = function(greet) {\n        var hello = \"hello \" + greet;\n        return hello;\n    };\n    console.log(main('world'));\n\n    >>>\n\nthere is also one for printing without any unneeded whitespaces, works\nas a source minifier:\n\n.. code:: pycon\n\n    >>> from calmjs.parse.unparsers.es5 import minify_print\n    >>> print(minify_print(program))\n    var main=function(greet){var hello=\"hello \"+greet;return hello;};...\n    >>> print(minify_print(program, obfuscate=true, obfuscate_globals=true))\n    var a=function(b){var a=\"hello \"+b;return a;};console.log(a('world'));\n\nnote that in the second example, the ``obfuscate_globals`` option was\nonly enabled to demonstrate the source obfuscation on the global scope,\nand this is generally not an option that should be enabled on production\nlibrary code that is meant to be reused by other packages (other sources\nreferencing the original unobfuscated names will be unable to do so).\n\nalternatively, direct invocation on a raw string can be done using the\nattributes provided under the same name as the above base objects that\nwere imported initially.  relevant keyword arguments would be diverted\nto the appropriate underlying functions, for example:\n\n.. code:: pycon\n\n    >>> # pretty print without comments being parsed\n    >>> print(es5.pretty_print(program_source))\n    var main = function(greet) {\n      var hello = \"hello \" + greet;\n      return hello;\n    };\n    console.log(main('world'));\n\n    >>> # pretty print with comments parsed\n    >>> print(es5.pretty_print(program_source, with_comments=true))\n    // simple program\n    var main = function(greet) {\n      var hello = \"hello \" + greet;\n      return hello;\n    };\n    console.log(main('world'));\n\n    >>> # minify print\n    >>> print(es5.minify_print(program_source, obfuscate=true))\n    var main=function(b){var a=\"hello \"+b;return a;};console.log(main('world'));\n\nsource map generation\n~~~~~~~~~~~~~~~~~~~~~\n\nfor the generation of source maps, a lower level unparser instance can\nbe constructed through one of the printer factory functions.  passing\nin an ast node will produce a generator which produces tuples containing\nthe yielded text fragment, plus other information which will aid in the\ngeneration of source maps.  there are helper functions from the\n``calmjs.parse.sourcemap`` module can be used like so to write the\nregenerated source code to some stream, along with processing the\nresults into a sourcemap file.  an example:\n\n.. code:: pycon\n\n    >>> import json\n    >>> from io import stringio\n    >>> from calmjs.parse.unparsers.es5 import pretty_printer\n    >>> from calmjs.parse.sourcemap import encode_sourcemap, write\n    >>> stream_p = stringio()\n    >>> print_p = pretty_printer()\n    >>> rawmap_p, _, names_p = write(print_p(program), stream_p)\n    >>> sourcemap_p = encode_sourcemap(\n    ...     'demo.min.js', rawmap_p, ['custom_name.js'], names_p)\n    >>> print(json.dumps(sourcemap_p, indent=2, sort_keys=true))\n    {\n      \"file\": \"demo.min.js\",\n      \"mappings\": \"aaea;iaci;iaca;aacj;aaca;\",\n      \"names\": [],\n      \"sources\": [\n        \"custom_name.js\"\n      ],\n      \"version\": 3\n    }\n    >>> print(stream_p.getvalue())\n    var main = function(greet) {\n    ...\n\nlikewise, this works similarly for the minify printer, which provides\nthe ability to create out a minified output with unneeded whitespaces\nremoved and identifiers obfuscated with the shortest possible value.\n\nnote that in previous example, the second return value in the write\nmethod was not used and that a custom value was passed in.  this is\nsimply due to how the ``program`` was generated from a string and thus\nthe ``sourcepath`` attribute was not assigned with a usable value for\npopulating the ``\"sources\"`` list in the resulting source map.  for the\nfollowing example, assign a value to that attribute on the program\ndirectly.\n\n.. code:: pycon\n\n    >>> from calmjs.parse.unparsers.es5 import minify_printer\n    >>> program.sourcepath = 'demo.js'  # say this was opened there\n    >>> stream_m = stringio()\n    >>> print_m = minify_printer(obfuscate=true, obfuscate_globals=true)\n    >>> sourcemap_m = encode_sourcemap(\n    ...     'demo.min.js', *write(print_m(program), stream_m))\n    >>> print(json.dumps(sourcemap_m, indent=2, sort_keys=true))\n    {\n      \"file\": \"demo.min.js\",\n      \"mappings\": \"aaea,iaaia,caak,caae,saasc,caak,caae,cacvb,...,yaayf,caai\",\n      \"names\": [\n        \"main\",\n        \"greet\",\n        \"hello\"\n      ],\n      \"sources\": [\n        \"demo.js\"\n      ],\n      \"version\": 3\n    }\n    >>> print(stream_m.getvalue())\n    var a=function(b){var a=\"hello \"+b;return a;};console.log(a('world'));\n\na high level api for working with named streams (i.e. opened files, or\nstream objects like ``io.stringio`` assigned with a name attribute) is\nprovided by the ``read`` and ``write`` functions from ``io`` module.\nthe following example shows how to use the function to read from a\nstream and write out the relevant items back out to the write only\nstreams:\n\n.. code:: pycon\n\n    >>> from calmjs.parse import io\n    >>> h4_program_src = open('/tmp/html4.js')\n    >>> h4_program_min = open('/tmp/html4.min.js', 'w+')\n    >>> h4_program_map = open('/tmp/html4.min.js.map', 'w+')\n    >>> h4_program = io.read(es5, h4_program_src)\n    >>> print(h4_program)\n    var bold = function(s) {\n      return '<b>' + s + '</b>';\n    };\n    var italics = function(s) {\n      return '<i>' + s + '</i>';\n    };\n    >>> io.write(print_m, h4_program, h4_program_min, h4_program_map)\n    >>> pos = h4_program_map.seek(0)\n    >>> print(h4_program_map.read())\n    {\"file\": \"html4.min.js\", \"mappings\": ..., \"version\": 3}\n    >>> pos = h4_program_min.seek(0)\n    >>> print(h4_program_min.read())\n    var b=function(a){return'<b>'+a+'</b>';};var a=function(a){...};\n    //# sourcemappingurl=html4.min.js.map\n\nfor a simple concatenation of multiple sources into one file, along with\ninline source map (i.e. where the sourcemappingurl is a ``data:`` url of\nthe base64 encoding of the json string), the following may be done:\n\n.. code:: pycon\n\n    >>> files = [open('/tmp/html4.js'), open('/tmp/legacy.js')]\n    >>> combined = open('/tmp/combined.js', 'w+')\n    >>> io.write(print_p, (io.read(es5, f) for f in files), combined, combined)\n    >>> pos = combined.seek(0)\n    >>> print(combined.read())\n    var bold = function(s) {\n        return '<b>' + s + '</b>';\n    };\n    var italics = function(s) {\n        return '<i>' + s + '</i>';\n    };\n    var marquee = function(s) {\n        return '<marquee>' + s + '</marquee>';\n    };\n    var blink = function(s) {\n        return '<blink>' + s + '</blink>';\n    };\n    //# sourcemappingurl=data:application/json;base64;...\n\nin this example, the ``io.write`` function was provided with the pretty\nunparser, an generator expression that will produce the two asts from\nthe two source files, and then both the target and sourcemap argument\nare identical, which forces the source map generator to generate the\nbase64 encoding.\n\ndo note that if multiple asts were supplied to a minifying printer with\nglobals being obfuscated, the resulting script will have the earlier\nobfuscated global names mangled by later ones, as the unparsing is done\nseparately by the ``io.write`` function.\n\nextract an ast to a ``dict``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nto assist with extracting values from an ast into a ``dict``, the\n``calmjs.parse.unparsers.extractor`` module provides an ``ast_to_dict``\nhelper function to aid with that.  this function will accept any valid\nast that was parsed as the argument,\n\n.. code:: pycon\n\n    >>> from calmjs.parse.unparsers.extractor import ast_to_dict\n    >>> configuration = es5('''\n    ... var config = module.exports = {};\n    ...\n    ... var name = \"morgan\"\n    ... msg = \"hello, \" + name + \"! \" + \"welcome to the host.\";\n    ...\n    ... config.server = {\n    ...   host: '0.0.0.0',\n    ...   port: process.env.port || 8000,\n    ...   threads: 4 + 4,\n    ...   columns: ['id', 'name', 'description'],\n    ...   memory: 1 << 15,\n    ...   msg: msg\n    ... };\n    ...\n    ... // default proxy stub\n    ... config.proxy = {\n    ...   host: 'localhost',\n    ...   port: 8080,\n    ...   options: {\n    ...     \"https\": !1,\n    ...     \"threshold\": -100\n    ...   }\n    ... };\n    ... ''')\n    >>> baseconf = ast_to_dict(configuration)\n\naccessing the values is simply done as a mapping:\n\n.. code:: pycon\n\n    >>> print(baseconf['name'])\n    morgan\n\nassignments are bound to the entire expression, i.e. not interpreted\ndown to individual existing assignments.\n\n.. code:: pycon\n\n    >>> baseconf['config']\n    {}\n    >>> baseconf['config.server']['columns']\n    ['id', 'name', 'description']\n    >>> baseconf['config.server']['msg']\n    'msg'\n    >>> baseconf['config.proxy']['options']['threshold']\n    -100\n\nnote that the ``-100`` value involves folding the unary expression with\nthe ``-`` operator, and by default all other expressions of this type\nare simply written back out as is.\n\n.. code:: pycon\n\n    >>> baseconf['config.proxy']['options']['https']\n    '!1'\n    >>> baseconf['msg']\n    '\"hello, \" + name + \"! \" + \"welcome to the host.\"'\n    >>> baseconf['config.server']['threads']\n    '4 + 4'\n\nto assist with a more generalized usage, the ``ast_to_dict`` provides an\nadditional ``fold_ops`` argument.  when set to ``true``, operator\nfolding will be enabled on supported types; for example, constants will\nbe attempted to be folded into a single value as per how operators are\nhandled in the ecmascript specification.  this is often useful for\nensuring concatenated strings are merged, and normalizing short-hand\ndefinition of boolean values via ``!0`` or ``!1``, among other commonly\nseen expressions.\n\n.. code:: pycon\n\n    >>> foldedconf = ast_to_dict(configuration, fold_ops=true)\n    >>> foldedconf['config.server']['threads']\n    8\n    >>> foldedconf['config.server']['memory']\n    32768\n    >>> foldedconf['config.server']['port']\n    8000\n    >>> foldedconf['config.proxy']['options']['https']\n    false\n    >>> # variables will remain as is\n    >>> foldedconf['config.server']['msg']\n    'msg'\n    >>> # however, in the context of a concatenated string, it will form\n    >>> # a format string instead.\n    >>> foldedconf['msg']\n    'hello, {name}! welcome to the host.'\n\nas noted, any valid ast may serve as the input argument, with any\ndangling expressions (i.e. those that are not assigned or bound to a\nname) simply be appened to a list keyed under of its outermost asttype.\n\n.. code:: pycon\n\n    >>> from calmjs.parse.asttypes import (\n    ...     identifier, funcexpr, unaryexpr)\n    >>> dict_of_ast = ast_to_dict(es5(u\"\"\"\n    ... var i;\n    ... i;\n    ... !'ok';\n    ... function foo(bar) {\n    ...     baz = true;\n    ... }\n    ... (function(y) {\n    ...     x = 1;\n    ... });\n    ... \"\"\"), fold_ops=true)\n    >>> dict_of_ast['i']\n    >>> dict_of_ast[identifier]\n    ['i']\n    >>> dict_of_ast[unaryexpr]  # not simply string or boolean\n    [false]\n    >>> dict_of_ast['foo']  # named function resolved\n    [['bar'], {'baz': true}]\n    >>> dict_of_ast[funcexpr]\n    [[['y'], {'x': 1}]]\n\n\nadvanced usage\n--------------\n\nlower level unparsing api\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nnaturally, the printers demonstrated previously are constructed using\nthe underlying unparser class, which in turn bridges together the walk\nfunction and the dispatcher class found in the walker module.  the walk\nfunction walks through the ast node with an instance of the dispatcher\nclass, which provides a description of all node types for the particular\ntype of ast node provided, along with the relevant handlers.  these\nhandlers can be set up using existing rule provider functions.  for\ninstance, a printer for obfuscating identifier names while maintaining\nindentation for the output of an es5 ast can be constructed like so:\n\n.. code:: pycon\n\n    >>> from calmjs.parse.unparsers.es5 import unparser\n    >>> from calmjs.parse.rules import indent\n    >>> from calmjs.parse.rules import obfuscate\n    >>> pretty_obfuscate = unparser(rules=(\n    ...     # note that indent must come after, so that the whitespace\n    ...     # handling rules by indent will shadow over the minimum set\n    ...     # provided by obfuscate.\n    ...     obfuscate(obfuscate_globals=false),\n    ...     indent(indent_str='    '),\n    ... ))\n    >>> math_module = es5('''\n    ... (function(root) {\n    ...   var fibonacci = function(count) {\n    ...     if (count < 2)\n    ...       return count;\n    ...     else\n    ...       return fibonacci(count - 1) + fibonacci(count - 2);\n    ...   };\n    ...\n    ...   var factorial = function(n) {\n    ...     if (n < 1)\n    ...       throw new error('factorial where n < 1 not supported');\n    ...     else if (n == 1)\n    ...       return 1;\n    ...     else\n    ...       return n * factorial(n - 1);\n    ...   }\n    ...\n    ...   root.fibonacci = fibonacci;\n    ...   root.factorial = factorial;\n    ... })(window);\n    ...\n    ... var value = window.factorial(5) / window.fibonacci(5);\n    ... console.log('the value is ' + value);\n    ... ''')\n    >>> print(''.join(c.text for c in pretty_obfuscate(math_module)))\n    (function(b) {\n        var a = function(b) {\n            if (b < 2) return b;\n            else return a(b - 1) + a(b - 2);\n        };\n        var c = function(a) {\n            if (a < 1) throw new error('factorial where n < 1 not supported');\n            else if (a == 1) return 1;\n            else return a * c(a - 1);\n        };\n        b.fibonacci = a;\n        b.factorial = c;\n    })(window);\n    var value = window.factorial(5) / window.fibonacci(5);\n    console.log('the value is ' + value);\n\neach of the rules (functions) have specific options that are set using\nspecific keyword arguments, details are documented in their respective\ndocstrings.\n\nat an even lower level, the ``ruletypes`` submodule contains the\nprimitives that form the underlying definitions that each dispatcher\nimplementations currently available.  for an example on how this might\nbe extended beyond simply unparsing back to text, see the source for\nthe extractor unparser module.\n\ntree walking\n~~~~~~~~~~~~\n\nast (abstract syntax tree) generic walker classes are defined under the\nappropriate named modules ``calmjs.parse.walkers``.  two default walker\nclasses are supplied.  one of them is the ``reprwalker`` class which was\npreviously demonstrated.  the other is the ``walker`` class, which\nsupplies a collection of generic tree walking methods for a tree of ast\nnodes.  the following is an example usage on how one might extract all\nobject assignments from a given script file:\n\n.. code:: pycon\n\n    >>> from calmjs.parse import es5\n    >>> from calmjs.parse.asttypes import object, vardecl, functioncall\n    >>> from calmjs.parse.walkers import walker\n    >>> walker = walker()\n    >>> declarations = es5('''\n    ... var i = 1;\n    ... var s = {\n    ...     a: \"test\",\n    ...     o: {\n    ...         v: \"value\"\n    ...     }\n    ... };\n    ... foo({foo: \"bar\"});\n    ... function bar() {\n    ...     var t = {\n    ...         foo: \"bar\",\n    ...     };\n    ...     return t;\n    ... }\n    ... foo.bar = bar;\n    ... foo.bar();\n    ... ''')\n    >>> # print out the object nodes that were part of some assignments\n    >>> for node in walker.filter(declarations, lambda node: (\n    ...         isinstance(node, vardecl) and\n    ...         isinstance(node.initializer, object))):\n    ...     print(node.initializer)\n    ...\n    {\n      a: \"test\",\n      o: {\n        v: \"value\"\n      }\n    }\n    {\n      foo: \"bar\"\n    }\n    >>> # print out all function calls\n    >>> for node in walker.filter(declarations, lambda node: (\n    ...         isinstance(node, functioncall))):\n    ...     print(node.identifier)\n    ...\n    foo\n    foo.bar\n\nfurther details and example usage can be consulted from the various\ndocstrings found within the module.\n\n\nlimitations\n-----------\n\ncomments currently may be incomplete\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndue to the implementation of the lexer/parser along with how the ast\nnode types have been implemented, there are restrictions on where the\ncomments may be exposed if enabled.  currently, such limitations exists\nfor nodes that are created by production rules that consume multiple\nlexer tokens at once - only comments preceding the first token will be\ncaptured, with all remaining comments discarded.\n\nfor example, this limitation means that any comments before the ``else``\ntoken will be omitted (as the comment will be provided by the ``if``\ntoken), as the production rule for an ``if`` node consumes both these\ntokens and the node as implemented only provides a single slot for\ncomments.  likewise, any comments before the ``:`` token in a ternary\nstatement will also be discarded as that is the second token consumed\nby the production rule that produces a ``conditional`` node.\n\n\ntroubleshooting\n---------------\n\ninstantiation of parser classes fails with ``unicodeencodeerror``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfor platforms or systems that do not have utf8 configured as the default\nencoding, the automatic table generation may fail when constructing a\nparser instance.  an example:\n\n.. code:: pycon\n\n    >>> from calmjs.parse.parsers import es5\n    >>> parser = es5.parser()\n    traceback (most recent call last):\n      ...\n      file \"c:\\python35\\....\\ply\\lex.py\", line 1043, in lex\n        lexobj.writetab(lextab, outputdir)\n      file \"c:\\python35\\....\\ply\\lex.py\", line 195, in writetab\n        tf.write('_lexstatere   = %s\\n' % repr(tabre))\n      file \"c:\\python35\\lib\\encodings\\cp1252.py\", line 19, in encode\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n    unicodeencodeerror: 'charmap' codec can't encode character '\\u02c1' ...\n\na workaround helper script is provided, it may be executed like so:\n\n.. code:: console\n\n    $ python -m calmjs.parse.parsers.optimize\n\nfurther details on this topic may be found in the `manual optimization`_\nsection of this document.\n\nwarning: there are unused tokens on import\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthis indicates that the installation method or source for this package\nbeing imported isn't optimized.  a quick workaround is to follow the\ninstructions at the `manual optimization`_ section of this document to\nensure these messages are no longer generated (and if this warning\nhappens every time the module is imported, it means the symbol tables\nare regenerated every time that happens and this extra computational\noverhead should be corrected through the generation of that optimization\nmodule).\n\nthe optimization modules are included with the wheel release and the\nsource release on pypi, but it is not part of the source repository as\ngenerated code are never committed.  should a binary release made by\na third-party results in this warning upon import, their release should\nbe corrected to include the optimization module.\n\nmoreover, there are safeguards in place that prevent this warning from\nbeing generated for releases made for releases from 1.3.1 onwards by\na more heavy handed enforcement of this optimization step at build time,\nbut persistent (or careless) actors may circumvent this during the build\nprocess, but official releases made through pypi should include the\nrequired optimization for all supported |ply| versions (which are\nversions 3.6 to 3.11, inclusive).\n\nalternatively, this issue may also occur via usage of ``pyinstaller``\nif the package metadata is not copied for |ply| in versions prior to\n``calmjs.parse-1.3.1`` and will always occur if the hidden imports are\nnot declared for those optimization modules.  the following hook should\nmay be used to ensure |calmjs.parse| functions correctly in the compiled\nbinary:\n\n.. code:: python\n\n    from pyinstaller.utils.hooks import collect_data_files, copy_metadata\n    from calmjs.parse.utils import generate_tab_names\n\n    datas = []\n    datas.extend(collect_data_files(\"ply\"))\n    datas.extend(copy_metadata(\"ply\"))\n    datas.extend(collect_data_files(\"calmjs.parse\"))\n    datas.extend(copy_metadata(\"calmjs.parse\"))\n\n    hiddenimports = []\n    hiddenimports.extend(generate_tab_names('calmjs.parse.parsers.es5'))\n\n    # if running under python 3 with ply-3.11, above is equivalent to\n    # hiddenimports = [\n    #     \"calmjs.parse.parsers.lextab_es5_py3_ply3_11\",\n    #     \"calmjs.parse.parsers.yacctab_es5_py3_ply3_11\",\n    # ]\n\nslow performance\n~~~~~~~~~~~~~~~~\n\nas this program is basically fully decomposed into very small functions,\nthis result in massive performance penalties as compared to other\nimplementations due to function calls being one of the most expensive\noperations in python.  it may be possible to further optimize the\ndefinitions within the description in the dispatcher by combining all\nthe resolved generator functions for each asttype node type, however\nthis will may require both the token and layout functions not having\narguments with name collisions, and the new function will take in all\nof those arguments in one go.\n\nerror message about import error when trying to install\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nas noted in the error message, the |ply|_ and ``setuptools`` package\nmust be installed before attempting to install build the package in the\nsituation where the pre-generated modules are missing.  this situation\nmay be caused by building directly using the source provided by the\nsource code repository, or where there is no matching pre-generated\nmodule matching with the installed version of |ply|.  please ensure that\n|ply| is installed and available first before installing from source if\nthis error message is sighted.\n\n\ncontribute\n----------\n\n- issue tracker: https://github.com/calmjs/calmjs.parse/issues\n- source code: https://github.com/calmjs/calmjs.parse\n\n\nlegal\n-----\n\nthe |calmjs.parse| package is copyright (c) 2017 auckland bioengineering\ninstitute, university of auckland.  the |calmjs.parse| package is\nlicensed under the mit license (specifically, the expat license), which\nis also the same license that the package |slimit| was released under.\n\nthe lexer, parser and the other types definitions portions were\noriginally imported from the |slimit| package; |slimit| is copyright (c)\nruslan spivak.\n\nthe calmjs project is copyright (c) 2017 auckland bioengineering\ninstitute, university of auckland.\n\nchangelog\n=========\n\n1.3.1 - 2023-10-28\n------------------\n\n- modified existing ``setup.py`` hook from an install hook to a build\n  hook to ensure the generated module files are present.  should any of\n  those modules are missing and the required dependencies for are not\n  present (i.e. ``ply`` and ``setuptools``), the build will result in a\n  non-zero exit status and the documented error message should reflect\n  which of the required dependencies are missing.\n\n1.3.0 - 2021-10-08\n------------------\n\n- introduce the extractor unparser - an unparser that will unparse a\n  valid ast into a ``dict``.  [\n  `#35 <https://github.com/calmjs/calmjs.parse/issues/35>`_\n  `#38 <https://github.com/calmjs/calmjs.parse/issues/38>`_\n  ]\n- correct the joinattr ruletype such that the intended empty definition\n  value is passed to walk if it was defined as such to avoid an\n  unintended infinite recursion.  [\n  `#36 <https://github.com/calmjs/calmjs.parse/issues/36>`_\n  ]\n\n1.2.5 - 2020-07-03\n------------------\n\n- will now import iterable from the python 3.3+ location as the previous\n  location is marked for removal in python 3.9.  the import will still\n  have a fallback to the previous location in order to maintain support\n  for python 2.7.  [\n  `#31 <https://github.com/calmjs/calmjs.parse/issues/31>`_\n  ]\n- provide a test case helper to ensure that the generic ``program`` repr\n  signature is provided to assist with test case portability.  [\n  `#33 <https://github.com/calmjs/calmjs.parse/issues/33>`_\n  ]\n- in the ``calmjs.parse.vlq`` module, implemented the ``decode_vlq``\n  helper for completeness/symmetry to the ``encode_vlq`` helper.  [\n  `#33 <https://github.com/calmjs/calmjs.parse/issues/33>`_\n  ]\n\n1.2.4 - 2020-03-17\n------------------\n\n- correct usage of ``__doc__`` to support level 2 optimized mode.  [\n  `#29 <https://github.com/calmjs/calmjs.parse/issues/29>`_\n  `#30 <https://github.com/calmjs/calmjs.parse/issues/30>`_\n  ]\n- corrected some minor string definition syntax, where raw string prefix\n  should be used but was not previously.\n\n1.2.2 - 2020-01-18\n------------------\n\n- correctly include license file in sdist.  [\n  `#27 <https://github.com/calmjs/calmjs.parse/issues/27>`_\n  `#28 <https://github.com/calmjs/calmjs.parse/issues/28>`_\n  ]\n- include the correct test data general form for some previously added\n  test cases to better accommodate already planned future features.\n\n1.2.1 - 2019-11-21\n------------------\n\n- fix the issue of failures with regex statement that occur due to lexer\n  being in a state where the disambiguation between regex or div token\n  types is not immediately possible, as tokens such as rbrace, plusplus\n  or minusminus must be consumed by parser in order to be disambiguated,\n  but due to the lookahead nature done by yacc, the div token will be\n  prematurely produced and the only way to achieve this is during the\n  error handling stage.  [\n  `#25 <https://github.com/calmjs/calmjs.parse/issues/25>`_\n  `#26 <https://github.com/calmjs/calmjs.parse/issues/26>`_\n  ]\n- part of the previous fix also removed newline or comment tokens from\n  being reported as part of parsing error messages.\n\n1.2.0 - 2019-08-15\n------------------\n\n- partial support for parsing of comments.  currently not all comments\n  will be captured during parsing, due to the desire to simplify access\n  of them through the ``asttypes.node`` instances with the generic\n  ``comments`` attribute provided by it.  [\n  `#24 <https://github.com/calmjs/calmjs.parse/issues/24>`_\n  ]\n\n  - enabled by passing ``with_comments=true`` to the parser..\n  - the limitation lies in the fact that if a node has multiple token\n    slots (e.g. ``if...else``), the comments that lie immediate before\n    the first will be captured, while the comments that lie immediate to\n    the subsequent ones will be omitted.  the fix would involve\n    providing a full syntax tree node types, and that the parser rules\n    would need to be implemented in a more amenable manner such that the\n    generation of such could be done.\n  - all comments that lie immediately before the node are accessible\n    using the ``comments`` attribute.\n  - these comments nodes will not be yielded via the children() method.\n  - various features and methods have been updated to account for\n    comments.  notably, sourcemap generation will be able to deal with\n    source fragments that contain newlines provided that both colno and\n    lineno are provided.\n\n- correctly fail on incorrect hexadecimal/unicode escape sequences while\n  reporting the specific character location; also report on the starting\n  position of an unterminated string literal.  [\n  `#23 <https://github.com/calmjs/calmjs.parse/issues/23>`_\n  ]\n\n1.1.3 - 2018-11-08\n------------------\n\n- correct issues with certain non-optional spaces being omitted for the\n  minify print cases, which caused malformed outputs.  [\n  `#22 <https://github.com/calmjs/calmjs.parse/issues/22>`_\n  ]\n\n1.1.2 - 2018-08-20\n------------------\n\n- default repr on synthetic nodes or nodes without column or row number\n  assigned should no longer error.  [\n  `#20 <https://github.com/calmjs/calmjs.parse/issues/20>`_\n  ]\n- the same line terminator regex introduced in 1.1.0 used for line\n  continuation in strings now applied to the line terminator pattern to\n  the lexer, such that the line numbering is corrected for the windows\n  specific <cr><lf> sequence.  [\n  `#21 <https://github.com/calmjs/calmjs.parse/issues/21>`_\n  ]\n\n1.1.1 - 2018-08-11\n------------------\n\n- ensure that the accounting of layout rule chunks is done correctly in\n  the case where layout handlers specified a tuple of layout rules for\n  combined handling.  [\n  `#19 <https://github.com/calmjs/calmjs.parse/issues/19>`_\n  ]\n\n  - the issue caused by this error manifest severely in the case where\n    multiple layout rule tokens are produced in a manner that repeats\n    a pattern that also have a layout handler rule for them, which\n    does not typically happen for normal code with the standard printers\n    (as layout chunks are many and they generally do not result in a\n    repeated pattern that gets consumed).  however this is severely\n    manifested in the case of minified output with semicolons dropped,\n    as that basically guarantee that any series of closing blocks that\n    fit the pattern to be simply dropped.\n\n1.1.0 - 2018-08-07\n------------------\n\n- correct the implementation of line continuation in strings.  this also\n  meant a change in the minify unparser so that it will continue to\n  remove the line continuation sequences.  [\n  `#16 <https://github.com/calmjs/calmjs.parse/issues/16>`_\n  ]\n\n- correct the implementation of asi (automatic semicolon insertion) by\n  introducing a dedicated token type, such that the production of\n  empty statement can no longer happen and that distinguishes it from\n  production of statements that should not have asi applied, such that\n  incorrectly successful parsing due to this issue will no longer\n  result.  [\n  `#18 <https://github.com/calmjs/calmjs.parse/issues/18>`_\n  `rspivak/slimit#29 <https://github.com/rspivak/slimit/issues/29>`_\n  `rspivak/slimit#101 <https://github.com/rspivak/slimit/issues/101>`_\n  ]\n\n1.0.1 - 2018-04-19\n------------------\n\n- ensure that the es5 unparser pass on the prewalk_hooks argument in\n  its constructor.\n- minor packaging fixes; also include optimization modules for ply-3.11.\n\n1.0.0 - 2017-09-26\n------------------\n\nfull support for sourcemaps; changes that make it possible follows:\n\n- high level read/write functionality provided by a new ``io`` module.\n- there is now a ``deferrable`` rule type for marking certain tokens\n  that need extra handling.  the support for this has changed the\n  various api that deals with setting up of this.\n- for support of the sourcemap generation, a number of new ruletypes\n  have been added.\n- the sourcemap write function had its argument order modified to\n  better support the sourcepath tracking feature of input nodes.  its\n  return value also now match the ordering of the encode_sourcemap\n  function.\n- the chunk types in ruletypes have been renamed, and also a new type\n  called streamfragment is introduced, so that multiple sources output\n  to a single stream can be properly tracked by the source mapping\n  processes.\n- `rspivak/slimit#66 <https://github.com/rspivak/slimit/issues/66>`_\n  should be fully supported now.\n\nminify printer now has ability to shorten/obfuscate identifiers:\n\n- provide a name obfuscation function for shortening identifiers, to\n  further achieve minified output.  note that this does not yet fully\n  achieve the level of minification ``slimit`` had; future versions\n  may implement this functionality as various ast transformations.\n- also provided ability to drop unneeded semicolons.\n\nother significant changes:\n\n- various changes to internal class and function names for the 1.0.0\n  release.  a non exhaustive listing of changes to modules relative to\n  the root of this package name as compared to previous major release\n  follows:\n\n  ``asttypes``\n    - all ``slimit`` compatibility features removed.\n    - ``switch`` (the incorrect version) removed.\n    - ``switchstatement`` -> ``switch``\n    - ``setpropassign`` constructor: ``parameters`` -> ``parameter``\n    - ``unaryop`` -> ``unaryexpr``\n    - other general deprecated features also removed.\n  ``factory``\n    - ``factory`` -> ``srfactory``\n  ``visitors``\n    - removed (details follow).\n  ``walkers``\n    - ``visitors.generic.reprvisitor`` -> ``walkers.reprwalker``\n  ``layouts``\n    - module was split and reorganised; the simple base ones can be\n      found in ``handlers.core``, the indentation related features are\n      now in ``handlers.indentation``.\n  ``unparsers.base``\n    - ``.default_layout_handlers`` -> ``handlers.core.default_rules``\n    - ``.minimum_layout_handlers`` -> ``handlers.core.minimum_rules``\n  ``unparsers.prettyprint``\n    - renamed to ``unparsers.walker``.\n    - the implementation was actually standard tree walking, no\n      correctly implemented visitor functions/classes were ever present.\n  ``vlq``\n    - ``.create_sourcemap`` -> ``sourcemap.create_sourcemap``\n\n- broke up the visitors class as they weren't really visitors as\n  described.  the new implementations (calmjs.parse-0.9.0) were really\n  walkers, so move them to that name and leave it at that.  methods\n  were also renamed to better reflect their implementation and purpose.\n- many slimit compatibility modules, classes and incorrectly implemented\n  functionalities removed.\n- the usage of the python 3 ``str`` type (``unicode`` in python 2) is\n  now enforced for the parser, to avoid various failure cases where\n  mismatch types occur.\n- the base node asttype has a sourcepath attribute which is to be used\n  for tracking the original source of the node; if assigned, all its\n  subnodes without sourcepath defined should be treated as from that\n  source.\n- also provide an even higher level function for usage with streams\n  through the ``calmjs.parse.io`` module.\n- semicolons and braces added as structures to be rendered.\n\nbug fixes:\n\n- functions starting with a non-word character will now always have a\n  whitespace rendered before it to avoid syntax error.\n- correct an incorrect iterator usage in the walk function.\n- ensure list separators don't use the rowcol positions of a subsequent\n  elision node.\n- lexer will only report real lexer tokens on errors (asi generated\n  tokens are now dropped as they don't exist in the original source\n  which results in confusing rowcol reporting).\n- `rspivak/slimit#57 <https://github.com/rspivak/slimit/issues/57>`_,\n  as it turns out ``'\\0'`` is not considered to be octal, but is a <nul>\n  character, which the rule to parse was not actually included in the\n  lexer patches that were pulled in previous to this version.\n- `rspivak/slimit#75 <https://github.com/rspivak/slimit/issues/75>`_,\n  option for shadowing of names of named closures, which is now disabled\n  by default (obfuscated named closures will not be shadowed by other\n  obfuscated names in children).\n- expressions can no longer contain an unnamed function.\n\n0.10.1 - 2017-08-26\n-------------------\n\n- corrected the line number reporting for the lexer, and correct the\n  propagation of that to the parser and the node subclasses.  fixes the\n  incorrect implementation added by `moses-palmer/slimit@8f9a39c7769\n  <https://github.com/moses-palmer/slimit/commit/8f9a39c7769>`_ (where\n  the line numbers are tabulated incorrectly when comments are present,\n  and also the yacc tracking added by `moses-palmer/slimit@6aa92d68e0\n  <https://github.com/moses-palmer/slimit/commit/6aa92d68e0>`_ (where\n  the custom lexer class does not provide the position attributes\n  required by ply).\n- implemented bookkeeping of column numbers.\n- made other various changes to ast but for compatibility reasons (to\n  not force a major semver bump) they are only enabled with a flag to\n  the es5 parser.\n- corrected a fault with how switch/case statements are handled in a way\n  that may break compatibility; fixes are only enabled when flagged.\n  `rspivak/slimit#94 <https://github.com/rspivak/slimit/issues/94>`_\n- the repr form of node now shows the line/col number info by default;\n  the visit method of the reprvisitor class have not been changed, only\n  the invocation of it via the callable form has as that is the call\n  target for __repr__.  this is a good time to mention that named\n  methods afford the most control for usage as documented already.\n- parsers now accept an asttypes module during its construction.\n- provide support for source map generation classes.\n- introduced a flexible visitor function/state class that accepts a\n  definition of rules for the generation of chunk tuples that are\n  compatible for the source map generation.  a new way for pretty\n  printing and minification can be achieved using this module.\n\n0.9.0 - 2017-06-09\n------------------\n\n- initial release of the fork of ``slimit.parser`` and its parent\n  modules as ``calmjs.parse``.\n- this release brings in a number of bug fixes that were available via\n  other forks of ``slimit``, with modifications or even a complete\n  revamp.\n- issues addressed includes:\n\n  - `rspivak/slimit#52 <https://github.com/rspivak/slimit/issues/52>`_,\n    `rspivak/slimit#59 <https://github.com/rspivak/slimit/issues/59>`_,\n    `rspivak/slimit#81 <https://github.com/rspivak/slimit/issues/81>`_,\n    `rspivak/slimit#90 <https://github.com/rspivak/slimit/issues/90>`_\n    (relating to conformance of ecma-262 7.6 identifier names)\n  - `rspivak/slimit#54 <https://github.com/rspivak/slimit/issues/54>`_\n    (fixed by tracking scope and executable current token in lexer)\n  - `rspivak/slimit#57 <https://github.com/rspivak/slimit/issues/57>`_,\n    `rspivak/slimit#70 <https://github.com/rspivak/slimit/issues/70>`_\n    (octal encoding (e.g \\0), from `redapple/slimit@a93204577f\n    <https://github.com/redapple/slimit/commit/a93204577f>`_)\n  - `rspivak/slimit#62 <https://github.com/rspivak/slimit/issues/62>`_\n    (formalized into a unittest that passed)\n  - `rspivak/slimit#73 <https://github.com/rspivak/slimit/issues/73>`_\n    (specifically the desire for a better repr; the minifier bits are\n    not relevant to this package)\n  - `rspivak/slimit#79 <https://github.com/rspivak/slimit/pull/79>`_\n    (tab module handling was completely reimplemented)\n  - `rspivak/slimit#82 <https://github.com/rspivak/slimit/issues/82>`_\n    (formalized into a unittest that passed)\n\n- include various changes gathered by `rspivak/slimit#65\n  <https://github.com/rspivak/slimit/pull/65>`_, which may be the source\n  of some of the fixes listed above.\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "calmjs.parse",
  "package_url": "https://pypi.org/project/calmjs.parse/",
  "project_url": "https://pypi.org/project/calmjs.parse/",
  "project_urls": {
    "Homepage": "https://github.com/calmjs/calmjs.parse"
  },
  "release_url": "https://pypi.org/project/calmjs.parse/1.3.1/",
  "requires_dist": [
    "setuptools",
    "ply (>=3.6)"
  ],
  "requires_python": "",
  "summary": "various parsers for ecma standards.",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "tommy.yu@auckland.ac.nz",
    "tommy_yu"
  ],
  "kwds": "calmjs parsed slimit parse ecmascript",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_calmjs.parse",
  "homepage": "https://github.com/calmjs/calmjs.parse",
  "release_count": 17,
  "dependency_ids": [
    "pypi_ply",
    "pypi_setuptools"
  ]
}
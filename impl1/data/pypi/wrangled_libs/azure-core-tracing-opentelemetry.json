{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "\n\n# azure core tracing opentelemetry client library for python\n\n## getting started\n\n### install the package\n\ninstall the azure core opentelemetry tracing plugin for python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-core-tracing-opentelemetry\n```\n\nnow you can use opentelemetry for python as usual with any sdks that are compatible\nwith azure-core tracing. this includes (not exhaustive list), azure-storage-blob, azure-keyvault-secrets, azure-eventhub, etc.\n\n## key concepts\n\n* you don't need to pass any context, sdk will get it for you\n* there are two ways to enable the tracing plugin in code:\n\n  ```python\n  from azure.core.settings import settings\n  from azure.core.tracing.ext.opentelemetry_span import opentelemetryspan\n  settings.tracing_implementation = opentelemetryspan\n  ```\n\n  or\n\n  ```python\n  from azure.core.settings import settings\n  settings.tracing_implementation = \"opentelemetry\"\n  ```\n\n* alternatively, if you have the latest version of `azure-core` installed, you can also set the following environment variable to enable tracing with opentelemetry:\n\n  ```bash\n  azure_sdk_tracing_implementation=opentelemetry\n  ```\n\n## examples\n\nthere is no explicit context to pass, you just create your usual opentelemetry tracer and\ncall any sdk code that is compatible with azure-core tracing. this is an example\nusing azure monitor exporter, but you can use any exporter (zipkin, etc.).\n\n```python\n\n# declare opentelemetry as enabled tracing plugin for azure sdks\nfrom azure.core.settings import settings\n\nsettings.tracing_implementation = \"opentelemetry\"\n\n# in the below example, we use a simple console exporter, uncomment these lines to use\n# the opentelemetry exporter for azure monitor.\n# example of a trace exporter for azure monitor, but you can use anything opentelemetry supports\n# from azure.monitor.opentelemetry.exporter import azuremonitortraceexporter\n# exporter = azuremonitortraceexporter(\n#     connection_string=\"the connection string used for your application insights resource\"\n# )\n\n# regular open telemetry usage from here, see https://github.com/open-telemetry/opentelemetry-python\n# for details\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import tracerprovider\nfrom opentelemetry.sdk.trace.export import consolespanexporter\nfrom opentelemetry.sdk.trace.export import simplespanprocessor\n\n# simple console exporter\nexporter = consolespanexporter()\n\ntrace.set_tracer_provider(tracerprovider())\ntracer = trace.get_tracer(__name__)\ntrace.get_tracer_provider().add_span_processor(\n    simplespanprocessor(exporter)\n)\n\n# example with storage sdks\n\nfrom azure.storage.blob import blobserviceclient\n\nwith tracer.start_as_current_span(name=\"myapplication\"):\n    client = blobserviceclient.from_connection_string('connectionstring')\n    client.create_container('my_container')  # call will be traced\n```\n\nthe azure monitor opentelemetry exporter can be found in the [`azure-monitor-opentelemetry-exporter`](https://pypi.org/project/azure-monitor-opentelemetry-exporter/) package.\n\n\n## http instrumentation\n\nwith the azure core opentelemetry tracing plugin enabled, http requests made by azure sdk clients are typically instrumented via the [`distributedtracingpolicy`](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/azure/core/pipeline/policies/_distributed_tracing.py) automatically. since azure core handles http instrumentation for azure service calls, automatic http instrumentation from other libraries such as `opentelemetry-requests-instrumentation` are suppressed to avoid duplicate spans from being created.\n\n\n## troubleshooting\n\nthis client raises exceptions defined in [azure core](https://learn.microsoft.com/python/api/azure-core/azure.core.exceptions?view=azure-python).\n\n\n## next steps\n\nmore documentation on opentelemetry configuration can be found on the [opentelemetry website](https://opentelemetry.io)\n\n\n## contributing\n\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/). for more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\n# release history\n\n## 1.0.0b11 (2023-09-07)\n\n### bugs fixed\n\n- fixed `opentelemetryspan` typing to correctly implement the `abstractspan` protocol. ([#31943](https://github.com/azure/azure-sdk-for-python/pull/31943))\n\n## 1.0.0b10 (2023-07-11)\n\n### features added\n\n- enabled the use of the `context` keyword argument for passing in context headers of a parent span. this will be the parent context used when creating the span. ([#30411](https://github.com/azure/azure-sdk-for-python/pull/30411))\n\n### breaking changes\n\n- remapped certain attributes to converge with opentelemetry semantic conventions ([#29203](https://github.com/azure/azure-sdk-for-python/pull/29203)):\n    - `x-ms-client-request-id` -> `az.client_request_id`,\n    - `x-ms-request-id` -> `az.service_request_id`,\n    - `http.user_agent` -> `user_agent.original`,\n    - `message_bus.destination` -> `messaging.destination.name`,\n    - `peer.address` -> `net.peer.name`,\n\n### other changes\n\n- python 2.7 is no longer supported. please use python version 3.7 or later.\n- nested internal spans are now suppressed with just the outermost internal span being recorded. nested client spans will be children of the outermost span. ([#29616](https://github.com/azure/azure-sdk-for-python/pull/29616))\n- when client spans are created, a flag is set to indicate that automatic http instrumentation should be suppressed. since azure-core already instruments http calls, this prevents duplicate spans from being produced. ([#29616](https://github.com/azure/azure-sdk-for-python/pull/29616))\n- schema url is now set on the tracer's instrumentation scope. ([#30014](https://github.com/azure/azure-sdk-for-python/pull/30014))\n- minimum `opentelemetry-api` dependency bumped to `1.12.0`.\n- minimum `azure-core` dependency bumped to `1.24.0`.\n\n## 1.0.0b9 (2021-04-06)\n\n- updated opentelemetry-api to version 1.0.0\n- `link` and `spankind` can now be added while creating the span instance.\n\n## 1.0.0b8 (2021-02-08)\n\n- pinned opentelemetry-api to version 0.17b0\n\n## 1.0.0b7 (2020-10-05)\n\n- pinned opentelemetry-api to version 0.13b0\n\n## 1.0.0b6 (2020-07-06)\n\n- pinned opentelemetry-api to version 0.10b0\n\n## 1.0.0b5 (2020-06-08)\n\n- pinned opentelemetry-api to version 0.8b0\n- fixed a bug where `defaultspan` sometimes throws an attributeerror.\n\n## 1.0.0b4 (2020-05-04)\n\n- `link` and `link_from_headers` now accepts attributes.\n\n## 1.0.0b3 (2020-04-06)\n\n### features\n\n- pinned opentelemetry-api to version 0.6b0\n\n## 1.0.0b2 (2020-03-09)\n\n### features\n\n- pinned opentelemetry-api to version 0.4a0\n\n## 1.0.0b1\n\n### features\n\n- opentelemetry implementation of azure-core tracing protocol\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-core-tracing-opentelemetry",
  "package_url": "https://pypi.org/project/azure-core-tracing-opentelemetry/",
  "project_url": "https://pypi.org/project/azure-core-tracing-opentelemetry/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry"
  },
  "release_url": "https://pypi.org/project/azure-core-tracing-opentelemetry/1.0.0b11/",
  "requires_dist": [
    "opentelemetry-api<2.0.0,>=1.12.0",
    "azure-core<2.0.0,>=1.24.0"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure azure core opentelemetry plugin library for python",
  "version": "1.0.0b11",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_sdk_tracing_implementation azuremonitortraceexporter azure get_tracer_provider _distributed_tracing",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_core_tracing_opentelemetry",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core-tracing-opentelemetry",
  "release_count": 11,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_opentelemetry_api"
  ]
}
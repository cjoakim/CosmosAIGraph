{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: gis"
  ],
  "description": "h3ronpy\n=======\n\na data science toolkit for the `h3 geospatial grid <https://h3geo.org/>`_.\n\n.. image:: https://img.shields.io/pypi/v/h3ronpy\n    :alt: pypi\n    :target: https://pypi.python.org/pypi/h3ronpy/\n\n.. image:: https://readthedocs.org/projects/h3ronpy/badge/?version=latest\n    :alt: readthedocs\n    :target: https://h3ronpy.readthedocs.io/\n\n.. image:: https://zenodo.org/badge/402118389.svg\n    :alt: doi\n    :target: https://zenodo.org/badge/latestdoi/402118389\n\n\nthis library is not a substitute for the official `python h3 library <https://github.com/uber/h3-py>`_ - instead it provides more\nhigh-level functions on top of h3 and integrations into common dataframe libraries.\n\ndocumentation is available on `<https://h3ronpy.readthedocs.io/>`_.\n\nfeatures\n--------\n\n* h3 algorithms provided using the performant `h3o <https://github.com/hydroniumlabs/h3o>`_ library.\n* build on `apache arrow <https://arrow.apache.org>`_ and `pyarrow <https://arrow.apache.org/docs/python/index.html>`_ for efficient data handling.\n* dedicated apis for the the `pandas <https://pandas.pydata.org>`_ and `polars <https://www.pola.rs/>`_ dataframe libraries. the `pandas` support includes `geopandas <https://geopandas.org>`_.\n* multi-threaded conversion of raster data to the h3 grid using `numpy arrays <https://numpy.org/>`_.\n* multi-threaded conversion of vector data, including `geopandas` `geodataframes` and any object which supports the python `__geo_interface__` protocol (`shapely`, `geojson`, ...).\n\nmost parts of this library aim to be well-performing. benchmarking the conversion of 1000 uint64 cell\nvalues to strings using\n\n* a simplistic list comprehension calling ``h3-py`` ``h3_to_string``\n* a numpy vectorized (``numpy.vectorize``) variant of ``h3-py`` ``h3_to_string``\n* the ``cells_to_string`` function of this library (release build)\n\nleads to the following result on a standard laptop:\n\n.. code-block::\n\n    ---------------------------------------------------------------------------------------------- benchmark: 3 tests ---------------------------------------------------------------------------------------------\n    name (time in us)                           min                 max                mean            stddev              median               iqr            outliers  ops (kops/s)            rounds  iterations\n    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    test_cells_to_string                    48.4710 (1.0)       75.5000 (1.0)       52.4252 (1.0)      1.5461 (1.0)       52.0330 (1.0)      0.4890 (1.0)       307;448       19.0748 (1.0)        4090           1\n    test_h3_to_string_python_list          290.5460 (5.99)     325.8180 (4.32)     297.5644 (5.68)     4.8769 (3.15)     296.1350 (5.69)     8.2420 (16.85)       806;4        3.3606 (0.18)       2863           1\n    test_h3_to_string_numpy_vectorized     352.9870 (7.28)     393.8450 (5.22)     360.1159 (6.87)     3.7195 (2.41)     359.4820 (6.91)     3.8420 (7.86)      447;131        2.7769 (0.15)       2334           1\n    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    legend:\n      outliers: 1 standard deviation from mean; 1.5 iqr (interquartile range) from 1st quartile and 3rd quartile.\n      ops: operations per second, computed as 1 / mean\n\n\nthe benchmark implementation can be found in ``tests/polars/test_benches.py`` and uses `pytest-benchmark <https://pypi.org/project/pytest-benchmark/>`_.\n\nlimitations\n-----------\n\nnot all functionalities of the h3 grid are wrapped by this library, the current feature-set was implemented\nwhen there was a need and the time for it. as a opensource library new features can be requested in the form of github issues\nor contributed using pull requests.\n\nlicense\n-------\n\nmit\n",
  "docs_url": null,
  "keywords": "geo,spatial,h3,arrow,python",
  "license": "mit",
  "name": "h3ronpy",
  "package_url": "https://pypi.org/project/h3ronpy/",
  "project_url": "https://pypi.org/project/h3ronpy/",
  "project_urls": {
    "Homepage": "https://github.com/nmandery/h3ronpy",
    "Source Code": "https://github.com/nmandery/h3ronpy"
  },
  "release_url": "https://pypi.org/project/h3ronpy/0.19.2/",
  "requires_dist": [
    "numpy",
    "pyarrow >=10.0",
    "Shapely >=1.7",
    "polars ; extra == 'polars'",
    "geopandas >=0.10 ; extra == 'pandas'",
    "rasterio ; extra == 'test'",
    "pytest >=6 ; extra == 'test'",
    "h3 >=3.7 ; extra == 'test'",
    "pytest-benchmark ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "data science toolkit for the h3 geospatial grid",
  "version": "0.19.2",
  "releases": [],
  "developers": [
    "nico@nmandery.net"
  ],
  "kwds": "h3ronpy h3 h3o grid test_h3_to_string_python_list",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_h3ronpy",
  "homepage": "https://github.com/nmandery/h3ronpy",
  "release_count": 21,
  "dependency_ids": [
    "pypi_geopandas",
    "pypi_h3",
    "pypi_numpy",
    "pypi_polars",
    "pypi_pyarrow",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_rasterio",
    "pypi_shapely"
  ]
}
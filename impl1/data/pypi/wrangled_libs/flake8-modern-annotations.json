{
  "classifiers": [
    "environment :: console",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "# [flake8-modern-annotations](https://github.com/plinss/flake8-modern-annotations)\n\nflake8 plugin to validate type annotations accoring to modern practices.\n\n* postponed evaluations of annotations per pep 563.\n* standard collection generics per pep 585.\n* union types as x | y per pep 604.\n* optional types when pep 604 unions are available.\n\n### activation\n\nby default the plugin activates according to the python version used for flake8 \nor when it sees a future import that enables modern annoations, e.g.:\n\n    from __future__ import annotations\n\noptions exist for each feature to override the automatic activation.\n\n## installation\n\nstandard python package installation:\n\n    pip install flake8-modern-annotations\n\n\n## type aliases\n\nnote that there are some restrictions when using modern annotation proactices with type aliases:\n\n* forward references\n  * must use string literals\n  * unions containing forward references must use `typing.union`\n\n* standard collection generics\n  * cannot be used in type aliases if subscripted on python < 3.9, e.g. `x: typealias = dict[str, str]`\n\n* unions\n  * `|` unions cannot be used in type aliases on python < 3.9\n\nthis plugin will not report errors for the above cases with the default settings.\n\nit is recommended to use the `typealias` type for type aliases to help this plugin detect them properly in all cases.\n`typealias` is available from `typing` in python 3.10+ and `typing_extensions` in prior versions.\n\n## options\n\n`modern-annotations-postponed`\n: controls validation of postponed annotations (pep 563), \nchoices: `auto`, `always`, `never` (default: `auto`)\n\n`modern-annotations-deprecated`\n: controls validation of deprecated types (pep 585), \nchoices: `auto`, `always`, `never` (default: `auto`)\n\n`modern-annotations-type-alias`\n: use deprecated types in type aliases (required for older python < 3.9), \nchoices: `auto`, `always`, `never` (default: `auto`)\n\n`modern-annotations-union`\n: controls checks for use of typing.union (pep 604), \nchoices: `auto`, `always`, `never` (default: `auto`)\n\n`modern-annotations-optional`\n: controls checks for use of typing.optional, \nchoices: `auto`, `always`, `never` (default: `auto`)\n\n`modern-annotations-include-name`\n: include plugin name in messages\n\n`modern-annotations-no-include-name`\n: do not include plugin name in messages (default setting)\n\nall options may be specified on the command line with a `--` prefix,\nor can be placed in your flake8 config file.\n\n`auto` settings turn on or off depending on the version of python that flake8 is running on,\nand the presence of `from __future__ import annotations` in the code, \nwhich enables the modern annotations in python 3.7+.\n\nif developing code in python 3.9+ that is expected to run on 3.7 or 3.8,\nuse `modern-annotations-type-alias=always` to force older behavior of type aliases\nand ensure that the code will work.\n\n\n## error codes\n\n| code   | message |\n|--------|---------|\n| mda001 | remove quotes from variable type annotation 'type'\n| mda002 | remove quotes from argument type annotation 'type'\n| mda003 | remove quotes from return type annotation 'type'\n| mda100 | 'typing.tuple' is deprecated, remove from import\n| mda101 | 'typing.list' is deprecated, remove from import\n| mda102 | 'typing.dict' is deprecated, remove from import\n| mda103 | 'typing.set' is deprecated, remove from import\n| mda104 | 'typing.frozenset' is deprecated, remove from import\n| mda105 | 'typing.type' is deprecated, remove from import\n| mda110 | 'typing.deque' is deprecated, replace with 'collections.deque'\n| mda111 | 'typing.defaultdict' is deprecated, replace with 'collections.defaultdict'\n| mda112 | 'typing.ordereddict' is deprecated, replace with 'collections.ordereddict'\n| mda113 | 'typing.counter' is deprecated, replace with 'collections.counter'\n| mda114 | 'typing.chainmap' is deprecated, replace with 'collections.chainmap'\n| mda120 | 'typing.awaitable' is deprecated, replace with 'collections.abc.awaitable'\n| mda121 | 'typing.coroutine' is deprecated, replace with 'collections.abc.coroutine'\n| mda122 | 'typing.asynciterable' is deprecated, replace with 'collections.abc.asynciterable'\n| mda123 | 'typing.asynciterator' is deprecated, replace with 'collections.abc.asynciterator'\n| mda124 | 'typing.asyncgenerator' is deprecated, replace with 'collections.abc.asyncgenerator'\n| mda125 | 'typing.iterable' is deprecated, replace with 'collections.abc.iterable'\n| mda126 | 'typing.iterator' is deprecated, replace with 'collections.abc.iterator'\n| mda127 | 'typing.generator' is deprecated, replace with 'collections.abc.generator'\n| mda128 | 'typing.reversible' is deprecated, replace with 'collections.abc.reversible'\n| mda129 | 'typing.container' is deprecated, replace with 'collections.abc.container'\n| mda130 | 'typing.collection' is deprecated, replace with 'collections.abc.collection'\n| mda131 | 'typing.callable' is deprecated, replace with 'collections.abc.callable'\n| mda132 | 'typing.abstractset' is deprecated, replace with 'collections.abc.set'\n| mda133 | 'typing.mutableset' is deprecated, replace with 'collections.abc.mutableset'\n| mda134 | 'typing.mapping' is deprecated, replace with 'collections.abc.mapping'\n| mda135 | 'typing.mutablemapping' is deprecated, replace with 'collections.abc.mutablemapping'\n| mda136 | 'typing.sequence' is deprecated, replace with 'collections.abc.sequence'\n| mda137 | 'typing.mutablesequence' is deprecated, replace with 'collections.abc.mutablesequence'\n| mda138 | 'typing.bytestring' is deprecated, replace with 'collections.abc.bytestring'\n| mda139 | 'typing.mappingview' is deprecated, replace with 'collections.abc.mappingview'\n| mda140 | 'typing.keysview' is deprecated, replace with 'collections.abc.keysview'\n| mda141 | 'typing.itemsview' is deprecated, replace with 'collections.abc.itemsview'\n| mda142 | 'typing.valuesview' is deprecated, replace with 'collections.abc.valuesview'\n| mda150 | 'typing.contextmanager' is deprecated, replace with 'contextlib.abstractcontextmanager'\n| mda151 | 'typing.asynccontextmanager' is deprecated, replace with 'contextlib.abstractasynccontextmanager'\n| mda160 | 'typing.pattern' is deprecated, replace with 're.pattern'\n| mda161 | 'typing.match' is deprecated, replace with 're.match'\n| mda200 | replace 'tuple' with 'tuple'\n| mda201 | replace 'list' with 'list'\n| mda202 | replace 'dict' with 'dict'\n| mda203 | replace 'set' with 'set'\n| mda204 | replace 'frozenset' with 'frozenset'\n| mda205 | replace 'type' with 'type'\n| mda210 | replace 'deque' with 'collections.deque'\n| mda211 | replace 'defaultdict' with 'collections.defaultdict'\n| mda212 | replace 'ordereddict' with 'collections.ordereddict'\n| mda213 | replace 'counter' with 'collections.counter'\n| mda214 | replace 'chainmap' with 'collections.chainmap'\n| mda220 | replace 'awaitable' with 'collections.abc.awaitable'\n| mda221 | replace 'coroutine' with 'collections.abc.coroutine'\n| mda222 | replace 'asynciterable' with 'collections.abc.asynciterable'\n| mda223 | replace 'asynciterator' with 'collections.abc.asynciterator'\n| mda224 | replace 'asyncgenerator' with 'collections.abc.asyncgenerator'\n| mda225 | replace 'iterable' with 'collections.abc.iterable'\n| mda226 | replace 'iterator' with 'collections.abc.iterator'\n| mda227 | replace 'generator' with 'collections.abc.generator'\n| mda228 | replace 'reversible' with 'collections.abc.reversible'\n| mda229 | replace 'container' with 'collections.abc.container'\n| mda230 | replace 'collection' with 'collections.abc.collection'\n| mda231 | replace 'callable' with 'collections.abc.callable'\n| mda232 | replace 'abstractset' with 'collections.abc.set'\n| mda233 | replace 'mutableset' with 'collections.abc.mutableset'\n| mda234 | replace 'mapping' with 'collections.abc.mapping'\n| mda235 | replace 'mutablemapping' with 'collections.abc.mutablemapping'\n| mda236 | replace 'sequence' with 'collections.abc.sequence'\n| mda237 | replace 'mutablesequence' with 'collections.abc.mutablesequence'\n| mda238 | replace 'bytestring' with 'collections.abc.bytestring'\n| mda239 | replace 'mappingview' with 'collections.abc.mappingview'\n| mda240 | replace 'keysview' with 'collections.abc.keysview'\n| mda241 | replace 'itemsview' with 'collections.abc.itemsview'\n| mda242 | replace 'valuesview' with 'collections.abc.valuesview'\n| mda250 | replace 'contextmanager' with 'contextlib.abstractcontextmanager'\n| mda251 | replace 'asynccontextmanager' with 'contextlib.abstractasynccontextmanager'\n| mda260 | replace 'pattern' with 're.pattern'\n| mda261 | replace 'match' with 're.match'\n| mda400 | 'typing.union' is deprecated, remove from import\n| mda401 | replace 'union' with '&#x7c;'\n| mda500 | 'typing.optional' is deprecated, remove from import\n| mda501 | replace 'optional' with '&#x7c; none'\n\n\n## examples\n\n```\nx: 'foo'  <-- mda001\ndef foo(x: 'foo') -> none:  <-- mda002\ndef foo(x: foo) -> 'bar':  <-- mda003\n\nfrom typing import dict  <-- mda102\nx: dict[str, str]  <-- mda202\n\nfrom typing import dict\nmydict = dict[str, int]  <-- no error on python 3.7/3.8\n\nfrom typing import union  <-- mda400\nx: union[int, float]  <-- mda401\n\nfrom typing import optional  <-- mda500\nx: optional[int]  <-- mda501\n```\n",
  "docs_url": null,
  "keywords": "flake8,noqa",
  "license": "gnu lesser general public license v3",
  "name": "flake8-modern-annotations",
  "package_url": "https://pypi.org/project/flake8-modern-annotations/",
  "project_url": "https://pypi.org/project/flake8-modern-annotations/",
  "project_urls": {
    "homepage": "https://github.com/plinss/flake8-modern-annotations"
  },
  "release_url": "https://pypi.org/project/flake8-modern-annotations/1.5.0/",
  "requires_dist": [
    "flake8 (<7.0,>=3.8.0)",
    "typing-extensions (>=3.7.4.2)",
    "importlib-metadata (<5.0.0,>=4.0.0) ; python_version < \"3.8.0\"",
    "mypy ; extra == 'dev'",
    "flake8 (<6.0.0,>=3.8.0) ; extra == 'dev'",
    "flake8-annotations ; extra == 'dev'",
    "flake8-bandit ; extra == 'dev'",
    "flake8-bugbear ; extra == 'dev'",
    "flake8-commas ; extra == 'dev'",
    "flake8-comprehensions ; extra == 'dev'",
    "flake8-continuation ; extra == 'dev'",
    "flake8-datetimez ; extra == 'dev'",
    "flake8-docstrings ; extra == 'dev'",
    "flake8-import-order ; extra == 'dev'",
    "flake8-literal ; extra == 'dev'",
    "flake8-noqa ; extra == 'dev'",
    "flake8-polyfill ; extra == 'dev'",
    "flake8-pyproject ; extra == 'dev'",
    "flake8-modern-annotations ; extra == 'dev'",
    "flake8-requirements ; extra == 'dev'",
    "flake8-typechecking-import ; extra == 'dev'",
    "flake8-use-fstring ; extra == 'dev'",
    "pep8-naming ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "flake8 modern annotations validation",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "pypi@linss.com"
  ],
  "kwds": "flake8 annotations typing_extensions annotation types",
  "license_kwds": "gnu lesser general public license v3",
  "libtype": "pypi",
  "id": "pypi_flake8_modern_annotations",
  "homepage": "",
  "release_count": 6,
  "dependency_ids": [
    "pypi_flake8",
    "pypi_flake8_annotations",
    "pypi_flake8_bandit",
    "pypi_flake8_bugbear",
    "pypi_flake8_commas",
    "pypi_flake8_comprehensions",
    "pypi_flake8_continuation",
    "pypi_flake8_datetimez",
    "pypi_flake8_docstrings",
    "pypi_flake8_import_order",
    "pypi_flake8_literal",
    "pypi_flake8_modern_annotations",
    "pypi_flake8_noqa",
    "pypi_flake8_polyfill",
    "pypi_flake8_pyproject",
    "pypi_flake8_requirements",
    "pypi_flake8_typechecking_import",
    "pypi_flake8_use_fstring",
    "pypi_importlib_metadata",
    "pypi_mypy",
    "pypi_pep8_naming",
    "pypi_typing_extensions"
  ]
}
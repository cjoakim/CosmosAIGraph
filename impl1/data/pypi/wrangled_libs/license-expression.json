{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": "==================\nlicense-expression\n==================\n\n``license-expression`` is a comprehensive utility library to parse, compare,\nsimplify and normalize license expressions (such as spdx license expressions)\nusing boolean logic.\n\n- license: apache-2.0\n- python: 3.7+\n- homepage: https://github.com/nexb/license-expression/\n- install: `pip install license-expression` also available in most linux distro.\n\nsoftware project licenses are often a combination of several free and open\nsource software licenses. license expressions -- as specified by spdx -- provide\na concise and human readable way to express these licenses without having to\nread long license texts, while still being machine-readable.\n\nlicense expressions are used by key foss projects such as linux; several\npackages ecosystem use them to document package licensing metadata such as\nnpm and rubygems; they are important when exchanging software data (such as with\nspdx and sbom in general) as a way to express licensing precisely.\n\n``license-expression`` is a comprehensive utility library to parse, compare,\nsimplify and normalize these license expressions (such as spdx license expressions)\nusing boolean logic like in: `gpl-2.0-or-later with classpath-exception-2.0 and mit`.\n\nit includes the license keys from spdx https://spdx.org/licenses/ (version 3.22)\nand scancode license db (version 32.0.8, last published on 2023-11-16).\nsee https://scancode-licensedb.aboutcode.org/ to get started quickly.\n\n``license-expression`` is both powerful and simple to use and is a used as the\nlicense expression engine in several projects and products such as:\n\n- aboutcode-toolkit https://github.com/nexb/aboutcode-toolkit\n- aleksis (school information system) https://edugit.org/aleksis/official/aleksis-core\n- barista https://github.com/optum/barista\n- conda forge tools https://github.com/conda-forge/conda-smithy\n- dejacode https://dejacode.com\n- deltacode https://github.com/nexb/deltacode\n- fenixscanx https://github.com/smartsyoung/fenixscanx\n- fetchcode https://github.com/nexb/fetchcode\n- flict https://github.com/vinland-technology/flict and https://github.com/vinland-technology\n- license.sh https://github.com/webscopeio/license.sh\n- liferay_inbound_checker https://github.com/carmenbianca/liferay_inbound_checker\n- reuse https://reuse.software/ and https://github.com/fsfe/reuse-tool\n- scancode-io https://github.com/nexb/scancode.io\n- scancode-toolkit https://github.com/nexb/scancode-toolkit\n\nsee also for details:\n- https://spdx.github.io/spdx-spec/appendix-iv-spdx-license-expressions/\n\n``license-expression`` is also packaged for most linux distributions. see below.\n\nalternative:\n\nthere is no known alternative library for python, but there are several similar\nlibraries in other languages (but not as powerful of course!):\n\n- javascript https://github.com/jslicense/spdx-expression-parse.js\n- rust https://github.com/ehuss/license-exprs\n- haskell https://github.com/phadej/spdx\n- go https://github.com/kyoh86/go-spdx\n- ada https://github.com/fabien-chouteau/spdx_ada\n- java https://github.com/spdx/tools and https://github.com/aschet/spdx-license-expression-tools\n\nbuild and tests status\n======================\n\n+--------------------------+------------------------+----------------------------------+\n|**linux & macos (travis)**| **windows (appveyor)** |**linux, windows & macos (azure)**|\n+==========================+========================+==================================+\n|                          |                        |                                  |\n| |travis-badge-icon|      | |appveyor-badge-icon|  |   |azure-badge-icon|             |\n|                          |                        |                                  |\n+--------------------------+------------------------+----------------------------------+\n\nsource code and download\n========================\n\n- github https://github.com/nexb/license-expression.git\n- pypi https://pypi.python.org/pypi/license-expression\n\nalso available in several linux distros:\n\n- arch linux https://archlinux.org/packages/extra/any/python-license-expression/\n- debian https://packages.debian.org/unstable/source/license-expression\n- dragonfly bsd https://github.com/dragonflybsd/dports/tree/master/textproc/py-license-expression\n- fedora https://src.fedoraproject.org/rpms/python-license-expression/\n- freebsd https://www.freshports.org/textproc/py-license-expression\n- nixos https://github.com/nixos/nixpkgs/blob/release-21.05/pkgs/development/python-modules/license-expression/default.nix\n- opensuse https://build.opensuse.org/package/show/opensuse:factory/python-license-expression\n\n\nsupport\n=======\n\n- submit bugs and questions at: https://github.com/nexb/license-expression/issues\n- join the chat at: https://gitter.im/aboutcode-org/discuss\n\ndescription\n===========\n\nthis module defines a mini language to parse, validate, simplify, normalize and\ncompare license expressions using a boolean logic engine.\n\nthis supports spdx license expressions and also accepts other license naming\nconventions and license identifiers aliases to resolve and normalize any license\nexpressions.\n\nusing boolean logic, license expressions can be tested for equality, containment,\nequivalence and can be normalized or simplified.\n\nit also bundles the spdx license list (3.20 as of now) and the scancode license\ndb (based on latest scancode) to easily parse and validate expressions using\nthe license symbols.\n\n\nusage examples\n==============\n\nthe main entry point is the ``licensing`` object that you can use to parse,\nvalidate, compare, simplify and normalize license expressions.\n\ncreate an spdx licensing and parse expressions::\n\n\t>>> from license_expression import get_spdx_licensing\n\t>>> licensing = get_spdx_licensing()\n\t>>> expression = ' gpl-2.0 or lgpl-2.1 and mit '\n\t>>> parsed = licensing.parse(expression)\n\t>>> print(parsed.pretty())\n\tor(\n\t  licensesymbol('gpl-2.0-only'),\n\t  and(\n\t    licensesymbol('lgpl-2.1-only'),\n\t    licensesymbol('mit')\n\t  )\n\t)\n\n\t>>> str(parsed)\n\t'gpl-2.0-only or (lgpl-2.1-only and mit)'\n\n\t>>> licensing.parse('unknwon with foo', validate=true, strict=true)\n\tlicense_expression.expressionparseerror: a plain license symbol cannot be used\n\tas an exception in a \"with symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=true)\n\tlicense_expression.expressionerror: unknown license key(s): unknwon, foo\n\n\t>>> licensing.validate('foo and mit and gpl-2.0+')\n\texpressioninfo(\n\t    original_expression='foo and mit and gpl-2.0+',\n\t    normalized_expression=none,\n\t    errors=['unknown license key(s): foo'],\n\t    invalid_symbols=['foo']\n\t)\n\n\ncreate a simple licensing and parse expressions::\n\n    >>> from license_expression import licensing, licensesymbol\n    >>> licensing = licensing()\n    >>> expression = ' gpl-2.0 or lgpl-2.1 and mit '\n    >>> parsed = licensing.parse(expression)\n    >>> expression = ' gpl-2.0 or lgpl-2.1 and mit '\n    >>> expected = 'gpl-2.0-only or (lgpl-2.1-only and mit)'\n    >>> assert str(parsed) == expected\n    >>> assert parsed.render('{symbol.key}') == expected\n\n\ncreate a licensing with your own license symbols::\n\n    >>> expected = [\n    ...   licensesymbol('gpl-2.0'),\n    ...   licensesymbol('lgpl-2.1'),\n    ...   licensesymbol('mit')\n    ... ]\n    >>> assert licensing.license_symbols(expression) == expected\n    >>> assert licensing.license_symbols(parsed) == expected\n\n    >>> symbols = ['gpl-2.0+', 'classpath', 'bsd']\n    >>> licensing = licensing(symbols)\n    >>> expression = 'gpl-2.0+ with classpath or (bsd)'\n    >>> parsed = licensing.parse(expression)\n    >>> expected = 'gpl-2.0+ with classpath or bsd'\n    >>> assert parsed.render('{symbol.key}') == expected\n\n    >>> expected = [\n    ...   licensesymbol('gpl-2.0+'),\n    ...   licensesymbol('classpath'),\n    ...   licensesymbol('bsd')\n    ... ]\n    >>> assert licensing.license_symbols(parsed) == expected\n    >>> assert licensing.license_symbols(expression) == expected\n\nand expression can be deduplicated, to remove duplicate license subexpressions\nwithout changing the order and without consider license choices as simplifiable::\n\n    >>> expression2 = ' gpl-2.0 or (mit and lgpl 2.1) or bsd or gpl-2.0  or (mit and lgpl 2.1)'\n    >>> parsed2 = licensing.parse(expression2)\n    >>> str(parsed2)\n    'gpl-2.0 or (mit and lgpl 2.1) or bsd or gpl-2.0 or (mit and lgpl 2.1)'\n    >>> assert str(parsed2.simplify()) == 'bsd or gpl-2.0 or (lgpl 2.1 and mit)'\n\nexpression can be simplified, treating them as boolean expressions::\n\n    >>> expression2 = ' gpl-2.0 or (mit and lgpl 2.1) or bsd or gpl-2.0  or (mit and lgpl 2.1)'\n    >>> parsed2 = licensing.parse(expression2)\n    >>> str(parsed2)\n    'gpl-2.0 or (mit and lgpl 2.1) or bsd or gpl-2.0 or (mit and lgpl 2.1)'\n    >>> assert str(parsed2.simplify()) == 'bsd or gpl-2.0 or (lgpl 2.1 and mit)'\n\ntwo expressions can be compared for equivalence and containment:\n\n    >>> expr1 = licensing.parse(' gpl-2.0 or (lgpl 2.1 and mit) ')\n    >>> expr2 = licensing.parse(' (mit and lgpl 2.1)  or gpl-2.0 ')\n    >>> licensing.is_equivalent(expr1, expr2)\n    true\n    >>> licensing.is_equivalent(' gpl-2.0 or (lgpl 2.1 and mit) ',\n    ...                         ' (mit and lgpl 2.1)  or gpl-2.0 ')\n    true\n    >>> expr1.simplify() == expr2.simplify()\n    true\n    >>> expr3 = licensing.parse(' gpl-2.0 or mit or lgpl 2.1')\n    >>> licensing.is_equivalent(expr2, expr3)\n    false\n    >>> expr4 = licensing.parse('mit and lgpl 2.1')\n    >>> expr4.simplify() in expr2.simplify()\n    true\n    >>> licensing.contains(expr2, expr4)\n    true\n\ndevelopment\n===========\n\n- checkout a clone from https://github.com/nexb/license-expression.git\n\n- then run ``./configure --dev`` and then ``source tmp/bin/activate`` on linux and posix.\n  this will install all dependencies in a local virtualenv, including\n  development deps.\n\n- on windows run  ``configure.bat --dev`` and then ``scripts\\bin\\activate`` instead.\n\n- to run the tests, run ``pytest -vvs``\n\n\n.. |travis-badge-icon| image:: https://api.travis-ci.org/nexb/license-expression.png?branch=master\n    :target: https://travis-ci.org/nexb/license-expression\n    :alt: travis tests status\n    :align: middle\n\n.. |appveyor-badge-icon| image:: https://ci.appveyor.com/api/projects/status/github/nexb/license-expression?svg=true\n    :target: https://ci.appveyor.com/project/nexb/license-expression\n    :alt: appveyor tests status\n    :align: middle\n\n.. |azure-badge-icon| image:: https://dev.azure.com/nexb/license-expression/_apis/build/status/nexb.license-expression?branchname=master\n    :target: https://dev.azure.com/nexb/license-expression/_build/latest?definitionid=2&branchname=master\n    :alt: azure pipelines tests status\n    :align: middle\n\n",
  "docs_url": null,
  "keywords": "open source,license expression,license,spdx,boolean,parse expression,normalize expression,compare expression,licence",
  "license": "apache-2.0",
  "name": "license-expression",
  "package_url": "https://pypi.org/project/license-expression/",
  "project_url": "https://pypi.org/project/license-expression/",
  "project_urls": {
    "Homepage": "https://github.com/nexB/license-expression"
  },
  "release_url": "https://pypi.org/project/license-expression/30.2.0/",
  "requires_dist": [
    "boolean.py >=4.0",
    "Sphinx >=5.0.2 ; extra == 'docs'",
    "sphinx-rtd-theme >=1.0.0 ; extra == 'docs'",
    "sphinxcontrib-apidoc >=0.4.0 ; extra == 'docs'",
    "sphinx-reredirects >=0.1.2 ; extra == 'docs'",
    "doc8 >=0.11.2 ; extra == 'docs'",
    "sphinx-autobuild ; extra == 'docs'",
    "sphinx-rtd-dark-mode >=1.3.0 ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "pytest !=7.0.0,>=6 ; extra == 'testing'",
    "pytest-xdist >=2 ; extra == 'testing'",
    "twine ; extra == 'testing'",
    "black ; extra == 'testing'",
    "isort ; extra == 'testing'"
  ],
  "requires_python": ">=3.7",
  "summary": "license-expression is a comprehensive utility library to parse, compare, simplify and normalize license expressions (such as spdx license expressions) using boolean logic.",
  "version": "30.2.0",
  "releases": [],
  "developers": [
    "info@aboutcode.org",
    "nexb"
  ],
  "kwds": "license_expression license_symbols licenses get_spdx_licensing license",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_license_expression",
  "homepage": "https://github.com/nexb/license-expression",
  "release_count": 37,
  "dependency_ids": [
    "pypi_black",
    "pypi_boolean.py",
    "pypi_doc8",
    "pypi_isort",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_sphinx",
    "pypi_sphinx_autobuild",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_reredirects",
    "pypi_sphinx_rtd_dark_mode",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_apidoc",
    "pypi_twine"
  ]
}
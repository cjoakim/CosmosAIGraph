{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# <a href=\"https://github.com/nteract/papermill\"><img src=\"https://media.githubusercontent.com/media/nteract/logos/master/nteract_papermill/exports/images/png/papermill_logo_wide.png\" height=\"48px\" /></a>\n\n<!---(binder links generated at https://mybinder.readthedocs.io/en/latest/howto/badges.html and compressed at https://tinyurl.com) -->\n\n[![ci](https://github.com/nteract/papermill/actions/workflows/ci.yml/badge.svg)](https://github.com/nteract/papermill/actions/workflows/ci.yml)\n[![ci](https://github.com/nteract/papermill/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/nteract/papermill/actions/workflows/ci.yml)\n[![image](https://codecov.io/github/nteract/papermill/coverage.svg?branch=main)](https://codecov.io/github/nteract/papermill?branch=main)\n[![documentation status](https://readthedocs.org/projects/papermill/badge/?version=latest)](http://papermill.readthedocs.io/en/latest/?badge=latest)\n[![badge](https://tinyurl.com/ybwovtw2)](https://mybinder.org/v2/gh/nteract/papermill/main?filepath=binder%2fprocess_highlight_dates.ipynb)\n[![badge](https://tinyurl.com/y7uz2eh9)](https://mybinder.org/v2/gh/nteract/papermill/main?)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/papermill)](https://pypi.org/project/papermill/)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![papermill](https://snyk.io/advisor/python/papermill/badge.svg)](https://snyk.io/advisor/python/papermill)\n[![anaconda-server badge](https://anaconda.org/conda-forge/papermill/badges/downloads.svg)](https://anaconda.org/conda-forge/papermill)\n\n**papermill** is a tool for parameterizing, executing, and analyzing\njupyter notebooks.\n\npapermill lets you:\n\n- **parameterize** notebooks\n- **execute** notebooks\n\nthis opens up new opportunities for how notebooks can be used. for\nexample:\n\n- perhaps you have a financial report that you wish to run with\n  different values on the first or last day of a month or at the\n  beginning or end of the year, **using parameters** makes this task\n  easier.\n- do you want to run a notebook and depending on its results, choose a\n  particular notebook to run next? you can now programmatically\n  **execute a workflow** without having to copy and paste from\n  notebook to notebook manually.\n\npapermill takes an *opinionated* approach to notebook parameterization and\nexecution based on our experiences using notebooks at scale in data\npipelines.\n\n## installation\n\nfrom the command line:\n\n```{.sourcecode .bash}\npip install papermill\n```\n\nfor all optional io dependencies, you can specify individual bundles\nlike `s3`, or `azure` -- or use `all`. to use black to format parameters you can add as an extra requires \\['black'\\].\n\n```{.sourcecode .bash}\npip install papermill[all]\n```\n\n## python version support\n\nthis library currently supports python 3.8+ versions. as minor python\nversions are officially sunset by the python org papermill will similarly\ndrop support in the future.\n\n## usage\n\n### parameterizing a notebook\n\nto parameterize your notebook designate a cell with the tag `parameters`.\n\n![enable parameters in jupyter](docs/img/enable_parameters.gif)\n\npapermill looks for the `parameters` cell and treats this cell as defaults for the parameters passed in at execution time. papermill will add a new cell tagged with `injected-parameters` with input parameters in order to overwrite the values in `parameters`. if no cell is tagged with `parameters` the injected cell will be inserted at the top of the notebook.\n\nadditionally, if you rerun notebooks through papermill and it will reuse the `injected-parameters` cell from the prior run. in this case papermill will replace the old `injected-parameters` cell with the new run's inputs.\n\n![image](docs/img/parameters.png)\n\n### executing a notebook\n\nthe two ways to execute the notebook with parameters are: (1) through\nthe python api and (2) through the command line interface.\n\n#### execute via the python api\n\n```{.sourcecode .python}\nimport papermill as pm\n\npm.execute_notebook(\n   'path/to/input.ipynb',\n   'path/to/output.ipynb',\n   parameters = dict(alpha=0.6, ratio=0.1)\n)\n```\n\n#### execute via cli\n\nhere's an example of a local notebook being executed and output to an\namazon s3 account:\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -p alpha 0.6 -p l1_ratio 0.1\n```\n\n**note:**\nif you use multiple aws accounts, and you have [properly configured your aws  credentials](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html), then you can specify which account to use by setting the `aws_profile` environment variable at the command-line. for example:\n\n```{.sourcecode .bash}\n$ aws_profile=dev_account papermill local/input.ipynb s3://bkt/output.ipynb -p alpha 0.6 -p l1_ratio 0.1\n```\n\nin the above example, two parameters are set: `alpha` and `l1_ratio` using `-p` (`--parameters` also works). parameter values that look like booleans or numbers will be interpreted as such. here are the different ways users may set parameters:\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -r version 1.0\n```\n\nusing `-r` or `--parameters_raw`, users can set parameters one by one. however, unlike `-p`, the parameter will remain a string, even if it may be interpreted as a number or boolean.\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -f parameters.yaml\n```\n\nusing `-f` or `--parameters_file`, users can provide a yaml file from which parameter values should be read.\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -y \"\nalpha: 0.6\nl1_ratio: 0.1\"\n```\n\nusing `-y` or `--parameters_yaml`, users can directly provide a yaml string containing parameter values.\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -b ywxwage6idaungpsmv9yyxrpbzogmc4xcg==\n```\n\nusing `-b` or `--parameters_base64`, users can provide a yaml string, base64-encoded, containing parameter values.\n\nwhen using yaml to pass arguments, through `-y`, `-b` or `-f`, parameter values can be arrays or dictionaries:\n\n```{.sourcecode .bash}\n$ papermill local/input.ipynb s3://bkt/output.ipynb -y \"\nx:\n    - 0.0\n    - 1.0\n    - 2.0\n    - 3.0\nlinear_function:\n    slope: 3.0\n    intercept: 1.0\"\n```\n\n#### supported name handlers\n\npapermill supports the following name handlers for input and output paths during execution:\n\n- local file system: `local`\n\n- http, https protocol:  `http://, https://`\n\n- amazon web services: [aws s3](https://aws.amazon.com/s3/) `s3://`\n\n- azure: [azure datalake store](https://docs.microsoft.com/en-us/azure/data-lake-store/data-lake-store-overview), [azure blob store](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blobs-overview) `adl://, abs://`\n\n- google cloud: [google cloud storage](https://cloud.google.com/storage/) `gs://`\n\n## development guide\n\nread [contributing.md](./contributing.md) for guidelines on how to setup a local development environment and make code changes back to papermill.\n\nfor development guidelines look in the [development_guide.md](./development_guide.md) file. this should inform you on how to make particular additions to the code base.\n\n## documentation\n\nwe host the [papermill documentation](http://papermill.readthedocs.io)\non readthedocs.\n",
  "docs_url": null,
  "keywords": "jupyter mapreduce nteract pipeline notebook",
  "license": "bsd",
  "name": "papermill",
  "package_url": "https://pypi.org/project/papermill/",
  "project_url": "https://pypi.org/project/papermill/",
  "project_urls": {
    "Documentation": "https://papermill.readthedocs.io",
    "Funding": "https://nteract.io",
    "Homepage": "https://github.com/nteract/papermill",
    "Source": "https://github.com/nteract/papermill/",
    "Tracker": "https://github.com/nteract/papermill/issues"
  },
  "release_url": "https://pypi.org/project/papermill/2.5.0/",
  "requires_dist": [
    "click",
    "pyyaml",
    "nbformat >=5.1.2",
    "nbclient >=0.2.0",
    "tqdm >=4.32.2",
    "requests",
    "entrypoints",
    "tenacity >=5.0.2",
    "aiohttp ==3.9.0b0 ; python_version == \"3.12\"",
    "boto3 ; extra == 'all'",
    "azure-datalake-store >=0.0.30 ; extra == 'all'",
    "azure-storage-blob >=12.1.0 ; extra == 'all'",
    "requests >=2.21.0 ; extra == 'all'",
    "azure-identity >=1.3.1 ; extra == 'all'",
    "gcsfs >=0.2.0 ; extra == 'all'",
    "pyarrow >=2.0 ; extra == 'all'",
    "PyGithub >=1.55 ; extra == 'all'",
    "black >=19.3b0 ; extra == 'all'",
    "azure-datalake-store >=0.0.30 ; extra == 'azure'",
    "azure-storage-blob >=12.1.0 ; extra == 'azure'",
    "requests >=2.21.0 ; extra == 'azure'",
    "azure-identity >=1.3.1 ; extra == 'azure'",
    "black >=19.3b0 ; extra == 'black'",
    "boto3 ; extra == 'dev'",
    "botocore ; extra == 'dev'",
    "codecov ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "google-compute-engine ; extra == 'dev'",
    "ipython >=5.0 ; extra == 'dev'",
    "ipywidgets ; extra == 'dev'",
    "notebook ; extra == 'dev'",
    "moto ; extra == 'dev'",
    "pytest >=4.1 ; extra == 'dev'",
    "pytest-cov >=2.6.1 ; extra == 'dev'",
    "pytest-mock >=1.10 ; extra == 'dev'",
    "pytest-env >=0.6.2 ; extra == 'dev'",
    "requests >=2.21.0 ; extra == 'dev'",
    "check-manifest ; extra == 'dev'",
    "attrs >=17.4.0 ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "bumpversion ; extra == 'dev'",
    "recommonmark ; extra == 'dev'",
    "pip >=18.1 ; extra == 'dev'",
    "wheel >=0.31.0 ; extra == 'dev'",
    "setuptools >=38.6.0 ; extra == 'dev'",
    "twine >=1.11.0 ; extra == 'dev'",
    "azure-datalake-store >=0.0.30 ; extra == 'dev'",
    "azure-storage-blob >=12.1.0 ; extra == 'dev'",
    "azure-identity >=1.3.1 ; extra == 'dev'",
    "gcsfs >=0.2.0 ; extra == 'dev'",
    "black >=19.3b0 ; extra == 'dev'",
    "boto3 ; extra == 'docs'",
    "azure-datalake-store >=0.0.30 ; extra == 'docs'",
    "azure-storage-blob >=12.1.0 ; extra == 'docs'",
    "requests >=2.21.0 ; extra == 'docs'",
    "azure-identity >=1.3.1 ; extra == 'docs'",
    "gcsfs >=0.2.0 ; extra == 'docs'",
    "pyarrow >=2.0 ; extra == 'docs'",
    "PyGithub >=1.55 ; extra == 'docs'",
    "black >=19.3b0 ; extra == 'docs'",
    "Sphinx >=3.5.4 ; extra == 'docs'",
    "furo >=2021.4.11b34 ; extra == 'docs'",
    "myst-parser >=0.13.7 ; extra == 'docs'",
    "moto >=2.0.5 ; extra == 'docs'",
    "sphinx-copybutton >=0.3.1 ; extra == 'docs'",
    "gcsfs >=0.2.0 ; extra == 'gcs'",
    "PyGithub >=1.55 ; extra == 'github'",
    "pyarrow >=2.0 ; extra == 'hdfs'",
    "boto3 ; extra == 's3'",
    "boto3 ; extra == 'test'",
    "botocore ; extra == 'test'",
    "codecov ; extra == 'test'",
    "coverage ; extra == 'test'",
    "google-compute-engine ; extra == 'test'",
    "ipython >=5.0 ; extra == 'test'",
    "ipywidgets ; extra == 'test'",
    "notebook ; extra == 'test'",
    "moto ; extra == 'test'",
    "pytest >=4.1 ; extra == 'test'",
    "pytest-cov >=2.6.1 ; extra == 'test'",
    "pytest-mock >=1.10 ; extra == 'test'",
    "pytest-env >=0.6.2 ; extra == 'test'",
    "requests >=2.21.0 ; extra == 'test'",
    "check-manifest ; extra == 'test'",
    "attrs >=17.4.0 ; extra == 'test'",
    "pre-commit ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "tox ; extra == 'test'",
    "bumpversion ; extra == 'test'",
    "recommonmark ; extra == 'test'",
    "pip >=18.1 ; extra == 'test'",
    "wheel >=0.31.0 ; extra == 'test'",
    "setuptools >=38.6.0 ; extra == 'test'",
    "twine >=1.11.0 ; extra == 'test'",
    "azure-datalake-store >=0.0.30 ; extra == 'test'",
    "azure-storage-blob >=12.1.0 ; extra == 'test'",
    "azure-identity >=1.3.1 ; extra == 'test'",
    "gcsfs >=0.2.0 ; extra == 'test'",
    "black >=19.3b0 ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "parameterize and run jupyter and nteract notebooks",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "nteract@googlegroups.com",
    "nteract_contributors"
  ],
  "kwds": "nteract_papermill papermill jupyter papermill_logo_wide nteract",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_papermill",
  "homepage": "https://github.com/nteract/papermill",
  "release_count": 74,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_attrs",
    "pypi_azure_datalake_store",
    "pypi_azure_identity",
    "pypi_azure_storage_blob",
    "pypi_black",
    "pypi_boto3",
    "pypi_botocore",
    "pypi_bumpversion",
    "pypi_check_manifest",
    "pypi_click",
    "pypi_codecov",
    "pypi_coverage",
    "pypi_entrypoints",
    "pypi_flake8",
    "pypi_furo",
    "pypi_gcsfs",
    "pypi_google_compute_engine",
    "pypi_ipython",
    "pypi_ipywidgets",
    "pypi_moto",
    "pypi_myst_parser",
    "pypi_nbclient",
    "pypi_nbformat",
    "pypi_notebook",
    "pypi_pip",
    "pypi_pre_commit",
    "pypi_pyarrow",
    "pypi_pygithub",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_env",
    "pypi_pytest_mock",
    "pypi_pyyaml",
    "pypi_recommonmark",
    "pypi_requests",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_tenacity",
    "pypi_tox",
    "pypi_tqdm",
    "pypi_twine",
    "pypi_wheel"
  ]
}
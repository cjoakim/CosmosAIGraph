{
  "classifiers": [],
  "description": "<p align=\"center\"><a href=\"https://modin.readthedocs.io\"><img width=77% alt=\"\" src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/modin_ver2_hrz.png?raw=true\"></a></p>\r\n<h2 align=\"center\">scale your pandas workflows by changing one line of code</h2>\r\n\r\n<div align=\"center\">\r\n\r\n| <h3>dev community & support</h3> | <h3>forums</h3> | <h3>socials</h3> | <h3>docs</h3> |\r\n|:---: | :---: | :---: | :---: |\r\n| [![slack](https://img.shields.io/badge/slack-4a154b?style=for-the-badge&logo=slack&logocolor=white)](https://join.slack.com/t/modin-project/shared_invite/zt-yvk5hr3b-f08p_ulburwsafg9rmy3ua) | [![stack overflow](https://img.shields.io/badge/-stackoverflow-fe7a16?style=for-the-badge&logo=stack-overflow&logocolor=white)](https://stackoverflow.com/questions/tagged/modin) | <a href=\"https://twitter.com/modin_project\"><img alt=\"twitter follow\" src=\"https://img.shields.io/twitter/follow/modin_project?style=social\" height=28 align=\"center\"></a> | <a href=\"https://modin.readthedocs.io/en/latest/?badge=latest\"><img alt=\"\" src=\"https://readthedocs.org/projects/modin/badge/?version=latest\" height=28 align=\"center\"></a> |\r\n\r\n</div>\r\n\r\n<p align=\"center\">\r\n<a href=\"https://pepy.tech/project/modin\"><img src=\"https://static.pepy.tech/personalized-badge/modin?period=total&units=international_system&left_color=black&right_color=blue&left_text=downloads\" align=\"center\"></a>\r\n<a href=\"https://codecov.io/gh/modin-project/modin\"><img src=\"https://codecov.io/gh/modin-project/modin/branch/master/graph/badge.svg\" align=\"center\"/></a>\r\n<a href=\"https://github.com/modin-project/modin/actions\"><img src=\"https://github.com/modin-project/modin/workflows/master/badge.svg\" align=\"center\"></a>\r\n<a href=\"https://github.com/modin-project/modin/actions/workflows/ci.yml?query=event%3apush\"><img src=\"https://github.com/modin-project/modin/actions/workflows/ci.yml/badge.svg?branch=master\" align=\"center\"></a>\r\n<a href=\"https://pypi.org/project/modin/\"><img src=\"https://badge.fury.io/py/modin.svg\" alt=\"pypi version\" align=\"center\"></a>\r\n<a href=\"https://modin.org/modin-bench/#/\"><img src=\"https://img.shields.io/badge/benchmarked%20by-asv-blue.svg\" align=\"center\"></a>\r\n</p>\r\n\r\n### what is modin?\r\n\r\nmodin is a drop-in replacement for [pandas](https://github.com/pandas-dev/pandas). while pandas is\r\nsingle-threaded, modin lets you instantly speed up your workflows by scaling pandas so it uses all of your\r\ncores. modin works especially well on larger datasets, where pandas becomes painfully slow or runs\r\n[out of memory](https://modin.readthedocs.io/en/latest/getting_started/why_modin/out_of_core.html).\r\n\r\nby simply replacing the import statement, modin offers users effortless speed and scale for their pandas workflows:\r\n\r\n<img src=\"https://github.com/modin-project/modin/raw/master/docs/img/import.gif\" style=\"display: block;margin-left: auto;margin-right: auto;\" width=\"100%\"></img>\r\n\r\nin the gifs below, modin (left) and pandas (right) perform *the same pandas operations* on a 2gb dataset. the only difference between the two notebook examples is the import statement. \r\n\r\n<table class=\"tg\">\r\n<thead>\r\n  <tr>\r\n    <th class=\"tg-0lax\" style=\"text-align: center;\"><img src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/modin_ver2_hrz.png?raw=true\" height=\"35px\"></th>\r\n    <th class=\"tg-0lax\" style=\"text-align: center;\"><img src=\"https://pandas.pydata.org/static/img/pandas.svg\" height=\"50px\"></img></th>\r\n  </tr>\r\n</thead>\r\n<tbody>\r\n  <tr>\r\n    <td class=\"tg-0lax\"><img src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/modin.gif\"></img></td>\r\n    <td class=\"tg-0lax\"><img src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/pandas.gif\"></img></td>\r\n  </tr>\r\n</tbody>\r\n</table>\r\n\r\nthe charts below show the speedup you get by replacing pandas with modin based on the examples above. the example notebooks can be found [here](examples/jupyter). to learn more about the speedups you could get with modin and try out some examples on your own, check out our [10-minute quickstart guide](https://modin.readthedocs.io/en/latest/getting_started/quickstart.html) to try out some examples on your own!\r\n\r\n<img src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/modin_speedup.svg\" style=\"display: block;margin-left: auto;margin-right: auto;\" width=\"100%\"></img>\r\n\r\n### installation\r\n\r\n#### from pypi\r\n\r\nmodin can be installed with `pip` on linux, windows and macos:\r\n\r\n```bash\r\npip install \"modin[all]\" # (recommended) install modin with ray and dask engines.\r\n```\r\n\r\nif you want to install modin with a specific engine, we recommend:\r\n\r\n```bash\r\npip install \"modin[ray]\" # install modin dependencies and ray.\r\npip install \"modin[dask]\" # install modin dependencies and dask.\r\npip install \"modin[mpi]\" # install modin dependencies and mpi through unidist.\r\n```\r\n\r\nto get modin on mpi through unidist (as of unidist 0.5.0) fully working\r\nit is required to have a working mpi implementation installed beforehand.\r\notherwise, installation of `modin[mpi]` may fail. refer to\r\n[installing with pip](https://unidist.readthedocs.io/en/latest/installation.html#installing-with-pip)\r\nsection of the unidist documentation for more details about installation.\r\n\r\nmodin automatically detects which engine(s) you have installed and uses that for scheduling computation.\r\n\r\n#### from conda-forge\r\n\r\ninstalling from [conda forge](https://github.com/conda-forge/modin-feedstock) using `modin-all`\r\nwill install modin and four engines: [ray](https://github.com/ray-project/ray), [dask](https://github.com/dask/dask),\r\n[mpi through unidist](https://github.com/modin-project/unidist) and [hdk](https://github.com/intel-ai/hdk).\r\n\r\n```bash\r\nconda install -c conda-forge modin-all\r\n```\r\n\r\neach engine can also be installed individually (and also as a combination of several engines):\r\n\r\n```bash\r\nconda install -c conda-forge modin-ray  # install modin dependencies and ray.\r\nconda install -c conda-forge modin-dask # install modin dependencies and dask.\r\nconda install -c conda-forge modin-mpi # install modin dependencies and mpi through unidist.\r\nconda install -c conda-forge modin-hdk # install modin dependencies and hdk.\r\n```\r\n\r\nrefer to\r\n[installing with conda](https://unidist.readthedocs.io/en/latest/installation.html#installing-with-conda)\r\nsection of the unidist documentation for more details on how to install a specific mpi implementation to run on.\r\n\r\nto speed up conda installation we recommend using libmamba solver. to do this install it in a base environment:\r\n\r\n```bash\r\nconda install -n base conda-libmamba-solver\r\n```\r\n\r\nand then use it during istallation either like:\r\n\r\n```bash\r\nconda install -c conda-forge modin-ray modin-hdk --experimental-solver=libmamba\r\n```\r\n\r\nor starting from conda 22.11 and libmamba solver 22.12 versions:\r\n\r\n```bash\r\nconda install -c conda-forge modin-ray modin-hdk --solver=libmamba\r\n```\r\n\r\n#### choosing a compute engine\r\n\r\nif you want to choose a specific compute engine to run on, you can set the environment\r\nvariable `modin_engine` and modin will do computation with that engine:\r\n\r\n```bash\r\nexport modin_engine=ray  # modin will use ray\r\nexport modin_engine=dask  # modin will use dask\r\nexport modin_engine=unidist # modin will use unidist\r\n```\r\n\r\nif you want to choose the unidist engine, you should set the additional environment \r\nvariable ``unidist_backend``. currently, modin only supports mpi through unidist:\r\n\r\n```bash\r\nexport unidist_backend=mpi # unidist will use mpi backend\r\n```\r\n\r\nthis can also be done within a notebook/interpreter before you import modin:\r\n\r\n```python\r\nimport modin.config as modin_cfg\r\nimport unidist.config as unidist_cfg\r\n\r\nmodin_cfg.engine.put(\"ray\")  # modin will use ray\r\nmodin_cfg.engine.put(\"dask\")  # modin will use dask\r\n\r\nmodin_cfg.engine.put('unidist') # modin will use unidist\r\nunidist_cfg.backend.put('mpi') # unidist will use mpi backend\r\n```\r\n\r\ncheck [this modin docs section](https://modin.readthedocs.io/en/latest/development/using_hdk.html) for hdk engine setup.\r\n\r\n_note: you should not change the engine after your first operation with modin as it will result in undefined behavior._\r\n\r\n#### which engine should i use?\r\n\r\non linux, macos, and windows you can install and use either ray, dask or mpi through unidist. there is no knowledge required\r\nto use either of these engines as modin abstracts away all of the complexity, so feel\r\nfree to pick either!\r\n\r\non linux you also can choose [hdk](https://modin.readthedocs.io/en/latest/development/using_hdk.html), which is an experimental\r\nengine based on [hdk](https://github.com/intel-ai/hdk) and included in the\r\n[intel\u00ae distribution of modin](https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/distribution-of-modin.html),\r\nwhich is a part of [intel\u00ae oneapi ai analytics toolkit (ai kit)](https://www.intel.com/content/www/us/en/developer/tools/oneapi/ai-analytics-toolkit.html).\r\n\r\n### pandas api coverage\r\n\r\n<p align=\"center\">\r\n\r\n| pandas object     | modin's ray engine coverage                                                          | modin's dask engine coverage | modin's unidist engine coverage |\r\n|-------------------|:------------------------------------------------------------------------------------:|:---------------:|:---------------:|\r\n| `pd.dataframe`    | <img src=https://img.shields.io/badge/api%20coverage-90.8%25-hunter.svg> | <img src=https://img.shields.io/badge/api%20coverage-90.8%25-hunter.svg> | <img src=https://img.shields.io/badge/api%20coverage-90.8%25-hunter.svg> |\r\n| `pd.series`       | <img src=https://img.shields.io/badge/api%20coverage-88.05%25-green.svg> | <img src=https://img.shields.io/badge/api%20coverage-88.05%25-green.svg> | <img src=https://img.shields.io/badge/api%20coverage-88.05%25-green.svg> \r\n| `pd.read_csv`     | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_table`   | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_parquet` | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_sql`     | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_feather` | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_excel`   | \u2705                                               | \u2705 | \u2705 |\r\n| `pd.read_json`    | [\u2733\ufe0f](https://github.com/modin-project/modin/issues/554)                                         | [\u2733\ufe0f](https://github.com/modin-project/modin/issues/554) | [\u2733\ufe0f](https://github.com/modin-project/modin/issues/554) |\r\n| `pd.read_<other>` | [\u2734\ufe0f](https://modin.readthedocs.io/en/latest/supported_apis/io_supported.html) | [\u2734\ufe0f](https://modin.readthedocs.io/en/latest/supported_apis/io_supported.html) | [\u2734\ufe0f](https://modin.readthedocs.io/en/latest/supported_apis/io_supported.html) |\r\n\r\n</p>\r\nsome pandas apis are easier to implement than others, so if something is missing feel\r\nfree to open an issue!\r\n\r\n### more about modin\r\n\r\nfor the complete documentation on modin, visit our [readthedocs](https://modin.readthedocs.io/en/latest/index.html) page.\r\n\r\n#### scale your pandas workflow by changing a single line of code.\r\n\r\n_note: in local mode (without a cluster), modin will create and manage a local (dask or ray) cluster for the execution._\r\n\r\nto use modin, you do not need to specify how to distribute the data, or even know how many\r\ncores your system has. in fact, you can continue using your previous\r\npandas notebooks while experiencing a considerable speedup from modin, even on a single\r\nmachine. once you've changed your import statement, you're ready to use modin just like\r\nyou would with pandas!\r\n\r\n#### faster pandas, even on your laptop\r\n\r\n<img align=\"right\" style=\"display:inline;\" height=\"350\" width=\"300\" src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/read_csv_benchmark.png?raw=true\"></a>\r\n\r\nthe `modin.pandas` dataframe is an extremely light-weight parallel dataframe.\r\nmodin transparently distributes the data and computation so that you can continue using the same pandas api\r\nwhile working with more data faster. because it is so light-weight,\r\nmodin provides speed-ups of up to 4x on a laptop with 4 physical cores.\r\n\r\nin pandas, you are only able to use one core at a time when you are doing computation of\r\nany kind. with modin, you are able to use all of the cpu cores on your machine. even with a\r\ntraditionally synchronous task like `read_csv`, we see large speedups by efficiently\r\ndistributing the work across your entire machine.\r\n\r\n```python\r\nimport modin.pandas as pd\r\n\r\ndf = pd.read_csv(\"my_dataset.csv\")\r\n```\r\n\r\n#### modin can handle the datasets that pandas can't \r\n\r\noften data scientists have to switch between different tools\r\nfor operating on datasets of different sizes. processing large dataframes with pandas\r\nis slow, and pandas does not support working with dataframes that are too large to fit\r\ninto the available memory. as a result, pandas workflows that work well\r\nfor prototyping on a few mbs of data do not scale to tens or hundreds of gbs (depending on the size\r\nof your machine). modin supports operating on data that does not fit in memory, so that you can comfortably\r\nwork with hundreds of gbs without worrying about substantial slowdown or memory errors.\r\nwith [cluster](https://modin.readthedocs.io/en/latest/getting_started/using_modin/using_modin_cluster.html)\r\nand [out of core](https://modin.readthedocs.io/en/latest/getting_started/why_modin/out_of_core.html)\r\nsupport, modin is a dataframe library with both great single-node performance and high\r\nscalability in a cluster.\r\n\r\n#### modin architecture\r\n\r\nwe designed [modin's architecture](https://modin.readthedocs.io/en/latest/development/architecture.html)\r\nto be modular so we can plug in different components as they develop and improve:\r\n\r\n<img src=\"https://github.com/modin-project/modin/raw/7c009c747caa90554607e30b9ac2bd1b190b8c7d/docs/img/modin_architecture.png\" alt=\"modin's architecture\" width=\"75%\"></img>\r\n\r\n### other resources\r\n\r\n#### getting started with modin\r\n\r\n- [documentation](https://modin.readthedocs.io/en/latest/)\r\n- [10-min quickstart guide](https://modin.readthedocs.io/en/latest/getting_started/quickstart.html)\r\n- [examples and tutorials](https://modin.readthedocs.io/en/latest/getting_started/examples.html)\r\n- [videos and blogposts](https://modin.readthedocs.io/en/latest/getting_started/examples.html#talks-podcasts)\r\n- [benchmarking modin](https://modin.readthedocs.io/en/latest/usage_guide/benchmarking.html)\r\n\r\n#### modin community\r\n\r\n- [slack](https://join.slack.com/t/modin-project/shared_invite/zt-yvk5hr3b-f08p_ulburwsafg9rmy3ua)\r\n- [discourse](https://discuss.modin.org)\r\n- [twitter](https://twitter.com/modin_project)\r\n- [mailing list](https://groups.google.com/g/modin-dev)\r\n- [github issues](https://github.com/modin-project/modin/issues)\r\n- [stackoverflow](https://stackoverflow.com/questions/tagged/modin)\r\n\r\n#### learn more about modin\r\n\r\n- [frequently asked questions (faqs)](https://modin.readthedocs.io/en/latest/getting_started/faq.html)\r\n- [troubleshooting guide](https://modin.readthedocs.io/en/latest/getting_started/troubleshooting.html)\r\n- [development guide](https://modin.readthedocs.io/en/latest/development/index.html)\r\n- modin is built on many years of research and development at uc berkeley. check out these selected papers to learn more about how modin works:\r\n  - [flexible rule-based decomposition and metadata independence in modin](https://people.eecs.berkeley.edu/~totemtang/paper/modin.pdf) (vldb 2021)\r\n  - [dataframe systems: theory, architecture, and implementation](https://www2.eecs.berkeley.edu/pubs/techrpts/2021/eecs-2021-193.pdf) (phd dissertation 2021)\r\n  - [towards scalable dataframe systems](https://arxiv.org/pdf/2001.00888.pdf) (vldb 2020)\r\n\r\n#### getting involved\r\n\r\n***`modin.pandas` is currently under active development. requests and contributions are welcome!***\r\n\r\nfor more information on how to contribute to modin, check out the\r\n[modin contribution guide](https://modin.readthedocs.io/en/latest/development/contributing.html).\r\n\r\n### license\r\n\r\n[apache license 2.0](license)\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2",
  "name": "modin",
  "package_url": "https://pypi.org/project/modin/",
  "project_url": "https://pypi.org/project/modin/",
  "project_urls": {
    "Homepage": "https://github.com/modin-project/modin"
  },
  "release_url": "https://pypi.org/project/modin/0.26.0/",
  "requires_dist": [
    "pandas (<2.2,>=2.1)",
    "packaging (>=21.0)",
    "numpy (>=1.22.4)",
    "fsspec (>=2022.05.0)",
    "psutil (>=5.8.0)",
    "dask (>=2.22.0) ; extra == 'all'",
    "distributed (>=2.22.0) ; extra == 'all'",
    "ray[default] (!=2.5.0,>=1.13.0) ; extra == 'all'",
    "pyarrow (>=7.0.0) ; extra == 'all'",
    "pydantic (<2) ; extra == 'all'",
    "modin-spreadsheet (>=0.1.0) ; extra == 'all'",
    "dask (>=2.22.0) ; extra == 'dask'",
    "distributed (>=2.22.0) ; extra == 'dask'",
    "unidist[mpi] (>=0.2.1) ; extra == 'mpi'",
    "ray[default] (!=2.5.0,>=1.13.0) ; extra == 'ray'",
    "pyarrow (>=7.0.0) ; extra == 'ray'",
    "pydantic (<2) ; extra == 'ray'",
    "modin-spreadsheet (>=0.1.0) ; extra == 'spreadsheet'"
  ],
  "requires_python": ">=3.9",
  "summary": "modin: make your pandas code run faster by changing one line of code.",
  "version": "0.26.0",
  "releases": [],
  "developers": [],
  "kwds": "pandas using_modin_cluster modin_project modin_speedup modin_engine",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_modin",
  "homepage": "https://github.com/modin-project/modin",
  "release_count": 88,
  "dependency_ids": [
    "pypi_dask",
    "pypi_distributed",
    "pypi_fsspec",
    "pypi_modin_spreadsheet",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_psutil",
    "pypi_pyarrow",
    "pypi_pydantic",
    "pypi_ray",
    "pypi_unidist"
  ]
}
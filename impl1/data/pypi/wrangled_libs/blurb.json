{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3 :: only"
  ],
  "description": "blurb\n=====\n\n.. image:: https://img.shields.io/pypi/v/blurb.svg\n    :target: https://pypi.org/project/blurb/\n\noverview\n--------\n\n**blurb** is a tool designed to rid cpython core development\nof the scourge of ``misc/news`` conflicts.\n\nthe core concept: split ``misc/news`` into many\nseparate files that, when concatenated back together\nin sorted order, reconstitute the original ``misc/news`` file.\nafter that, ``misc/news`` could be deleted from the cpython\nrepo and thereafter rendered on demand (e.g. when building\na release).  when checking in a change to cpython, the checkin\nprocess will write out a new file that sorts into the correct place,\nusing a filename unlikely to have a merge conflict.\n\n**blurb** is a single command with a number of subcommands.\nit's designed  to be run inside a valid cpython (git) repo,\nand automatically uses the correct file paths.\n\nyou can install **blurb** from pypi using ``pip``.  alternatively,\nsimply add ``blurb`` to a directory on your path.\n**blurb**'s only dependency is python 3.7+.\n\n\nfiles used by blurb\n-------------------\n\n**blurb** uses a new directory tree called ``misc/news.d``.\neverything it does is in there, except for possibly\nmodifying ``misc/news``.\n\nunder ``misc/news.d`` you'll find the following:\n\n* a single file for all news entries per previous revision,\n  named for the exact version number, with the extension ``.rst``.\n  example: ``misc/news.d/3.6.0b2.rst``.\n\n* the ``next`` directory, which contains subdirectories representing\n  the various ``misc/news`` categories.  inside these subdirectories\n  are more ``.rst`` files with long, uninteresting, computer-generated\n  names.  example:\n  ``misc/news.d/next/library/2017-05-04-12-24-06.gh-issue-25458.yl4gi2.rst``\n\n\nblurb subcommands\n-----------------\n\nlike many modern utilities, **blurb** has only one executable\n(called ``blurb``), but provides a diverse set of functionality\nthrough subcommands.  the subcommand is the first argument specified\non the command-line.\n\nif you're a cpython core developer, you probably don't need to use\nanything except ``blurb add``--and you don't even need to specify\nthe ``add`` part.\n(if no subcommand is specified, **blurb** assumes you meant ``blurb add``.)\nthe other commands are only expected to be useful for cpython release\nmanagers.\n\n\n\nblurb help\n~~~~~~~~~~\n\n**blurb** is self-documenting through the ``blurb help`` subcommand.\nrun without any further arguments, it prints a list of all subcommands,\nwith a one-line summary of the functionality of each.  run with a\nthird argument, it prints help on that subcommand (e.g. ``blurb help release``).\n\n\nblurb add\n~~~~~~~~~\n\n``blurb add`` adds a new misc/news entry for you.\nit opens a text editor on a template; you edit the\nfile, save, and exit.  **blurb** then stores the file\nin the correct place, and stages it in ``git`` for you.\n\nthe template for the ``blurb add`` message looks like this::\n\n    #\n    # please enter the relevant github issue number here:\n    #\n    .. gh-issue:\n\n    #\n    # uncomment one of these \"section:\" lines to specify which section\n    # this entry should go in in misc/news.\n    #\n    #.. section: security\n    #.. section: core and builtins\n    #.. section: library\n    #.. section: documentation\n    #.. section: tests\n    #.. section: build\n    #.. section: windows\n    #.. section: macos\n    #.. section: idle\n    #.. section: tools/demos\n    #.. section: c api\n\n    # write your misc/news entry below.  it should be a simple rest paragraph.\n    # don't start with \"- issue #<n>: \" or \"- gh-issue<n>: \" or that sort of stuff.\n    ###########################################################################\n\nhere's how you interact with the file:\n\n* add the github issue number for this checkin to the\n  end of the ``.. gh-issue:`` line.\n\n* uncomment the line with the relevant ``misc/news`` section for this entry.\n  for example, if this should go in the ``library`` section, uncomment\n  the line reading ``#.. section: library``.  to uncomment, just delete\n  the ``#`` at the front of the line.\n\n* finally, go to the end of the file, and enter your news entry.\n  this should be a single paragraph of english text using\n  simple rest markup.\n\nwhen ``blurb add`` gets a valid entry, it writes it to a file\nwith the following format::\n\n    misc/news.d/next/<section>/<datetime>.gh-issue-<issue_number>.<nonce>.rst\n\nfor example, a file added by ``blurb add`` might look like this::\n\n    misc/news.d/next/library/2017-05-04-12-24-06.gh-issue-25458.yl4gi2.rst\n\n``<section>`` is the section provided in the checkin message.\n\n``<datetime>`` is the current utc time, formatted as\n``yyyy-mm-dd-hh-mm-ss``.\n\n``<nonce>`` is a hopefully-unique string of characters meant to\nprevent filename collisions.  **blurb** creates this by computing\nthe md5 hash of the text, converting it to base64 (using the\n\"urlsafe\" alphabet), and taking the first 6 characters of that.\n\n\nthis filename ensures several things:\n\n* all entries in ``misc/news`` will be sorted by time.\n\n* it is unthinkably unlikely that there'll be a conflict\n  between the filenames generated for two developers checking in,\n  even if they check in at the exact same second.\n\n\nfinally, ``blurb add`` stages the file in git for you.\n\n\nblurb merge\n~~~~~~~~~~~\n\n``blurb merge`` recombines all the files in the\n``misc/news.d`` tree back into a single ``news`` file.\n\n``blurb merge`` accepts only a single command-line argument:\nthe file to write to.  by default it writes to\n``misc/news`` (relative to the root of your cpython checkout).\n\nsplitting and recombining the existing ``misc/news`` file\ndoesn't recreate the previous ``misc/news`` exactly.  this\nis because ``misc/news`` never used a consistent ordering\nfor the \"sections\" inside each release, whereas ``blurb merge``\nhas a hard-coded preferred ordering for the sections.  also,\n**blurb** aggressively reflows paragraphs to < 78 columns,\nwheras the original hand-edited file occasionally had lines\n> 80 columns.  finally, **blurb** strictly uses ``gh-issue-<n>:`` to\nspecify issue numbers at the beginnings of entries, wheras\nthe legacy approach to ``misc/news`` required using ``issue #<n>:``.\n\n\nblurb release\n~~~~~~~~~~~~~\n\n``blurb release`` is used by the release manager as part of\nthe cpython release process.  it takes exactly one argument,\nthe name of the version being released.\n\nhere's what it does under the hood:\n\n* combines all recently-added news entries from\n  the ``misc/news.d/next`` directory into ``misc/news.d/<version>.rst``.\n* runs ``blurb merge`` to produce an updated ``misc/news`` file.\n\none hidden feature: if the version specified is ``.``, ``blurb release``\nuses the name of the directory cpython is checked out to.\n(when making a release i generally name the directory after the\nversion i'm releasing, and using this shortcut saves me some typing.)\n\n\nblurb split\n~~~~~~~~~~~\n\n``blurb split`` only needs to be run once per-branch, ever.\nit reads in ``misc/news``\nand splits it into individual ``.rst`` files.\nthe text files are stored as follows::\n\n    misc/news.d/<version>.rst\n\n``<version>`` is the version number of python where the\nchange was committed.  pre-release versions are denoted\nwith an abbreviation: ``a`` for alphas, ``b`` for betas,\nand ``rc`` for release candidates.\n\nthe individual ``<version>.rst`` files actually (usually)\ncontain multiple entries.  each entry is delimited by a\nsingle line containing ``..`` by itself.\n\nthe assumption is, at the point we convert over to *blurb*,\nwe'll run ``blurb split`` on each active branch,\nremove ``misc/news`` from the repo entirely,\nnever run ``blurb split`` ever again,\nand ride off into the sunset, confident that the world is now\na better place.\n\n\n\nthe \"next\" directory\n--------------------\n\nyou may have noticed that ``blurb add`` adds news entries to\na directory called ``next``, and ``blurb release`` combines those\nnews entries into a single file named with the version.  why\nis that?\n\nfirst, it makes naming the next version a late-binding decision.\nif we are currently working on 3.6.5rc1, but there's a zero-day\nexploit and we need to release an emergency 3.6.5 final, we don't\nhave to fix up a bunch of metadata.\n\nsecond, it means that if you cherry-pick a commit forward or\nbackwards, you automatically pick up the news entry too.  you\ndon't need to touch anything up--the system will already do\nthe right thing.  if news entries were already written to the\nfinal version directory, you'd have to move those around as\npart of the cherry-picking process.\n\nchangelog\n---------\n\n1.1.0\n~~~~~\n\n- support github issues in addition to b.p.o (bugs.python.org).\n  if \"gh-issue\" is in the metadata, then the filename will contain \"gh-issue-<number>\" instead of \"bpo-\".\n\n1.0.7\n~~~~~\n\n- when word wrapping, don't break on long words or hyphens.\n- use the ``-f`` flag when adding **blurb** files to a ``git``\n  checkin.  this forces them to be added, even when the files\n  might normally be ignored based on a ``.gitignore`` directive.\n- explicitly support the ``-help`` command-line option.\n- fix travis ci integration.\n\ncopyright\n---------\n\n**blurb** is copyright 2015-2018 by larry hastings.\nlicensed to the psf under a contributor agreement.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "blurb",
  "package_url": "https://pypi.org/project/blurb/",
  "project_url": "https://pypi.org/project/blurb/",
  "project_urls": {
    "Homepage": "https://github.com/python/core-workflow/tree/master/blurb"
  },
  "release_url": "https://pypi.org/project/blurb/1.1.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "command-line tool to manage cpython misc/news.d entries.",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "core-workflow@mail.python.org",
    "larry@hastings.org",
    "larry_hastings",
    "python_core_developers"
  ],
  "kwds": "cpython blurb python filenames files",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_blurb",
  "homepage": "https://github.com/python/core-workflow/tree/master/blurb",
  "release_count": 11,
  "dependency_ids": []
}
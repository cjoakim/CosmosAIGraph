{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "## custom resource helper\n\nsimplify best practice custom resource creation, sending responses to cloudformation and providing exception, timeout \ntrapping, and detailed configurable logging.\n\n[![pypi version](https://img.shields.io/pypi/v/crhelper.svg)](https://pypi.org/project/crhelper/)\n![python versions](https://img.shields.io/pypi/pyversions/crhelper.svg)\n[![build status](https://travis-ci.com/aws-cloudformation/custom-resource-helper.svg?branch=main)](https://travis-ci.com/aws-cloudformation/custom-resource-helper)\n[![test coverage](https://codecov.io/gh/aws-cloudformation/custom-resource-helper/branch/main/graph/badge.svg)](https://codecov.io/gh/aws-cloudformation/custom-resource-helper)\n\n## features\n\n* dead simple to use, reduces the complexity of writing a cloudformation custom resource\n* guarantees that cloudformation will get a response even if an exception is raised\n* returns meaningful errors to cloudformation stack events in the case of a failure\n* polling enables run times longer than the lambda 15 minute limit\n* json logging that includes request id's, stack id's and request type to assist in tracing logs relevant to a \nparticular cloudformation event\n* catches function timeouts and sends cloudformation a failure response\n* static typing (mypy) compatible\n \n## installation\n\ninstall into the root folder of your lambda function\n\n```shell\ncd my-lambda-function/\npip install crhelper -t .\n```\n\n## example usage\n\n[this blog](https://aws.amazon.com/blogs/infrastructure-and-automation/aws-cloudformation-custom-resource-creation-with-python-aws-lambda-and-crhelper/) covers usage in more detail.\n\n```python\nfrom __future__ import print_function\nfrom crhelper import cfnresource\nimport logging\n\nlogger = logging.getlogger(__name__)\n# initialise the helper, all inputs are optional, this example shows the defaults\nhelper = cfnresource(json_logging=false, log_level='debug', boto_level='critical', sleep_on_delete=120, ssl_verify=none)\n\ntry:\n    ## init code goes here\n    pass\nexcept exception as e:\n    helper.init_failure(e)\n\n\n@helper.create\ndef create(event, context):\n    logger.info(\"got create\")\n    # optionally return an id that will be used for the resource physicalresourceid, \n    # if none is returned an id will be generated. if a poll_create function is defined \n    # return value is placed into the poll event as event['crhelperdata']['physicalresourceid']\n    #\n    # to add response data update the helper.data dict\n    # if poll is enabled data is placed into poll event as event['crhelperdata']\n    helper.data.update({\"test\": \"testdata\"})\n\n    # to return an error to cloudformation you raise an exception:\n    if not helper.data.get(\"test\"):\n        raise valueerror(\"this error will show in the cloudformation events log and console.\")\n    \n    return \"myresourceid\"\n\n\n@helper.update\ndef update(event, context):\n    logger.info(\"got update\")\n    # if the update resulted in a new resource being created, return an id for the new resource. \n    # cloudformation will send a delete event with the old id when stack update completes\n\n\n@helper.delete\ndef delete(event, context):\n    logger.info(\"got delete\")\n    # delete never returns anything. should not fail if the underlying resources are already deleted.\n    # desired state.\n\n\n@helper.poll_create\ndef poll_create(event, context):\n    logger.info(\"got create poll\")\n    # return a resource id or true to indicate that creation is complete. if true is returned an id \n    # will be generated\n    return true\n\n\ndef handler(event, context):\n    helper(event, context)\n```\n\n### polling\n\nif you need longer than the max runtime of 15 minutes, you can enable polling by adding additional decorators for \n`poll_create`, `poll_update` or `poll_delete`. when a poll function is defined for `create`/`update`/`delete` the \nfunction will not send a response to cloudformation and instead a cloudwatch events schedule will be created to \nre-invoke the lambda function every 2 minutes. when the function is invoked the matching `@helper.poll_` function will \nbe called, logic to check for completion should go here, if the function returns `none` then the schedule will run again \nin 2 minutes. once complete either return a physicalresourceid or `true` to have one generated. the schedule will be \ndeleted and a response sent back to cloudformation. if you use polling the following additional iam policy must be \nattached to the function's iam role:\n\n```json\n{\n  \"version\": \"2012-10-17\",\n  \"statement\": [\n    {\n      \"effect\": \"allow\",\n      \"action\": [\n        \"lambda:addpermission\",\n        \"lambda:removepermission\",\n        \"events:putrule\",\n        \"events:deleterule\",\n        \"events:puttargets\",\n        \"events:removetargets\"\n      ],\n      \"resource\": \"*\"\n    }\n  ]\n}\n```\n### certificate verification\nto turn off certification verification, or to use a custom ca bundle path for the underlying boto3 clients used by this library, override the `ssl_verify` argument with the appropriate values.  these can be either:\n* `false` - do not validate ssl certificates. ssl will still be used, but ssl certificates will not be verified.\n* `path/to/cert/bundle.pem` - a filename of the ca cert bundle to uses. you can specify this argument if you want to use a different ca cert bundle than the one used by botocore.\n\n## credits\n\ndecorator implementation inspired by https://github.com/ryansb/cfn-wrapper-python\n\nlog implementation inspired by https://gitlab.com/hadrien/aws_lambda_logging\n\n## license\n\nthis library is licensed under the apache 2.0 license.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache2",
  "name": "crhelper",
  "package_url": "https://pypi.org/project/crhelper/",
  "project_url": "https://pypi.org/project/crhelper/",
  "project_urls": {
    "Homepage": "https://github.com/aws-cloudformation/custom-resource-helper"
  },
  "release_url": "https://pypi.org/project/crhelper/2.0.11/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "crhelper simplifies authoring cloudformation custom resources",
  "version": "2.0.11",
  "releases": [],
  "developers": [
    "jay_mcconnell",
    "jmmccon@amazon.com"
  ],
  "kwds": "aws_lambda_logging cloudformation cloudwatch resource resources",
  "license_kwds": "apache2",
  "libtype": "pypi",
  "id": "pypi_crhelper",
  "homepage": "https://github.com/aws-cloudformation/custom-resource-helper",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development :: testing"
  ],
  "description": "nbsmoke\n=======\n\n|    |    |\n| --- | --- |\n| build status | [![linux/macos/windows build status](https://github.com/pyviz-dev/nbsmoke/workflows/tests/badge.svg)](https://github.com/pyviz-dev/nbsmoke/actions/workflows/tests.yaml)\n| coverage | [![codecov](https://codecov.io/gh/pyviz-dev/nbsmoke/branch/master/graph/badge.svg)](https://codecov.io/gh/pyviz-dev/nbsmoke) ||\n| latest dev release | [![github tag](https://img.shields.io/github/v/tag/pyviz-dev/nbsmoke.svg?label=tag&colorb=11ccbb)](https://github.com/pyviz-dev/nbsmoke/tags)  |\n| latest release | [![github release](https://img.shields.io/github/release/pyviz-dev/nbsmoke.svg?label=tag&colorb=11ccbb)](https://github.com/pyviz-dev/nbsmoke/releases) [![pypi version](https://img.shields.io/pypi/v/nbsmoke.svg?colorb=cc77dd)](https://pypi.python.org/pypi/nbsmoke) [![nbsmoke version](https://img.shields.io/conda/v/pyviz/nbsmoke.svg?colorb=4488ff&style=flat)](https://anaconda.org/pyviz/nbsmoke) [![conda-forge version](https://img.shields.io/conda/v/conda-forge/nbsmoke.svg?label=conda%7cconda-forge&colorb=4488ff)](https://anaconda.org/conda-forge/nbsmoke) [![defaults version](https://img.shields.io/conda/v/anaconda/nbsmoke.svg?label=conda%7cdefaults&style=flat&colorb=4488ff)](https://anaconda.org/anaconda/nbsmoke) |\n| python | [![python support](https://img.shields.io/pypi/pyversions/nbsmoke.svg)](https://pypi.org/project/nbsmoke/)\n\n* * * * *\n\nbasic notebook smoke tests: do they run ok? do they contain lint?\n\n* * * * *\n\nthis [pytest](https://github.com/pytest-dev/pytest) plugin was generated\nwith [cookiecutter](https://github.com/audreyr/cookiecutter) along with\n[@hackebrot](https://github.com/hackebrot)'s\n[cookiecutter-pytest-plugin](https://github.com/pytest-dev/cookiecutter-pytest-plugin)\ntemplate.\n\ninstallation\n------------\n\nyou can install nbsmoke via [pip](https://pypi.python.org/pypi/pip/)\nfrom [pypi](https://pypi.python.org/pypi):\n\n    $ pip install nbsmoke\n\nor get the latest pre-release:\n\n    $ pip install --pre nbsmoke\n\nnbsmoke is also available via [conda](https://conda.io/) from\n[anaconda.org](https://anaconda.org/):\n\n    $ conda install -c conda-forge nbsmoke\n\nusage\n-----\n\ncheck all notebooks run without errors:\n\n    $ pytest --nbsmoke-run\n\ncheck all notebooks run without errors, and store html to look at\nafterwards:\n\n    $ pytest --nbsmoke-run --store-html=/scratch\n\nlint check notebooks:\n\n    $ pytest --nbsmoke-lint\n\nlint failures as warnings only:\n\n    $ pytest --nbsmoke-lint --nbsmoke-lint-onlywarn\n\ninstead of all files in a directory, you can specify a list e.g.:\n\n    $ pytest --nbsmoke-run notebooks/untitled*.ipynb\n\nif you want to restrict pytest to running only your notebook tests, use\n-k, e.g.:\n\n    $ pytest --nbsmoke-run -k \".ipynb\"\n\nadditional options are available by standard pytest 'ini' configuration\nin setup.cfg, pytest.ini, or tox.ini:\n\n    [pytest]\n    # when running, seconds allowed per cell (see nbconvert timeout)\n    nbsmoke_cell_timeout = 600\n\n    # notebooks to skip running; one case insensitive re to match per line\n    nbsmoke_skip_run = ^.*skipme\\.ipynb$\n                       ^.*skipmetoo.*$\n\n    # case insensitive re to match for file to be considered notebook;\n    # defaults to ``^.*\\.ipynb``\n    it_is_nb_file = ^.*\\.something$\n\n    # flakes you don't want to hear about (regex)\n    nbsmoke_flakes_to_ignore = .*hvplot.* imported but unused.*\n\n    # line magics to treat as being flakes (i.e. magics you don't want in your notebooks)\n    nbsmoke_flakes_line_magics_blacklist = pylab\n\n    # cell magics to treat as being flakes (i.e. magics you don't want in your notebooks)\n    nbsmoke_flakes_cell_magics_blacklist = bash\n                                           ruby\n\n    # add your own magic handlers (python file containing line_magic_handlers and cell_magic_handlers as dictionaries magic_name: callable)\n    nbsmoke_magic_handlers = path/to/file.py\n\nnbsmoke supports `# noqa` comments to mark that something should be\nignored during lint checking.\n\nthe `nbsmoke_skip_run` list in a project's config can be ignored by\npassing `--ignore-nbsmoke-skip-run` (useful if sometimes you want to run\nall notebooks for a project where many are typically skipped).\n\nwhat's the point?\n-----------------\n\nalthough more sophisticated testing of notebooks is possible (e.g. see\nnbval), just checking that notebooks run from start to finish without\nerror in a fresh kernel (or on a neutral ci service) can be useful\nduring development. practical experience of working on several projects\nwith notebooks confirms this, but that's all the evidence i have.\n\nchecking notebooks for lint might seem trivial/pointless, but it\nfrequently uncovers unused names (typically unused imports). it's also\nquite common to find python 2 vs 3 problems, and sometimes undefined\nnames - in a way that's faster than running the notebook (over multiple\nversions of python).\n\nunused imports/names themselves might seem trivial, but they can hinder\nunderstanding of a notebook by readers, or add dependencies that are not\nrequired.\n\nhopefully you don't have mysterious (unused) imports in your notebook,\nbut if you do, you can add `# noqa: explanation` to stop flake errors.\ne.g. if you're importing something for its side effects, it's very\nhelpful to inform the reader of that.\n\npyflakes is used as the underlying linter because \"pyflakes makes a\nsimple promise: it will never complain about style, and it will try\nvery, very hard to never emit false positives.\"\n\ncontributing\n------------\n\nfirst, install using `pip install -e .`. then run the tests using `tox`\nor `pytest -v tests/`.\n\nnew release to pypi:\n`git tag -a vx.y.z -m \"something about release\" && git push --tags`.\nthen a pr will auto-open on conda-forge, which should be merged.\n\nget some help to debug apparently incorrect flakes by adding\n`--nbsmoke-lint-debug`, e.g.\n`pytest -v --nbsmoke-lint --nbsmoke-lint-debug examples`.\n\nlicense\n-------\n\ndistributed under the terms of the\n[bsd-3](http://opensource.org/licenses/bsd-3-clause) license, \"nbsmoke\"\nis free and open source software.\n\nissues\n------\n\nif you encounter any problems, please [file an\nissue](https://github.com/pyviz/nbsmoke/issues) (ideally including a\ncopy of any problematic notebook).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3",
  "name": "nbsmoke",
  "package_url": "https://pypi.org/project/nbsmoke/",
  "project_url": "https://pypi.org/project/nbsmoke/",
  "project_urls": {
    "Homepage": "https://github.com/pyviz-dev/nbsmoke"
  },
  "release_url": "https://pypi.org/project/nbsmoke/0.6.0/",
  "requires_dist": [
    "param (>=1.7.0)",
    "pytest (>=3.1.1)",
    "pyflakes",
    "jupyter-client",
    "nbformat",
    "nbconvert",
    "ipykernel",
    "beautifulsoup4 ; extra == 'all'",
    "coverage ; extra == 'all'",
    "flake8 ; extra == 'all'",
    "holoviews ; extra == 'all'",
    "keyring ; extra == 'all'",
    "param (>=1.7.0) ; extra == 'all'",
    "pyct (>=0.4.4) ; extra == 'all'",
    "requests ; extra == 'all'",
    "rfc3986 ; extra == 'all'",
    "setuptools (>=30.3.0) ; extra == 'all'",
    "twine ; extra == 'all'",
    "param (>=1.7.0) ; extra == 'build'",
    "pyct (>=0.4.4) ; extra == 'build'",
    "setuptools (>=30.3.0) ; extra == 'build'",
    "holoviews ; extra == 'holoviews-magics'",
    "flake8 ; extra == 'lint'",
    "coverage ; extra == 'tests'",
    "twine ; extra == 'tests'",
    "rfc3986 ; extra == 'tests'",
    "keyring ; extra == 'tests'",
    "flake8 ; extra == 'tests'",
    "holoviews ; extra == 'tests'",
    "requests ; extra == 'tests'",
    "beautifulsoup4 ; extra == 'tests'",
    "requests ; extra == 'verify'",
    "beautifulsoup4 ; extra == 'verify'"
  ],
  "requires_python": ">=3.4",
  "summary": "basic notebook checks. do they run? do they contain lint?",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "dev@pyviz.org",
    "pyviz_contributors"
  ],
  "kwds": "nbsmoke_skip_run nbsmoke_flakes_line_magics_blacklist nbsmoke nbsmoke_flakes_cell_magics_blacklist nbsmoke_flakes_to_ignore",
  "license_kwds": "bsd-3",
  "libtype": "pypi",
  "id": "pypi_nbsmoke",
  "homepage": "https://github.com/pyviz-dev/nbsmoke",
  "release_count": 18,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_holoviews",
    "pypi_ipykernel",
    "pypi_jupyter_client",
    "pypi_keyring",
    "pypi_nbconvert",
    "pypi_nbformat",
    "pypi_param",
    "pypi_pyct",
    "pypi_pyflakes",
    "pypi_pytest",
    "pypi_requests",
    "pypi_rfc3986",
    "pypi_setuptools",
    "pypi_twine"
  ]
}
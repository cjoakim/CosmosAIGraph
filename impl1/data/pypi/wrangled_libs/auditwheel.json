{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "auditwheel\n==========\n\n.. image:: https://travis-ci.org/pypa/auditwheel.svg?branch=main\n    :target: https://travis-ci.org/pypa/auditwheel\n.. image:: https://badge.fury.io/py/auditwheel.svg\n    :target: https://pypi.org/project/auditwheel\n.. image:: https://pepy.tech/badge/auditwheel/month\n    :target: https://pepy.tech/project/auditwheel/month\n\nauditing and relabeling of `pep 600 manylinux_x_y\n<https://www.python.org/dev/peps/pep-0600/>`_, `pep 513 manylinux1\n<https://www.python.org/dev/peps/pep-0513/>`_, `pep 571 manylinux2010\n<https://www.python.org/dev/peps/pep-0571/>`_ and `pep 599 manylinux2014\n<https://www.python.org/dev/peps/pep-0599/>`_ linux wheels.\n\noverview\n--------\n\n``auditwheel`` is a command line tool to facilitate the creation of python\n`wheel packages <http://pythonwheels.com/>`_ for linux (containing pre-compiled\nbinary extensions) that are compatible with a wide variety of linux distributions,\nconsistent with the `pep 600 manylinux_x_y\n<https://www.python.org/dev/peps/pep-0600/>`_, `pep 513 manylinux1\n<https://www.python.org/dev/peps/pep-0513/>`_, `pep 571 manylinux2010\n<https://www.python.org/dev/peps/pep-0571/>`_ and `pep 599 manylinux2014\n<https://www.python.org/dev/peps/pep-0599/>`_ platform tags.\n\n``auditwheel show``: shows external shared libraries that the wheel depends on\n(beyond the libraries included in the ``manylinux`` policies), and\nchecks the extension modules for the use of versioned symbols that exceed\nthe ``manylinux`` abi.\n\n``auditwheel repair``: copies these external shared libraries into the wheel itself,\nand automatically modifies the appropriate ``rpath`` entries such that these libraries\nwill be picked up at runtime. this accomplishes a similar result as if the libraries had\nbeen statically linked without requiring changes to the build system. packagers are\nadvised that bundling, like static linking, may implicate copyright concerns.\n\nrequirements\n------------\n- os: linux\n- python: 3.7+\n- `patchelf <https://github.com/nixos/patchelf>`_: 0.14+\n\nonly systems that use `elf\n<https://en.wikipedia.org/wiki/executable_and_linkable_format>`_-based linkage\nare supported (this should be essentially every linux).\n\nin general, building ``manylinux1`` wheels requires running on a centos5\nmachine, building ``manylinux2010`` wheels requires running on a centos6\nmachine, and building ``manylinux2014`` wheels requires running on a centos7\nmachine, so we recommend using the pre-built manylinux `docker images\n<https://quay.io/repository/pypa/manylinux1_x86_64>`_, e.g. ::\n\n  $ docker run -i -t -v `pwd`:/io quay.io/pypa/manylinux1_x86_64 /bin/bash\n\ninstallation\n------------\n\n``auditwheel`` can be installed using pip:\n\n.. code:: bash\n\n  $ pip3 install auditwheel\n\nexamples\n--------\n\ninspecting a wheel: ::\n\n    $ auditwheel show cffi-1.5.0-cp35-cp35m-linux_x86_64.whl\n\n    cffi-1.5.0-cp35-cp35m-linux_x86_64.whl is consistent with the\n    following platform tag: \"linux_x86_64\".\n\n    the wheel references the following external versioned symbols in\n    system-provided shared libraries: glibc_2.3.\n\n    the following external shared libraries are required by the wheel:\n    {\n        \"libc.so.6\": \"/lib64/libc-2.5.so\",\n        \"libffi.so.5\": \"/usr/lib64/libffi.so.5.0.6\",\n        \"libpthread.so.0\": \"/lib64/libpthread-2.5.so\"\n    }\n\n    in order to achieve the tag platform tag \"manylinux1_x86_64\" the\n    following shared library dependencies will need to be eliminated:\n\n    libffi.so.5\n\nrepairing a wheel. ::\n\n    $ auditwheel repair cffi-1.5.2-cp35-cp35m-linux_x86_64.whl\n    repairing cffi-1.5.2-cp35-cp35m-linux_x86_64.whl\n    grafting: /usr/lib64/libffi.so.5.0.6\n    setting rpath: _cffi_backend.cpython-35m-x86_64-linux-gnu.so to \"$origin/.libs_cffi_backend\"\n    previous filename tags: linux_x86_64\n    new filename tags: manylinux1_x86_64\n    previous wheel info tags: cp35-cp35m-linux_x86_64\n    new wheel info tags: cp35-cp35m-manylinux1_x86_64\n\n    fixed-up wheel written to /wheelhouse/cffi-1.5.2-cp35-cp35m-manylinux1_x86_64.whl\n\n\nlimitations\n-----------\n\n1. ``auditwheel`` uses the `dt_needed <https://en.wikipedia.org/wiki/direct_binding>`_\n   information (like ``ldd``) from the python extension modules to determine\n   which system libraries they depend on. code that dynamically\n   loads libraries at runtime using ``ctypes`` / ``cffi`` (from python) or\n   ``dlopen`` (from c/c++) doesn't contain this information in a way that can\n   be statically determined, so dependencies that are loaded via those\n   mechanisms will be missed.\n2. there's nothing we can do about \"fixing\" binaries if they were compiled and\n   linked against a too-recent version of ``libc`` or ``libstdc++``. these\n   libraries (and some others) use symbol versioning for backward\n   compatibility. in general, this means that code that was compiled against an\n   old version of ``glibc`` will run fine on systems with a newer version of\n   ``glibc``, but code what was compiled on a new system won't / might not run\n   on older system.\n\n   so, to compile widely-compatible binaries, you're best off doing the build\n   on an old linux distribution, such as a manylinux docker image.\n\ntesting\n-------\n\nthe tests can be run with ``nox``, which will automatically install\ntest dependencies.\n\nsome of the integration tests also require a running and accessible docker\ndaemon. these tests will pull a number of docker images if they are not already\navailable on your system, but it won't update existing images.\nto update these images manually, run::\n\n    docker pull python:3.7-slim\n    docker pull quay.io/pypa/manylinux1_x86_64\n    docker pull quay.io/pypa/manylinux2010_x86_64\n    docker pull quay.io/pypa/manylinux2014_x86_64\n    docker pull quay.io/pypa/manylinux_2_28_x86_64\n\nyou may also remove these images using ``docker rmi``.\n\ncode of conduct\n---------------\n\neveryone interacting in the ``auditwheel`` project's codebases, issue trackers,\nchat rooms, and mailing lists is expected to follow the\n`psf code of conduct`_.\n\n.. _psf code of conduct: https://github.com/pypa/.github/blob/main/code_of_conduct.md\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "auditwheel",
  "package_url": "https://pypi.org/project/auditwheel/",
  "project_url": "https://pypi.org/project/auditwheel/",
  "project_urls": {
    "Homepage": "https://github.com/pypa/auditwheel"
  },
  "release_url": "https://pypi.org/project/auditwheel/5.4.0/",
  "requires_dist": [
    "pyelftools (>=0.24)",
    "importlib-metadata ; python_version < \"3.8\"",
    "pytest-cov ; extra == 'coverage'",
    "pytest (>=3.4) ; extra == 'coverage'",
    "jsonschema ; extra == 'coverage'",
    "pypatchelf ; extra == 'coverage'",
    "pretend ; extra == 'coverage'",
    "docker ; extra == 'coverage'",
    "pytest (>=3.4) ; extra == 'develop'",
    "jsonschema ; extra == 'develop'",
    "pypatchelf ; extra == 'develop'",
    "pretend ; extra == 'develop'",
    "docker ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'",
    "pytest (>=3.4) ; extra == 'test'",
    "jsonschema ; extra == 'test'",
    "pypatchelf ; extra == 'test'",
    "pretend ; extra == 'test'",
    "docker ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "cross-distribution linux wheels",
  "version": "5.4.0",
  "releases": [],
  "developers": [
    "rmcgibbo@gmail.com",
    "robert_t"
  ],
  "kwds": "auditwheel pythonwheels auditing manylinux_x_y py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_auditwheel",
  "homepage": "https://github.com/pypa/auditwheel",
  "release_count": 33,
  "dependency_ids": [
    "pypi_docker",
    "pypi_importlib_metadata",
    "pypi_jsonschema",
    "pypi_pretend",
    "pypi_pyelftools",
    "pypi_pypatchelf",
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
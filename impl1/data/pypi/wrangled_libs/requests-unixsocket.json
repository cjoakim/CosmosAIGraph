{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "requests-unixsocket\n===================\n\n.. image:: https://badge.fury.io/py/requests-unixsocket.svg\n    :target: https://badge.fury.io/py/requests-unixsocket\n    :alt: latest version on pypi\n    \n.. image:: https://github.com/msabramo/requests-unixsocket/actions/workflows/tests.yml/badge.svg\n    :target: https://github.com/msabramo/requests-unixsocket/actions/workflows/tests.yml\n\nuse `requests <http://docs.python-requests.org/>`_ to talk http via a unix domain socket\n\nusage\n-----\n\nexplicit\n++++++++\n\nyou can use it by instantiating a special ``session`` object:\n\n.. code-block:: python\n\n    import json\n\n    import requests_unixsocket\n\n    session = requests_unixsocket.session()\n\n    r = session.get('http+unix://%2fvar%2frun%2fdocker.sock/info')\n    registry_config = r.json()['registryconfig']\n    print(json.dumps(registry_config, indent=4))\n\n\nimplicit (monkeypatching)\n+++++++++++++++++++++++++\n\nmonkeypatching allows you to use the functionality in this module, while making\nminimal changes to your code. note that in the above example we had to\ninstantiate a special ``requests_unixsocket.session`` object and call the\n``get`` method on that object. calling ``requests.get(url)`` (the easiest way\nto use requests and probably very common), would not work. but we can make it\nwork by doing monkeypatching.\n\nyou can monkeypatch globally:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    requests_unixsocket.monkeypatch()\n\n    r = requests.get('http+unix://%2fvar%2frun%2fdocker.sock/info')\n    assert r.status_code == 200\n\nor you can do it temporarily using a context manager:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    with requests_unixsocket.monkeypatch():\n        r = requests.get('http+unix://%2fvar%2frun%2fdocker.sock/info')\n        assert r.status_code == 200\n\n\nabstract namespace sockets\n++++++++++++++++++++++++++\n\nto connect to an `abstract namespace\nsocket <https://utcc.utoronto.ca/~cks/space/blog/python/abstractunixsocketsandpeercred>`_\n(linux only), prefix the name with a null byte (i.e.: `\\0`) - e.g.:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    session = requests_unixsocket.session()\n    res = session.get('http+unix://\\0test_socket/get')\n    print(res.text)\n\nfor an example program that illustrates this, see\n``examples/abstract_namespace.py`` in the git repo. since abstract namespace\nsockets are specific to linux, the program will only work on linux.\n\n\nsee also\n--------\n\n- https://github.com/httpie/httpie-unixsocket - a plugin for `httpie <https://httpie.org/>`_ that allows you to interact with unix domain sockets\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2",
  "name": "requests-unixsocket",
  "package_url": "https://pypi.org/project/requests-unixsocket/",
  "project_url": "https://pypi.org/project/requests-unixsocket/",
  "project_urls": {
    "Homepage": "https://github.com/msabramo/requests-unixsocket"
  },
  "release_url": "https://pypi.org/project/requests-unixsocket/0.3.0/",
  "requires_dist": [
    "requests (>=1.1)"
  ],
  "requires_python": "",
  "summary": "use requests to talk http via a unix domain socket",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "marc@marc-abramowitz.com",
    "marc_abramowitz"
  ],
  "kwds": "requests_unixsocket unixsocket 0test_socket py requests",
  "license_kwds": "apache-2",
  "libtype": "pypi",
  "id": "pypi_requests_unixsocket",
  "homepage": "https://github.com/msabramo/requests-unixsocket",
  "release_count": 9,
  "dependency_ids": [
    "pypi_requests"
  ]
}
{
  "classifiers": [],
  "description": "# solc-select\na tool to quickly switch between solidity compiler versions.\n\nthe tool is split into two cli utilities:\n- `solc-select`: manages installing and setting different `solc` compiler versions\n- `solc`: wrapper around `solc` which picks the right version according to what was set via `solc-select`\n\nthe `solc` binaries are downloaded from https://binaries.soliditylang.org/ which contains\nofficial artifacts for many historial and modern `solc` versions for linux and macos.\n\nthe versioned binaries are stored in `~/.solc-select/artifacts/`.\n\n## quickstart\n\n```\npip3 install solc-select\n```\n\nto automatically install and use a version, run `solc-select use <version> --always-install`. \n\n### running on arm (mac m1/m2)\n\n`solc` requires rosetta to be installed. see the faq on [how to install rosetta](#oserror-errno-86-bad-cpu-type-in-executable).\n\n## usage\n\nthe global version of `solc` can be set with the `solc-select use <version>` command:\n```\n$ solc --version\nsolc, the solidity compiler commandline interface\nversion: 0.5.2+commit.1df8f40c.linux.g++\n$ solc-select use 0.4.24\nswitched global version to 0.4.24\n$ solc --version\nsolc, the solidity compiler commandline interface\nversion: 0.4.24+commit.e67f0147.linux.g++\n```\n\nuse `solc_version` environment variable to override the global version:\n```\n$ solc --version\nsolc, the solidity compiler commandline interface\nversion: 0.4.24+commit.e67f0147.linux.g++\n$ solc_version=0.5.2 solc --version\nsolc, the solidity compiler commandline interface\nversion: 0.5.2+commit.1df8f40c.linux.g++\n```\n\nyou can list all available versions with `solc-select install`:\n```\n$ solc-select install\navailable versions to install:\n0.3.6\n0.4.0\n...\n0.8.0\n0.8.1\n```\n\nand install the one you need with `solc-select install <version>`:\n```\n$ solc-select install 0.8.1\ninstalling '0.8.1'...\nversion '0.8.1' installed.\n```\n\nyou can also install the latest version with `solc-select install latest`\nand use the latest version with `solc-select use latest`\n\ndisplay the currently installed versions:\n```\n$ solc-select versions\n0.8.0\n0.4.2 (current, set by /users/artur/.solc-select/global-version)\n```\n\n## getting help\n\nfeel free to stop by our [slack channel](https://empirehacking.slack.com/) for help on using or extending `solc-select`.\n\n## faq\n\n### oserror: [errno 86] bad cpu type in executable\n\non newer `solc-select` versions, this might show as `solc binaries for macos are\nintel-only. please install rosetta on your mac to continue.`\n\n`solc` requires rosetta to be installed. to see whether you have rosetta\ninstalled on your mac, run\n\n```bash\npgrep -q oahd && echo rosetta is installed || echo rosetta is not installed\n```\n\nif it is not installed, it can be installed with the command\n\n```bash\n/usr/sbin/softwareupdate --install-rosetta --agree-to-license\n```\n\n### solc-version not changing after running `solc-select use [version]` or setting `solc_version`\n\nuninstall other installations of solc on your machine. `solc-select` re-installs solc binaries for your operating system and acts as a wrapper for solc. with duplicate solc installations, this may result in your `solc` version not being up to date.\n\n### \"unsupported platform\" on windows \n\nthe solc-select version that supports windows is currently in beta. uninstall `solc-select` through `pip3 uninstall solc-select` and run \n\n```bash \npip install solc-select==1.0.0b1\n```\n\nalternatively, for the most up-to-date version, clone this repository and run \n```bash \npip install . --user\n```\n\n## known issues\n\n### `ssl: certificate_verify_failed` on running `solc-select` commands [investigation ongoing]\n\n**os x**\n```bash\npip3 install certifi\n/applications/python\\ 3.8/install\\ certificates.command\n```\n\npython distributions on os x has no certificates and cannot validate ssl connections, a breaking change introduced in python 3.6. see [stackoverflow](https://stackoverflow.com/a/42334357) post for additional details.\n\n### `connection refused` [investigation ongoing]\n\n```bash\npip3 uninstall solc-select \npip3 install solc-select==0.2.0\nsolc-select install \n```\n\ntry downgrading to `solc-select version 0.2.0`. \n\nour `0.2.1` version of `solc-select` pulls older linux binaries from [crytic/solc](https://github.com/crytic/solc) which seems to have introduced unexpected behavior in certain instances.\n\n### `solc-select` version changes, but `solc --version does not match`\n\nusers seem to be experiencing situations in which the following command is successful: \n```\nsolc-select use <version> \n```\nhowever, when running the following command, it points to an older version of solidity.\n```\nsolc --version\n```\n\n`solc-select` is intended to work with custom binaries. this means that solidity installed through other means (i.e: `brew install solidity`) will _not_ work!. \n\nuninstall other versions solidity from your computer.\n\n## license\n\n`solc-select` is licensed and distributed under the [agplv3](license) license. [contact us](mailto:opensource@trailofbits.com) if you\u2019re looking for an exception to the terms.\n",
  "docs_url": null,
  "keywords": "",
  "license": "agpl-3.0",
  "name": "solc-select",
  "package_url": "https://pypi.org/project/solc-select/",
  "project_url": "https://pypi.org/project/solc-select/",
  "project_urls": {
    "Homepage": "https://github.com/crytic/solc-select"
  },
  "release_url": "https://pypi.org/project/solc-select/1.0.4/",
  "requires_dist": [
    "pycryptodome (>=3.4.6)",
    "packaging"
  ],
  "requires_python": ">=3.6",
  "summary": "manage multiple solidity compiler versions.",
  "version": "1.0.4",
  "releases": [],
  "developers": [
    "trail_of_bits"
  ],
  "kwds": "solc_version solc pip3 binaries compiler",
  "license_kwds": "agpl-3.0",
  "libtype": "pypi",
  "id": "pypi_solc_select",
  "homepage": "https://github.com/crytic/solc-select",
  "release_count": 8,
  "dependency_ids": [
    "pypi_packaging",
    "pypi_pycryptodome"
  ]
}
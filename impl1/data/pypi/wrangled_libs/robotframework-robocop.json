{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: robot framework",
    "framework :: robot framework :: tool",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "[![unit tests](https://github.com/marketsquare/robotframework-robocop/actions/workflows/unit-tests.yml/badge.svg)](https://github.com/marketsquare/robotframework-robocop/actions/workflows/unit-tests.yml \"github workflow unit tests status\")\n![codecov](https://img.shields.io/codecov/c/github/marketsquare/robotframework-robocop/master \"code coverage on master branch\")\n![pypi](https://img.shields.io/pypi/v/robotframework-robocop?label=version \"pypi package version\")\n![python versions](https://img.shields.io/pypi/pyversions/robotframework-robocop \"supported python versions\")\n![license](https://img.shields.io/pypi/l/robotframework-robocop \"pypi - license\")\n[![downloads](https://static.pepy.tech/personalized-badge/robotframework-robocop?period=total&units=international_system&left_color=grey&right_color=orange&left_text=downloads)](https://pepy.tech/project/robotframework-robocop)\n\n---\n\n<img style=\"float:right\" src=\"https://raw.githubusercontent.com/marketsquare/robotframework-robocop/master/docs/images/robocop_logo_small.png\">\n\nrobocop\n===============\n\n- [introduction](#introduction)\n- [documentation](#documentation)\n- [requirements](#requirements)\n- [installation](#installation)\n- [usage](#usage)\n- [example output](#example-output)\n- [values](#values)\n- [fixing issues](#fixing-issues)\n- [faq](#faq)\n\nwatch our talks from\n[robocon 2021](https://www.youtube.com/watch?v=vzoyi2obm8e)\nand\n[robocon 2022](https://www.youtube.com/watch?v=t_r36n_4ubk)\nabout robocop &\n[robotidy](https://github.com/marketsquare/robotframework-tidy)\nand learn more about these cool tools! :robot:\n\n[![robocop & robotidy presentation at robocon 2021](http://img.youtube.com/vi/vzoyi2obm8e/0.jpg)](https://youtu.be/vzoyi2obm8e \"robocop & robotidy presentation at robocon 2021\")\n[![robocop presentation at robocon 2022](http://img.youtube.com/vi/t_r36n_4ubk/0.jpg)](https://youtu.be/t_r36n_4ubk \"robocop presentation at robocon 2022\")\n\n---\n\nintroduction\n------------\n\nrobocop is a tool that performs static code analysis of [robot framework](https://github.com/robotframework/robotframework) code.\n\nit uses official [robot framework parsing api](https://robot-framework.readthedocs.io/en/stable/) to parse files and runs number of checks,\nlooking for potential errors or violations to code quality standards (commonly referred as *linting issues*).\n\n> hosted on [github](https://github.com/marketsquare/robotframework-robocop). :medal_military:\n\ndocumentation\n-------------\n\nfull documentation is available [here](https://robocop.readthedocs.io). :open_book:\n\nmost common questions with answers can be found at the bottom \u2b07 of this readme file.\n\nrequirements\n------------\n\npython 3.7+ :snake: and robot framework 3.2.2+ :robot:.\n\ninstallation\n------------\n\nyou can install the latest version of robocop simply by running:\n\n```\npip install -u robotframework-robocop\n```\n\n\nusage\n-----\n\nrobocop runs by default from the current directory and it discovers supported files recursively.\nyou can simply run:\n\n```\nrobocop\n```\n\nall command line options can be displayed in help message by executing:\n\n```\nrobocop -h\n```\n\nexample output\n--------------\n\nexecuting command:\n\n```\nrobocop --report rules_by_error_type test.robot\n```\n\n\nwill result in following output:\n\n```text\n\\users\\ocp\\test.robot:7:1 [w] 0509 section '*** variables ***' is empty (empty-section)\n\\users\\ocp\\test.robot:22:1 [e] 0801 multiple test cases with name \"simple test\" (first occurrence in line 17) (duplicated-test-case)\n\\users\\ocp\\test.robot:42:1 [e] 0810 both task(s) and test case(s) section headers defined in file (both-tests-and-tasks)\n\\users\\ocp\\test.robot:48:1 [w] 0302 keyword 'my keyword' does not follow case convention (wrong-case-in-keyword-name)\n\\users\\ocp\\test.robot:51:13 [i] 0606 tag 'mytag' is already set by test tags in suite settings (tag-already-set-in-test-tags)\n\nfound 5 issues: 2 errors, 2 warnings, 1 info.\n```\n\nvalues\n-------\noriginal *robocop* - a fictional cybernetic police officer :policeman: - was following 3 prime directives\nwhich also drive the progress of robocop linter:\n\n> first directive: **serve the public trust** :family_man_woman_girl_boy:\n\nwhich lies behind the creation of the project - to **serve** developers and testers as a tool to build applications they can **trust**.\n\n> second directive: **protect the innocent** :baby:\n\n**the innocent** testers and developers have no intention to produce ugly code but sometimes, you know, it just happens,\nso robocop is there to **protect** them.\n\n> third directive: **uphold the law** :classical_building:\n\nfollowing the coding guidelines established in the project are something very important to keep the code clean,\nreadable and understandable by others and robocop can help to **uphold the law**.\n\nfixing issues\n--------------\nmany issues in your code reported by robocop can be fixed using auto-formatting tool, robotidy.\ncheck out the robotidy [documentation](https://robotidy.readthedocs.io/en/stable/).\n\nfaq\n---\n<details>\n  <summary>can i integrate robocop with my code editor (ide)?</summary>\n\n  **yes**, robocop integrates nicely with popular ides like pycharm or vscode\n  thanks to [robot framework language server](https://github.com/robocorp/robotframework-lsp).\n  read simple manual (readme) in that project to figure out how to install & use it.\n\n  you can also use robocop in pycharm easily as an external tool.\n  to configure it, go to: `file` \u2192 `settings` \u2192 `tools` \u2192 `external tools`\n  and click `+` icon. then put values based on\n  [official instructions](https://www.jetbrains.com/help/pycharm/configuring-third-party-tools.html)\n  or this screenshot:\n\n  ![robocop](docs/images/robocop_external_tool.jpg)\n\n  if you're using python virtual environment in your project,\n  make sure to provide correct path to robocop.exe located in `venv\\scripts\\robocop.exe`.\n  now, you can run robocop by right-clicking on a file or directory and choosing\n  `external tools` \u2192 `robocop`.\n\n  we suggest also to add a keyboard shortcut (e.g. `ctrl + , (comma)`)\n  to quickly run robocop on selected files. you can map the shortcut in `settings` \u2192 `keymap`.\n</details>\n\n<details>\n  <summary>can i load configuration from file?</summary>\n\n  **yes**, there are multiple ways to configure robocop:\n\n  **argument file**\n\n  you can add command line options to an argument file, preferably one option with value for a line.\n  such file can be used as an input for robocop with `--argumentfile / -a` option, e.g.\n  ```robocop -a robocop.cfg```. you can mix arguments from a file with ones provided in run command.\n\n  example argument file:\n\n  ```commandline\n  --exclude *doc*\n  --exclude 0510\n  --threshold w\n  --configure inconsistent-assignment:assignment_sign_type:equal_sign\n  --configure line-too-long:line_length:140\n  --reports all\n  --output robocop.log\n  ```\n\n  ---\n\n  **`.robocop` file**\n\n  it is a default file that is loaded only when no command line options are provided for robocop.\n  when running plain `robocop` command, it looks for `.robocop` file from place where it was run\n  until it finds `.git` file. options can be provided like in the example above.\n\n  ---\n\n  **`pyproject.toml` file**\n\n  if there is no `.robocop` file and `toml` module is installed,\n  robocop will try to load configuration from `pyproject.toml` file (if it exists).\n  options have the same names as command line arguments\n  and need to be placed under `[tool.robocop]` section.\n\n  example configuration file:\n\n  ```commandline\n  [tool.robocop]\n  paths = [\n      \"tests\\\\atest\\\\rules\\\\bad-indent\",\n      \"tests\\\\atest\\\\rules\\\\duplicated-library\"\n  ]\n  include = ['w0504', '*doc*']\n  exclude = [\"0203\"]\n  reports = [\n      \"rules_by_id\",\n      \"scan_timer\"\n  ]\n  ignore = [\"ignore_me.robot\"]\n  ext-rules = [\"path_to_external\\\\dir\"]\n  filetypes = [\".txt\", \".tsv\"]\n  threshold = \"e\"\n  format = \"{source}:{line}:{col} [{severity}] {rule_id} {desc} (name)\"\n  output = \"robocop.log\"\n  configure = [\n      \"line-too-long:line_length:150\",\n      \"0201:severity:e\"\n  ]\n  no_recursive = true\n  ```\n</details>\n\n<details>\n  <summary>i use different coding standards. can i configure rules so that they fit my needs?</summary>\n\n  **yes**, some rules are configurable. you can list them by running `robocop --list-configurables`\n  or just `robocop -lc`.\n\n  configuring is done by using `-c / --configure` command line option followed by pattern\n  `<rule>:<param_name>:<value>` where:\n  - `<rule>` can either be rule name or its id\n  - `<param_name>` is a public name of the parameter\n  - `<value>` is a desired value of the parameter\n\n  for example:\n\n  ```commandline\n  --configure line-too-long:line_length:140\n  ```\n\n  is equivalent to\n\n  ```commandline\n  -c 0508:line_length:140\n  ```\n\n  ---\n  each rule's severity can also be overwritten. possible values are\n  `e/error`, `w/warning` or `i/info` and are case-insensitive. example:\n\n  ```commandline\n  -c too-long-test-case:severity:e\n  ```\n\n  ---\n  if there are special cases in your code that violate the rules,\n  you can also exclude them in the source code.\n\n  example:\n\n  ```\n  keyword with lowercased name  # robocop: disable\n  ```\n\n  more about it in\n  [our documentation](https://robocop.readthedocs.io/en/stable/including_rules.html#ignore-rule-from-source-code).\n\n</details>\n\n<details>\n  <summary>can i define custom rules?</summary>\n\n  **yes**, you can define and include custom rules using `-rules / --ext-rules` command line option\n  by providing a path to a file containing your rule(s). the option accepts comma-separated list\n  of paths to files or directories, e.g.\n  ```\n  robocop -rules my/own/rule.py --ext-rules rules.py,external_rules.py\n  ```\n\n  if you feel that your rule is very helpful and should be included in robocop permanently,\n  you can always share your solution by\n  [submitting a pull request](https://github.com/marketsquare/robotframework-robocop/pulls).\n  you can also share your idea by\n  [creating an issue](https://github.com/marketsquare/robotframework-robocop/issues/new/choose).\n\n  more about external rules with code examples in\n  [our documentation](https://robocop.readthedocs.io/en/stable/external_rules.html).\n</details>\n\n<details>\n  <summary>can i use robocop in continuous integration (ci) tools?</summary>\n\n  **yes**, it is easy to integrate robocop with ci and other tools.\n  for more details read [our documentation](https://robocop.readthedocs.io/en/stable/ci.html).\n\n</details>\n\n<details>\n  <summary>can i configure return status / code?</summary>\n\n  **yes**, by default robocop returns code 0 if number of found issues does not exceed quality gates.\n\n  quality gates are the number specified for each severity (error, warning, info) that cannot be\n  exceeded. every violation of quality gates increases the return code by 1 up to maximum of 255.\n  default values for quality gates are:\n\n  ```\n  quality_gate = {\n            'e': 0,\n            'w': 0,\n            'i': -1\n        }\n  ```\n\n  which shows the accepted number of issues by severity. in that case each error and warning\n  increases the return code. rules with info severity do not affect the return code.\n\n  to configure quality gates, you simply use `-c / --configure` command line option\n  with following pattern ```--configure return_status:quality_gates:<severity>=limit```.\n  you can change all limits at once. example:\n\n  ```commandline\n  --configure return_status:quality_gates:e=0:w=100:i=-1\n  ```\n\n  which means that no errors are accepted, up to 100 warnings are tolerated and issues with\n  info severity do not affect the return code.\n\n</details>\n\n<details>\n  <summary>what is the difference between robocop and rflint?</summary>\n\n  robocop is better in every case because it:\n\n  - has maaaaany rules that check the quality of your robot framework code\n  - is integrated with popular ide tools\n  - is highly configurable\n  - has very good defaults that work out of the box\n  - can be configured in source code\n  - uses the latest [robot framework parsing api](https://robot-framework.readthedocs.io/en/stable/)\n  - is actively developed & fixed\n  - is easy to integrate with external tools\n  - can redirect output to a file\n  - displays nice reports\n  - is easy to extend it with new rules\n  - is cool :nerd_face:\n\n  still not convinced?\n  [watch our talk](https://www.youtube.com/watch?v=vzoyi2obm8e)\n  about robocop &\n  [robotidy](https://github.com/marketsquare/robotframework-tidy)\n  and see for yourself! :monocle_face:\n\n</details>\n\n----\n\n> excuse me, i have to go. somewhere there is a crime happening. - robocop\n",
  "docs_url": null,
  "keywords": "robotframework automation testautomation testing linter qa",
  "license": "apache license 2.0",
  "name": "robotframework-robocop",
  "package_url": "https://pypi.org/project/robotframework-robocop/",
  "project_url": "https://pypi.org/project/robotframework-robocop/",
  "project_urls": {
    "Documentation": "https://robocop.readthedocs.io/en/stable",
    "Download": "https://pypi.org/project/robotframework-robocop",
    "Homepage": "https://github.com/MarketSquare/robotframework-robocop",
    "Issue tracker": "https://github.com/MarketSquare/robotframework-robocop/issues",
    "Source code": "https://github.com/MarketSquare/robotframework-robocop"
  },
  "release_url": "https://pypi.org/project/robotframework-robocop/4.2.2/",
  "requires_dist": [
    "jinja2 <4.0,>=3.0",
    "robotframework >=3.2.2",
    "pathspec <0.12,>=0.9",
    "tomli >=2.0.0",
    "pytz >=2022.7",
    "python-dateutil >=2.8.2",
    "platformdirs <4.2.0,>=3.2.0",
    "black ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pyyaml ; extra == 'dev'",
    "pytest-benchmark ; extra == 'dev'",
    "nox ; extra == 'dev'",
    "furo ; extra == 'doc'",
    "sphinx ; extra == 'doc'",
    "sphinx-design ; extra == 'doc'",
    "sphinx-copybutton ; extra == 'doc'",
    "sphinxemoji ; extra == 'doc'",
    "pygments ; extra == 'doc'"
  ],
  "requires_python": ">=3.7",
  "summary": "static code analysis tool (linter) for robot framework",
  "version": "4.2.2",
  "releases": [],
  "developers": [
    "bartek.hirsz@gmail.com",
    "bartlomiej_hirsz",
    "matnojek@gmail.com"
  ],
  "kwds": "robocop_external_tool robocop robocorp robotframework robotidy",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_robotframework_robocop",
  "homepage": "https://github.com/marketsquare/robotframework-robocop",
  "release_count": 49,
  "dependency_ids": [
    "pypi_black",
    "pypi_coverage",
    "pypi_furo",
    "pypi_jinja2",
    "pypi_nox",
    "pypi_pathspec",
    "pypi_platformdirs",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_pyyaml",
    "pypi_robotframework",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_design",
    "pypi_sphinxemoji",
    "pypi_tomli"
  ]
}
{
  "classifiers": [],
  "description": "## a lightweight and fast pure python ecdsa\n\n### overview\n\nwe tried other python libraries such as [python-ecdsa], [fast-ecdsa] and other less famous ones, but we didn't find anything that suited our needs. the first one was pure python, but it was too slow. the second one mixed python and c and it was really fast, but we were unable to use it in our current infrastructure, which required pure python code.\n\nfor this reason, we decided to create something simple, compatible with openssl and fast using elegant math such as jacobian coordinates to speed up the ecdsa. starkbank-ecdsa is fully compatible with python2 and python3.\n\n### installation\n\nto install starkbank`s ecdsa-python, run:\n\n```sh\npip install starkbank-ecdsa\n```\n\n### curves\n\nwe currently support `secp256k1`, but you can add more curves to the project. you just need to use the curve.add() function.\n\n### speed\n\nwe ran a test on a mac pro i7 2017. the libraries were run 100 times and the averages displayed bellow were obtained:\n\n| library            | sign          | verify  |\n| ------------------ |:-------------:| -------:|\n| [python-ecdsa]     |   121.3ms     | 65.1ms  |\n| [fast-ecdsa]       |     0.1ms     |  0.2ms  |\n| starkbank-ecdsa    |     4.1ms     |  7.8ms  |\n\nour pure python code cannot compete with c based libraries, but it's `6x faster` to verify and `23x faster` to sign than other pure python libraries.\n\n### sample code\n\nhow to sign a json message for [stark bank]:\n\n```python\nfrom json import dumps\nfrom ellipticcurve.ecdsa import ecdsa\nfrom ellipticcurve.privatekey import privatekey\n\n\n# generate privatekey from pem string\nprivatekey = privatekey.frompem(\"\"\"\n    -----begin ec parameters-----\n    bgurgqqacg==\n    -----end ec parameters-----\n    -----begin ec private key-----\n    mhqcaqeeiodvzus34wfbt0x53+p5ensj6tmjfvk01dd1dgdh02rzoacgbsubbaak\n    ouqdqgae/nvhu/sqqaos9tuljqsuuki15zr5sabprbwtbft/408rkvvzq8vaisbb\n    rmperrexj5aog/mq8rrdyy75w9q/ig==\n    -----end ec private key-----\n\"\"\")\n\n# create message from json\nmessage = dumps({\n    \"transfers\": [\n        {\n            \"amount\": 100000000,\n            \"taxid\": \"594.739.480-42\",\n            \"name\": \"daenerys targaryen stormborn\",\n            \"bankcode\": \"341\",\n            \"branchcode\": \"2201\",\n            \"accountnumber\": \"76543-8\",\n            \"tags\": [\"daenerys\", \"targaryen\", \"transfer-1-external-id\"]\n        }\n    ]\n})\n\nsignature = ecdsa.sign(message, privatekey)\n\n# generate signature in base64. this result can be sent to stark bank in the request header as the digital-signature parameter.\nprint(signature.tobase64())\n\n# to double check if the message matches the signature, do this:\npublickey = privatekey.publickey()\n\nprint(ecdsa.verify(message, signature, publickey))\n\n```\n\nsimple use:\n\n```python\nfrom ellipticcurve.ecdsa import ecdsa\nfrom ellipticcurve.privatekey import privatekey\n\n\n# generate new keys\nprivatekey = privatekey()\npublickey = privatekey.publickey()\n\nmessage = \"my test message\"\n\n# generate signature\nsignature = ecdsa.sign(message, privatekey)\n\n# to verify if the signature is valid\nprint(ecdsa.verify(message, signature, publickey))\n\n```\n\nhow to add more curves:\n\n```python\nfrom ellipticcurve import curve, privatekey, publickey\n\nnewcurve = curve.curvefp(\n    name=\"frp256v1\",\n    a=0xf1fd178c0b3ad58f10126de8ce42435b3961adbcabc8ca6de8fcf353d86e9c00,\n    b=0xee353fca5428a9300d4aba754a44c00fdfec0c9ae4b1a1803075ed967b7bb73f,\n    p=0xf1fd178c0b3ad58f10126de8ce42435b3961adbcabc8ca6de8fcf353d86e9c03,\n    n=0xf1fd178c0b3ad58f10126de8ce42435b53dc67e140d2bf941ffdd459c6d655e1,\n    gx=0xb6b3d4c356c139eb31183d4749d423958c27d2dcaf98b70164c97a2dd98f5cff,\n    gy=0x6142e0f7c8b204911f9271f0f3ecef8c2701c307e8e4c9e183115a1554062cfb,\n    oid=[1, 2, 250, 1, 223, 101, 256, 1]\n)\n\ncurve.add(newcurve)\n\npublickeypem = \"\"\"-----begin public key-----\nmfswfqyhkozizj0caqykkof6ayffzyiaaqncaateeffyiql+hmdytf+qdmvqmwgd\ndrjpqlj11do8okvksxq2lwb6ct4aitmlcyg3f1msafc/rosn/vgj69bdhzk6\n-----end public key-----\"\"\"\n\npublickey = publickey.frompem(publickeypem)\n\nprint(publickey.topem())\n```\n\nhow to generate compressed public key:\n\n```python\nfrom ellipticcurve import privatekey, publickey\n\nprivatekey = privatekey()\npublickey = privatekey.publickey()\ncompressedpublickey = publickey.tocompressed()\n\nprint(compressedpublickey)\n```\n\nhow to recover a compressed public key:\n\n```python\nfrom ellipticcurve import privatekey, publickey\n\ncompressedpublickey = \"0252972572d465d016d4c501887b8df303eee3ed602c056b1eb09260dfa0da0ab2\"\npublickey = publickey.fromcompressed(compressedpublickey)\n\nprint(publickey.topem())\n```\n\n### openssl\n\nthis library is compatible with openssl, so you can use it to generate keys:\n\n```\nopenssl ecparam -name secp256k1 -genkey -out privatekey.pem\nopenssl ec -in privatekey.pem -pubout -out publickey.pem\n```\n\ncreate a message.txt file and sign it:\n\n```\nopenssl dgst -sha256 -sign privatekey.pem -out signatureder.txt message.txt\n```\n\nto verify, do this:\n\n```python\nfrom ellipticcurve.ecdsa import ecdsa\nfrom ellipticcurve.signature import signature\nfrom ellipticcurve.publickey import publickey\nfrom ellipticcurve.utils.file import file\n\n\npublickeypem = file.read(\"publickey.pem\")\nsignatureder = file.read(\"signatureder.txt\", \"rb\")\nmessage = file.read(\"message.txt\")\n\npublickey = publickey.frompem(publickeypem)\nsignature = signature.fromder(signatureder)\n\nprint(ecdsa.verify(message, signature, publickey))\n\n```\n\nyou can also verify it on terminal:\n\n```\nopenssl dgst -sha256 -verify publickey.pem -signature signatureder.txt message.txt\n```\n\nnote: if you want to create a digital signature to use with [stark bank], you need to convert the binary signature to base64.\n\n```\nopenssl base64 -in signatureder.txt -out signaturebase64.txt\n```\n\nyou can do the same with this library:\n \n```python\nfrom ellipticcurve.signature import signature\nfrom ellipticcurve.utils.file import file\n\n\nsignatureder = file.read(\"signatureder.txt\", \"rb\")\n\nsignature = signature.fromder(signatureder)\n\nprint(signature.tobase64())\n```\n\n### run unit tests\n\n```\npython3 -m unittest discover\npython2 -m unittest discover\n```\n\n\n[python-ecdsa]: https://github.com/warner/python-ecdsa\n[fast-ecdsa]: https://github.com/antonkueltz/fastecdsa\n[stark bank]: https://starkbank.com\n\n\n",
  "docs_url": null,
  "keywords": "ecdsa,elliptic curve,elliptic,curve,stark bank,starkbank,cryptograph,secp256k1,prime256v1",
  "license": "mit license",
  "name": "starkbank-ecdsa",
  "package_url": "https://pypi.org/project/starkbank-ecdsa/",
  "project_url": "https://pypi.org/project/starkbank-ecdsa/",
  "project_urls": {
    "Homepage": "https://github.com/starkbank/ecdsa-python.git"
  },
  "release_url": "https://pypi.org/project/starkbank-ecdsa/2.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a lightweight and fast pure python ecdsa library",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "developers@starkbank.com",
    "stark_bank"
  ],
  "kwds": "openssl python3 ellipticcurve ecdsa python2",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_starkbank_ecdsa",
  "homepage": "https://github.com/starkbank/ecdsa-python.git",
  "release_count": 19,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "py-multiaddr\n==========================\n\n.. image:: https://img.shields.io/pypi/v/multiaddr.svg\n        :target: https://pypi.python.org/pypi/multiaddr\n\n.. image:: https://api.travis-ci.com/multiformats/py-multiaddr.svg?branch=master\n        :target: https://travis-ci.com/multiformats/py-multiaddr\n\n.. image:: https://codecov.io/github/multiformats/py-multiaddr/coverage.svg?branch=master\n        :target: https://codecov.io/github/multiformats/py-multiaddr?branch=master\n\n.. image:: https://readthedocs.org/projects/multiaddr/badge/?version=latest\n        :target: https://readthedocs.org/projects/multiaddr/?badge=latest\n        :alt: documentation status\n..\n\n    multiaddr_ implementation in python\n\n.. _multiaddr: https://github.com/multiformats/multiaddr\n\n..\n\n\n.. contents:: :local:\n\nusage\n=====\n\nsimple\n------\n\n.. code-block:: python\n\n    from multiaddr import multiaddr\n\n    # construct from a string\n    m1 = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n\n    # construct from bytes\n    m2 = multiaddr(bytes_addr=m1.to_bytes())\n\n    assert str(m1) == \"/ip4/127.0.0.1/udp/1234\"\n    assert str(m1) == str(m2)\n    assert m1.to_bytes() == m2.to_bytes()\n    assert m1 == m2\n    assert m2 == m1\n    assert not (m1 != m2)\n    assert not (m2 != m1)\n\n\nprotocols\n---------\n\n.. code-block:: python\n\n    from multiaddr import multiaddr\n\n    m1 = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n\n    # get the multiaddr protocol description objects\n    m1.protocols()\n    # [protocol(code=4, name='ip4', size=32), protocol(code=17, name='udp', size=16)]\n\n\nen/decapsulate\n--------------\n\n.. code-block:: python\n\n    from multiaddr import multiaddr\n\n    m1 = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n    m1.encapsulate(multiaddr(\"/sctp/5678\"))\n    # <multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\n    m1.decapsulate(multiaddr(\"/udp\"))\n    # <multiaddr /ip4/127.0.0.1>\n\n\ntunneling\n---------\n\nmultiaddr allows expressing tunnels very nicely.\n\n\n.. code-block:: python\n\n    printer = multiaddr(\"/ip4/192.168.0.13/tcp/80\")\n    proxy = multiaddr(\"/ip4/10.20.30.40/tcp/443\")\n    printeroverproxy = proxy.encapsulate(printer)\n    print(printeroverproxy)\n    # /ip4/10.20.30.40/tcp/443/ip4/192.168.0.13/tcp/80\n\n    proxyagain = printeroverproxy.decapsulate(printer)\n    print(proxyagain)\n    # /ip4/10.20.30.40/tcp/443\n\nmaintainers\n===========\n\noriginal author: `@sbuss`_.\n\ncontribute\n==========\n\ncontributions welcome. please check out `the issues`_.\n\ncheck out our `contributing document`_ for more information on how we work, and about contributing in general.\nplease be aware that all interactions related to multiformats are subject to the ipfs `code of conduct`_.\n\nlicense\n=======\n\ndual-licensed:\n\n-  `mit`_ \u00a9 2014 steven buss\n-  `apache 2`_ \u00a9 2014 steven buss\n\n.. _the issues: https://github.com/multiformats/py-multiaddr/issues\n.. _contributing document: https://github.com/multiformats/multiformats/blob/master/contributing.md\n.. _code of conduct: https://github.com/ipfs/community/blob/master/code-of-conduct.md\n.. _standard-readme: https://github.com/richardlitt/standard-readme\n.. _mit: license-mit\n.. _apache 2: license-apache2\n.. _`@sbuss`: https://github.com/sbuss\n\n\nhistory\n=======\n\n0.0.7 (2019-5-8)\n----------------\n\n* include subpackage\n* refactor util and codec\n\n0.0.5 (2019-5-7)\n----------------\n\n* unhexilified bytes\n* new exceptions\n* miscellaneous improvements [via alexander255_ `#42`_]\n\n.. _alexander255: https://github.com/alexander255\n.. _`#42`: https://github.com/multiformats/py-multiaddr/pull/42\n\n0.0.2 (2016-5-4)\n----------------\n\n* fix a bug in decapsulate that threw an indexerror instead of a copy of the\n  multiaddr when the original multiaddr does not contain the multiaddr to\n  decapsulate. [via fredthomsen_ `#9`_]\n* increase test coverage [via fredthomsen_ `#9`_]\n\n.. _fredthomsen: https://github.com/fredthomsen\n.. _`#9`: https://github.com/multiformats/py-multiaddr/pull/9\n\n0.0.1 (2016-1-22)\n------------------\n\n* first release on pypi.\n\n\n",
  "docs_url": "https://pythonhosted.org/multiaddr/",
  "keywords": "multiaddr",
  "license": "mit license",
  "name": "multiaddr",
  "package_url": "https://pypi.org/project/multiaddr/",
  "project_url": "https://pypi.org/project/multiaddr/",
  "project_urls": {
    "Download": "https://github.com/multiformats/py-multiaddr/tarball/0.0.9",
    "Homepage": "https://github.com/multiformats/py-multiaddr"
  },
  "release_url": "https://pypi.org/project/multiaddr/0.0.9/",
  "requires_dist": [
    "varint",
    "six",
    "base58",
    "netaddr"
  ],
  "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
  "summary": "python implementation of jbenet's multiaddr",
  "version": "0.0.9",
  "releases": [],
  "developers": [
    "steven.buss@gmail.com",
    "steven_buss"
  ],
  "kwds": "multiaddr _multiaddr multiaddr_ multiformats badge",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_multiaddr",
  "homepage": "https://github.com/multiformats/py-multiaddr",
  "release_count": 9,
  "dependency_ids": [
    "pypi_base58",
    "pypi_netaddr",
    "pypi_six",
    "pypi_varint"
  ]
}
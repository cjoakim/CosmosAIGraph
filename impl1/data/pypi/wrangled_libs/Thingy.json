{
  "classifiers": [
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "======\nthingy\n======\n\n.. image:: https://img.shields.io/pypi/v/thingy.svg\n   :target: https://pypi.python.org/pypi/thingy\n.. image:: https://img.shields.io/github/license/refty/thingy.svg\n   :target: https://github.com/refty/thingy/blob/master/license\n.. image:: https://img.shields.io/travis/refty/thingy.svg\n   :target: https://travis-ci.org/refty/thingy\n.. image:: https://img.shields.io/coveralls/refty/thingy.svg\n   :target: https://coveralls.io/github/refty/thingy\n.. image:: https://readthedocs.org/projects/python-thingy/badge\n   :target: https://python-thingy.readthedocs.io\n\n|\n\ndictionaries as objects, that can have different dictionary views!\n\n\ninstall\n=======\n\n.. code-block:: sh\n\n   $ pip install thingy\n\n\nexamples\n========\n\ndictionaries as objects...\n--------------------------\n\n.. code-block:: python\n\n   >>> class mythingy(thingy)\n   ...     @property\n   ...     def foobaz(self):\n   ...         return self.foo + self.baz\n\n   >>> thingy = mythingy({\"foo\": \"bar\", \"baz\": \"qux\"})\n   >>> thingy.foo\n   \"bar\"\n   >>> thingy.foobaz\n   \"barqux\"\n\n   >>> thingy.foo = \"barrrr\"\n   >>> thingy.view()\n   {\"foo\": \"barrrr\", \"baz\": \"qux\"}\n\n\n...that can have different dictionary views!\n--------------------------------------------\n\n.. code-block:: python\n\n   >>> mythingy.add_view(name=\"fooz\", include=[\"foo\", \"foobaz\"])\n   >>> mythingy.add_view(name=\"no_foo\", defaults=true, exclude=\"foo\")\n\n   >>> thingy = mythingy({\"foo\": \"bar\", \"baz\": \"qux\"})\n   >>> thingy.view(\"fooz\")\n   {\"foo\": \"bar\", \"foobaz\": \"barqux\"}\n   >>> thingy.view(\"no_foo\")\n   {\"baz\": \"qux\"}\n\n\nwhy thingy?\n===========\n\nbecause it's much more enjoyable to write ``foo.bar`` than ``foo[\"bar\"]``.\n\nthingy is mainly meant to be used inside other libraries to provide abstractions\nover dictionaries, which can be useful for writing orms or similar utilities.\n\nthingy's views system is also particularly useful as-is when you intensively\nmanipulate dictionaries and often restrict those dictionaries to a few redundant\nitems.\n\n\ntests\n=====\n\nto run thingy tests:\n\n* install developers requirements with ``pip install -r requirements.txt``;\n* run ``pytest``.\n\n\nsponsors\n========\n\n.. image:: https://raw.githubusercontent.com/refty/thingy/master/img/numberly.png\n    :alt: numberly\n    :align: center\n    :target: https://numberly.com/\n\n|\n\n.. image:: https://raw.githubusercontent.com/refty/thingy/master/img/refty.png\n    :alt: refty\n    :align: center\n    :target: https://refty.co/\n\n\nlicense\n=======\n\nmit\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "thingy",
  "package_url": "https://pypi.org/project/Thingy/",
  "project_url": "https://pypi.org/project/Thingy/",
  "project_urls": {
    "Homepage": "https://github.com/Refty/thingy"
  },
  "release_url": "https://pypi.org/project/Thingy/0.10.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "dictionary as an object, that can have different views",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "guillaume@refty.co",
    "guillaume_gelin"
  ],
  "kwds": "shields svg pytest coveralls badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_thingy",
  "homepage": "https://github.com/refty/thingy",
  "release_count": 21,
  "dependency_ids": []
}
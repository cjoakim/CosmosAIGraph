{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "framework :: jupyter",
    "framework :: jupyter :: jupyterlab :: 4",
    "framework :: jupyter :: jupyterlab :: extensions",
    "framework :: jupyter :: jupyterlab :: extensions :: prebuilt",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: text processing :: markup"
  ],
  "description": "![](https://github.com/mwouts/jupytext/blob/17aea37c612f33a4e27eeee4b81966f1506920fd/docs/images/logo_large.png?raw=true)\n\n<!-- index-start -->\n\n[![ci](https://github.com/mwouts/jupytext/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/mwouts/jupytext/actions)\n[![documentation status](https://readthedocs.org/projects/jupytext/badge/?version=latest)](https://jupytext.readthedocs.io/en/latest/?badge=latest)\n[![codecov.io](https://codecov.io/github/mwouts/jupytext/coverage.svg?branch=main)](https://codecov.io/gh/mwouts/jupytext/branch/main)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![github language count](https://img.shields.io/github/languages/count/mwouts/jupytext)](docs/languages.md)\n[![conda version](https://img.shields.io/conda/vn/conda-forge/jupytext.svg)](https://anaconda.org/conda-forge/jupytext)\n[![pypi](https://img.shields.io/pypi/v/jupytext.svg)](https://pypi.python.org/pypi/jupytext)\n[![pyversions](https://img.shields.io/pypi/pyversions/jupytext.svg)](https://pypi.python.org/pypi/jupytext)\n[![binder:lab](https://img.shields.io/badge/binder-jupyterlab-0172b2.svg)](https://mybinder.org/v2/gh/mwouts/jupytext/main?urlpath=lab/tree/demo/get_started.ipynb)\n[![binder:notebook](https://img.shields.io/badge/binder-notebook-0172b2.svg)](https://mybinder.org/v2/gh/mwouts/jupytext/main?filepath=demo)\n[![launch - renku](https://renkulab.io/renku-badge.svg)](https://renkulab.io/projects/best-practices/jupytext/sessions/new?autostart=1)\n[![](https://img.shields.io/badge/youtube-jupytercon%202020-red.svg)](https://www.youtube.com/watch?v=sdydevfmh48)\n\n# jupytext\n\nhave you always wished jupyter notebooks were plain text documents? wished you could edit them in your favorite ide? and get clear and meaningful diffs when doing version control? then, jupytext may well be the tool you're looking for!\n\n## text notebooks\n\na python notebook encoded in the `py:percent` [format](docs/formats-scripts.md#the-percent-format) has a `.py` extension and looks like this:\n\n```\n# %% [markdown]\n# this is a markdown cell\n\n# %%\ndef f(x):\n  return 3*x+1\n```\n\nonly the notebook inputs (and optionally, the metadata) are included. text notebooks are well suited for version control. you can also edit or refactor them in an ide - the `.py` notebook above is a regular python file.\n\nwe recommend the `percent` format for notebooks that mostly contain code. the `percent` format is available for julia, python, r and many other [languages](docs/languages.md).\n\nif your notebook is documentation-oriented, a [markdown-based format](docs/formats-markdown.md) (text notebooks with a `.md` extension) might be more appropriate. depending on what you plan to do with your notebook, you might prefer the myst markdown format, which interoperates very well with jupyter book, or quarto markdown, or even pandoc markdown.\n\n## installation\n\ninstall jupytext in the python environment that you use for jupyter. use either\n\n    pip install jupytext\n\nor\n\n    conda install jupytext -c conda-forge\n\nthen, restart your jupyter lab server, and make sure jupytext is activated in jupyter:  `.py` and `.md` files have a notebook icon, and you can open them as notebooks with a right click in jupyter lab.\n\n![](https://github.com/mwouts/jupytext/blob/64b4be818508760116f91bf156342cb4cf724d93/docs/images/jupyterlab_right_click.png?raw=true)\n\n## paired notebooks\n\ntext notebooks with a `.py` or `.md` extension are well suited for version control. they can be edited or authored conveniently in an ide. you can open and run them as notebooks in jupyter lab with a right click. however, the notebook outputs are lost when the notebook is closed, as only the notebook inputs are saved in text notebooks.\n\na convenient alternative to text notebooks are [paired notebooks](docs/paired-notebooks.md). these are a set of two files, say `.ipynb` and `.py`, that contain the same notebook, but in different formats.\n\nyou can edit the `.py` version of the paired notebook, and get the edits back in jupyter by selecting _reload notebook from disk_. the outputs will be reloaded from the `.ipynb` file, if it exists. the `.ipynb` version will be updated or recreated the next time you save the notebook in jupyter.\n\nto pair a notebook in jupyter lab, use the command `pair notebook with percent script` from the command palette:\n\n![](https://github.com/mwouts/jupytext/blob/64b4be818508760116f91bf156342cb4cf724d93/docs/images/pair_commands.png?raw=true)\n\nto pair all the notebooks in a certain directory, create a [configuration file](docs/config.md) with this content:\n\n```\n# jupytext.toml at the root of your notebook directory\nformats = \"ipynb,py:percent\"\n```\n\n## command line\n\njupytext is also available at the [command line](docs/using-cli.md). you can\n\n- pair a notebook with `jupytext --set-formats ipynb,py:percent notebook.ipynb`\n- synchronize the paired files with `jupytext --sync notebook.py` (the inputs are loaded from the most recent paired file)\n- convert a notebook in one format to another with `jupytext --to ipynb notebook.py` (use `-o` if you want a specific output file)\n- pipe a notebook to a linter with e.g. `jupytext --pipe black notebook.ipynb`\n\n## sample use cases\n\n### notebooks under version control\n\nthis is a quick how-to:\n- open your `.ipynb` notebook in jupyter and [pair](docs/paired-notebooks.md) it to a `.py` notebook, using either the _pair_ command in jupyter lab, or a global [configuration file](docs/config.md)\n- save the notebook - this creates a `.py` notebook\n- add this `.py` notebook to version control\n\nyou might exclude `.ipynb` files from version control (unless you want to see the outputs versioned!). jupytext will recreate the `.ipynb` files locally when the users open and save the `.py` notebooks.\n\n### collaborating on notebooks with git\n\ncollaborating on jupyter notebooks through git becomes as easy as collaborating on text files.\n\nassume that you have your `.py` notebooks under version control (see above). then,\n- your collaborator pulls the `.py` notebook\n- they open it _as a notebook_ in jupyter (right-click in jupyter lab)\n- at that stage the notebook has no outputs. they run the notebook and save it. outputs are regenerated, and a local `.ipynb` file is created\n- they edit the notebook, and push the updated `notebook.py` file. the diff is nothing else than a standard diff on a python script.\n- you pull the updated `notebook.py` script, and refresh your browser. the input cells are updated based on the new content of `notebook.py`. the outputs are reloaded from your local `.ipynb` file. finally, the kernel variables are untouched, so you have the option to run only the modified cells to get the new outputs.\n\n### editing or refactoring a notebook in an ide\n\nonce your notebook is [paired](docs/paired-notebooks.md) with a `.py` file, you can easily edit or refactor the `.py` representation of the notebook in an ide.\n\nonce you are done editing the `.py` notebook, you will just have to _reload_ the notebook in jupyter to get the latest edits there.\n\nnote: it is simpler to close the `.ipynb` notebook in jupyter when you edit the paired `.py` file. there is no obligation to do so; however, if you don't, you should be prepared to read carefully the pop-up messages. if jupyter tries to save the notebook while the paired `.py` file has also been edited on disk since the last reload, a conflict will be detected and you will be asked to decide which version of the notebook (in memory or on disk) is the appropriate one.\n\n## more resources\n\nread more about jupytext in the [documentation](https://jupytext.readthedocs.io).\n\nif you're new to jupytext, you may want to start with the [faq](docs/faq.md) or with the [tutorials](docs/tutorials.md).\n\nthere is also this short introduction to jupytext: [![](https://img.shields.io/badge/youtube-jupytercon%202020-red.svg)](https://www.youtube.com/watch?v=sdydevfmh48).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license  copyright (c) 2018-2023 marc wouts  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "jupytext",
  "package_url": "https://pypi.org/project/jupytext/",
  "project_url": "https://pypi.org/project/jupytext/",
  "project_urls": {
    "Documentation": "https://jupytext.readthedocs.io",
    "Homepage": "https://github.com/mwouts/jupytext",
    "Source Code": "https://github.com/mwouts/jupytext"
  },
  "release_url": "https://pypi.org/project/jupytext/1.16.0/",
  "requires_dist": [
    "markdown-it-py>=1.0.0",
    "mdit-py-plugins",
    "nbformat",
    "packaging",
    "pyyaml",
    "toml",
    "jupytext[test-cov,test-external]; extra == 'dev'",
    "myst-parser; extra == 'docs'",
    "sphinx; extra == 'docs'",
    "sphinx-copybutton; extra == 'docs'",
    "sphinx-rtd-theme; extra == 'docs'",
    "pytest; extra == 'test'",
    "pytest-randomly; extra == 'test'",
    "pytest-xdist; extra == 'test'",
    "jupytext[test-integration]; extra == 'test-cov'",
    "pytest-cov>=2.6.1; extra == 'test-cov'",
    "autopep8; extra == 'test-external'",
    "black; extra == 'test-external'",
    "flake8; extra == 'test-external'",
    "gitpython; extra == 'test-external'",
    "isort; extra == 'test-external'",
    "jupyter-fs<0.4.0; extra == 'test-external'",
    "jupytext[test-integration]; extra == 'test-external'",
    "pre-commit; extra == 'test-external'",
    "sphinx-gallery<0.8; extra == 'test-external'",
    "jupytext[test]; extra == 'test-functional'",
    "ipykernel; extra == 'test-integration'",
    "jupyter-server!=2.11; extra == 'test-integration'",
    "jupytext[test-functional]; extra == 'test-integration'",
    "nbconvert; extra == 'test-integration'",
    "calysto-bash; extra == 'test-ui'"
  ],
  "requires_python": ">=3.8",
  "summary": "jupyter notebooks as markdown documents, julia, python or r scripts",
  "version": "1.16.0",
  "releases": [],
  "developers": [
    "marc.wouts@gmail.com"
  ],
  "kwds": "jupytext jupyterlab jupyter jupytercon jupyterlab_right_click",
  "license_kwds": "copyright license liable mit liability",
  "libtype": "pypi",
  "id": "pypi_jupytext",
  "homepage": "",
  "release_count": 125,
  "dependency_ids": [
    "pypi_autopep8",
    "pypi_black",
    "pypi_calysto_bash",
    "pypi_flake8",
    "pypi_gitpython",
    "pypi_ipykernel",
    "pypi_isort",
    "pypi_jupyter_fs",
    "pypi_jupyter_server!",
    "pypi_jupytext",
    "pypi_markdown_it_py",
    "pypi_mdit_py_plugins",
    "pypi_myst_parser",
    "pypi_nbconvert",
    "pypi_nbformat",
    "pypi_packaging",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_randomly",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_gallery",
    "pypi_sphinx_rtd_theme",
    "pypi_toml"
  ]
}
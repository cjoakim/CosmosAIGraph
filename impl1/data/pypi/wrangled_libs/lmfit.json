{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering"
  ],
  "description": "lmfit-py\n========\n\n.. image:: https://dev.azure.com/lmfit/lmfit-py/_apis/build/status/lmfit.lmfit-py?branchname=master\n    :target: https://dev.azure.com/lmfit/lmfit-py/_build/latest?definitionid=1&branchname=master\n\n.. image:: https://codecov.io/gh/lmfit/lmfit-py/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/lmfit/lmfit-py\n\n.. image:: https://img.shields.io/pypi/v/lmfit.svg\n   :target: https://pypi.org/project/lmfit\n\n.. image:: https://img.shields.io/pypi/dm/lmfit.svg\n   :target: https://pypi.org/project/lmfit\n\n.. image:: https://img.shields.io/badge/docs-read-brightgreen\n   :target: https://lmfit.github.io/lmfit-py/\n\n.. image:: https://zenodo.org/badge/4185/lmfit/lmfit-py.svg\n   :target: https://doi.org/10.5281/zenodo.598352\n\n.. _lmfit google mailing list: https://groups.google.com/group/lmfit-py\n.. _github discussions: https://github.com/lmfit/lmfit-py/discussions\n.. _github issues: https://github.com/lmfit/lmfit-py/issues\n\n\n..\n   note: the zenodo target should be\n   https://zenodo.org/badge/latestdoi/4185/lmfit/lmfit-py\n   but see https://github.com/lmfit/lmfit-py/discussions/862\n\n\noverview\n---------\n\nthe lmfit python library supports provides tools for non-linear least-squares\nminimization and curve fitting.  the goal is to make these optimization\nalgorithms more flexible, more comprehensible, and easier to use well, with the\nkey feature of casting variables in minimization and fitting routines as named\nparameters that can have many attributes beside just a current value.\n\nlmfit is a pure python package, built on top of scipy and numpy, and so easy to\ninstall with ``pip install lmfit``.\n\nfor questions, comments, and suggestions, please use the `lmfit google mailing\nlist`_ or `github discussions`_.  for software issues and bugs, use `github\nissues`_, but please read `contributing.md <.github/contributing.md>`_ before\ncreating an issue.\n\n\nparameters and minimization\n------------------------------\n\nlmfit provides optimization routines similar to (and based on) those from\n``scipy.optimize``, but with a simple, flexible approach to parameterizing a\nmodel for fitting to data using named parameters. these named parameters can be\nheld fixed or freely adjusted in the fit, or held between lower and upper\nbounds. parameters can also be constrained as a simple mathematical expression\nof other parameters.\n\na parameters object (which acts like a python dictionary) contains named\nparameters, and can be built as with::\n\n    import lmfit\n    fit_params = lmfit.parameters()\n    fit_params['amp'] = lmfit.parameter(value=1.2)\n    fit_params['cen'] = lmfit.parameter(value=40.0, vary=false)\n    fit_params['wid'] = lmfit.parameter(value=4, min=0)\n    fit_params['fwhm'] = lmfit.parameter(expr='wid*2.355')\n\nor using the equivalent::\n\n    fit_params = lmfit.create_params(amp=1.2,\n                                     cen={'value':40, 'vary':false},\n                                     wid={'value': 4, 'min':0},\n                                     fwhm={'expr': 'wid*2.355'})\n\n\n\nin the general minimization case (see below for curve-fitting), the user will\nalso write an objective function to be minimized (in the least-squares sense)\nwith its first argument being this parameters object, and additional positional\nand keyword arguments as desired::\n\n    def myfunc(params, x, data, someflag=true):\n        amp = params['amp'].value\n        cen = params['cen'].value\n        wid = params['wid'].value\n        ...\n        return residual_array\n\nfor each call of this function, the values for the ``params`` may have changed,\nsubject to the bounds and constraint settings for each parameter. the function\nshould return the residual (i.e., ``data-model``) array to be minimized.\n\nthe advantage here is that the function to be minimized does not have to be\nchanged if different bounds or constraints are placed on the fitting parameters.\nthe fitting model (as described in myfunc) is instead written in terms of\nphysical parameters of the system, and remains remains independent of what is\nactually varied in the fit. in addition, which parameters are adjusted and which\nare fixed happens at run-time, so that changing what is varied and what\nconstraints are placed on the parameters can easily be modified by the user in\nreal-time data analysis.\n\nto perform the fit, the user calls::\n\n    result = lmfit.minimize(myfunc, fit_params, args=(x, data), kws={'someflag':true}, ....)\n\nafter the fit, a ``minimizerresult`` class is returned that holds the results\nthe fit (e.g., fitting statistics and optimized parameters). the dictionary\n``result.params`` contains the best-fit values, estimated standard deviations,\nand correlations with other variables in the fit.\n\nby default, the underlying fit algorithm is the levenberg-marquardt algorithm\nwith numerically-calculated derivatives from minpack's lmdif function, as used\nby ``scipy.optimize.leastsq``. most other solvers that are present in ``scipy``\n(e.g., nelder-mead, differential_evolution, basin-hopping, and more) are also\nsupported.\n\n\ncurve-fitting with lmfit.model\n----------------------------------\n\none of the most common use of least-squares minimization is for curve fitting,\nwhere minimization of ``data-model``, or ``(data-model)*weights``.  using\n``lmfit.minimize`` as above, the objective function would take ``data`` and\n``weights`` and effectively calculated the model and then return the value of\n``(data-model)*weights``.\n\nto simplify this, and make curve-fitting more flexible, lmfit provides a model\nclass that wraps a *model function* that represents the model (without the data\nor weights).  parameters are then automatically found from the named arguments\nof the model function.  in addition, simple model functions can be readily\ncombined and reused, and several common model functions are included in lmfit.\n\nexploration of confidence intervals\n-------------------------------------\n\nlmfit tries to always estimate uncertainties in fitting parameters and\ncorrelations between them.  it does this even for those methods where the\ncorresponding ``scipy.optimize`` routines do not estimate uncertainties.  lmfit\nalso provides methods to explicitly explore and evaluate the confidence\nintervals in fit results.\n",
  "docs_url": null,
  "keywords": "curve-fitting,least-squares minimization",
  "license": "bsd 3-clause",
  "name": "lmfit",
  "package_url": "https://pypi.org/project/lmfit/",
  "project_url": "https://pypi.org/project/lmfit/",
  "project_urls": {
    "Changelog": "https://lmfit.github.io/lmfit-py/whatsnew.html",
    "Documentation": "https://lmfit.github.io/lmfit-py/",
    "Homepage": "https://lmfit.github.io//lmfit-py/",
    "Source": "https://github.com/lmfit/lmfit-py",
    "Tracker": "https://github.com/lmfit/lmfit-py/issues"
  },
  "release_url": "https://pypi.org/project/lmfit/1.2.2/",
  "requires_dist": [
    "asteval (>=0.9.28)",
    "numpy (>=1.19)",
    "scipy (>=1.6)",
    "uncertainties (>=3.1.4)",
    "build ; extra == 'all'",
    "check-wheel-contents ; extra == 'all'",
    "pre-commit ; extra == 'all'",
    "twine ; extra == 'all'",
    "coverage ; extra == 'all'",
    "flaky ; extra == 'all'",
    "pytest ; extra == 'all'",
    "pytest-cov ; extra == 'all'",
    "cairosvg ; extra == 'all'",
    "corner ; extra == 'all'",
    "dill ; extra == 'all'",
    "emcee (>=3.0.0) ; extra == 'all'",
    "ipykernel ; extra == 'all'",
    "jupyter-sphinx (>=0.2.4) ; extra == 'all'",
    "matplotlib ; extra == 'all'",
    "numdifftools ; extra == 'all'",
    "pandas ; extra == 'all'",
    "Pillow ; extra == 'all'",
    "Sphinx ; extra == 'all'",
    "sphinx-gallery (>=0.10) ; extra == 'all'",
    "sphinxcontrib-svg2pdfconverter ; extra == 'all'",
    "sympy ; extra == 'all'",
    "pycairo ; (platform_system == \"Windows\") and extra == 'all'",
    "build ; extra == 'dev'",
    "check-wheel-contents ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "cairosvg ; extra == 'doc'",
    "corner ; extra == 'doc'",
    "dill ; extra == 'doc'",
    "emcee (>=3.0.0) ; extra == 'doc'",
    "ipykernel ; extra == 'doc'",
    "jupyter-sphinx (>=0.2.4) ; extra == 'doc'",
    "matplotlib ; extra == 'doc'",
    "numdifftools ; extra == 'doc'",
    "pandas ; extra == 'doc'",
    "Pillow ; extra == 'doc'",
    "Sphinx ; extra == 'doc'",
    "sphinx-gallery (>=0.10) ; extra == 'doc'",
    "sphinxcontrib-svg2pdfconverter ; extra == 'doc'",
    "sympy ; extra == 'doc'",
    "pycairo ; (platform_system == \"Windows\") and extra == 'doc'",
    "coverage ; extra == 'test'",
    "flaky ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "least-squares minimization with bounds and constraints",
  "version": "1.2.2",
  "releases": [],
  "developers": [
    "lmfit_development_team",
    "matt.newville@gmail.com"
  ],
  "kwds": "lmfit fit_params curve _lmfit minimizerresult",
  "license_kwds": "bsd 3-clause",
  "libtype": "pypi",
  "id": "pypi_lmfit",
  "homepage": "https://lmfit.github.io//lmfit-py/",
  "release_count": 37,
  "dependency_ids": [
    "pypi_asteval",
    "pypi_build",
    "pypi_cairosvg",
    "pypi_check_wheel_contents",
    "pypi_corner",
    "pypi_coverage",
    "pypi_dill",
    "pypi_emcee",
    "pypi_flaky",
    "pypi_ipykernel",
    "pypi_jupyter_sphinx",
    "pypi_matplotlib",
    "pypi_numdifftools",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_pycairo",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_gallery",
    "pypi_sphinxcontrib_svg2pdfconverter",
    "pypi_sympy",
    "pypi_twine",
    "pypi_uncertainties"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "## aws crt python\n\n[![version](https://img.shields.io/pypi/v/awscrt.svg?style=flat)](https://pypi.org/project/awscrt/)\n\npython 3 bindings for the aws common runtime.\n\n*   [api documentation](https://awslabs.github.io/aws-crt-python)\n*   [development guide](guides/dev/readme.md) for contributors to aws-crt-python's source code.\n\n## license\n\nthis library is licensed under the apache 2.0 license.\n\n## minimum requirements:\n\n*   python 3.7+\n\n## installation\n\nto install from pip:\n\n```bash\npython3 -m pip install awscrt\n```\n\nto install from github:\n\n```bash\ngit clone https://github.com/awslabs/aws-crt-python.git\ncd aws-crt-python\ngit submodule update --init\npython3 -m pip install .\n```\n\nto use from your python application, declare `awscrt` as a dependency in your `setup.py` file.\n\n### openssl and libcrypto (unix only)\n\naws-crt-python does not use openssl for tls.\non apple and windows devices, the os's default tls library is used.\non unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nbut s2n-tls uses libcrypto, the cryptography math library bundled with openssl.\n\nto simplify installation, aws-crt-python has its own copy of libcrypto.\nthis lets you install a wheel from pypi without having openssl installed.\nunix wheels on pypi come with libcrypto statically compiled in.\ncode to build libcrypto comes from [aws-lc](https://github.com/aws/aws-lc).\naws-lc's code is included in the pypi source package, \nand the git repository includes it as a submodule.\n\nif you need aws-crt-python to use the libcrypto included on your system, \nset environment variable `aws_crt_build_use_system_libcrypto=1` while building from source:\n\n```sh\naws_crt_build_use_system_libcrypto=1 python3 -m pip install --no-binary :all: --verbose awscrt\n```\n( `--no-binary :all:` ensures you do not use the precompiled wheel from pypi)\n\nyou can ignore all this on windows and apple platforms, where aws-crt-python\nuses the os's default libraries for tls and cryptography math.\n\n## mac-only tls behavior\n\nplease note that on mac, once a private key is used with a certificate, that certificate-key pair is imported into the mac keychain. all subsequent uses of that certificate will use the stored private key and ignore anything passed in programmatically. beginning in v0.6.2, when a stored private key from the keychain is used, the following will be logged at the \"info\" log level:\n\n```\nstatic: certificate has an existing certificate-key pair that was previously imported into the keychain. using key from keychain instead of the one provided.\n```\n\n## crash handler\nyou can enable the crash handler by setting the environment variable `aws_crt_crash_handler=1`. this will print the callstack to `stderr` in the event of a fatal error.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "awscrt",
  "package_url": "https://pypi.org/project/awscrt/",
  "project_url": "https://pypi.org/project/awscrt/",
  "project_urls": {
    "Homepage": "https://github.com/awslabs/aws-crt-python"
  },
  "release_url": "https://pypi.org/project/awscrt/0.20.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a common runtime for aws python projects",
  "version": "0.20.0",
  "releases": [],
  "developers": [
    "amazon_web_services",
    "aws-sdk-common-runtime@amazon.com"
  ],
  "kwds": "aws_crt_crash_handler awslabs aws_crt_build_use_system_libcrypto awscrt crt",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_awscrt",
  "homepage": "https://github.com/awslabs/aws-crt-python",
  "release_count": 139,
  "dependency_ids": []
}
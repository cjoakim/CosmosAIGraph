{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: office/business :: financial :: spreadsheet",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "gspread-formatting\n------------------\n\n.. image:: https://badge.fury.io/py/gspread-formatting.svg\n    :target: https://badge.fury.io/py/gspread-formatting\n\n.. image:: https://travis-ci.com/robin900/gspread-formatting.svg?branch=master\n    :target: https://travis-ci.com/robin900/gspread-formatting\n\n.. image:: https://img.shields.io/pypi/dm/gspread-formatting.svg\n    :target: https://pypi.org/project/gspread-formatting\n\n.. image:: https://readthedocs.org/projects/gspread-formatting/badge/?version=latest\n    :target: https://gspread-formatting.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\nthis package provides complete cell formatting for google spreadsheets\nusing the popular ``gspread`` package, along with a few related features such as setting\n\"frozen\" rows and columns in a worksheet. both basic and conditional formatting operations\nare supported.\n\nthe package also offers graceful formatting of google spreadsheets using a pandas dataframe.\nsee the section below for usage and details.\n\nusage\n~~~~~\n\nbasic formatting of a range of cells in a worksheet is offered by the ``format_cell_range`` function. \nall basic formatting components of the v4 sheets api's ``cellformat`` are present as classes \nin the ``gspread_formatting`` module, available both by ``initialcaps`` names and ``camelcase`` names: \nfor example, the background color class is ``backgroundcolor`` but is also available as \n``backgroundcolor``, while the color class is ``color`` but available also as ``color``. \nattributes of formatting components are best specified as keyword arguments using ``camelcase`` \nnaming, e.g. ``backgroundcolor=...``. complex formats may be composed easily, by nesting the calls to the classes.  \n\nsee `the cellformat page of the sheets api documentation <https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#cellformat>`_\nto learn more about each formatting component.::\n\n    from gspread_formatting import *\n\n    fmt = cellformat(\n        backgroundcolor=color(1, 0.9, 0.9),\n        textformat=textformat(bold=true, foregroundcolor=color(1, 0, 1)),\n        horizontalalignment='center'\n        )\n\n    format_cell_range(worksheet, 'a1:j1', fmt)\n\nthe ``format_cell_ranges`` function allows for formatting multiple ranges with corresponding formats,\nall in one function call and sheets api operation::\n\n    fmt = cellformat(\n        backgroundcolor=color(1, 0.9, 0.9),\n        textformat=textformat(bold=true, foregroundcolor=color(1, 0, 1)),\n        horizontalalignment='center'\n        )\n\n    fmt2 = cellformat(\n        backgroundcolor=color(0.9, 0.9, 0.9),\n        horizontalalignment='right'\n        )\n\n    format_cell_ranges(worksheet, [('a1:j1', fmt), ('k1:k200', fmt2)])\n\nspecifying cell ranges\n~~~~~~~~~~~~~~~~~~~~~~\n\nthe `format_cell_range` function and friends allow a string to specify a cell range using the \"a1\" convention\nto name a column-and-row cell address with column letter and row number; in addition, one may specify\nan entire column or column range with unbounded rows, or an entire row or row range with unbounded columns,\nor a combination thereof. here are some examples::\n\n    a1     # column a row 1\n    a1:a2  # column a, rows 1-2\n    a      # entire column a, rows unbounded\n    a:a    # entire column a, rows unbounded\n    a:c    # entire columns a through c\n    a:b100 # columns a and b, unbounded start through row 100\n    a100:b # columns a and b, from row 100 with unbounded end \n    1:3    # entire rows 1 through 3, all columns\n    1      # entire row 1\n\n\nretrieving, comparing, and composing cellformats\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na google spreadsheet's own default format, as a cellformat object, is available via ``get_default_format(spreadsheet)``.\n``get_effective_format(worksheet, label)`` and ``get_user_entered_format(worksheet, label)`` also will return\nfor any provided cell label either a cellformat object (if any formatting is present) or none.\n\n``cellformat`` objects are comparable with ``==`` and ``!=``, and are mutable at all times; \nthey can be safely copied with python's ``copy.deepcopy`` function. ``cellformat`` objects can be combined\ninto a new ``cellformat`` object using the ``add`` method (or ``+`` operator). ``cellformat`` objects also offer \n``difference`` and ``intersection`` methods, as well as the corresponding\noperators ``-`` (for difference) and ``&`` (for intersection).::\n\n    >>> default_format = cellformat(backgroundcolor=color(1,1,1), textformat=textformat(bold=true))\n    >>> user_format = cellformat(textformat=textformat(italic=true))\n    >>> effective_format = default_format + user_format\n    >>> effective_format\n    cellformat(backgroundcolor=color(1,1,1), textformat=textformat(bold=true, italic=true))\n    >>> effective_format - user_format \n    cellformat(backgroundcolor=color(1,1,1), textformat=textformat(bold=true))\n    >>> effective_format - user_format == default_format\n    true\n\nfrozen rows and columns\n~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following functions get or set \"frozen\" row or column counts for a worksheet::\n\n    get_frozen_row_count(worksheet)\n    get_frozen_column_count(worksheet)\n    set_frozen(worksheet, rows=1)\n    set_frozen(worksheet, cols=1)\n    set_frozen(worksheet, rows=1, cols=0)\n\nsetting row heights and column widths\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following functions set the height (in pixels) of rows or width (in pixels) of columns::\n\n    set_row_height(worksheet, 1, 42)\n    set_row_height(worksheet, '1:100', 42)\n    set_row_heights(worksheet, [ ('1:100', 42), ('101:', 22) ])\n    set_column_width(worksheet, 'a', 190)\n    set_column_width(worksheet, 'a:d', 100)\n    set_column_widths(worksheet, [ ('a', 200), ('b:', 100) ])\n\nworking with right-to-left language alphabets\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following example shows the functions to get or set the `righttoleft` property of a worksheet:\n\n    get_right_to_left(worksheet)\n    set_right_to_left(worksheet, true)\n\nalso note the presence of the argument `textdirection=` to `cellformat`: set it to `'right_to_left'`\nin order to use right-to-left text in an individual cell in an otherwise left-to-right worksheet.\n\ngetting and setting data validation rules for cells and cell ranges\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following functions get or set the \"data validation rule\" for a cell or cell range::\n\n    get_data_validation_rule(worksheet, label)\n    set_data_validation_for_cell_range(worksheet, range, rule)\n    set_data_validation_for_cell_ranges(worksheet, ranges)\n\nthe full functionality of data validation rules is supported: all of ``booleancondition``. \nsee `the api documentation <https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#datavalidationrule>`_\nfor more information. here's a short example::\n\n    validation_rule = datavalidationrule(\n        booleancondition('one_of_list', ['1', '2', '3', '4']),\n        showcustomui=true\n    )\n    set_data_validation_for_cell_range(worksheet, 'a2:d2', validation_rule)\n    # data validation for a2\n    eff_rule = get_data_validation_rule(worksheet, 'a2')\n    eff_rule.condition.type\n    >>> 'one_of_list'\n    eff_rule.showcustomui\n    >>> true\n    # no data validation for a1\n    eff_rule = get_data_validation_rule(worksheet, 'a1')\n    eff_rule\n    >>> none\n    # clear data validation rule by using none\n    set_data_validation_for_cell_range(worksheet, 'a2', none)\n    eff_rule = get_data_validation_rule(worksheet, 'a2')\n    eff_rule\n    >>> none\n\n\nformatting a worksheet using a pandas dataframe\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nif you are using pandas dataframes to provide data to a google spreadsheet -- using perhaps\nthe ``gspread-dataframe`` package `available on pypi <https://pypi.org/project/gspread-dataframe/>`_ --\nthe ``format_with_dataframe`` function in ``gspread_formatting.dataframe`` allows you to use that same \ndataframe object and specify formatting for a worksheet. there is a ``default_formatter`` in the module,\nwhich will be used if no formatter object is provided to ``format_with_dataframe``::\n\n    from gspread_formatting.dataframe import format_with_dataframe, basicformatter\n    from gspread_formatting import color\n\n    # uses default_formatter\n    format_with_dataframe(worksheet, dataframe, include_index=true, include_column_header=true)\n\n    formatter = basicformatter(\n        header_background_color=color(0,0,0), \n        header_text_color=color(1,1,1),\n        decimal_format='#,##0.00'\n    )\n\n    format_with_dataframe(worksheet, dataframe, formatter, include_index=false, include_column_header=true)\n\n\nbatch mode for api call efficiency\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthis package offers a \"batch updater\" object, with methods having the same names and parameters as the \nformatting functions in the package. the batch updater will gather all formatting requests generated \nby calling these methods, and send them all to the google sheets api in a single ``batchupdate`` \nrequest when ``.execute()`` is invoked on the batch updater. alternately, you can use the batch updater\nas a context manager in a ``with:`` block, which will automate the call to ``.execute()``::\n\n    from gspread_formatting import batch_updater\n\n    sheet = some_gspread_worksheet\n\n    # option 1: call execute() directly\n    batch = batch_updater(sheet.spreadsheet)\n    batch.format_cell_range(sheet, '1', cellformat(textformat=textformat(bold=true)))\n    batch.set_row_height(sheet, '1', 32)\n    batch.execute()\n\n    # option 2: use with: block\n    with batch_updater(sheet.spreadsheet) as batch:\n        batch.format_cell_range(sheet, '1', cellformat(textformat=textformat(bold=true)))\n        batch.set_row_height(sheet, '1', 32)\n\n\nconditional format rules\n~~~~~~~~~~~~~~~~~~~~~~~~\n\na conditional format rule allows you to specify a cell format that (additively) applies to cells in certain ranges\nonly when the value of the cell meets a certain condition. \nthe `conditionalformatrule documentation <https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#conditionalformatrule>`_ for the sheets api describes the two kinds of rules allowed:\na ``booleanrule`` in which the `cellformat` is applied to the cell if the value meets the specified boolean\ncondition; or a ``gradientrule`` in which the ``color`` or ``colorstyle`` of the cell varies depending on the numeric\nvalue of the cell or cells. \n\nyou can specify multiple rules for each worksheet present in a google spreadsheet. to add or remove rules,\nuse the ``get_conditional_format_rules(worksheet)`` function, which returns a list-like object which you can\nmodify as you would modify a list, and then call ``.save()`` to store the rule changes you've made.\n\nhere is an example that applies bold text and a bright red color to cells in column a if the cell value\nis numeric and greater than 100::\n\n    from gspread_formatting import *\n\n    worksheet = some_spreadsheet.worksheet('my worksheet')\n\n    rule = conditionalformatrule(\n        ranges=[gridrange.from_a1_range('a1:a2000', worksheet)],\n        booleanrule=booleanrule(\n            condition=booleancondition('number_greater', ['100']), \n            format=cellformat(textformat=textformat(bold=true), backgroundcolor=color(1,0,0))\n        )\n    )\n\n    rules = get_conditional_format_rules(worksheet)\n    rules.append(rule)\n    rules.save()\n\n    # or, to replace any existing rules with just your single rule:\n    rules.clear()\n    rules.append(rule)\n    rules.save()\n\nan important note: a ``conditionalformatrule`` is, like all other objects provided by this package,\nmutable in all of its fields. mutating a ``conditionalformatrule`` object in place will not automatically\nstore the changes via the sheets api; but calling `.save()` on the list-like rules object will store\nthe mutated rule as expected.\n\n\ninstallation\n------------\n\nrequirements\n~~~~~~~~~~~~\n\n* python 2.7, 3.x; pypy and pypy3\n* gspread >= 3.0.0\n\nfrom pypi\n~~~~~~~~~\n\n::\n\n    pip install gspread-formatting\n\nfrom github\n~~~~~~~~~~~\n\n::\n\n    git clone https://github.com/robin900/gspread-formatting.git\n    cd gspread-formatting\n    python setup.py install\n\ndevelopment and testing\n-----------------------\n\ninstall packages listed in ``requirements-dev.txt``. to run the test suite\nin ``test.py`` you will need to:\n\n* authorize as the google account you wish to use as a test, and download\n  a json file containing the credentials. name the file ``creds.json``\n  and locate it in the top-level folder of the repository.\n* set up a ``tests.config`` file using the ``tests.config.example`` file as a template.\n  specify the id of a spreadsheet that the google account you are using\n  can access with write privileges.\n\n\n",
  "docs_url": null,
  "keywords": "spreadsheets,google-spreadsheets,formatting,cell-format",
  "license": "mit",
  "name": "gspread-formatting",
  "package_url": "https://pypi.org/project/gspread-formatting/",
  "project_url": "https://pypi.org/project/gspread-formatting/",
  "project_urls": {
    "Homepage": "https://github.com/robin900/gspread-formatting"
  },
  "release_url": "https://pypi.org/project/gspread-formatting/1.1.2/",
  "requires_dist": [
    "gspread (>=3.0.0)"
  ],
  "requires_python": "",
  "summary": "complete google sheets formatting support for gspread worksheets",
  "version": "1.1.2",
  "releases": [],
  "developers": [
    "robin_thomas",
    "rthomas900@gmail.com"
  ],
  "kwds": "gspread_formatting some_gspread_worksheet formatter formatting format",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gspread_formatting",
  "homepage": "https://github.com/robin900/gspread-formatting",
  "release_count": 35,
  "dependency_ids": [
    "pypi_gspread"
  ]
}
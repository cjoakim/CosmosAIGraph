{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# primes from module primepy\nthis module contains several useful functions to work with prime numbers. for example, extracting all the prime factors (with multiplicity) of a positive integer reasonably fast. following the list of all functions and their running time.\n\n## getting started\ndownload the file primes.py and place it in the same directory where your python is installed. or, simply run the command \n```\n>>>pip install primepy\n```\nto install the package. after installing via `pip` you can call it by \n```\n>>>from primepy import primes\n```\n and then execute the available methods.\n\n## available methods\nyou may run `primes.about()` afer importing the package. the following is a list of all included methods.\n\n\n`primes.check(n)` returns *true* if *n* is a prime number.<br />\n`primes.factor(n)` returns the lowest prime factor of *n*. <br />\n`primes.facors(n)` returns all the prime factors of *n* with multiplicity.<br />\n`primes.first(n)` returns first *n* many prime. <br />\n`primes.upto(n)` returns all the prime less than or equal to *n*. <br />\n`primes.between(m,n)` returns all the prime between *m* and *n*. <br />\n`primes.phi(n)` returns the euler's *phi(n)* i.e., the number of integers less than *n* which have no common factor with *n*. <br />\n\n\n## demonstration\n\nthis program is tested on my personal laptop with the following configurations.\n\n>processor: intel(r) core(tm) i3-4030u cpu @ 1.90ghz<br/>\n>installed memory(ram): 6.00gb <br/>\n>system type: 64 bit operating system, x64-based processor<br/>\n>operating system: windows 10\n\n### small numbers\nall the following commands returnd results in less than *1 sec*.\n\n```\n>>> primes.check(56156149)\nfalse\n>>> primes.check(79012338765433)\ntrue\n```\n\n```\n>>> primes.factor(7568945625)\n3\n>>> primes.factor(5141)\n53\n```\n\n```\n>>> primes.factors(252)\n[2, 2, 3, 3, 7]\n>>> primes.factors(44410608)\n[2, 2, 2, 2, 3, 3, 11, 23, 23, 53]\n```\n\n```\n>>> primes.first(7)\n[2, 3, 5, 7, 11, 13, 17]\n>>> primes.first(37)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157]\n>>> primes.first(5000)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\n. . . . \n. . . .\n 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611]\n```\noutcomes from the last command is truncated.\n\n```\n>>> primes.upto(16)\n[2, 3, 5, 7, 11, 13]\n>>> primes.upto(50000)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179\n. . .\n. . .\n49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919,\n49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999]\n```\n\n```\n>>> primes.between(100,200)\n[101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n>>> primes.between(100000,500000)\n[100003, 100019, 100043, 100049, 100057, 100069, 100103, 100109, 100129, 100151, 100153,\n100169, 100183, 100189, 100193, 100207, 100213, 100237, 100267, 100271, 100279, 100291\n\n499661, 499663, 499669, 499673, 499679, 499687, 499691, 499693, 499711, 499717, 499729, 499739, 499747, 499781, 499787, 499801, 499819, 499853, 499879, 499883, 499897, 499903, 499927, 499943, 499957, 499969, 499973, 499979]\n```\n\n```\n>>> primes.phi(128)\n64\n>>> primes.phi(561534567567457)\n483618287856960\n```\n### a little bigger numbers\n\nall the following commands returned results in less than *5 secs*.\n\n```\n>>> primes.factors(2910046587320501324077792713140104371205630933992706145011)\n[239, 701, 709, 1997, 1997, 3889, 5171, 5171, 6983, 10009, 4940867, 45845791, 3731292319]\n```\n\n```\n>>> primes.first(10000)[9999]\n104729\n```\nthe last command returns the 10000th prime.\n\n## suggestions\nfeel free to drop your suggestion at the following email address<br/>\n>author: indrajit jana<br/>\n>email: ijana at temple dot edu\n\n\n\n\n\n",
  "docs_url": null,
  "keywords": "fast,prime,facorization,eular phi,prime check",
  "license": "",
  "name": "primepy",
  "package_url": "https://pypi.org/project/primePy/",
  "project_url": "https://pypi.org/project/primePy/",
  "project_urls": {
    "Homepage": "https://github.com/janaindrajit/primePy"
  },
  "release_url": "https://pypi.org/project/primePy/1.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "this module contains several useful functions to work with prime numbers. from primepy import primes",
  "version": "1.3",
  "releases": [],
  "developers": [
    "ijana@temple.edu",
    "indrajit_jana"
  ],
  "kwds": "primepy primes prime python factors",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_primepy",
  "homepage": "https://github.com/janaindrajit/primepy",
  "release_count": 3,
  "dependency_ids": []
}
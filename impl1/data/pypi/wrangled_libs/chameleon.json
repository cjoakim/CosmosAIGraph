{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "overview\n========\n\nchameleon is an html/xml template engine for `python\n<http://www.python.org>`_. it uses the *page templates* language.\n\nyou can use it in any python application with just about any\nversion of python (3.8+ and up, plus `pypy 3\n<http://pypy.org>`_).\n\nvisit the `documentation <https://chameleon.readthedocs.io/en/latest/>`_\nfor more information.\n\nlicense and copyright\n---------------------\n\nthis software is made available as-is under a bsd-like license [1]_\n(see included copyright notice).\n\n\nnotes\n-----\n\n.. [1] this software is licensed under the `repoze\n       <http://repoze.org/license.html>`_ license.\n\n\nchanges\n=======\n\n4.4.2 (2023-12-18)\n------------------\n\n- fix brown bag release.\n\n\n4.4.1 (2023-12-18)\n------------------\n\n- fix brown bag release.\n\n\n4.4.0 (2023-12-12)\n------------------\n\n- add optional parameter ``package_name`` which allows loading a\n  template relative to a package.\n\n- drop support for python 3.7.\n\n- fix regression where chameleon would not load templates correctly on\n  windows.\n\n- fix names of dependencies for ``importlib_resources`` and\n  ``importlib_metadata``.\n  (`#394 <https://github.com/malthe/chameleon/pull/394>`_)\n\n\n4.3.0 (2023-12-04)\n------------------\n\n- local variable scope is now iterable, completing dict interface.\n  (`#390 <https://github.com/malthe/chameleon/pull/390>`_)\n\n- minor optimizations to rendering logic.\n\n- implicit translation now provides the translation context, domain,\n  and target language to the translation function (if applicable). previously,\n  the target language was provided, but this did not respect a change via\n  `i18n:target`.\n  (`#369 <https://github.com/malthe/chameleon/issues/369>`_)\n\n- replace ``pkg_resources`` with newer and faster ``importlib.resources`` and\n  ``importlib.metadata``. just importing ``pkg_resources`` becomes slower and\n  slower the more packages are installed.\n\n\n4.2.0 (2023-09-25)\n------------------\n\n- an xml document provided as a string (i.e. decoded) now correctly\n  has its content encoding parsed.\n\n- boolean attributes are now automatically configured for templates in\n  non-xml mode, presuming that we're being used to generate html.\n\n  this means that the same loading mechanism can be used for both xml-\n  and html-based templates.\n\n\n4.1.0 (2023-08-29)\n------------------\n\n- boolean attributes (those configured using the optional\n  `boolean_attributes` parameter) now work with $-expression\n  interpolation.\n\n  unlike content and regular attributes, a special check for a falsy\n  value is now done for boolean attributes, such that boolean logic\n  can be used for interpolation expressions (only a truthy value will\n  include the attribute).\n\n  this reverts a change in behavior introduced in 3.8.0.\n\n  additionally, dynamic attributes now respect the boolean attributes\n  configuration as well.\n\n4.0.1 (2023-06-19)\n------------------\n\n- fix format spec applying for f-strings.\n  (`#376 <https://github.com/malthe/chameleon/issues/376>`_)\n\n4.0.0 (2023-03-06)\n------------------\n\n- drop support for python 2.7, 3.5, 3.6.\n\n- add support for set- and dict comprehensions\n  (`#367 <https://github.com/malthe/chameleon/issues/367>`_)\n\n- remove the following functions resp. modules:\n\n  + ``.utils.text_()``\n  + ``.utils.unescape()``\n  + ``.compat``\n\n\n3.10.2 (2022-12-16)\n-------------------\n\n- fix handling of eager compilation with subclassing (e.g. pyramid integration).\n\n3.10.1 (2022-05-17)\n-------------------\n\n- fix __str__ method of chameleon.exc.templateerror\n  (`#356 <https://github.com/malthe/chameleon/issues/356>`_)\n\n3.10.0 (2022-04-06)\n-------------------\n\n- make scope class dict-like\n  (`#305 <https://github.com/malthe/chameleon/issues/305>`_)\n\n- work in fips enabled environments\n  (`#345 <https://github.com/malthe/chameleon/issues/345>`_)\n\n- fix tab handling issue\n  (`#350 <https://github.com/malthe/chameleon/issues/350>`_)\n\n3.9.1 (2021-05-14)\n------------------\n\n- avoid various traceback reference cycles.\n\n3.9.0 (2021-02-26)\n------------------\n\n- removed compatibility code for unsupported python versions\n\n- dropped support for obsolete python 3.4\n\n- fixed namespace handling when redefining a variable in the same ``tal:define``\n  (`#237 <https://github.com/malthe/chameleon/issues/237>`_)\n\n- fixed failure computing a template's digest if ``template.filename`` is none\n  (`#254 <https://github.com/malthe/chameleon/issues/254>`_)\n\n3.8.1 (2020-07-06)\n------------------\n\n- added code optimization to reduce sequential appends of static text.\n\n- the `default` symbol in dynamic attributes is now\n  symbolic. previously, it was assigned the string value of the\n  default attribute text. a similar change has been made for\n  switch/case expressions.\n\n- the built-in `attrs` dictionary of static element attributes now\n  correctly works with `tal:define`, etc.\n\n- fix slice code generation compatibility issue on python 3.9.\n\n3.8.0 (2020-06-25)\n------------------\n\n- expose default marker as importable symbol\n  `chameleon.tales.default_marker`.\n\n- removed legacy flag `literal_false`. to get a similar behavior, use\n  `boolean_attributes`.\n\n3.7.4 (2020-06-17)\n------------------\n\n- fix brown-bag release.\n\n3.7.3 (2020-06-17)\n------------------\n\n- fix regression introduced in 3.6.2 where the default marker would\n  incorrectly change its value between templates, causing issues in\n  software which depends on the value being treated as a global\n  object.\n\n3.7.2 (2020-05-31)\n------------------\n\n- allow setting a custom value representation function, allowing\n  custom formatting of variables during exception formatting.\n\n3.7.1 (2020-05-10)\n------------------\n\n- fix compatibility issue with python 3.9.\n\n\n3.7.0 (2020-03-26)\n------------------\n\n- fixed garbage collection issue with variable scope objects (issue #301).\n\n- fixed issue where setting a global variable would not be available\n  locally.\n\n- a `repeatdict` no longer inherits from `dict` since it does not\n  actually provide that interface in a meaningful way.\n\n- added feature gate `enable_comment_interpolation` which controls\n  whether expression interpolation is enabled inside html comments\n  (default is enabled).\n\n- added support for python 3.6+ f-strings (issue #294).\n\n3.6.2 (2019-06-22)\n------------------\n\n- fix syntaxwarnings in python 3.8 resulting from comparing literals with 'is'.\n  see https://github.com/plone/products.cmfplone/issues/2890.\n\n3.6.1 (2019-04-01)\n------------------\n\n- fix limited search expression for illegal double hyphens in html\n  comments to fix issue #289.\n\n3.6 (2019-02-19)\n----------------\n\n- exclude `runtimeerror` (or `recursionerror` when available) from\n  exception wrapping.\n\n- fix double dollar '$$' escaping such that a double dollar is always\n  resolved, either as an interpolation expression, or as an escape\n  where it is substituted by a single dollar symbol. this is now\n  consistent with zope's handling of this character.\n\n  backslash-escaping of dollar-based string interpolation is no longer\n  supported. the documentation has been updated to reflect this\n  change.\n\n  this fixes issue #283. note that this reverses some of the changes\n  introduced to fix issue #265.\n\n- drop support for python 3.3.\n\n3.5 (2018-10-17)\n----------------\n\n- add support for python 3.8.\n\n- add support for tal attributes in an xml declaration tag. this fixes\n  issue #269.\n\n- add support for custom exception handling for the `tal:on-error`\n  statement. there is now an option `on_error_handler` available\n  as a template configuration (issue #266).\n\n- fix issue where double '$$' escaping would affect non-interpolation\n  expressions such as the bare '$$' (issue #265).\n\n- fix an issue where backslash dollar escaping would leave the\n  backslash character still in place.\n\n3.4 (2018-07-14)\n----------------\n\nbugfixes:\n\n- fix regression with translations in case of multiple nodes.\n\n\n3.3 (2018-05-23)\n----------------\n\nbugfixes:\n\n- reset error token when rendering internal macro calls.\n\n- fix edge case in exception handler causing recursion.\n  [matthewwilkes]\n\n\n3.2 (2017-10-06)\n----------------\n\nfeatures:\n\n- add the automatic variable ``macroname`` that's bound to the name of\n  the executing macro. fixes https://github.com/malthe/chameleon/issues/238\n\n- a tokenizer can now be configured on the template class. this is\n  useful in the case where the template file input is modified before\n  parsing (for example, where some tags are stripped away) such that\n  token positions need to be offset accordingly for error locations to\n  be rendered correctly.\n\n- expression errors now display source marker (previously only\n  filename, line and column was shown).\n\n- no longer require python source files to import modules.\n  [mrh1997]\n\noptimizations:\n\n- exception tracking now defers metadata allocation to time of error.\n\n\n3.1 (2017-02-21)\n----------------\n\nfeatures:\n\n- add option ``restricted_namespace`` which controls whether to\n  restrict namespaces to those defined and used by the page template\n  language.\n  [hansroh]\n\nbugs:\n\n- fixed attribute html entity escaping issue where an entity such as\n  ``&amp;`` would be encoded twice.\n\noptimizations:\n\n- simplify exception tracking, reducing bytecode size significantly.\n\n- avoid checking if a static string is ``none`` during expression\n  interpolation.\n\n\n3.0 (2016-12-07)\n----------------\n\nbugs:\n\n- fix issue on python 2 where an exception was not cleared when using\n  the pipe operator and was thus accessible through `sys.exc_info()`.\n\n- the \"exists\" expression no longer leaks error information.\n\n- escape '$$' into '$' in both content and string expressions.\n\n- fix use of macro definition inside translation block.\n\nimprovements:\n\n- allow unquoted attribute values.\n\n- wrap attribute error thrown when trying to use a non-macro as a\n  macro as a `rendererror` to get proper error output.\n\n- throw a parse error if '--' (double hyphen) appears in an xml\n  comment.\n\n- the `i18n:target` attribute now overrides a default\n  `target_language` variable and is passed to the translation\n  function.\n\n- include filename in the on-disk cache module name. previously,\n  only the sha digest in hex representation would be used, making\n  it difficult to see where the module came from. this fixes issue\n  #132.\n\n- add support for non-ascii attribute names.\n  [sank]\n\ncompatibility:\n\n- drop support for python 2.6, 3.1, and 3.2.\n\n\n2.25 (2016-09-24)\n-----------------\n\n- add explicit support / testing for python 3.5.\n\n- add ``\\r`` to negative regex matches to the chameleon parser, where ``\\n`` is used but ``\\r`` was missing.\n  fixes a case, where the tag name was parsed into ``html\\r`` instead of ``html``.\n  fixes: https://github.com/malthe/chameleon/issues/219\n\n\n2.24 (2015-10-28)\n-----------------\n\n- fixed python 3.5 compatibility.\n\n- fixed brown bag release.\n\n\n2.23 (2015-10-26)\n-----------------\n\n- added ``enable_data_attributes`` option that allows using html5 data\n  attributes as control attributes instead or in addition to xml\n  namespace attributes.\n\n\n2.22 (2015-02-06)\n-----------------\n\n- fix brown bag release.\n\n\n2.21 (2015-02-06)\n-----------------\n\n- added ``rendererror`` exception which indicates that an error\n  occurred during the evaluation of an expression.\n\n- clean up ``templateerror`` exception implementation.\n\n\n2.20 (2015-01-12)\n-----------------\n\n- pass ``search_path`` to template class when loaded using\n  ``templateloader`` (or one of the derived classes).\n  [faassen]\n\n\n2.19 (2015-01-06)\n-----------------\n\n- fix logging deprecation.\n\n- fix environment-based configuration logging error.\n\n\n2.18 (2014-11-03)\n-----------------\n\n- fix minor compilation error.\n\n\n2.17 (2014-11-03)\n-----------------\n\n- add support for ``i18n:context``.\n  [wiggy]\n\n- add missing 'parity' repeat property.\n  [voxspox]\n\n- don't modify environment when getting variables from it.\n  [fschulze]\n\n\n2.16 (2014-05-06)\n-----------------\n\n- if a repeat expression evaluates to ``none`` then it is now\n  equivalent to an empty set.\n\n  this changes a behavior introduced in 2.14.\n\n  this fixes issue #172.\n\n- remove fossil test dependency on deprecated ``distribute``.\n\n- add explicit support / testing for python 3.3 / 3.4.\n\n- drop explicit support for python 2.5 (out of maintenance, and no longer\n  supported by ``tox`` or ``travis-ci``).\n\n\n2.15 (2014-03-11)\n-----------------\n\n- add support for python 3.4's ``nameconstant``.\n  [brakhane]\n\n\n2.14 (2013-11-28)\n-----------------\n\n- element repetition using the ``tal`` namespace no longer includes\n  whitespace. this fixes issue #110.\n\n- use absolute import for ``chameleon.interfaces`` module. this fixes\n  issue #161.\n\n\n2.13-1 (2013-10-24)\n-------------------\n\n- fixing brown bag release.\n\n2.13 (2013-10-21)\n-----------------\n\nbugfixes:\n\n- the template cache mechanism now includes additional configuration\n  settings as part of the cache key such as ``strict`` and\n  ``trim_attribute_space``.\n  [ossmkitty]\n\n- fix cache issue where sometimes cached templates would not load\n  correctly.\n  [ossmkitty]\n\n- in debug-mode, correctly remove temporary files when the module\n  loader is garbage-collected (on ``__del__``).\n  [graffic]\n\n- fix error message when duplicate i18n:name directives are used in a\n  translation.\n\n- using the three-argument form of ``getattr`` on a\n  ``chameleon.tal.repeatdict`` no longer raises ``keyerror``,\n  letting the default provided to ``getattr`` be used. this fixes\n  attempting to adapt a ``repeatdict`` to a zope interface under\n  pypy.\n\n2.12 (2013-03-26)\n-----------------\n\nchanges:\n\n- when a ``tal:case`` condition succeeds, no other case now will.\n\nbugfixes:\n\n- implicit translation now correctly extracts and normalizes complete\n  sentences, instead of words.\n  [witsch]\n\n- the ``default`` symbol in a ``tal:case`` condition now allows the\n  element only if no other case succeeds.\n\n\n2.11 (2012-11-15)\n-----------------\n\nbugfixes:\n\n- an issue was resolved where a metal statement was combined with a\n  ``tal:on-error`` handler.\n\n- fix minor parser issue with incorrectly formatted processing\n  instructions.\n\n- provide proper error handling for python inline code blocks.\n\nfeatures:\n\n- the simple translation function now supports the\n  ``translationstring`` interface.\n\noptimizations:\n\n- minor optimization which correctly detects when an element has no\n  attributes.\n\n\n2.10 (2012-10-12)\n-----------------\n\ndeprecations:\n\n- the ``fast_translate`` function has been deprecated. instead, the\n  default translation function is now always a function that simply\n  interpolates the mapping onto the message default or id.\n\n  the motivation is that since version 2.9, the ``context`` argument\n  is non-trivial: the ``econtext`` mapping is passed. this breaks an\n  expectation on the zope platform that the ``context`` parameter is\n  the http request. previously, with chameleon this parameter was\n  simply not provided and so that did not cause issues as such.\n\n- the ``ast24`` module has been renamed to ``ast25``. this should help\n  clear up any confusion that chameleon 2.x might be support a python\n  interpreter less than version 2.5 (it does not).\n\nfeatures:\n\n- the ``proxyexpr`` expression class (and hence the ``load:``\n  expression type) is now a tales-expression. in practical terms, this\n  means that the expression type (which computes a string result using\n  the standard ``\"${...}\"`` interpolation syntax and proxies the\n  result through a function) now supports fallback using the pipe\n  operator (``\"|\"``). this fixes issue #128.\n\n- an attempt to interpolate using the empty string as the expression\n  (i.e. ``${}``) now does nothing: the string ``${}`` is simply output\n  as is.\n\n- added support for adding, modifying, and removing attributes using a\n  dictionary expression in ``tal:attributes`` (analogous to genshi's\n  ``py:attrs`` directive)::\n\n    <div tal:attributes=\"name value; attrs\" />\n\n  in the example above, ``name`` is an identifier, while ``value`` and\n  ``attrs`` are python expressions. however, ``attrs`` must evaluate\n  to a python dictionary object (more concisely, the value must\n  implement the dictionary api-methods ``update()`` and ``items()``).\n\noptimizations:\n\n- in order to cut down on the size of the compiled function objects,\n  some conversion and quoting statements have been put into\n  functions. in one measurement, the reduction was 35%. the benchmark\n  suite does *not* report of an increased render time (actually\n  slightly decreased).\n\nbugfixes:\n\n- an exception is now raised if a trivial string is passed for\n  ``metal:fill-slot``. this fixes issue #89.\n\n- an empty string is now never translated. not really a bug, but it's\n  been reported in as an issue (#92) because some translation\n  frameworks handle this case incorrectly.\n\n- the template module loader (file cache) now correctly encodes\n  generated template source code as utf-8. this fixes issue #125.\n\n- fixed issue where a closure might be reused unsafely in nested\n  template rendering.\n\n- fixed markup class ``__repr__`` method. this fixes issue #124.\n\n- added missing return statement to fix printing the non-abbreviated\n  filename in case of an exception.\n  [tomo]\n\n2.9.2 (2012-06-06)\n------------------\n\nbugfixes:\n\n- fixed a pypy incompatibility.\n\n- fixed issue #109 which caused testing failures on some platforms.\n\n2.9.1 (2012-06-01)\n------------------\n\nbugfixes:\n\n- fixed issue #103. the ``tal:on-error`` statement now always adds an\n  explicit end-tag to the element, even with a substitution content of\n  nothing.\n\n- fixed issue #113. the ``tal:on-error`` statement now works correctly\n  also for dynamic attributes. that is, the fallback tag now includes\n  only static attributes.\n\n- fixed name error which prevented the benchmark from running\n  correctly.\n\ncompatibility:\n\n- fixed deprecation warning on python 3 for zope interface implements\n  declaration. this fixes issue #116.\n\n2.9.0 (2012-05-31)\n------------------\n\nfeatures:\n\n- the translation function now gets the ``econtext`` argument as the\n  value for ``context``. note that historically, this was usually an\n  http request which might provide language negotiation data through a\n  dictionary interface.\n  [alvinyue]\n\nbugfixes:\n\n- fixed import alias issue which would lead to a syntax error in\n  generated python code. fixes issue #114.\n\n2.8.5 (2012-05-02)\n------------------\n\nbugfixes:\n\n- fixed minor installation issues on python 2.5 and 3.\n  [ppaez]\n\n- ensure output is unicode even when trivial (an empty string).\n\n2.8.4 (2012-04-18)\n------------------\n\nfeatures:\n\n- in exception output, long filenames are now truncated to 60\n  characters of output, preventing line wrap which makes it difficult\n  to scan the exception output.\n\nbugfixes:\n\n- include filename and location in exception output for exceptions\n  raised during compilation.\n\n- if a trivial translation substitution variable is given (i.e. an\n  empty string), simply ignore it. this fixes issue #106.\n\n2.8.3 (2012-04-16)\n------------------\n\nfeatures:\n\n- log template source on debug-level before cooking.\n\n- the `target_language` argument, if given, is now available as a\n  variable in templates.\n\n2.8.2 (2012-03-30)\n------------------\n\nfeatures:\n\n- temporary caches used in debug mode are cleaned up eagerly, rather\n  than waiting for process termination.\n  [mitchellrj]\n\nbugfixes:\n\n- the `index`, `start` and `end` methods on the tal repeat object are\n  now callable. this fixes an incompatibility with zpt.\n\n- the loader now correctly handles absolute paths on windows.\n  [rdale]\n\n2.8.1 (2012-03-29)\n------------------\n\nfeatures:\n\n- the exception formatter now lists errors in 'wrapping order'. this\n  means that the innermost, and presumably most relevant exception is\n  shown last.\n\nbugfixes:\n\n- the exception formatter now correctly recognizes nested errors and\n  does not rewrap the dynamically generated exception class.\n\n- the exception formatter now correctly sets the ``__module__``\n  attribute to that of the original exception class.\n\n2.8.0 (2012-02-29)\n------------------\n\nfeatures:\n\n- added support for code blocks using the `<?python ... ?>` processing\n  instruction syntax.\n\n  the scope is name assignments is up until the nearest macro\n  definition, or the template itself if macros are not used.\n\nbugfixes:\n\n- fall back to the exception class' ``__new__`` method to safely\n  create an exception object that is not implemented in python.\n\n- the exception formatter now keeps track of already formatted\n  exceptions, and ignores them from further output.\n\n2.7.4 (2012-02-27)\n------------------\n\n- the error handler now invokes the ``__init__`` method of\n  ``baseexception`` instead of the possibly overridden method (which\n  may take required arguments). this fixes issue #97.\n  [j23d, malthe]\n\n2.7.3 (2012-01-16)\n------------------\n\nbugfixes:\n\n- the trim whitespace option now correctly trims actual whitespace to\n  a single character, appearing either to the left or to the right of\n  an element prefix or suffix string.\n\n2.7.2 (2012-01-08)\n------------------\n\nfeatures:\n\n- added option ``trim_attribute_space`` that decides whether attribute\n  whitespace is stripped (at most down to a single space). this option\n  exists to provide compatibility with the reference\n  implementation. fixes issue #85.\n\nbugfixes:\n\n- ignore unhashable builtins when generating a reverse builtin\n  map to quickly look up a builtin value.\n  [malthe]\n\n- apply translation mapping even when a translation function is not\n  available. this fixes issue #83.\n  [malthe]\n\n- fixed issue #80. the translation domain for a slot is defined by the\n  source document, i.e. the template providing the content for a slot\n  whether it be the default or provided through ``metal:fill-slot``.\n  [jcbrand]\n\n- in certain circumstances, a unicode non-breaking space character would cause\n  a define clause to fail to parse.\n\n2.7.1 (2011-12-29)\n------------------\n\nfeatures:\n\n- enable expression interpolation in cdata.\n\n- the page template class now implements dictionary access to macros::\n\n     template[name]\n\n  this is a short-hand for::\n\n     template.macros[name]\n\nbugfixes:\n\n- an invalid define clause would be silently ignored; we now raise a\n  language error exception. this fixes issue #79.\n\n- fixed regression where ``${...}`` interpolation expressions could\n  not span multiple lines. this fixes issue #77.\n\n2.7.0 (2011-12-13)\n------------------\n\nfeatures:\n\n- the ``load:`` expression now derives from the string expression such\n  that the ``${...}`` operator can be used for expression\n  interpolation.\n\n- the ``load:`` expression now accepts asset specs; these are resolved\n  by the ``pkg_resources.resource_filename`` function::\n\n    <package_name>:<path>\n\n  an example from the test suite::\n\n    chameleon:tests/inputs/hello_world.pt\n\nbugfixes:\n\n- if an attribute name for translation was not a valid python\n  identifier, the compiler would generate invalid code. this has been\n  fixed, and the compiler now also throws an exception if an attribute\n  specification contains a comma. (note that the only valid separator\n  character is the semicolon, when specifying attributes for\n  translation via the ``i18n:translate`` statement). this addresses\n  issue #76.\n\n2.6.2 (2011-12-08)\n------------------\n\nbugfixes:\n\n- fixed issue where ``tal:on-error`` would not respect\n  ``tal:omit-tag`` or namespace elements which are omitted by default\n  (such as ``<tal:block />``).\n\n- fixed issue where ``macros`` attribute would not be available on\n  file-based templates due to incorrect initialization.\n\n- the ``tryexcept`` and ``tryfinally`` ast nodes are not available on\n  python 3.3. these have been aliased to ``try``. this fixes issue\n  #75.\n\nfeatures:\n\n- the tal repeat item now makes a security declaration that grants\n  access to unprotected subobjects on the zope 2 platform::\n\n    __allow_access_to_unprotected_subobjects__ = true\n\n  this is required for legacy compatibility and does not affect other\n  environments.\n\n- the template object now has a method ``write(body)`` which\n  explicitly decodes and cooks a string input.\n\n- added configuration option ``loader_class`` which sets the class\n  used to create the template loader object.\n\n  the class (essentially a callable) is created at template\n  construction time.\n\n2.6.1 (2011-11-30)\n------------------\n\nbugfixes:\n\n- decode html entities in expression interpolation strings. this fixes\n  issue #74.\n\n- allow ``xml`` and ``xmlns`` attributes on tal, i18n and metal\n  namespace elements. this fixes issue #73.\n\n2.6.0 (2011-11-24)\n------------------\n\nfeatures:\n\n- added support for implicit translation:\n\n  the ``implicit_i18n_translate`` option enables implicit translation\n  of text. the ``implicit_i18n_attributes`` enables implicit\n  translation of attributes. the latter must be a set and for an\n  attribute to be implicitly translated, its lowercase string value\n  must be included in the set.\n\n- added option ``strict`` (enabled by default) which decides whether\n  expressions are required to be valid at compile time. that is, if\n  not set, an exception is only raised for an invalid expression at\n  evaluation time.\n\n- an expression error now results in an exception only if the\n  expression is attempted evaluated during a rendering.\n\n- added a configuration option ``prepend_relative_search_path`` which\n  decides whether the path relative to a file-based template is\n  prepended to the load search path. the default is ``true``.\n\n- added a configuration option ``search_path`` to the file-based\n  template class, which adds additional paths to the template load\n  instance bound to the ``load:`` expression. the option takes a\n  string path or an iterable yielding string paths. the default value\n  is the empty set.\n\nbugfixes:\n\n- exception instances now support pickle/unpickle.\n\n- an attributes in i18n:attributes no longer needs to match an\n  existing or dynamic attribute in order to appear in the\n  element. this fixes issue #66.\n\n2.5.3 (2011-10-23)\n------------------\n\nbugfixes:\n\n- fixed an issue where a nested macro slot definition would fail even\n  though there existed a parent macro definition. this fixes issue\n  #69.\n\n2.5.2 (2011-10-12)\n------------------\n\nbugfixes:\n\n- fixed an issue where technically invalid input would result in a\n  compiler error.\n\nfeatures:\n\n- the markup class now inherits from the unicode string type such that\n  it's compatible with the string interface.\n\n2.5.1 (2011-09-29)\n------------------\n\nbugfixes:\n\n- the symbol names \"convert\", \"decode\" and \"translate\" are now no\n  longer set as read-only *compiler internals*. this fixes issue #65.\n\n- fixed an issue where a macro extension chain nested two levels (a\n  template uses a macro that extends a macro) would lose the middle\n  slot definitions if slots were defined nested.\n\n  the compiler now throws an error if a nested slot definition is used\n  outside a macro extension context.\n\n2.5.0 (2011-09-23)\n------------------\n\nfeatures:\n\n- an expression type ``structure:`` is now available which wraps the\n  expression result as *structure* such that it is not escaped on\n  insertion, e.g.::\n\n    <div id=\"content\">\n       ${structure: context.body}\n    </div>\n\n  this also means that the ``structure`` keyword for ``tal:content``\n  and ``tal:replace`` now has an alternative spelling via the\n  expression type ``structure:``.\n\n- the string-based template constructor now accepts encoded input.\n\n2.4.6 (2011-09-23)\n------------------\n\nbugfixes:\n\n- the ``tal:on-error`` statement should catch all exceptions.\n\n- fixed issue that would prevent escaping of interpolation expression\n  values appearing in text.\n\n2.4.5 (2011-09-21)\n------------------\n\nbugfixes:\n\n- the ``tal:on-error`` handler should have a ``error`` variable\n  defined that has the value of the exception thrown.\n\n- the ``tal:on-error`` statement is a substitution statement and\n  should support the \"text\" and \"structure\" insertion methods.\n\n2.4.4 (2011-09-15)\n------------------\n\nbugfixes:\n\n- an encoding specified in the xml document preamble is now read and\n  used to decode the template input to unicode. this fixes issue #55.\n\n- encoded expression input on python 3 is now correctly\n  decoded. previously, the string representation output would be\n  included instead of an actually decoded string.\n\n- expression result conversion steps are now correctly included in\n  error handling such that the exception output points to the\n  expression location.\n\n2.4.3 (2011-09-13)\n------------------\n\nfeatures:\n\n- when an encoding is provided, pass the 'ignore' flag to avoid\n  decoding issues with bad input.\n\nbugfixes:\n\n- fixed pypy compatibility issue (introduced in previous release).\n\n2.4.2 (2011-09-13)\n------------------\n\nbugfixes:\n\n- fixed an issue in the compiler where an internal variable (such as a\n  translation default value) would be cached, resulting in variable\n  scope corruption (see issue #49).\n\n2.4.1 (2011-09-08)\n------------------\n\nbugfixes:\n\n- fixed an issue where a default value for an attribute would\n  sometimes spill over into another attribute.\n\n- fixed issue where the use of the ``default`` name in an attribute\n  interpolation expression would print the attribute value. this is\n  unexpected, because it's an expression, not a static text suitable\n  for output. an attribute value of ``default`` now correctly drops\n  the attribute.\n\n2.4.0 (2011-08-22)\n------------------\n\nfeatures:\n\n- added an option ``boolean_attributes`` to evaluate and render a\n  provided set of attributes using a boolean logic: if the attribute\n  is a true value, the value will be the attribute name, otherwise the\n  attribute is dropped.\n\n  in the reference implementation, the following attributes are\n  configured as boolean values when the template is rendered in\n  html-mode::\n\n      \"compact\", \"nowrap\", \"ismap\", \"declare\", \"noshade\",\n      \"checked\", \"disabled\", \"readonly\", \"multiple\", \"selected\",\n      \"noresize\", \"defer\"\n\n  note that in chameleon, these attributes must be manually provided.\n\nbugfixes:\n\n- the carriage return character (used on windows platforms) would\n  incorrectly be included in python comments.\n\n  it is now replaced with a line break.\n\n  this fixes issue #44.\n\n2.3.8 (2011-08-19)\n------------------\n\n- fixed import error that affected python 2.5 only.\n\n2.3.7 (2011-08-19)\n------------------\n\nfeatures:\n\n- added an option ``literal_false`` that disables the default behavior\n  of dropping an attribute for a value of ``false`` (in addition to\n  ``none``). this modified behavior is the behavior exhibited in\n  reference implementation.\n\nbugfixes:\n\n- undo attribute special html attribute behavior (see previous\n  release).\n\n  this turned out not to be a compatible behavior; rather, boolean\n  values should simply be coerced to a string.\n\n  meanwhile, the reference implementation does support an html mode in\n  which the special attribute behavior is exhibited.\n\n  we do not currently support this mode.\n\n2.3.6 (2011-08-18)\n------------------\n\nfeatures:\n\n- certain html attribute names now have a special behavior for a\n  attribute value of ``true`` (or ``default`` if no default is\n  defined). for these attributes, this return value will result in the\n  name being printed as the value::\n\n    <input type=\"input\" tal:attributes=\"checked true\" />\n\n  will be rendered as::\n\n    <input type=\"input\" checked=\"checked\" />\n\n  this behavior is compatible with the reference implementation.\n\n2.3.5 (2011-08-18)\n------------------\n\nfeatures:\n\n- added support for the set operator (``{item, item, ...}``).\n\nbugfixes:\n\n- if macro is defined on the same element as a translation name, this\n  no longer results in a \"translation name not allowed outside\n  translation\" error. this fixes issue #43.\n\n- attribute fallback to dictionary lookup now works on multiple items\n  (e.g. ``d1.d2.d2``). this fixes issue #42.\n\n2.3.4 (2011-08-16)\n------------------\n\nfeatures:\n\n- when inserting content in either attributes or text, a value of\n  ``true`` (like ``false`` and ``none``) will result in no\n  action.\n\n- use statically assigned variables for ``\"attrs\"`` and\n  ``\"default\"``. this change yields a performance improvement of\n  15-20%.\n\n- the template loader class now accepts an optional argument\n  ``default_extension`` which accepts a filename extension which will\n  be appended to the filename if there's not already an extension.\n\nbugfixes:\n\n- the default symbol is now ``true`` for an attribute if the attribute\n  default is not provided. note that the result is that the attribute\n  is dropped. this fixes issue #41.\n\n- fixed an issue where assignment to a variable ``\"type\"`` would\n  fail. this fixes issue #40.\n\n- fixed an issue where an (unsuccessful) assignment for a repeat loop\n  to a compiler internal name would not result in an error.\n\n- if the translation function returns the identical object, manually\n  coerce it to string. this fixes a compatibility issue with\n  translation functions which do not convert non-string objects to a\n  string value, but simply return them unchanged.\n\n2.3.3 (2011-08-15)\n------------------\n\nfeatures:\n\n- the ``load:`` expression now passes the initial keyword arguments to\n  its template loader (e.g. ``auto_reload`` and ``encoding``).\n\n- in the exception output, string variable values are now limited to a\n  limited output of characters, single line only.\n\nbugfixes:\n\n- fixed horizontal alignment of exception location info\n  (i.e. 'string:', 'filename:' and 'location:') such that they match\n  the template exception formatter.\n\n2.3.2 (2011-08-11)\n------------------\n\nbugfixes:\n\n- fixed issue where i18n:domain would not be inherited through macros\n  and slots. this fixes issue #37.\n\n2.3.1 (2011-08-11)\n------------------\n\nfeatures:\n\n- the ``builtin`` node type may now be used to represent any python\n  local or global name. this allows expression compilers to refer to\n  e.g. ``get`` or ``getitem``, or to explicit require a builtin object\n  such as one from the ``extra_builtins`` dictionary.\n\nbugfixes:\n\n- builtins which are not explicitly disallowed may now be redefined\n  and used as variables (e.g. ``nothing``).\n\n- fixed compiler issue with circular node annotation loop.\n\n2.3 (2011-08-10)\n----------------\n\nfeatures:\n\n- added support for the following syntax to disable inline evaluation\n  in a comment:\n\n    <!--? comment appears verbatim (no ${...} evaluation) -->\n\n  note that the initial question mark character (?) will be omitted\n  from output.\n\n- the parser now accepts '<' and '>' in attributes. note that this is\n  invalid markup. previously, the '<' would not be accepted as a valid\n  attribute value, but this would result in an 'unexpected end tag'\n  error elsewhere. this fixes issue #38.\n\n- the expression compiler now provides methods ``assign_text`` and\n  ``assign_value`` such that a template engine might configure this\n  value conversion to support e.g. encoded strings.\n\n  note that currently, the only client for the ``assign_text`` method\n  is the string expression type.\n\n- enable template loader for string-based template classes. note that\n  the ``filename`` keyword argument may be provided on initialization\n  to identify the template source by filename. this fixes issue #36.\n\n- added ``extra_builtins`` option to the page template class. these\n  builtins are added to the default builtins dictionary at cook time\n  and may be provided at initialization using the ``extra_builtins``\n  keyword argument.\n\nbugfixes:\n\n- if a translation domain is set for a fill slot, use this setting\n  instead of the macro template domain.\n\n- the python expression compiler now correctly decodes html entities\n  ``'gt'`` and ``'lt'``. this fixes issue #32.\n\n- the string expression compiler now correctly handles encoded text\n  (when support for encoded strings is enabled). this fixes issue #35.\n\n- fixed an issue where setting the ``filename`` attribute on a\n  file-based template would not automatically cause an invalidation.\n\n- exceptions raised by chameleon can now be copied via\n  ``copy.copy``. this fixes issue #36.\n  [leorochael]\n\n- if copying the exception fails in the exception handler, simply\n  re-raise the original exception and log a warning.\n\n2.2 (2011-07-28)\n----------------\n\nfeatures:\n\n- added new expression type ``load:`` that allows loading a\n  template. both relative and absolute paths are supported. if the\n  path given is relative, then it will be resolved with respect to the\n  directory of the template.\n\n- added support for dynamic evaluation of expressions.\n\n  note that this is to support legacy applications. it is not\n  currently wired into the provided template classes.\n\n- template classes now have a ``builtins`` attribute which may be used\n  to define built-in variables always available in the template\n  variable scope.\n\nincompatibilities:\n\n- the file-based template class no longer accepts a parameter\n  ``loader``. this parameter would be used to load a template from a\n  relative path, using a ``find(filename)`` method. this was however,\n  undocumented, and probably not very useful since we have the\n  ``templateloader`` mechanism already.\n\n- the compiled template module now contains an ``initialize`` function\n  which takes values that map to the template builtins. the return\n  value of this function is a dictionary that contains the render\n  functions.\n\nbugfixes:\n\n- the file-based template class no longer verifies the existence of a\n  template file (using ``os.lstat``). this now happens implicitly if\n  eager parsing is enabled, or otherwise when first needed (e.g. at\n  render time).\n\n  this is classified as a bug fix because the previous behavior was\n  probably not what you'd expect, especially if an application\n  initializes a lot of templates without needing to render them\n  immediately.\n\n2.1.1 (2011-07-28)\n------------------\n\nfeatures:\n\n- improved exception display. the expression string is now shown in\n  the context of the original source (if available) with a marker\n  string indicating the location of the expression in the template\n  source.\n\nbugfixes:\n\n- the ``structure`` insertion mode now correctly decodes entities for\n  any expression type (including ``string:``). this fixes issue #30.\n\n- don't show internal variables in the exception formatter variable\n  listing.\n\n2.1 (2011-07-25)\n----------------\n\nfeatures:\n\n- expression interpolation (using the ``${...}`` operator and\n  previously also ``$identifier``) now requires braces everywhere\n  except inside the ``string:`` expression type.\n\n  this change is motivated by a number of legacy templates in which\n  the interpolation format without braces ``$identifier`` appears as\n  text.\n\n2.0.2 (2011-07-25)\n------------------\n\nbugfixes:\n\n- don't use dynamic variable scope for lambda-scoped variables (#27).\n\n- avoid duplication of exception class and message in traceback.\n\n- fixed issue where a ``metal:fill-slot`` would be ignored if a macro\n  was set to be used on the same element (#16).\n\n2.0.1 (2011-07-23)\n------------------\n\nbugfixes:\n\n- fixed issue where global variable definition from macro slots would\n  fail (they would instead be local). this also affects error\n  reporting from inside slots because this would be recorded\n  internally as a global.\n\n- fixed issue with template cache digest (used for filenames); modules\n  are now invalidated whenever any changes are made to the\n  distribution set available (packages on ``sys.path``).\n\n- fixed exception handler to better let exceptions propagate through\n  the renderer.\n\n- the disk-based module compiler now mangles template source filenames\n  such that the output python module is valid and at root level (dots\n  and hyphens are replaced by an underscore). this fixes issue #17.\n\n- fixed translations (i18n) on python 2.5.\n\n2.0 (2011-07-14)\n----------------\n\n- point release.\n\n2.0-rc14 (2011-07-13)\n---------------------\n\nbugfixes:\n\n- the tab character (``\\t``) is now parsed correctly when used inside\n  tags.\n\nfeatures:\n\n- the ``repeatdict`` class now works as a proxy behind a separate\n  dictionary instance.\n\n- added template constructor option ``keep_body`` which is a flag\n  (also available as a class attribute) that controls whether to save\n  the template body input in the ``body`` attribute.\n\n  this is disabled by default, unless debug-mode is enabled.\n\n- the page template loader class now accepts an optional ``formats``\n  argument which can be used to select an alternative template class.\n\n2.0-rc13 (2011-07-07)\n---------------------\n\nbugfixes:\n\n- the backslash character (followed by optional whitespace and a line\n  break) was not correctly interpreted as a continuation for python\n  expressions.\n\nfeatures:\n\n- the python expression implementation is now more flexible for\n  external subclassing via a new ``parse`` method.\n\n2.0-rc12 (2011-07-04)\n---------------------\n\nbugfixes:\n\n- initial keyword arguments passed to a template now no longer \"leak\"\n  into the template variable space after a macro call.\n\n- an unexpected end tag is now an unrecoverable error.\n\nfeatures:\n\n- improve exception output.\n\n2.0-rc11 (2011-05-26)\n---------------------\n\nbugfixes:\n\n- fixed issue where variable names that begin with an underscore were\n  seemingly allowed, but their use resulted in a compiler error.\n\nfeatures:\n\n- template variable names are now allowed to be prefixed with a single\n  underscore, but not two or more (reserved for internal use).\n\n  examples of valid names::\n\n    item\n    item\n    _item\n    camelcase\n    underscore_delimited\n    help\n\n- added support for genshi's comment \"drop\" syntax::\n\n    <!--! this comment will be dropped -->\n\n  note the additional exclamation (!) character.\n\n  this fixes addresses issue #10.\n\n2.0-rc10 (2011-05-24)\n---------------------\n\nbugfixes:\n\n- the ``tal:attributes`` statement now correctly operates\n  case-insensitive. the attribute name given in the statement will\n  replace an existing attribute with the same name, without respect to\n  case.\n\nfeatures:\n\n- added ``meta:interpolation`` statement to control expression\n  interpolation setting.\n\n  strings that disable the setting: ``\"off\"`` and ``\"false\"``.\n  strings that enable the setting: ``\"on\"`` and ``\"true\"``.\n\n- expression interpolation now works inside xml comments.\n\n2.0-rc9 (2011-05-05)\n--------------------\n\nfeatures:\n\n- better debugging support for string decode and conversion. if a\n  naive join fails, each element in the output will now be attempted\n  coerced to unicode to try and trigger the failure near to the bad\n  string.\n\n2.0-rc8 (2011-04-11)\n--------------------\n\nbugfixes:\n\n- if a macro defines two slots with the same name, a caller will now\n  fill both with a single usage.\n\n- if a valid of ``none`` is provided as the translation function\n  argument, we now fall back to the class default.\n\n2.0-rc7 (2011-03-29)\n--------------------\n\nbugfixes:\n\n- fixed issue with python 2.5 compatibility ast. this affected at\n  least pypy 1.4.\n\nfeatures:\n\n- the ``auto_reload`` setting now defaults to the class value; the\n  base template class gives a default value of\n  ``chameleon.config.auto_reload``. this change allows a subclass to\n  provide a custom default value (such as an application-specific\n  debug mode setting).\n\n\n2.0-rc6 (2011-03-19)\n--------------------\n\nfeatures:\n\n- added support for ``target_language`` keyword argument to render\n  method. if provided, the argument will be curried onto the\n  translation function.\n\nbugfixes:\n\n- the html entities 'lt', 'gt' and 'quot' appearing inside content\n  subtition expressions are now translated into their native character\n  values. this fixes an issue where you could not dynamically create\n  elements using the ``structure`` (which is possible in zpt). the\n  need to create such structure stems from the lack of an expression\n  interpolation operator in zpt.\n\n- fixed duplicate file pointer issue with test suite (affected windows\n  platforms only). this fixes issue #9.\n  [oliora]\n\n- use already open file using ``os.fdopen`` when trying to write out\n  the module source. this fixes lp #731803.\n\n\n2.0-rc5 (2011-03-07)\n--------------------\n\nbugfixes:\n\n- fixed a number of issues concerning the escaping of attribute\n  values:\n\n  1) static attribute values are now included as they appear in the\n     source.\n\n     this means that invalid attribute values such as ``\"true &&\n     false\"`` are now left alone. it's not the job of the template\n     engine to correct such markup, at least not in the default mode\n     of operation.\n\n  2) the string expression compiler no longer unescapes\n     values. instead, this is left to each expression\n     compiler. currently only the python expression compiler unescapes\n     its input.\n\n  3) the dynamic escape code sequence now correctly only replaces\n     ampersands that are part of an html escape format.\n\nimports:\n\n- the page template classes and the loader class can now be imported\n  directly from the ``chameleon`` module.\n\nfeatures:\n\n- if a custom template loader is not provided, relative paths are now\n  resolved using ``os.abspath`` (i.e. to the current working\n  directory).\n\n- absolute paths are normalized using ``os.path.normpath`` and\n  ``os.path.expanduser``. this ensures that all paths are kept in\n  their \"canonical\" form.\n\n\n2.0-rc4 (2011-03-03)\n--------------------\n\nbugfixes:\n\n- fixed an issue where the output of an end-to-end string expression\n  would raise an exception if the expression evaluated to ``none`` (it\n  should simply output nothing).\n\n- the ``convert`` function (which is configurable on the template\n  class level) now defaults to the ``translate`` function (at\n  run-time).\n\n  this fixes an issue where message objects were not translated (and\n  thus converted to a string) using the a provided ``translate``\n  function.\n\n- fixed string interpolation issue where an expression immediately\n  succeeded by a right curly bracket would not parse.\n\n  this fixes issue #5.\n\n- fixed error where ``tal:condition`` would be evaluated after\n  ``tal:repeat``.\n\nfeatures:\n\n- python expression is now a tales expression. that means that the\n  pipe operator can be used to chain two or more expressions in a\n  try-except sequence.\n\n  this behavior was ported from the 1.x series. note that while it's\n  still possible to use the pipe character (\"|\") in an expression, it\n  must now be escaped.\n\n- the template cache can now be shared by multiple processes.\n\n\n2.0-rc3 (2011-03-02)\n--------------------\n\nbugfixes:\n\n- fixed ``atexit`` handler.\n\n  this fixes issue #3.\n\n- if a cache directory is specified, it will now be used even when not\n  in debug mode.\n\n- allow \"comment\" attribute in the tal namespace.\n\n  this fixes an issue in the sense that the reference engine allows\n  any attribute within the tal namespace. however, only \"comment\" is\n  in common use.\n\n- the template constructor now accepts a flag ``debug`` which puts the\n  template *instance* into debug-mode regardless of the global\n  setting.\n\n  this fixes issue #1.\n\nfeatures:\n\n- added exception handler for exceptions raised while evaluating an\n  expression.\n\n  this handler raises (or attempts to) a new exception of the type\n  ``rendererror``, with an additional base class of the original\n  exception class. the string value of the exception is a formatted\n  error message which includes the expression that caused the\n  exception.\n\n  if we are unable to create the exception class, the original\n  exception is re-raised.\n\n2.0-rc2 (2011-02-28)\n--------------------\n\n- fixed upload issue.\n\n2.0-rc1 (2011-02-28)\n--------------------\n\n- initial public release. see documentation for what's new in this\n  series.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-like (http://repoze.org/license.html)",
  "name": "chameleon",
  "package_url": "https://pypi.org/project/Chameleon/",
  "project_url": "https://pypi.org/project/Chameleon/",
  "project_urls": {
    "Documentation": "https://chameleon.readthedocs.io",
    "Homepage": "https://chameleon.readthedocs.io",
    "Issue Tracker": "https://github.com/malthe/chameleon/issues",
    "Sources": "https://github.com/malthe/chameleon"
  },
  "release_url": "https://pypi.org/project/Chameleon/4.4.2/",
  "requires_dist": [
    "importlib-metadata; python_version < \"3.10\"",
    "importlib-resources; python_version < \"3.9\"",
    "Sphinx; extra == \"docs\"",
    "sphinx_rtd_theme; extra == \"docs\""
  ],
  "requires_python": ">=3.8",
  "summary": "fast html/xml template compiler.",
  "version": "4.4.2",
  "releases": [],
  "developers": [
    "malthe_borch",
    "mborch@gmail.com"
  ],
  "kwds": "python chameleon importlib software importlib_resources",
  "license_kwds": "bsd-like (http://repoze.org/license.html)",
  "libtype": "pypi",
  "id": "pypi_chameleon",
  "homepage": "https://chameleon.readthedocs.io",
  "release_count": 130,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme"
  ]
}
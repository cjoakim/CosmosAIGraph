{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: bio-informatics",
    "topic :: scientific/engineering :: chemistry"
  ],
  "description": "pybel |zenodo| |build| |coverage| |documentation| |bioregistry| |black|\n=======================================================================\n`pybel <http://pybel.readthedocs.io>`_ is a pure python package for parsing and handling biological networks encoded in\nthe `biological expression language <https://biological-expression-language.github.io/>`_\n(bel).\n\nit facilitates data interchange between data formats like `networkx <http://networkx.github.io/>`_,\nnode-link json, `jgif <https://github.com/jsongraph/json-graph-specification>`_, csv, sif,\n`cytoscape <http://www.cytoscape.org/>`_, `cx <http://www.home.ndexbio.org/data-model/>`_,\n`indra <https://github.com/sorgerlab/indra>`_, and `graphdati <https://github.com/graphdati/schemas>`_; database systems\nlike sql and `neo4j <https://neo4j.com>`_; and web services like `ndex <https://github.com/pybel/pybel2cx>`_,\n`biodati studio <https://biodati.com/>`_, and `bel commons <https://bel-commons-dev.scai.fraunhofer.de>`_. it also\nprovides exports for analytical tools like `hipathia <http://hipathia.babelomics.org/>`_,\n`drug2ways <https://github.com/drug2ways/>`_ and `spia <https://bioconductor.org/packages/release/bioc/html/spia.html>`_;\nmachine learning tools like `pykeen <https://github.com/smartdataanalytics/biokeen>`_ and\n`openbiolink <https://github.com/openbiolink/openbiolink#biological-expression-language-bel-writer>`_; and others.\n\nits companion package, `pybel tools <http://pybel-tools.readthedocs.io/>`_, contains a\nsuite of functions and pipelines for analyzing the resulting biological networks.\n\nwe realize that we have a name conflict with the python wrapper for the cheminformatics package, openbabel. if you're\nlooking for their python wrapper, see `here <https://github.com/openbabel/openbabel/tree/master/scripts/python>`_.\n\ncitation\n--------\nif you find pybel useful for your work, please consider citing:\n\n.. [1] hoyt, c. t., *et al.* (2017). `pybel: a computational framework for biological expression language\n       <https://doi.org/10.1093/bioinformatics/btx660>`_. *bioinformatics*, 34(december), 1\u20132.\n\ninstallation |pypi_version| |python_versions| |pypi_license|\n------------------------------------------------------------\npybel can be installed easily from `pypi <https://pypi.python.org/pypi/pybel>`_ with the following code in\nyour favorite shell:\n\n.. code-block:: sh\n\n    $ pip install pybel\n\nor from the latest code on `github <https://github.com/pybel/pybel>`_ with:\n\n.. code-block:: sh\n\n    $ pip install git+https://github.com/pybel/pybel.git\n\nsee the `installation documentation <https://pybel.readthedocs.io/en/latest/introduction/installation.html>`_ for more advanced\ninstructions. also, check the change log at `changelog.rst <https://github.com/pybel/pybel/blob/master/changelog.rst>`_.\n\ngetting started\n---------------\nmore examples can be found in the `documentation <http://pybel.readthedocs.io>`_ and in the\n`pybel notebooks <https://github.com/pybel/pybel-notebooks>`_ repository.\n\ncompiling and saving a bel graph\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nthis example illustrates how the a bel document from the `human brain pharmacome\n<https://raw.githubusercontent.com/pharmacome/conib>`_ project can be loaded and compiled directly from github.\n\n.. code-block:: python\n\n   >>> import pybel\n   >>> url = 'https://raw.githubusercontent.com/pharmacome/conib/master/hbp_knowledge/proteostasis/kim2013.bel'\n   >>> graph = pybel.from_bel_script_url(url)\n\nother functions for loading bel content from many formats can be found in the\n`i/o documentation <https://pybel.readthedocs.io/en/latest/reference/io.html>`_.\nnote that pybel can handle `bel 1.0 <https://github.com/openbel/language/raw/master/docs/version_1.0/bel_specification_version_1.0.pdf>`_\nand `bel 2.0+ <https://github.com/openbel/language/raw/master/docs/version_2.0/bel_specification_version_2.0.pdf>`_\nsimultaneously.\n\nafter you have a bel graph, there are numerous ways to save it. the ``pybel.dump`` function knows\nhow to output it in many formats based on the file extension you give. for all of the possibilities,\ncheck the `i/o documentation <https://pybel.readthedocs.io/en/latest/reference/io.html>`_.\n\n.. code-block:: python\n\n   >>> import pybel\n   >>> graph = ...\n   >>> # write as bel\n   >>> pybel.dump(graph, 'my_graph.bel')\n   >>> # write as node-link json for network viewers like d3\n   >>> pybel.dump(graph, 'my_graph.bel.nodelink.json')\n   >>> # write as graphdati json for biodati\n   >>> pybel.dump(graph, 'my_graph.bel.graphdati.json')\n   >>> # write as cx json for ndex\n   >>> pybel.dump(graph, 'my_graph.bel.cx.json')\n   >>> # write as indra json for indra\n   >>> pybel.dump(graph, 'my_graph.indra.json')\n\nsummarizing the contents of the graph\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nthe ``belgraph`` object has several \"dispatches\" which are properties that organize its various functionalities.\none is the ``belgraph.summarize`` dispatch, which allows for printing summaries to the console.\n\nthese examples will use the `ras model <https://emmaa.indra.bio/dashboard/rasmodel?tab=model>`_  from emmaa,\nso you'll have to be sure to ``pip install indra`` first. the graph can be acquired and summarized with\n``belgraph.summarize.statistics()`` as in:\n\n.. code-block:: python\n\n    >>> import pybel\n    >>> graph = pybel.from_emmaa('rasmodel', date='2020-05-29-17-31-58')  # needs\n    >>> graph.summarize.statistics()\n    ---------------------  -------------------\n    name                   rasmodel\n    version                2020-05-29-17-31-58\n    number of nodes        126\n    number of namespaces   5\n    number of edges        206\n    number of annotations  4\n    number of citations    1\n    number of authors      0\n    network density        1.31e-02\n    number of components   1\n    number of warnings     0\n    ---------------------  -------------------\n\nthe number of nodes of each type can be summarized with ``belgraph.summarize.nodes()`` as in:\n\n.. code-block:: python\n\n    >>> graph.summarize.nodes(examples=false)\n    type (3)        count\n    ------------  -------\n    protein            97\n    complex            27\n    abundance           2\n\n\nthe number of nodes with each namespace can be summarized with ``belgraph.summarize.namespaces()`` as in:\n\n.. code-block:: python\n\n    >>> graph.summarize.namespaces(examples=false)\n    namespace (4)      count\n    ---------------  -------\n    hgnc                  94\n    fplx                   3\n    chebi                  1\n    text                   1\n\nthe edges can be summarized with ``belgraph.summarize.edges()`` as in:\n\n.. code-block:: python\n\n    >>> graph.summarize.edges(examples=false)\n    edge type (12)                       count\n    ---------------------------------  -------\n    protein increases protein               64\n    protein hasvariant protein              48\n    protein partof complex                  47\n    complex increases protein               20\n    protein decreases protein                9\n    complex directlyincreases protein        8\n    protein increases complex                3\n    abundance partof complex                 3\n    protein increases abundance              1\n    complex partof complex                   1\n    protein decreases abundance              1\n    abundance decreases protein              1\n\ngrounding the graph\n~~~~~~~~~~~~~~~~~~~\nnot all bel graphs contain both the name and identifier for each entity. some even use non-standard prefixes\n(also called **namespaces** in bel). usually, bel graphs are validated against controlled vocabularies,\nso the following demo shows how to add the corresponding identifiers to all nodes.\n\n.. code-block:: python\n\n    from urllib.request import urlretrieve\n\n    url = 'https://github.com/cthoyt/selventa-knowledge/blob/master/selventa_knowledge/large_corpus.bel.nodelink.json.gz'\n    urlretrieve(url, 'large_corpus.bel.nodelink.json.gz')\n\n    import pybel\n    graph = pybel.load('large_corpus.bel.nodelink.json.gz')\n\n    import pybel.grounding\n    grounded_graph = pybel.grounding.ground(graph)\n\nnote: you have to install ``pyobo`` for this to work and be running python 3.7+.\n\ndisplaying a bel graph in jupyter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nafter installing ``jinja2`` and ``ipython``, bel graphs can be displayed in jupyter notebooks.\n\n.. code-block:: python\n\n   >>> from pybel.examples import sialic_acid_graph\n   >>> from pybel.io.jupyter import to_jupyter\n   >>> to_jupyter(sialic_acid_graph)\n\nusing the parser\n~~~~~~~~~~~~~~~~\nif you don't want to use the ``pybel.belgraph`` data structure and just want to turn bel statements into json\nfor your own purposes, you can directly use the ``pybel.parse()`` function.\n\n.. code-block:: python\n\n    >>> import pybel\n    >>> pybel.parse('p(hgnc:4617 ! gsk3b) regulates p(hgnc:6893 ! mapt)')\n    {'source': {'function': 'protein', 'concept': {'namespace': 'hgnc', 'identifier': '4617', 'name': 'gsk3b'}}, 'relation': 'regulates', 'target': {'function': 'protein', 'concept': {'namespace': 'hgnc', 'identifier': '6893', 'name': 'mapt'}}}\n\nthis functionality can also be exposed through a flask-based web application with ``python -m pybel.apps.parser`` after\ninstalling ``flask`` with ``pip install flask``. note that the first run requires about a ~2 second delay to generate\nthe parser, after which each parse is very fast.\n\nusing the cli\n~~~~~~~~~~~~~\npybel also installs a command line interface with the command :code:`pybel` for simple utilities such as data\nconversion. in this example, a bel document is compiled then exported to `graphml <http://graphml.graphdrawing.org/>`_\nfor viewing in cytoscape.\n\n.. code-block:: sh\n\n    $ pybel compile ~/desktop/example.bel\n    $ pybel serialize ~/desktop/example.bel --graphml ~/desktop/example.graphml\n\nin cytoscape, open with :code:`import > network > from file`.\n\ncontributing\n------------\ncontributions, whether filing an issue, making a pull request, or forking, are appreciated. see\n`contributing.rst <https://github.com/pybel/pybel/blob/master/contributing.rst>`_ for more information on getting\ninvolved.\n\nacknowledgements\n----------------\nsupport\n~~~~~~~\nthe development of pybel has been supported by several projects/organizations (in alphabetical order):\n\n- `the cytoscape consortium <https://cytoscape.org/>`_\n- `enveda biosciences <https://envedabio.com/>`_\n- `fraunhofer center for machine learning <https://www.cit.fraunhofer.de/de/zentren/maschinelles-lernen.html>`_\n- `fraunhofer institute for algorithms and scientific computing (scai) <https://www.scai.fraunhofer.de>`_\n- `harvard program in therapeutic science - laboratory of systems pharmacology <https://hits.harvard.edu/the-program/laboratory-of-systems-pharmacology>`_\n- `university of bonn <https://www.uni-bonn.de>`_\n\nfunding\n~~~~~~~\n- darpa young faculty award w911nf2010255 (pi: benjamin m. gyori).\n- the `european union <https://europa.eu>`_, `european federation of pharmaceutical industries and associations\n  (efpia) <https://www.efpia.eu/>`_, and `innovative medicines initiative <https://www.imi.europa.eu>`_ joint\n  undertaking under `aetionomy <https://www.aetionomy.eu/>`_ [grant number 115568], resources of which\n  are composed of financial contribution from the european union's seventh framework programme (fp7/2007-2013) and\n  efpia companies in kind contribution.\n\nlogo\n~~~~\nthe pybel `logo <https://github.com/pybel/pybel-art>`_ was designed by `scott colby <https://github.com/scolby33>`_.\n\n.. |build| image:: https://github.com/pybel/pybel/workflows/tests/badge.svg\n    :target: https://github.com/pybel/pybel/actions\n    :alt: build status\n\n.. |coverage| image:: https://codecov.io/gh/pybel/pybel/coverage.svg?branch=develop\n    :target: https://codecov.io/gh/pybel/pybel/branch/develop\n    :alt: development coverage status\n\n.. |documentation| image:: https://readthedocs.org/projects/pybel/badge/?version=latest\n    :target: http://pybel.readthedocs.io/en/latest/\n    :alt: development documentation status\n\n.. |climate| image:: https://codeclimate.com/github/pybel/pybel/badges/gpa.svg\n    :target: https://codeclimate.com/github/pybel/pybel\n    :alt: code climate\n\n.. |python_versions| image:: https://img.shields.io/pypi/pyversions/pybel.svg\n    :target: https://pypi.python.org/pypi/pybel\n    :alt: stable supported python versions\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/pybel.svg\n    :target: https://pypi.python.org/pypi/pybel\n    :alt: current version on pypi\n\n.. |pypi_license| image:: https://img.shields.io/pypi/l/pybel.svg\n    :target: https://github.com/pybel/pybel/blob/master/license\n    :alt: mit license\n\n.. |zenodo| image:: https://zenodo.org/badge/68376693.svg\n    :target: https://zenodo.org/badge/latestdoi/68376693\n\n.. |bioregistry| image:: https://img.shields.io/static/v1?label=powered%20by&message=bioregistry&color=ba274a&style=flat&logo=image/png;base64,ivborw0kggoaaaansuheugaaacgaaaaocayaaacm/rhtaaaacxbiwxmaaaenaaabjwgnvpdmaaaagxrfwhrtb2z0d2fyzqb3d3cuaw5rc2nhcguub3jnm+48ggaaci9jrefuwiwtmxl41muzxz/z291sstmqo9mqg0iswhbtooswgpuqhapwgufeowkigki81actypaqfbwpvkgffku0vgs+ygvheaoqeuesrndleehcbklyjtlkk9399y/n/rkbzqxt96+zed+z9/t7z+adeecnua1s5yfvsgrloaf2qtieeyluzkiafydke7koblkqsc4xgkpfxxz/owmt41ztivtr3j94eqxqq5adeasivkvb12rbtt0mb5xzsvfa/5xgnqtmci3eq7iqjwm+7jjjo8yvnhk/qdbuol8a7jzwwqqu01jeg6pd1nw4nubjjax6ewrrruv/m8edqtmflmxeb0jcbb6rirhmtcj0ymgc0wyjadtd9nw0twmu+in63nnu7c3fwtvgjpxrzvlakvgu8/ltecwzgju3mii/aba72vwtb5k45aei7x2puel9fzshzludmgphuljpj82lle6itsh6mpxp+fnt/sa4yzhbp22yfwfkgnmaby17kphfmqh1997qlxztnkq35xb505fintf0iz1wvftq7pxdlj4jdnjuny5yvpehjhh7fqogd/yyzi4ows86hj+qqmdpjabf3juxlhd21+8q0y4ldppv/vfno7+jzv3pa6soac0e8i8fsponpm7javr+erhzwu/ofj+e49tpt/hdtgxcylvqj8hatctgfmjcf2dwfptmz4nszx/uqqdyr+xpyvwoek+c03pgrdx4gkj7nbj+txh/hcgait7crlnxoy62dmzmzgwzjvzjuh2gi/xnrmoohsfe3aqq/kho0qxs+plzlh3fgwdt54ykxlsaqq0mbf1zhutsltzejemhjsrlgggdpgtxc09zdm5qti59jzbkog+zb1qyi95+xokeqogpdifpdnpjfq8uckl8fygmacqtn4dhxp3kinx7jnhi0zejnt8dla8plbu+48zzfyj08kh8ggiacb4zliahsurm3enml6eb6fzep1a+sut5ds2vddts+4gqccprhgv1kowiqrachhmxapxkiev/vl+8r/hgnqtmmi4gjh/iqoixzsqdzqulxdb9rpyi+1drdvx67wmursvckderxyxb0rosiokecurmg+tbzkxahbybzk6tenplkwmpzuix71wumiw+mhx2nejqrwifhsde4pihlfdislzxye1hhiwfttlk+rsu30rvnlxgvroapocw9dsw3vh6cgks4zxixlz3fw8dsammcfecv9xhybc/dsczmekgfojzy0teo17pvl7janbaboauwujlti4vow+t9sazbkyl0zb/qv/kalthqri3vojb0lpzw0vpmonotohoqrcyi7bzkeqanjo3hogbmgrourziagundgsosqsyupn6upx2nvelzxiybhinn3ulyx9uvwaw7xbqjxdqmr2x0uy93dh+dtlu9zcu9vdj1psvewwcii7owjaxfnorfcovhoxjrmr0goqwo9qbfaorxodohq0o1x8ron3csmyc6zt942uqbill53jl804sv6oy9/fxagg4wcjfdzuxlfv7gnpfrzfs7vkcriv7ejjrta/edr1rfkxzoqcoceytghqayudd4b2d4cf8pohg4zc0yufu7z5c9jy7svvbkptsh6gt0tcgbtfwspbtz/zrixyapbskk8te5+az4l4jduvqwpiscmqhjgocujjcrhctiesjurqtf89ftttpuvalpaya8knp1b3oq5zlag/nu//9cmscs6enonrauwjaziqv3kcovd3quups+uaxhu7z1spatpeqchsa78awd0wvnxa1xkdjurlcjrgqhmfn/euejk9jyr4nrn47hltjc58gm0sratjz/w3l5blukkzjdfzt1f5+3sq3nzjrdnajax1orb2bx2wemka9fvggbvw7q+oluu+2wliqdx+h3dzkjvprda5iqj93p+drqcq/phsaw8xj6afhdkhuivvoeribll/jxkov4gi34t8omgnb1yok7sdta01aik3j6yoggp+gapwhodop6lltlxb3mnyxali8da9/e0pjbzovv2brakyzqk/i3bg0ssiicqclqs/0wapb6uovo6k3+cdeetwm1aptp+dllljpskahoydwcovllytkkakccu4vo7irherfslvlpxz+v0hadcn+v8xjb9strdqfpavua0ckefrxwnuwvns6rbrkqb44r+lmc5f7tragafqyyzb9dv/4gd18asq8/gsc0zwjnjvcw97aewmocdtaaw6elxzlbchtc8ehwxbw6o+cinhmipetuu9ouvtwnnwnodzx+krlvaqigjmecv+spyh/ak3f5qdok+oopxicip2hijiwtuh6rqx6eh7bxlt0sth4xubsul6df/xaiqao9bbvn3takuuy/zawyzimpvx4fyjvrgqzoec9r1vk0tmrldmiidko45zxegxllrrw13p0/heqhq4cuhiyvfelnihotwaztnj4qzqbqffklg3omz135rny624clb0thjcomta5zmgnanbabmoohpmy5hvzebnulcoj71frxin0i9pdjzj24isilutco7ni3/kyqg5arfmleeykbzma6r1ho8ev+dseyseb2g3yrpwzp1c2f+n1gjb07rilcwnoki7j3g839ehqf2cg6fmhmbznprkevj/goriedv1wtlvzjesrv9wqqtoihrfwjresjwgar1zrui3ho7pfwhbgb3jrg6s1rogeoiunjgbipkv/zsf31irorn4hxau9b1zduhtlecelqxzz9xttrgc342df8iwqyayqbmkewo0xaw1bi4d4dnjswcff32frwnud5nwpedz5lie8nduhq1v+ha2xgdkho4szyjg1hbj501eh6ogj5ois8hf/owpm5hqnre51vdt4nc/7k+9biit8gya2ipixn5jwjqrrzsju0xt5gubtrfiebqfpisuvorzppi0vdeq9ycj63bwmxbzphtk7xhkva/drljkfau+bcy2n+fa3vzk0wvoxny4idokifn+io7ltz7zrobwcjdmv7vnhruov9dws9f8u4csas1k1j54wys4o6arwaas8hvlp998yuztnisl7wurolkdjskzqqtfl45fjb8gzwznijy6ds8jjs3p8ausvhg3txn26mytzo5w8rcjsbg1qze/x45elhy9i7whlxg26+cgsl8zfkdgh3zdkf2s7nep9pzhzmnk3fegwuwowrjr6ztdel529enrhf3lmfchebkbzinrwiawzkwi9a5qzh9d6dnvxyw3jzkej9udooypwdy/gxgdiufuguc2c4hy3kwxrohmeblqea6jv6glc8y0kr613hn+2phzak69jqah1p/hdsckllifgtnbg+f3eyfhtehth38mzom2sy4wqwqje9tnbe+xizkuqnrqcch9wswrdmggsjitnpatwtjofmikcgvpvx/knicm1gsgc8itzfii3ael+7fyg+c+6o8izl1ge5gaaaabjru5erkjggg==\n    :target: https://github.com/biopragmatics/bioregistry\n    :alt: powered by the bioregistry\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style: black\n\n\n",
  "docs_url": null,
  "keywords": "biological expression language,bel,domain specific language,dsl,systems biology,networks biology",
  "license": "mit",
  "name": "pybel",
  "package_url": "https://pypi.org/project/pybel/",
  "project_url": "https://pypi.org/project/pybel/",
  "project_urls": {
    "Bug Tracker": "https://github.com/pybel/pybel/issues",
    "Documentation": "https://pybel.readthedocs.io",
    "Download": "https://github.com/pybel/pybel/releases",
    "Homepage": "https://github.com/pybel/pybel",
    "Source Code": "https://github.com/pybel/pybel"
  },
  "release_url": "https://pypi.org/project/pybel/0.15.5/",
  "requires_dist": [
    "networkx (>=2.4)",
    "sqlalchemy",
    "click",
    "click-plugins",
    "bel-resources (>=0.0.3)",
    "more-itertools",
    "requests",
    "requests-file",
    "pyparsing",
    "tqdm",
    "humanize",
    "tabulate",
    "pandas",
    "jsonschema",
    "bioregistry",
    "ratelimit",
    "pystow (>=0.1.2)",
    "psycopg2-binary",
    "dataclasses ; python_version < \"3.7\"",
    "pickle5 ; python_version < \"3.8\"",
    "sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinx-click ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "pyobo ; extra == 'grounding'",
    "protmapper ; extra == 'grounding'",
    "indra ; extra == 'indra'",
    "jinja2 ; extra == 'jupyter'",
    "ipython ; extra == 'jupyter'",
    "py2neo ; extra == 'neo4j'"
  ],
  "requires_python": ">=3.6",
  "summary": "parsing, validation, compilation, and data exchange of biological expression language (bel)",
  "version": "0.15.5",
  "releases": [],
  "developers": [
    "charles_tapley_hoyt",
    "cthoyt@gmail.com"
  ],
  "kwds": "bioinformatics cytoscape biological python parser",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pybel",
  "homepage": "https://github.com/pybel/pybel",
  "release_count": 92,
  "dependency_ids": [
    "pypi_bel_resources",
    "pypi_bioregistry",
    "pypi_click",
    "pypi_click_plugins",
    "pypi_dataclasses",
    "pypi_humanize",
    "pypi_indra",
    "pypi_ipython",
    "pypi_jinja2",
    "pypi_jsonschema",
    "pypi_more_itertools",
    "pypi_networkx",
    "pypi_pandas",
    "pypi_pickle5",
    "pypi_protmapper",
    "pypi_psycopg2_binary",
    "pypi_py2neo",
    "pypi_pyobo",
    "pypi_pyparsing",
    "pypi_pystow",
    "pypi_ratelimit",
    "pypi_requests",
    "pypi_requests_file",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_click",
    "pypi_sphinx_rtd_theme",
    "pypi_sqlalchemy",
    "pypi_tabulate",
    "pypi_tqdm"
  ]
}
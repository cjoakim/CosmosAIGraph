{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\ndeprecated library\n------------------\n\ndeprecated is easy to use\n`````````````````````````\n\nif you need to mark a function or a method as deprecated,\nyou can use the ``@deprecated`` decorator:\n\nsave in a hello.py:\n\n.. code:: python\n\n    from deprecated import deprecated\n\n\n    @deprecated(version='1.2.1', reason=\"you should use another function\")\n    def some_old_function(x, y):\n        return x + y\n\n\n    class someclass(object):\n        @deprecated(version='1.3.0', reason=\"this method is deprecated\")\n        def some_old_method(self, x, y):\n            return x + y\n\n\n    some_old_function(12, 34)\n    obj = someclass()\n    obj.some_old_method(5, 8)\n\n\nand easy to setup\n`````````````````\n\nand run it:\n\n.. code:: bash\n\n    $ pip install deprecated\n    $ python hello.py\n    hello.py:15: deprecationwarning: call to deprecated function (or staticmethod) some_old_function.\n    (you should use another function) -- deprecated since version 1.2.0.\n      some_old_function(12, 34)\n    hello.py:17: deprecationwarning: call to deprecated method some_old_method.\n    (this method is deprecated) -- deprecated since version 1.3.0.\n      obj.some_old_method(5, 8)\n\n\nyou can document your code\n``````````````````````````\n\nhave you ever wonder how to document that some functions, classes, methods, etc. are deprecated?\nthis is now possible with the integrated sphinx directives:\n\nfor instance, in hello_sphinx.py:\n\n.. code:: python\n\n    from deprecated.sphinx import deprecated\n    from deprecated.sphinx import versionadded\n    from deprecated.sphinx import versionchanged\n\n\n    @versionadded(version='1.0', reason=\"this function is new\")\n    def function_one():\n        '''this is the function one'''\n\n\n    @versionchanged(version='1.0', reason=\"this function is modified\")\n    def function_two():\n        '''this is the function two'''\n\n\n    @deprecated(version='1.0', reason=\"this function will be removed soon\")\n    def function_three():\n        '''this is the function three'''\n\n\n    function_one()\n    function_two()\n    function_three()  # warns\n\n    help(function_one)\n    help(function_two)\n    help(function_three)\n\n\nthe result it immediate\n```````````````````````\n\nrun it:\n\n.. code:: bash\n\n    $ python hello_sphinx.py\n\n    hello_sphinx.py:23: deprecationwarning: call to deprecated function (or staticmethod) function_three.\n    (this function will be removed soon) -- deprecated since version 1.0.\n      function_three()  # warns\n\n    help on function function_one in module __main__:\n\n    function_one()\n        this is the function one\n\n        .. versionadded:: 1.0\n           this function is new\n\n    help on function function_two in module __main__:\n\n    function_two()\n        this is the function two\n\n        .. versionchanged:: 1.0\n           this function is modified\n\n    help on function function_three in module __main__:\n\n    function_three()\n        this is the function three\n\n        .. deprecated:: 1.0\n           this function will be removed soon\n\n\nlinks\n`````\n\n* `python package index (pypi) <https://pypi.python.org/pypi/deprecated>`_\n* `github website <https://github.com/tantale/deprecated>`_\n* `read the docs <https://readthedocs.org/projects/deprecated>`_\n* `ebook on lulu.com <http://www.lulu.com/commerce/index.php?fbuycontent=21305117>`_\n* `stackoverflow q&a <https://stackoverflow.com/a/40301488/1513933>`_\n* `development version\n  <https://github.com/tantale/deprecated/zipball/master#egg=deprecated-dev>`_\n\n",
  "docs_url": null,
  "keywords": "deprecate,deprecated,deprecation,warning,warn,decorator",
  "license": "mit",
  "name": "deprecated",
  "package_url": "https://pypi.org/project/Deprecated/",
  "project_url": "https://pypi.org/project/Deprecated/",
  "project_urls": {
    "Bug Tracker": "https://github.com/tantale/deprecated/issues",
    "Documentation": "https://deprecated.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/tantale/deprecated",
    "Source": "https://github.com/tantale/deprecated"
  },
  "release_url": "https://pypi.org/project/Deprecated/1.2.14/",
  "requires_dist": [
    "wrapt (<2,>=1.10)",
    "tox ; extra == 'dev'",
    "PyTest ; extra == 'dev'",
    "PyTest-Cov ; extra == 'dev'",
    "bump2version (<1) ; extra == 'dev'",
    "sphinx (<2) ; extra == 'dev'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "summary": "python @deprecated decorator to deprecate old python classes, functions or methods.",
  "version": "1.2.14",
  "releases": [],
  "developers": [
    "laurent_laporte",
    "tantale.solutions@gmail.com"
  ],
  "kwds": "some_old_method some_old_function deprecation deprecated deprecate",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_deprecated",
  "homepage": "https://github.com/tantale/deprecated",
  "release_count": 21,
  "dependency_ids": [
    "pypi_bump2version",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sphinx",
    "pypi_tox",
    "pypi_wrapt"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: multimedia :: graphics"
  ],
  "description": "svg.path\n========\n\nsvg.path is a collection of objects that implement the different path\ncommands in svg, and a parser for svg path definitions.\n\n\nusage\n-----\n\nthere are four path segment objects, ``line``, ``arc``, ``cubicbezier`` and\n``quadraticbezier``.`there is also a ``path`` object that acts as a\ncollection of the path segment objects.\n\nall coordinate values for these classes are given as ``complex`` values,\nwhere the ``.real`` part represents the x coordinate, and the ``.imag`` part\nrepresentes the y coordinate::\n\n    >>> from svg.path import path, move, line, arc, cubicbezier, quadraticbezier, close\n\nall of these objects have a ``.point()`` function which will return the\ncoordinates of a point on the path, where the point is given as a floating\npoint value where ``0.0`` is the start of the path and ``1.0`` is the end.\n\nyou can calculate the length of a path or it's segments with the\n``.length()`` function. for cubicbezier and arc segments this is done by\ngeometric approximation and for this reason **may be very slow**. you can\nmake it faster by passing in an ``error`` option to the method. if you\ndon't pass in error, it defaults to ``1e-12``::\n\n    >>> cubicbezier(300+100j, 100+100j, 200+200j, 200+300j).length(error=1e-5)\n    297.2208145656899\n\ncubicbezier and arc also has a ``min_depth`` option that specifies the\nminimum recursion depth. this is set to 5 by default, resulting in using a\nminimum of 32 segments for the calculation. setting it to 0 is a bad idea for\ncubicbeziers, as they may become approximated to a straight line.\n\n``line.length()`` and ``quadraticbezier.length()`` also takes these\nparameters, but they are ignored.\n\ncubicbezier and quadraticbezier also has ``is_smooth_from(previous)``\nmethods, that check if the segment is a \"smooth\" segment compared to the\ngiven segment.\n\nthere is also a ``parse_path()`` function that will take an svg path definition\nand return a ``path`` object::\n\n    >>> from svg.path import parse_path\n    >>> parse_path('m 100 100 l 300 100')\n    path(move(to=(100+100j)), line(start=(100+100j), end=(300+100j)))\n\n\nclasses\n.......\n\nthese are the svg path segment classes. see the `svg specifications\n<http://www.w3.org/tr/svg/paths.html>`_ for more information on what each\nparameter means.\n\n* ``line(start, end)``\n\n* ``arc(start, radius, rotation, arc, sweep, end)``\n\n* ``quadraticbezier(start, control, end)``\n\n* ``cubicbezier(start, control1, control2, end)``\n\nin addition to that, there is the ``path`` class, which is instantiated\nwith a sequence of path segments:\n\n* ``path(*segments)``\n\nthe ``path`` class is a mutable sequence, so it behaves like a list.\nyou can add to it and replace path segments etc::\n\n    >>> path = path(move(200+100j), line(200+100j,100+200j), line(100+200j,300+100j))\n    >>> path.append(quadraticbezier(300+100j, 200+200j, 200+300j))\n    >>> path[0] = move(200+100j)\n    >>> del path[1]\n\nthe path object also has a ``d()`` method that will return the\nsvg representation of the path segments::\n\n    >>> path.d()\n    'm 200,100 l 300,100 q 200,200 200,300'\n\nnote that there currently is no internal consistency checks when you\nmanipulate lines this way. this path now has an internal representation that\nit's different from it's d() path. notice how the `line()` segment starts in\na different location from where the `move()` segments say. this **may**\nchange in future releases, and the path manipulation methods **may** be\nchanged to ensure consistency.\n\n    >>> path\n    path(move(to=(200+100j)), line(start=(100+200j), end=(300+100j)),\n    quadraticbezier(start=(300+100j), control=(200+200j), end=(200+300j),\n    smooth=false))\n\n\nexamples\n........\n\nthis svg path example draws a triangle::\n\n\n    >>> path1 = parse_path('m 100 100 l 300 100 l 200 300 z')\n\nyou can format svg paths in many different ways, all valid paths should be\naccepted::\n\n    >>> path2 = parse_path('m100,100l300,100l200,300z')\n\nand these paths should be equal::\n\n    >>> path1 == path2\n    true\n\nyou can also build a path from objects::\n\n    >>> path3 = path(line(100+100j,300+100j), line(300+100j, 200+300j), line(200+300j, 100+100j))\n\nand it should again be equal to the first path::\n\n    >>> path1 == path2\n    true\n\npaths are mutable sequences, you can slice and append::\n\n    >>> path1.append(quadraticbezier(300+100j, 200+200j, 200+300j))\n    >>> len(path1[2:]) == 3\n    true\n\nnote that there is no protection against you creating paths that are invalid.\nyou can for example have a close command that doesn't end at the path start::\n\n    >>> wrong = path(line(100+100j,200+100j), close(200+300j, 0))\n\n\nfuture features\n---------------\n\n* reversing paths. they should then reasonably be drawn \"backwards\" meaning each\n  path segment also needs to be reversed.\n\n* mathematical transformations might make sense.\n\n* verifying that paths are correct, or protection against creating incorrect paths.\n\n\nlicense\n-------\n\nthis module is under a mit license.\n\ncontributors\n============\n\nlennart regebro <regebro@gmail.com>, original author\n\njustin gruenberg implemented the quadradic bezier calculations and\nprovided suggestions and feedback about the d() function.\n\nmichiel schallig suggested calculating length by recursive straight-line\napproximations, which enables you to choose between accuracy or speed.\nsteve schwarz added an error argument to make that choice an argument.\n\nclayjarcom speeded up `point()` calculations for paths.\n\nthanks also to bug fixers martin r, abcjjy, daniel stender, mtician,\nblokhin, karthikeyan, jaraco, martinleopold and twjang.\n\nthanks to tatarize for help with investigating issues, and coming with\nmuch feedback and ideas.\n\nsamuel carlsson [vidstige] provided the `tangent()` functions.\n\nlucas simon discovered and fixed that not all path segments preserved\nthe relative setting when parsing.\n\ntaewoong jang [twjang] implemented boundingbox functions. \n\n\nchangelog\n=========\n\n\n6.3 (2023-04-29)\n----------------\n\n- fixed serialization of 'h'/'h' command.\n\n- new boundingbox() methods allow you to get the boundingbox() for paths.[twjang]\n\n- tests are now outside the source directory, which is common practice now.\n\n- drops python 3.6 and 3.7, adds support for 3.10 and 3.11.\n\n\n6.2 (2022-06-17)\n----------------\n\n- allow numbers with decimal point but no decimals, because other parsers do.\n\n- re-enabled the readme.rst doctest, which got lost when switching to pytest.\n\n\n6.1 (2022-06-09)\n----------------\n\n- not all path segments preserved the relative setting. [lucas-c]\n\n\n6.0 (2022-04-14)\n----------------\n\n- no functional changes from 6.0b1, only changes to tests.\n\n\n6.0b1 (2022-04-02)\n------------------\n\n- added new abstract base classes: pathsegment, and nonlinear. also, linear\n  is now derived from pathsegment, and may become abstract in the future.\n\n- added smooth support:\n\n  - cubicbezier and quadraticbezier now has a \"smooth\" flag, that will be set\n    when parsing if the svg path had a smooth segment.\n\n  - a path element will now only be designated as a smooth segment if it has\n    the smooth flag set. that means a path that *is* smooth but not parsed\n    from smooth (s and t) segments will not be represented as smooth.\n    the path segment must also be smooth, so if you parse a path with a\n    smooth segment, and modify it so it isn't smooth, it will not be\n    represented as smooth, regardless of the flag.\n\n  - cubicbezier and quadraticbezier now has a \"set_smooth_from\" flag, that\n    will adjust the start point and first control point so that the curve is\n    smooth. it also sets the smooth flag.\n\n- added support to preserve vertical/horizontal commands.\n\n- refactored the generation of svg path texts, each segment now generates its\n  own segment text, with a `_d(self, previous)` method.\n\n\n5.1 (2022-03-23)\n----------------\n\n- added svg standard tests. [tatarize]\n\n- allow random characters to end parsing.\n\n- #61: fixed the length() calculations of nearly linear quadradicbeziers.\n  [tatarize, regebro]\n\n\n5.0.1 (2022-03-21)\n------------------\n\n- two new test files were omitted from the distributions.\n\n\n5.0.0 (2022-03-21)\n------------------\n\n- drop python 2 support, also 3.4 to 3.6. new minimum python version is 3.7.\n\n- new parser that solves the issue with arc flags and whitespace.\n  see issues #53 and #69.\n\n- fixed #60: handle paths that are length 0 [thanks to martinleopold and tatarize]\n\n- new method on path objects: `.tangent(point)`, which returns a vector that is the\n  derivatative / tangent of the curve at that point. [vidstige]\n\n- new graphical test. that test requires pillow, so i stopped testing on pypy, it\n  got too complicated to support. but it still works on pypy.\n\n\n4.1 (2021-02-16)\n----------------\n\n- use collections.abc for abc import to add python 3.9 compatibility.\n\n\n4.0.2 (2019-11-04)\n------------------\n\n- a solution for the setup.cfg [alex gr\u00f6nholm]\n\n\n4.0.1 (2019-11-03)\n------------------\n            else:\n                raise\n\n- the pure setup.cfg config didn't work. all the tests pass fine,\n  but when installing the package somewhere else, nothing gets installed.\n  so i'm reverting that change for now.\n\n\n4.0 (2019-11-02)\n----------------\n\n- moved all the information from setup.py into setup.cfg.\n\n- added a close() command which is different from a line() command in\n  no way at all, to simplify the handling of closepath commands and subpaths.\n\n- path()'s no longer have a `closed` attribute.\n\n- now fully supports the svg 1.1 \"f.6.2 out-of-range parameters\" list.\n\n- uses circular maths to calculate the length of circular arcs,\n  more accurate and much faster.\n\n\n3.1 (2019-10-25)\n----------------\n\n- the move null command was not imported into ``__init__.py`` [blokhin]\n- #41: switched from ``pkg_resource``-style namespace\n  package for ``svg`` to a `pkgutil style\n  <https://packaging.python.org/guides/packaging-namespace-packages/#pkgutil-style-namespace-packages>`_\n  namespace package.\n- a faster ``point()`` implementation for paths. [clayjarcom]\n- dropped support for python 2.6 and python 3.3.\n- added support for python 3.7 and 3.8.\n\n\n3.0 (2018-08-14)\n----------------\n\n- dropped support for python 3.1 and 3.2. it still works, but it may stop.\n  added support for python 3.6. dropped support for jython, it's not\n  supported by travis, and hasn't seen  a release in over a year.\n\n- #33: move commands are now preserved when parsed.\n\n- subpaths are no longer merged even if they are joined.\n\n- #30: arcs where the endpoint is the same as the start point caused a crash.\n  the svg specs say that it instead should be the equavalent of skipping\n  that section, which now is the case.\n\n\n2.2 (2016-10-15)\n----------------\n\n- don't add a line when closing a path if it's not needed.\n\n\n2.1.1 (2016-02-28)\n------------------\n\n- #18: quadraticbeziers could get a dividebyzero error under certain\n  circumstances. [mtician]\n\n- accept an error parameter to path.point() to be able to\n  control error vs performance setting. [saschwarz]\n\n- #25: arc's could create a mathdomain error under certain circumstances.\n\n- #17: set last_command always.\n\n\n2.0.1 (2015-10-17)\n------------------\n\n- #20: the doctext for the closed() setter was incorrect.\n\n- #19: fixed so tests didn't use relative paths. [danstender]\n\n\n2.0 (2015-05-15)\n----------------\n\n- nothing changed yet.\n\n\n2.0b1 (2014-11-06)\n------------------\n\n- added a path.d() function to generate the path's d attribute.\n\n- added is_smooth_from() on qubicbezier and quadradicbezier.\n\n- path()'s now have a .closed property.\n\n- fixed the representation so it's parseable.\n\n- the calculations for cubicbezier and arc segments are now recursive,\n  and will end when a specific accuracy has been achieved.\n  this is somewhat faster for arcs and somewhat slower for cubicbezier.\n  however, you can now specify an accuracy, so if you want faster but\n  looser calculations, you can have that.\n\n- 't' segments (smooth, relative quadraticbeziers) whose previous segment was\n  not a quadraticbezier would get an incorrect control point.\n\n\n1.2 (2014-11-01)\n----------------\n\n- new quadradic bezier implementation. [justin gruenberg]\n\n- solved issue #6: z close path behavior. [abcjjy]\n\n\n1.1 (2013-10-19)\n----------------\n\n- floats with negative exponents work again.\n\n- new tokenizer that is around 20 times faster.\n\n\n1.0 (2013-05-28)\n----------------\n\n- solved issue #2: paths with negative values and no spaces didn't work.\n  [regebro]\n\n\n1.0b1 (2013-02-03)\n------------------\n\n- original release.\n\n\n",
  "docs_url": null,
  "keywords": "svg,path,maths",
  "license": "mit",
  "name": "svg.path",
  "package_url": "https://pypi.org/project/svg.path/",
  "project_url": "https://pypi.org/project/svg.path/",
  "project_urls": {
    "Homepage": "https://github.com/regebro/svg.path"
  },
  "release_url": "https://pypi.org/project/svg.path/6.3/",
  "requires_dist": [
    "Pillow ; extra == 'test'",
    "black ; extra == 'test'",
    "check-manifest ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "pyroma ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "zest.releaser[recommended] ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "svg path objects and parser",
  "version": "6.3",
  "releases": [],
  "developers": [
    "lennart_regebro",
    "regebro@gmail.com"
  ],
  "kwds": "svg quadraticbeziers cubicbezier cubicbeziers quadraticbezier",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_svg.path",
  "homepage": "https://github.com/regebro/svg.path",
  "release_count": 16,
  "dependency_ids": [
    "pypi_black",
    "pypi_check_manifest",
    "pypi_flake8",
    "pypi_pillow",
    "pypi_pyroma",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_zest.releaser"
  ]
}
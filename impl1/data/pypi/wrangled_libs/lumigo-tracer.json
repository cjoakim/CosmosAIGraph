{
  "classifiers": [
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "[![circleci](https://dl.circleci.com/status-badge/img/gh/lumigo-io/python_tracer/tree/master.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/lumigo-io/python_tracer/tree/master)\n![version](https://badge.fury.io/py/lumigo-tracer.svg)\n![codecov](https://codecov.io/gh/lumigo-io/python_tracer/branch/master/graph/badge.svg?token=6egxilefwg)\n\nthis is lumigo/python_tracer, lumigo's python agent for distributed tracing and performance monitoring.\n\nsupported python runtimes: 3.6, 3.7, 3.8, 3.9, 3.10 and 3.11\n\n# usage\n\nthe package allows you to pursue automated metric gathering through lambda layers, automated metric gathering and instrumentation through the serverless framework, or manual metric creation and implementation.\n\n## with lambda layers\n\n* when configuring your lambda functions, include the appropriate lambda layer arn [from these tables](https://github.com/lumigo-io/python_tracer/tree/master/layers)\n\n*note* - lambda layers are an optional feature. if you decide to use this capability, the list of lambda layers available is available [here.](https://github.com/lumigo-io/python_tracer/tree/master/layers).\n\nlearn more in our [documentation on auto-instrumentation](https://docs.lumigo.io/docs/auto-instrumentation).\n\n## with serverless framework\n\n* to configure the serverless framework to work with lumigo, simply install our plugin: [**serverless-lumigo-plugin**](https://github.com/lumigo-io/serverless-lumigo-plugin/blob/master/readme.md)\n\n## manually\n\nto manually configure lumigo in your lambda functions:\n\n* install the package:\n\n```bash\npip install lumigo_tracer\n```\n\n* import the package in your lambda code:\n\n```python\n`from lumigo_tracer import lumigo_tracer`\n```\n\n* next, wrap your `handler` in lumigo's `trace` function (note: replace `your-token-here` with your lumigo api token):\n\n```python\n@lumigo_tracer(token='your-token-here')\ndef my_lambda(event, context):\n    print('i can finally troubleshoot!')\n```\n\n* your function is now fully instrumented\n\n## configuration\n\n`@lumigo/python_tracer` offers several different configuration options. pass these to the lambda function as environment variables:\n\n* `lumigo_debug=true` - enables debug logging\n* `lumigo_secret_masking_regex=[\"regex1\", \"regex2\"]` - prevents lumigo from sending keys that match the supplied regular expressions. all regular expressions are case-insensitive. by default, lumigo applies the following regular expressions: `[\".*pass.*\", \".*key.*\", \".*secret.*\", \".*credential.*\", \".*passphrase.*\"]`.\n  * we support more granular masking using the following parameters. if not given, the above configuration is the fallback: `lumigo_secret_masking_regex_http_request_bodies`, `lumigo_secret_masking_regex_http_request_headers`, `lumigo_secret_masking_regex_http_response_bodies`, `lumigo_secret_masking_regex_http_response_headers`, `lumigo_secret_masking_regex_http_query_params`, `lumigo_secret_masking_regex_environment`.\n* `lumigo_domains_scrubber=[\".*secret.*\"]` - prevents lumigo from collecting both request and response details from a list of domains. this accepts a comma-separated list of regular expressions that is json-formatted. by default, the tracer uses `[\"secretsmanager\\..*\\.amazonaws\\.com\", \"ssm\\..*\\.amazonaws\\.com\", \"kms\\..*\\.amazonaws\\.com\"]`. **note** - these defaults are overridden when you define a different list of regular expressions.\n* `lumigo_propagate_w3c=true` - add w3c tracecontext headers to outgoing http requests. this enables uninterrupted transactions with applications traced with opentelemetry.\n* `lumigo_switch_off=true` - in the event a critical issue arises, this turns off all actions that lumigo takes in response to your code. this happens without a deployment, and is picked up on the next function run once the environment variable is present.\n\n### step functions\n\nif your function is part of a set of step functions, you can add the flag `step_function: true` to the lumigo tracer import. alternatively, you can configure the step function using an environment variable `lumigo_step_function=true`. when this is active, lumigo tracks all states in the step function in a single transaction, easing debugging and observability.\n\n```python\n@lumigo_tracer(token='xxx', step_function=true)\ndef my_lambda(event, context):\n    print('step function visibility!')\n```\n\nnote: the tracer adds the key `\"_lumigo\"` to the return value of the function.\n\nif you override the `\"parameters\"` configuration, add `\"_lumigo.$\": \"$._lumigo\"` to ensure this value is still present.\n\nbelow is an example configuration for a lambda function that is part of a step function that has overridden its parameters:\n\n```json\n\"states\": {\n    \"state1\": {\n      \"type\": \"task\",\n      \"resource\": \"arn:aws:lambda:us-west-2:account:function:function_name\",\n      \"parameters\": {\n          \"changed\": \"parameters\",\n          \"_lumigo.$\": \"$._lumigo\"\n        },\n      \"next\": \"state2\"\n    },\n    \"state2\": {\n      \"type\": \"pass\",\n      \"end\": true\n    }\n}\n```\n\n### logging programmatic errors\n\nlumigo provides the `report_error` function, which you can use to publish error logs that are visible to the entire platform. to log programmatic errors:\n\n* import the `report_error` function with the following code: `from lumigo_tracer import report_error`\n* use the `report_error` function with the message you wish to send: `report_error(\"your-message-here\")`\n\n### adding execution tags\n\nyou can add execution tags to a function with dynamic values using the parameter `add_execution_tag`.\n\nthese tags will be searchable from within the lumigo platform.\n\n#### limitations\n\n* up to 50 execution tags\n* each tag key length can have 50 characters at most.\n* each tag value length can have 70 characters at most.\n\n# contributing\n\ncontributions to this project are welcome from all! below are a couple pointers on how to prepare your machine, as well as some information on testing.\n\n## preparing your machine\n\ngetting your machine ready to develop against the package is a straightforward process:\n\n1. clone this repository, and open a cli in the cloned directory\n1. create a virtual environment for the project `virtualenv venv -p python3`\n1. activate the virtualenv: `. venv/bin/activate`\n1. install dependencies: `pip install -r requirements.txt`\n1. run the setup script: `python setup.py develop`.\n1. run `pre-commit install` in your repository to install pre-commit hooks\n\n**note**: if you are using pycharm, ensure that you set it to use the virtualenv virtual environment manager. this is available in the menu under pycharm -> preferences -> project -> interpreter\n\n## running the test suite\n\nwe've provided an easy way to run the unit test suite:\n\n* to run all unit tests, simply run `py.test` in the root folder.\n* to deploy services for component tests, run `sls deploy` from the root test directory. this only needs to take place when the resources change.\n* to run component tests, add the `--all` flag: `py.test --all`\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "lumigo-tracer",
  "package_url": "https://pypi.org/project/lumigo-tracer/",
  "project_url": "https://pypi.org/project/lumigo-tracer/",
  "project_urls": {
    "Homepage": "https://github.com/lumigo-io/python_tracer.git"
  },
  "release_url": "https://pypi.org/project/lumigo-tracer/1.1.230/",
  "requires_dist": [
    "lumigo-core (==0.0.6)"
  ],
  "requires_python": "",
  "summary": "lumigo tracer for python v3.6 / 3.7 / 3.8 / 3.9 / 3.10 runtimes",
  "version": "1.1.230",
  "releases": [],
  "developers": [
    "lumigo_ltd",
    "support@lumigo.io"
  ],
  "kwds": "lumigo_tracer python_tracer lumigo_debug lumigo_step_function tracer",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_lumigo_tracer",
  "homepage": "https://github.com/lumigo-io/python_tracer.git",
  "release_count": 229,
  "dependency_ids": [
    "pypi_lumigo_core"
  ]
}
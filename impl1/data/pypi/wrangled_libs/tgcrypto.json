{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications",
    "topic :: communications :: chat",
    "topic :: internet",
    "topic :: security",
    "topic :: security :: cryptography",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# tgcrypto\n\n> fast and portable cryptography extension library for pyrogram\n\n**tgcrypto** is a cryptography library written in c as a python extension. it is designed to be portable, fast,\neasy to install and use. tgcrypto is intended for [pyrogram](https://github.com/pyrogram/pyrogram) and implements the\ncryptographic algorithms telegram requires, namely:\n\n- **`aes-256-ige`** - used in [mtproto v2.0](https://core.telegram.org/mtproto).\n- **`aes-256-ctr`** - used for [cdn encrypted files](https://core.telegram.org/cdn).\n- **`aes-256-cbc`** - used for [encrypted passport credentials](https://core.telegram.org/passport).\n\n## requirements\n\n- python 3.7 or higher.\n\n## installation\n\n``` bash\n$ pip3 install -u tgcrypto\n```\n\n## api\n\ntgcrypto api consists of these six methods:\n\n```python\ndef ige256_encrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\ndef ige256_decrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\n\ndef ctr256_encrypt(data: bytes, key: bytes, iv: bytes, state: bytes) -> bytes: ...\ndef ctr256_decrypt(data: bytes, key: bytes, iv: bytes, state: bytes) -> bytes: ...\n\ndef cbc256_encrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\ndef cbc256_decrypt(data: bytes, key: bytes, iv: bytes) -> bytes: ...\n```\n\n## usage\n\n### ige mode\n\n**note**: data must be padded to match a multiple of the block size (16 bytes).\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024 + 7)  # 10 mb of random data + 7 bytes to show padding\nkey = os.urandom(32)  # random key\niv = os.urandom(32)  # random iv\n\n# pad with zeroes: -7 % 16 = 9\ndata += bytes(-len(data) % 16)\n\nige_encrypted = tgcrypto.ige256_encrypt(data, key, iv)\nige_decrypted = tgcrypto.ige256_decrypt(ige_encrypted, key, iv)\n\nprint(data == ige_decrypted)  # true\n```\n    \n### ctr mode (single chunk)\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024)  # 10 mb of random data\n\nkey = os.urandom(32)  # random key\n\nenc_iv = bytearray(os.urandom(16))  # random iv\ndec_iv = enc_iv.copy()  # keep a copy for decryption\n\nctr_encrypted = tgcrypto.ctr256_encrypt(data, key, enc_iv, bytes(1))\nctr_decrypted = tgcrypto.ctr256_decrypt(ctr_encrypted, key, dec_iv, bytes(1))\n\nprint(data == ctr_decrypted)  # true\n```\n\n### ctr mode (stream)\n\n``` python\nimport os\nfrom io import bytesio\n\nimport tgcrypto\n\ndata = bytesio(os.urandom(10 * 1024 * 1024))  # 10 mb of random data\n\nkey = os.urandom(32)  # random key\n\nenc_iv = bytearray(os.urandom(16))  # random iv\ndec_iv = enc_iv.copy()  # keep a copy for decryption\n\nenc_state = bytes(1)  # encryption state, starts from 0\ndec_state = bytes(1)  # decryption state, starts from 0\n\nencrypted_data = bytesio()  # encrypted data buffer\ndecrypted_data = bytesio()  # decrypted data buffer\n\nwhile true:\n    chunk = data.read(1024)\n\n    if not chunk:\n        break\n\n    # write 1k encrypted bytes into the encrypted data buffer\n    encrypted_data.write(tgcrypto.ctr256_encrypt(chunk, key, enc_iv, enc_state))\n\n# reset position. we need to read it now\nencrypted_data.seek(0)\n\nwhile true:\n    chunk = encrypted_data.read(1024)\n\n    if not chunk:\n        break\n\n    # write 1k decrypted bytes into the decrypted data buffer\n    decrypted_data.write(tgcrypto.ctr256_decrypt(chunk, key, dec_iv, dec_state))\n\nprint(data.getvalue() == decrypted_data.getvalue())  # true\n```\n\n### cbc mode\n\n**note**: data must be padded to match a multiple of the block size (16 bytes).\n\n``` python\nimport os\n\nimport tgcrypto\n\ndata = os.urandom(10 * 1024 * 1024 + 7)  # 10 mb of random data + 7 bytes to show padding\nkey = os.urandom(32)  # random key\n\nenc_iv = bytearray(os.urandom(16))  # random iv\ndec_iv = enc_iv.copy()  # keep a copy for decryption\n\n# pad with zeroes: -7 % 16 = 9\ndata += bytes(-len(data) % 16)\n\ncbc_encrypted = tgcrypto.cbc256_encrypt(data, key, enc_iv)\ncbc_decrypted = tgcrypto.cbc256_decrypt(cbc_encrypted, key, dec_iv)\n\nprint(data == cbc_decrypted)  # true\n```\n\n## testing\n\n1. clone this repository: `git clone https://github.com/pyrogram/tgcrypto`.\n2. enter the directory: `cd tgcrypto`.\n3. install `tox`: `pip3 install tox`\n4. run tests: `tox`.\n\n## license\n\n[lgplv3+](copying.lesser) \u00a9 2017-present [dan](https://github.com/delivrance)\n",
  "docs_url": null,
  "keywords": "pyrogram telegram crypto cryptography encryption mtproto extension library aes",
  "license": "lgplv3+",
  "name": "tgcrypto",
  "package_url": "https://pypi.org/project/TgCrypto/",
  "project_url": "https://pypi.org/project/TgCrypto/",
  "project_urls": {
    "Community": "https://t.me/pyrogram",
    "Documentation": "https://docs.pyrogram.org",
    "Download": "https://github.com/pyrogram/tgcrypto/releases/latest",
    "Homepage": "https://github.com/pyrogram",
    "Source": "https://github.com/pyrogram/tgcrypto",
    "Tracker": "https://github.com/pyrogram/tgcrypto/issues"
  },
  "release_url": "https://pypi.org/project/TgCrypto/1.2.5/",
  "requires_dist": [],
  "requires_python": "~=3.7",
  "summary": "fast and portable cryptography extension library for pyrogram",
  "version": "1.2.5",
  "releases": [],
  "developers": [
    "dan",
    "dan@pyrogram.org"
  ],
  "kwds": "tgcrypto ctr256_encrypt ige256_encrypt ige_encrypted telegram",
  "license_kwds": "lgplv3+",
  "libtype": "pypi",
  "id": "pypi_tgcrypto",
  "homepage": "https://github.com/pyrogram",
  "release_count": 13,
  "dependency_ids": []
}
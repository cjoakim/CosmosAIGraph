{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: image recognition",
    "topic :: scientific/engineering :: information analysis"
  ],
  "description": "<div align=\"center\">\n\n<img src=\"https://github.com/lightning-ai/torchmetrics/raw/v1.2.1/docs/source/_static/images/logo.png\" width=\"400px\">\n\n**machine learning metrics for distributed, scalable pytorch applications.**\n\n______________________________________________________________________\n\n<p align=\"center\">\n  <a href=\"#what-is-torchmetrics\">what is torchmetrics</a> \u2022\n  <a href=\"#implementing-your-own-module-metric\">implementing a metric</a> \u2022\n  <a href=\"#build-in-metrics\">built-in metrics</a> \u2022\n  <a href=\"https://lightning.ai/docs/torchmetrics/stable/\">docs</a> \u2022\n  <a href=\"#community\">community</a> \u2022\n  <a href=\"#license\">license</a>\n</p>\n\n______________________________________________________________________\n\n[![pypi - python version](https://img.shields.io/pypi/pyversions/torchmetrics)](https://pypi.org/project/torchmetrics/)\n[![pypi status](https://badge.fury.io/py/torchmetrics.svg)](https://badge.fury.io/py/torchmetrics)\n[![pypi - downloads](https://img.shields.io/pypi/dm/torchmetrics)\n](https://pepy.tech/project/torchmetrics)\n[![conda](https://img.shields.io/conda/v/conda-forge/torchmetrics?label=conda&color=success)](https://anaconda.org/conda-forge/torchmetrics)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](https://github.com/lightning-ai/torchmetrics/blob/master/license)\n\n[![ci testing | cpu](https://github.com/lightning-ai/torchmetrics/actions/workflows/ci-tests.yml/badge.svg?event=push)](https://github.com/lightning-ai/torchmetrics/actions/workflows/ci-tests.yml)\n[![build status](https://dev.azure.com/lightning-ai/metrics/_apis/build/status%2ftm.unittests?branchname=refs%2ftags%2fv1.2.1)](https://dev.azure.com/lightning-ai/metrics/_build/latest?definitionid=2&branchname=refs%2ftags%2fv1.2.1)\n[![codecov](https://codecov.io/gh/lightning-ai/torchmetrics/release/v1.2.1/graph/badge.svg?token=ner6lpi3hs)](https://codecov.io/gh/lightning-ai/torchmetrics)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/lightning-ai/torchmetrics/master.svg)](https://results.pre-commit.ci/latest/github/lightning-ai/torchmetrics/master)\n\n[![documentation status](https://readthedocs.org/projects/torchmetrics/badge/?version=latest)](https://torchmetrics.readthedocs.io/en/latest/?badge=latest)\n[![discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/vptpczkgna)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.5844769.svg)](https://doi.org/10.5281/zenodo.5844769)\n[![joss status](https://joss.theoj.org/papers/561d9bb59b400158bc8204e2639dca43/status.svg)](https://joss.theoj.org/papers/561d9bb59b400158bc8204e2639dca43)\n\n______________________________________________________________________\n\n</div>\n\n## installation\n\nsimple installation from pypi\n\n```bash\npip install torchmetrics\n```\n\n<details>\n  <summary>other installations</summary>\n\ninstall using conda\n\n```bash\nconda install -c conda-forge torchmetrics\n```\n\npip from source\n\n```bash\n# with git\npip install git+https://github.com/lightning-ai/torchmetrics.git@release/stable\n```\n\npip from archive\n\n```bash\npip install https://github.com/lightning-ai/torchmetrics/archive/refs/heads/release/stable.zip\n```\n\nextra dependencies for specialized metrics:\n\n```bash\npip install torchmetrics[audio]\npip install torchmetrics[image]\npip install torchmetrics[text]\npip install torchmetrics[all]  # install all of the above\n```\n\ninstall latest developer version\n\n```bash\npip install https://github.com/lightning-ai/torchmetrics/archive/master.zip\n```\n\n</details>\n\n______________________________________________________________________\n\n## what is torchmetrics\n\ntorchmetrics is a collection of 100+ pytorch metrics implementations and an easy-to-use api to create custom metrics. it offers:\n\n- a standardized interface to increase reproducibility\n- reduces boilerplate\n- automatic accumulation over batches\n- metrics optimized for distributed-training\n- automatic synchronization between multiple devices\n\nyou can use torchmetrics with any pytorch model or with [pytorch lightning](https://pytorch-lightning.readthedocs.io/en/stable/) to enjoy additional features such as:\n\n- module metrics are automatically placed on the correct device.\n- native support for logging metrics in lightning to reduce even more boilerplate.\n\n## using torchmetrics\n\n### module metrics\n\nthe [module-based metrics](https://lightning.ai/docs/torchmetrics/stable/references/metric.html) contain internal metric states (similar to the parameters of the pytorch module) that automate accumulation and synchronization across devices!\n\n- automatic accumulation over multiple batches\n- automatic synchronization between multiple devices\n- metric arithmetic\n\n**this can be run on cpu, single gpu or multi-gpus!**\n\nfor the single gpu/cpu case:\n\n```python\nimport torch\n\n# import our library\nimport torchmetrics\n\n# initialize metric\nmetric = torchmetrics.classification.accuracy(task=\"multiclass\", num_classes=5)\n\n# move the metric to device you want computations to take place\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmetric.to(device)\n\nn_batches = 10\nfor i in range(n_batches):\n    # simulate a classification problem\n    preds = torch.randn(10, 5).softmax(dim=-1).to(device)\n    target = torch.randint(5, (10,)).to(device)\n\n    # metric on current batch\n    acc = metric(preds, target)\n    print(f\"accuracy on batch {i}: {acc}\")\n\n# metric on all batches using custom accumulation\nacc = metric.compute()\nprint(f\"accuracy on all data: {acc}\")\n```\n\nmodule metric usage remains the same when using multiple gpus or multiple nodes.\n\n<details>\n  <summary>example using ddp</summary>\n\n<!--phmdoctest-mark.skip-->\n\n```python\nimport os\nimport torch\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nfrom torch import nn\nfrom torch.nn.parallel import distributeddataparallel as ddp\nimport torchmetrics\n\n\ndef metric_ddp(rank, world_size):\n    os.environ[\"master_addr\"] = \"localhost\"\n    os.environ[\"master_port\"] = \"12355\"\n\n    # create default process group\n    dist.init_process_group(\"gloo\", rank=rank, world_size=world_size)\n\n    # initialize model\n    metric = torchmetrics.classification.accuracy(task=\"multiclass\", num_classes=5)\n\n    # define a model and append your metric to it\n    # this allows metric states to be placed on correct accelerators when\n    # .to(device) is called on the model\n    model = nn.linear(10, 10)\n    model.metric = metric\n    model = model.to(rank)\n\n    # initialize ddp\n    model = ddp(model, device_ids=[rank])\n\n    n_epochs = 5\n    # this shows iteration over multiple training epochs\n    for n in range(n_epochs):\n        # this will be replaced by a dataloader with a distributedsampler\n        n_batches = 10\n        for i in range(n_batches):\n            # simulate a classification problem\n            preds = torch.randn(10, 5).softmax(dim=-1)\n            target = torch.randint(5, (10,))\n\n            # metric on current batch\n            acc = metric(preds, target)\n            if rank == 0:  # print only for rank 0\n                print(f\"accuracy on batch {i}: {acc}\")\n\n        # metric on all batches and all accelerators using custom accumulation\n        # accuracy is same across both accelerators\n        acc = metric.compute()\n        print(f\"accuracy on all data: {acc}, accelerator rank: {rank}\")\n\n        # resetting internal state such that metric ready for new data\n        metric.reset()\n\n    # cleanup\n    dist.destroy_process_group()\n\n\nif __name__ == \"__main__\":\n    world_size = 2  # number of gpus to parallelize over\n    mp.spawn(metric_ddp, args=(world_size,), nprocs=world_size, join=true)\n```\n\n</details>\n\n### implementing your own module metric\n\nimplementing your own metric is as easy as subclassing an [`torch.nn.module`](https://pytorch.org/docs/stable/generated/torch.nn.module.html). simply, subclass `torchmetrics.metric`\nand just implement the `update` and `compute` methods:\n\n```python\nimport torch\nfrom torchmetrics import metric\n\n\nclass myaccuracy(metric):\n    def __init__(self):\n        # remember to call super\n        super().__init__()\n        # call `self.add_state`for every internal state that is needed for the metrics computations\n        # dist_reduce_fx indicates the function that should be used to reduce\n        # state from multiple processes\n        self.add_state(\"correct\", default=torch.tensor(0), dist_reduce_fx=\"sum\")\n        self.add_state(\"total\", default=torch.tensor(0), dist_reduce_fx=\"sum\")\n\n    def update(self, preds: torch.tensor, target: torch.tensor) -> none:\n        # extract predicted class index for computing accuracy\n        preds = preds.argmax(dim=-1)\n        assert preds.shape == target.shape\n        # update metric states\n        self.correct += torch.sum(preds == target)\n        self.total += target.numel()\n\n    def compute(self) -> torch.tensor:\n        # compute final result\n        return self.correct.float() / self.total\n\n\nmy_metric = myaccuracy()\npreds = torch.randn(10, 5).softmax(dim=-1)\ntarget = torch.randint(5, (10,))\n\nprint(my_metric(preds, target))\n```\n\n### functional metrics\n\nsimilar to [`torch.nn`](https://pytorch.org/docs/stable/nn.html), most metrics have both a [module-based](https://lightning.ai/docs/torchmetrics/stable/references/metric.html) and functional version.\nthe functional versions are simple python functions that as input take [torch.tensors](https://pytorch.org/docs/stable/tensors.html) and return the corresponding metric as a [torch.tensor](https://pytorch.org/docs/stable/tensors.html).\n\n```python\nimport torch\n\n# import our library\nimport torchmetrics\n\n# simulate a classification problem\npreds = torch.randn(10, 5).softmax(dim=-1)\ntarget = torch.randint(5, (10,))\n\nacc = torchmetrics.functional.classification.multiclass_accuracy(\n    preds, target, num_classes=5\n)\n```\n\n### covered domains and example metrics\n\nin total torchmetrics contains [100+ metrics](https://lightning.ai/docs/torchmetrics/stable/all-metrics.html), which\ncovers the following domains:\n\n- audio\n- classification\n- detection\n- information retrieval\n- image\n- multimodal (image-text)\n- nominal\n- regression\n- text\n\neach domain may require some additional dependencies which can be installed with `pip install torchmetrics[audio]`,\n`pip install torchmetrics['image']` etc.\n\n### additional features\n\n#### plotting\n\nvisualization of metrics can be important to help understand what is going on with your machine learning algorithms.\ntorchmetrics have built-in plotting support (install dependencies with `pip install torchmetrics[visual]`) for nearly\nall modular metrics through the `.plot` method. simply call the method to get a simple visualization of any metric!\n\n```python\nimport torch\nfrom torchmetrics.classification import multiclassaccuracy, multiclassconfusionmatrix\n\nnum_classes = 3\n\n# this will generate two distributions that comes more similar as iterations increase\nw = torch.randn(num_classes)\ntarget = lambda it: torch.multinomial((it * w).softmax(dim=-1), 100, replacement=true)\npreds = lambda it: torch.multinomial((it * w).softmax(dim=-1), 100, replacement=true)\n\nacc = multiclassaccuracy(num_classes=num_classes, average=\"micro\")\nacc_per_class = multiclassaccuracy(num_classes=num_classes, average=none)\nconfmat = multiclassconfusionmatrix(num_classes=num_classes)\n\n# plot single value\nfor i in range(5):\n    acc_per_class.update(preds(i), target(i))\n    confmat.update(preds(i), target(i))\nfig1, ax1 = acc_per_class.plot()\nfig2, ax2 = confmat.plot()\n\n# plot multiple values\nvalues = []\nfor i in range(10):\n    values.append(acc(preds(i), target(i)))\nfig3, ax3 = acc.plot(values)\n```\n\n<p align=\"center\">\n  <img src=\"https://github.com/lightning-ai/torchmetrics/raw/v1.2.1/docs/source/_static/images/plot_example.png\" width=\"1000\">\n</p>\n\nfor examples of plotting different metrics try running [this example file](examples/plotting.py).\n\n## contribute!\n\nthe lightning + torchmetrics team is hard at work adding even more metrics.\nbut we're looking for incredible contributors like you to submit new metrics\nand improve existing ones!\n\njoin our [slack](https://www.pytorchlightning.ai/community) to get help with becoming a contributor!\n\n## community\n\nfor help or questions, join our huge community on [slack](https://www.pytorchlightning.ai/community)!\n\n## citation\n\nwe\u2019re excited to continue the strong legacy of open source software and have been inspired\nover the years by caffe, theano, keras, pytorch, torchbearer, ignite, sklearn and fast.ai.\n\nif you want to cite this framework feel free to use github's built-in citation option to generate a bibtex or apa-style citation based on [this file](https://github.com/lightning-ai/torchmetrics/blob/master/citation.cff) (but only if you loved it \ud83d\ude0a).\n\n## license\n\nplease observe the apache 2.0 license that is listed in this repository.\nin addition, the lightning framework is patent pending.\n",
  "docs_url": null,
  "keywords": "deep learning,machine learning,pytorch,metrics,ai",
  "license": "apache-2.0",
  "name": "torchmetrics",
  "package_url": "https://pypi.org/project/torchmetrics/",
  "project_url": "https://pypi.org/project/torchmetrics/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Lightning-AI/torchmetrics/issues",
    "Documentation": "https://torchmetrics.rtfd.io/en/latest/",
    "Download": "https://github.com/Lightning-AI/torchmetrics/archive/master.zip",
    "Homepage": "https://github.com/Lightning-AI/torchmetrics",
    "Source Code": "https://github.com/Lightning-AI/torchmetrics"
  },
  "release_url": "https://pypi.org/project/torchmetrics/1.2.1/",
  "requires_dist": [
    "numpy >1.20.0",
    "packaging >17.1",
    "torch >=1.8.1",
    "lightning-utilities >=0.8.0",
    "typing-extensions ; python_version < \"3.9\"",
    "pytorch-msssim ==1.0.0 ; extra == '_tests'",
    "kornia >=0.6.7 ; extra == '_tests'",
    "jiwer >=2.3.0 ; extra == '_tests'",
    "scipy >1.0.0 ; extra == '_tests'",
    "pandas >1.0.0 ; extra == '_tests'",
    "lpips <=0.1.4 ; extra == '_tests'",
    "mir-eval >=0.6 ; extra == '_tests'",
    "torch-complex <=0.4.3 ; extra == '_tests'",
    "bert-score ==0.3.13 ; extra == '_tests'",
    "scikit-image >=0.19.0 ; extra == '_tests'",
    "netcal >1.0.0 ; extra == '_tests'",
    "dython <=0.7.4 ; extra == '_tests'",
    "rouge-score >0.1.0 ; extra == '_tests'",
    "pandas >=1.4.0 ; extra == '_tests'",
    "statsmodels >0.13.5 ; extra == '_tests'",
    "numpy <1.25.0 ; extra == '_tests'",
    "sacrebleu >=2.0.0 ; extra == '_tests'",
    "fairlearn ; extra == '_tests'",
    "sewar >=0.4.4 ; extra == '_tests'",
    "fast-bss-eval >=0.1.0 ; extra == '_tests'",
    "faster-coco-eval >=1.3.3 ; extra == '_tests'",
    "huggingface-hub <0.20 ; extra == '_tests'",
    "pystoi >=0.3.0 ; extra == 'all'",
    "torchaudio >=0.10.0 ; extra == 'all'",
    "pycocotools >2.0.0 ; extra == 'all'",
    "torchvision >=0.8 ; extra == 'all'",
    "torch-fidelity <=0.4.0 ; extra == 'all'",
    "scipy >1.0.0 ; extra == 'all'",
    "transformers >=4.10.0 ; extra == 'all'",
    "piq <=0.8.0 ; extra == 'all'",
    "regex >=2021.9.24 ; extra == 'all'",
    "nltk >=3.6 ; extra == 'all'",
    "tqdm >=4.41.0 ; extra == 'all'",
    "transformers >4.4.0 ; extra == 'all'",
    "types-requests ; extra == 'all'",
    "types-six ; extra == 'all'",
    "types-tabulate ; extra == 'all'",
    "types-PyYAML ; extra == 'all'",
    "types-setuptools ; extra == 'all'",
    "types-protobuf ; extra == 'all'",
    "mypy ==1.7.1 ; extra == 'all'",
    "types-emoji ; extra == 'all'",
    "torch ==2.1.1 ; extra == 'all'",
    "matplotlib >=3.2.0 ; extra == 'all'",
    "SciencePlots >=2.0.0 ; extra == 'all'",
    "pystoi >=0.3.0 ; extra == 'audio'",
    "torchaudio >=0.10.0 ; extra == 'audio'",
    "pycocotools >2.0.0 ; extra == 'detection'",
    "torchvision >=0.8 ; extra == 'detection'",
    "pystoi >=0.3.0 ; extra == 'dev'",
    "torchaudio >=0.10.0 ; extra == 'dev'",
    "pycocotools >2.0.0 ; extra == 'dev'",
    "torchvision >=0.8 ; extra == 'dev'",
    "torch-fidelity <=0.4.0 ; extra == 'dev'",
    "scipy >1.0.0 ; extra == 'dev'",
    "transformers >=4.10.0 ; extra == 'dev'",
    "piq <=0.8.0 ; extra == 'dev'",
    "regex >=2021.9.24 ; extra == 'dev'",
    "nltk >=3.6 ; extra == 'dev'",
    "tqdm >=4.41.0 ; extra == 'dev'",
    "transformers >4.4.0 ; extra == 'dev'",
    "types-requests ; extra == 'dev'",
    "types-six ; extra == 'dev'",
    "types-tabulate ; extra == 'dev'",
    "types-PyYAML ; extra == 'dev'",
    "types-setuptools ; extra == 'dev'",
    "types-protobuf ; extra == 'dev'",
    "mypy ==1.7.1 ; extra == 'dev'",
    "types-emoji ; extra == 'dev'",
    "torch ==2.1.1 ; extra == 'dev'",
    "matplotlib >=3.2.0 ; extra == 'dev'",
    "SciencePlots >=2.0.0 ; extra == 'dev'",
    "pytorch-msssim ==1.0.0 ; extra == 'dev'",
    "kornia >=0.6.7 ; extra == 'dev'",
    "jiwer >=2.3.0 ; extra == 'dev'",
    "pandas >1.0.0 ; extra == 'dev'",
    "lpips <=0.1.4 ; extra == 'dev'",
    "mir-eval >=0.6 ; extra == 'dev'",
    "torch-complex <=0.4.3 ; extra == 'dev'",
    "bert-score ==0.3.13 ; extra == 'dev'",
    "scikit-image >=0.19.0 ; extra == 'dev'",
    "netcal >1.0.0 ; extra == 'dev'",
    "dython <=0.7.4 ; extra == 'dev'",
    "rouge-score >0.1.0 ; extra == 'dev'",
    "pandas >=1.4.0 ; extra == 'dev'",
    "statsmodels >0.13.5 ; extra == 'dev'",
    "numpy <1.25.0 ; extra == 'dev'",
    "sacrebleu >=2.0.0 ; extra == 'dev'",
    "fairlearn ; extra == 'dev'",
    "sewar >=0.4.4 ; extra == 'dev'",
    "fast-bss-eval >=0.1.0 ; extra == 'dev'",
    "faster-coco-eval >=1.3.3 ; extra == 'dev'",
    "huggingface-hub <0.20 ; extra == 'dev'",
    "torch-fidelity <=0.4.0 ; extra == 'image'",
    "scipy >1.0.0 ; extra == 'image'",
    "torchvision >=0.8 ; extra == 'image'",
    "transformers >=4.10.0 ; extra == 'multimodal'",
    "piq <=0.8.0 ; extra == 'multimodal'",
    "regex >=2021.9.24 ; extra == 'text'",
    "nltk >=3.6 ; extra == 'text'",
    "tqdm >=4.41.0 ; extra == 'text'",
    "transformers >4.4.0 ; extra == 'text'",
    "types-requests ; extra == 'typing'",
    "types-six ; extra == 'typing'",
    "types-tabulate ; extra == 'typing'",
    "types-PyYAML ; extra == 'typing'",
    "types-setuptools ; extra == 'typing'",
    "types-protobuf ; extra == 'typing'",
    "mypy ==1.7.1 ; extra == 'typing'",
    "types-emoji ; extra == 'typing'",
    "torch ==2.1.1 ; extra == 'typing'",
    "matplotlib >=3.2.0 ; extra == 'visual'",
    "SciencePlots >=2.0.0 ; extra == 'visual'"
  ],
  "requires_python": ">=3.8",
  "summary": "pytorch native metrics",
  "version": "1.2.1",
  "releases": [],
  "developers": [
    "lightning",
    "name@pytorchlightning.ai"
  ],
  "kwds": "torchmetrics pytorchlightning pytorch metrics torch",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_torchmetrics",
  "homepage": "https://github.com/lightning-ai/torchmetrics",
  "release_count": 48,
  "dependency_ids": [
    "pypi_bert_score",
    "pypi_dython",
    "pypi_fairlearn",
    "pypi_fast_bss_eval",
    "pypi_faster_coco_eval",
    "pypi_huggingface_hub",
    "pypi_jiwer",
    "pypi_kornia",
    "pypi_lightning_utilities",
    "pypi_lpips",
    "pypi_matplotlib",
    "pypi_mir_eval",
    "pypi_mypy",
    "pypi_netcal",
    "pypi_nltk",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_piq",
    "pypi_pycocotools",
    "pypi_pystoi",
    "pypi_pytorch_msssim",
    "pypi_regex",
    "pypi_rouge_score",
    "pypi_sacrebleu",
    "pypi_scienceplots",
    "pypi_scikit_image",
    "pypi_scipy",
    "pypi_sewar",
    "pypi_statsmodels",
    "pypi_torch",
    "pypi_torch_complex",
    "pypi_torch_fidelity",
    "pypi_torchaudio",
    "pypi_torchvision",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_types_emoji",
    "pypi_types_protobuf",
    "pypi_types_pyyaml",
    "pypi_types_requests",
    "pypi_types_setuptools",
    "pypi_types_six",
    "pypi_types_tabulate",
    "pypi_typing_extensions"
  ]
}
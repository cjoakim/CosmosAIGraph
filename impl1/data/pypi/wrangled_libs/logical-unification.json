{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "# logical unification\n\n[![build status](https://travis-ci.org/pythological/unification.svg?branch=main)](https://travis-ci.org/pythological/unification) [![coverage status](https://coveralls.io/repos/github/pythological/unification/badge.svg?branch=main)](https://coveralls.io/github/pythological/unification?branch=main) [![pypi](https://img.shields.io/pypi/v/logical-unification)](https://pypi.org/project/logical-unification/)\n\n[logical unification](https://en.wikipedia.org/wiki/unification_(computer_science)) in python, extensible via dispatch.\n\n## installation\n\nusing `pip`:\n```bash\npip install logical-unification\n```\n\nto install from source:\n```bash\ngit clone git@github.com:pythological/unification.git\ncd unification\npip install -r requirements.txt\n```\n\ntests can be run with the provided `makefile`:\n```bash\nmake check\n```\n\n## examples\n\n`unification` has built-in support for unifying most python data types via the function `unify`:\n\n```python\n>>> from unification import *\n>>> unify(1, 1)\n{}\n>>> unify(1, 2)\nfalse\n>>> x = var()\n>>> unify((1, x), (1, 2))\n{~x: 2}\n>>> unify((x, x), (1, 2))\nfalse\n```\n\nunifiable objects containing logic variables can also be reified using `reify`:\n\n```python\n>>> reify((1, x), {x: 2})\n(1, 2)\n```\n\nand most python data structures:\n\n``` python\n>>> unify({\"a\": 1, \"b\": 2}, {\"a\": x, \"b\": 2})\n{~x: 1}\n>>> unify({\"a\": 1, \"b\": 2}, {\"a\": x, \"b\": 2, \"c\": 3})\nfalse\n>>> from collections import namedtuples\n>>> ntuple = namedtuple(\"ntuple\", (\"a\", \"b\"))\n>>> unify(ntuple(1, 2), ntuple(x, 2))\n{~x: 1}\n```\n\ncustom classes can be made \"unifiable\" with the `unifiable` decorator:\n\n```python\n@unifiable\nclass account(object):\n    def __init__(self, id, name, balance):\n        self.id = id\n        self.name = name\n        self.balance = balance\n\n>>> data = [account(1, 'alice', 100),\n            account(2, 'bob', 0),\n            account(2, 'charlie', 0),\n            account(2, 'denis', 400),\n            account(2, 'edith', 500)]\n>>> id, name, balance = var('id'), var('name'), var('balance')\n>>> [unify(account(id, name, balance), acct) for acct in data]\n[{~name: 'alice', ~balance: 100, ~id: 1},\n{~name: 'bob', ~balance: 0, ~id: 2},\n{~name: 'charlie', ~balance: 0, ~id: 2},\n{~name: 'denis', ~balance: 400, ~id: 2},\n{~name: 'edith', ~balance: 500, ~id: 2}]\n>>> [unify(account(id, name, 0), acct) for acct in data]\n[false,\n{~name: 'bob', ~id: 2},\n{~name: 'charlie', ~id: 2},\nfalse,\nfalse]\n```\n\n`unification` also supports function dispatch through pattern matching:\n\n```python\n>> from unification.match import *\n>>> n = var('n')\n\n@match(0)\ndef fib(n):\n    return 0\n\n\n@match(1)\ndef fib(n):\n    return 1\n\n\n@match(n)\ndef fib(n):\n    return fib(n - 1) + fib(n - 2)\n\n>>> map(fib, [0, 1, 2, 3, 4, 5, 6, 7, 8, 0])\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n\nthe pattern matching can be fairly complex:\n\n```python\n>> name, amount = var('name'), var('amount')\n\n@match({'status': 200, 'data': {'name': name, 'credit': amount}})\ndef respond(name, amount):\n    balance[name] +=  amount\n\n\n@match({'status': 200, 'data': {'name': name, 'debit': amount}})\ndef respond(name, amount):\n    balance[name] -= amount\n\n\n@match({'status': 404})\ndef respond():\n    print(\"bad request\")\n\n```\n\nsee the full example in the [examples directory](https://github.com/pythological/unification#examples).\n\n\n## performance and reliability\n\n`unification`'s current design allows for unification and reification of nested structures that would otherwise break the python stack recursion limit.  it uses a generator-based design to \"stream\" the unifications and reifications.\n\nbelow are some stack vs. stream benchmarks that demonstrate how well the stream-based approach scales against the stack-based approach in terms of unifying and reifying deeply nested lists containing integers.  these benchmarks were generated from the tests in `tests/test_benchmarks.py` using cpython 3.7.3.\n\n<details><summary>stack vs. stream benchmarks</summary>\n<p>\n\n```python\n-------------------------------------------------------------------------------- benchmark 'reify_chain size=10': 2 tests -------------------------------------------------------------------------------\nname (time in us)                   min                 max               mean            stddev             median               iqr                outliers  ops (kops/s)            rounds  iterations\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_reify_chain_stack[10]      41.0790 (1.0)      545.1940 (3.20)     52.9087 (1.07)     9.7964 (1.04)     50.8650 (1.08)     6.4301 (8.37)      11815;10849       18.9005 (0.93)     260164           1\ntest_reify_chain_stream[10]     42.4410 (1.03)     170.5540 (1.0)      49.3080 (1.0)      9.3993 (1.0)      47.2400 (1.0)      0.7680 (1.0)      14962;102731       20.2807 (1.0)      278113           1\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------ benchmark 'reify_chain size=1000': 1 tests -----------------------------------------\nname (time in ms)                          min      max     mean  stddev  median     iqr  outliers      ops  rounds  iterations\n-------------------------------------------------------------------------------------------------------------------------------\ntest_reify_chain_stream_large[1000]     7.7722  28.2579  10.0723  2.5087  9.4899  0.3106    70;155  99.2820    1528           1\n-------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------- benchmark 'reify_chain size=300': 2 tests --------------------------------------------------------------------------\nname (time in ms)                   min                max              mean            stddev            median               iqr            outliers       ops            rounds  iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_reify_chain_stack[300]      1.5183 (1.0)      22.1821 (1.19)     1.9826 (1.0)      1.5511 (1.16)     1.7410 (1.0)      0.0801 (1.0)       144;684  504.3878 (1.0)        7201           1\ntest_reify_chain_stream[300]     1.7059 (1.12)     18.6020 (1.0)      2.1237 (1.07)     1.3389 (1.0)      1.9260 (1.11)     0.1020 (1.27)      118;585  470.8745 (0.93)       6416           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------- benchmark 'reify_chain size=35': 2 tests --------------------------------------------------------------------------------\nname (time in us)                    min                 max                mean             stddev              median                iqr             outliers  ops (kops/s)            rounds  iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_reify_chain_stream[35]     129.2780 (1.0)      868.1510 (1.02)     190.0433 (1.11)     36.2784 (1.41)     179.5690 (1.08)     21.5360 (2.30)     1535;1455        5.2620 (0.90)      26072           1\ntest_reify_chain_stack[35]      150.7850 (1.17)     853.7920 (1.0)      170.5166 (1.0)      25.7944 (1.0)      165.8500 (1.0)       9.3530 (1.0)      3724;5480        5.8645 (1.0)       81286           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------- benchmark 'reify_chain size=5000': 1 tests ------------------------------------------\nname (time in ms)                           min      max     mean  stddev   median     iqr  outliers      ops  rounds  iterations\n---------------------------------------------------------------------------------------------------------------------------------\ntest_reify_chain_stream_large[5000]     46.9073  86.9737  52.9724  6.6919  49.6787  3.9609     68;68  18.8778     292           1\n---------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------- benchmark 'unify_chain size=10': 2 tests -------------------------------------------------------------------------------\nname (time in us)                   min                 max                mean             stddev              median               iqr            outliers  ops (kops/s)            rounds  iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_unify_chain_stream[10]     77.6280 (1.0)      307.9130 (1.0)       86.7625 (1.0)      17.5355 (1.20)      82.7525 (1.0)      1.7290 (1.0)      809;1736       11.5257 (1.0)       15524           1\ntest_unify_chain_stack[10]      92.9890 (1.20)     309.8770 (1.01)     104.2017 (1.20)     14.6694 (1.0)      101.0160 (1.22)     4.2368 (2.45)    3657;6651        9.5968 (0.83)      73379           1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------- benchmark 'unify_chain size=1000': 1 tests ------------------------------------------\nname (time in ms)                           min      max     mean  stddev   median     iqr  outliers      ops  rounds  iterations\n---------------------------------------------------------------------------------------------------------------------------------\ntest_unify_chain_stream_large[1000]     27.3518  65.5924  31.1374  4.2563  29.5148  3.5286     38;35  32.1158     496           1\n---------------------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------- benchmark 'unify_chain size=300': 2 tests --------------------------------------------------------------------------\nname (time in ms)                   min                max              mean            stddev            median               iqr            outliers       ops            rounds  iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_unify_chain_stream[300]     3.6957 (1.0)      13.1876 (1.0)      4.4439 (1.0)      1.0719 (1.42)     4.2080 (1.0)      0.2410 (1.67)        51;95  225.0298 (1.0)        1114           1\ntest_unify_chain_stack[300]      4.2952 (1.16)     13.4294 (1.02)     4.7732 (1.07)     0.7555 (1.0)      4.6623 (1.11)     0.1446 (1.0)        36;136  209.5024 (0.93)       2911           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------- benchmark 'unify_chain size=35': 2 tests ---------------------------------------------------------------------------------\nname (time in us)                    min                   max                mean             stddev              median                iqr            outliers  ops (kops/s)            rounds  iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_unify_chain_stream[35]     285.6880 (1.0)        934.9690 (1.0)      324.5402 (1.0)      40.8338 (1.0)      319.8520 (1.0)      20.4375 (1.0)      962;1159        3.0813 (1.0)       24331           1\ntest_unify_chain_stack[35]      345.2770 (1.21)     1,088.3650 (1.16)     407.9067 (1.26)     52.2263 (1.28)     396.6640 (1.24)     20.6560 (1.01)    2054;3027        2.4515 (0.80)      37594           1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------------------------------------------- benchmark 'unify_chain size=5000': 1 tests ---------------------------------------------\nname (time in ms)                            min       max      mean   stddev    median      iqr  outliers     ops  rounds  iterations\n--------------------------------------------------------------------------------------------------------------------------------------\ntest_unify_chain_stream_large[5000]     555.2733  754.9897  605.4949  50.6124  591.1251  61.4030       2;2  1.6515      26           1\n--------------------------------------------------------------------------------------------------------------------------------------\n\nlegend:\n  outliers: 1 standard deviation from mean; 1.5 iqr (interquartile range) from 1st quartile and 3rd quartile.\n  ops: operations per second, computed as 1 / mean\n```\n\n</p>\n</details>\n\n## about\n\nthis project is a fork of [`unification`](https://github.com/mrocklin/unification/).\n\n## development\n\ninstall the development dependencies:\n\n```bash\n$ pip install -r requirements.txt\n```\n\nset up `pre-commit` hooks:\n\n```bash\n$ pre-commit install --install-hooks\n```",
  "docs_url": null,
  "keywords": "unification logic-programming dispatch",
  "license": "bsd",
  "name": "logical-unification",
  "package_url": "https://pypi.org/project/logical-unification/",
  "project_url": "https://pypi.org/project/logical-unification/",
  "project_urls": {
    "Homepage": "http://github.com/pythological/unification/"
  },
  "release_url": "https://pypi.org/project/logical-unification/0.4.6/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "logical unification in python",
  "version": "0.4.6",
  "releases": [],
  "developers": [
    "brandon_t",
    "brandonwillard+unification@gmail.com"
  ],
  "kwds": "unifications unification_ unification pip cpython",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_logical_unification",
  "homepage": "http://github.com/pythological/unification/",
  "release_count": 15,
  "dependency_ids": []
}
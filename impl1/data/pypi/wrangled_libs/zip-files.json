{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools",
    "topic :: system :: archiving :: compression",
    "topic :: system :: archiving :: packaging",
    "topic :: utilities"
  ],
  "description": "=========\nzip-files\n=========\n\n.. image:: https://img.shields.io/badge/github-goerz/zip__files-blue.svg\n   :alt: source code on github\n   :target: https://github.com/goerz/zip_files\n\n.. image:: https://img.shields.io/pypi/v/zip_files.svg\n   :alt: zip-files on the python package index\n   :target: https://pypi.python.org/pypi/zip_files\n\n.. image:: https://img.shields.io/travis/goerz/zip_files.svg\n   :alt: travis continuous integration\n   :target: https://travis-ci.org/goerz/zip_files\n\n.. image:: https://ci.appveyor.com/api/projects/status/k2lqxw97gv2m9gpm/branch/master?svg=true\n   :alt: appveyor continuous integration\n   :target: https://ci.appveyor.com/project/goerz/zip-files\n\n.. image:: https://img.shields.io/coveralls/github/goerz/zip_files/master.svg\n   :alt: coveralls\n   :target: https://coveralls.io/github/goerz/zip_files?branch=master\n\n.. image:: https://img.shields.io/badge/license-bsd-green.svg\n   :alt: bsd license\n   :target: https://opensource.org/licenses/bsd-3-clause\n\ncommand line utilities for creating zip files.\n\nprovides the ``zip-files`` and ``zip-folder`` command line utilities. these are\nintended as an easy platform-independent tool to create zip files with\nan arbitrary file name and an arbitrary root (the top-level folder after\nextracting a zip) from files and folders at arbitrary locations on the file\nsystem.\n\ntypical usage includes:\n\n*   deploy zip archives of sphinx-documentation while releasing python packages:\n\n    .. code-block:: shell\n\n        zip-folder --auto-root --outfile docs/_build/artifacts/mypackage-v1.0.0.zip docs/_build/html\n\n    creates a file ``mypackage-v1.0.0.zip`` in ``docs/_build/artifacts`` that\n    unzips as a folder ``mypackage-v1.0.0`` containing the files originally in\n    ``docs/_build/html/``.\n\n*   create zip files pulled together from different locations, for emailing:\n\n    .. code-block:: shell\n\n        zip-files -a -o report.zip ./report2020-01.tex /scratch/project/plots/*.pdf\n\n    creates a file ``report.zip`` that unzips as a folder\n    ``report`` containing the file ``report2020-01.tex`` and all the pdf files\n    originally in ``/scratch/project/plots/``.\n\n    .. code-block:: shell\n\n        zip-files -f report2020-01 -o report.zip ./report2020-01.tex /scratch/project/plots/*.pdf\n\n    does the same, but unzips as a folder ``report2020-01`` instead of ``report``.\n\n\n\ndevelopment of zip-files happens on `github`_.\n\n\ninstallation\n------------\n\nto install the latest released version of zip-files, run this command in your terminal:\n\n.. code-block:: shell\n\n    pip install zip_files\n\nthis is the preferred method to install zip-files, as it will always install\nthe most recent stable release.  it will result in the executable commands\n``zip-files`` and ``zip-folder`` being added to your environment's ``bin``\nfolder.\n\n.. _github: https://github.com/goerz/zip_files\n\n\nusage\n-----\n\nzip-files\n~~~~~~~~~\n\n.. code-block:: console\n\n    usage: zip-files [options] [files]...\n\n      create a zip file containing files.\n\n    options:\n      -h, --help                      show this message and exit.\n      --version                       show the version and exit.\n      --debug                         activate debug logging.\n      -f, --root-folder root_folder   folder name to prepend to files inside the\n                                      zip file.\n\n      -c, --compression [stored|deflated|bzip2|lzma]\n                                      zip compression method. the following\n                                      methods are available: \"stored\": no\n                                      compression; \"deflated\": the standard zip\n                                      compression method; \"bzip2\": bzip2\n                                      compression method (part of the zip standard\n                                      since 2001); \"lzma\": lzma compression method\n                                      (part of the zip standard since 2006).\n                                      [default: deflated]\n\n      -a, --auto-root                 if given in combination with --outfile, use\n                                      the stem of the outfile (without path and\n                                      extension) as the value for root_folder\n\n      -x, --exclude glob_pattern      glob-pattern to exclude. this is matched\n                                      from the right against all paths in the zip\n                                      file, see python pathlib's path.match\n                                      method. this option can be given multiple\n                                      times.\n\n      -x, --exclude-from file         file from which to read a list of glob-\n                                      patterns to exclude, cf. --exclude. each\n                                      line in file is one pattern. this option can\n                                      be given multiple times.\n\n      --exclude-dotfiles / --include-dotfiles\n                                      whether or not to include dotfiles in the\n                                      zip files. by default, dotfiles are\n                                      included.\n\n      --exclude-vcs / --include-vcs   whether or not to include files and\n                                      directories commonly used by version control\n                                      systems. (git, cvs, rcs, sccs, svn, arch,\n                                      bazaar, mercurial, and darcs), e.g.\n                                      '.git/', '.gitignore' '.gitmodules'\n                                      '.gitattributes' for git. by default, vcs\n                                      are included.\n\n      --exclude-git-ignores / --include-git-ignores\n                                      whether or not to look for .gitignore files\n                                      and to process them for exclude patterns.\n                                      note that the .gitignore file itself is\n                                      still included in the zip archive unless\n                                      --exclude-vcs is given. by default,\n                                      .gitignore files are not processed.\n\n      -o, --outfile outfile           the path of the zip file to be written. by\n                                      default, the file is written to stdout.\n\nzip-folder\n~~~~~~~~~~\n\n.. code-block:: console\n\n    usage: zip-folder [options] folder\n\n      create a zip file containing the folder.\n\n    options:\n      -h, --help                      show this message and exit.\n      --version                       show the version and exit.\n      --debug                         activate debug logging.\n      -f, --root-folder root_folder   folder name to use as the top level folder\n                                      inside the zip file (replacing folder).\n\n      -c, --compression [stored|deflated|bzip2|lzma]\n                                      zip compression method. the following\n                                      methods are available: \"stored\": no\n                                      compression; \"deflated\": the standard zip\n                                      compression method; \"bzip2\": bzip2\n                                      compression method (part of the zip standard\n                                      since 2001); \"lzma\": lzma compression method\n                                      (part of the zip standard since 2006).\n                                      [default: deflated]\n\n      -a, --auto-root                 if given in combination with --outfile, use\n                                      the stem of the outfile (without path and\n                                      extension) as the value for root_folder\n\n      -x, --exclude glob_pattern      glob-pattern to exclude. this is matched\n                                      from the right against all paths in the zip\n                                      file, see python pathlib's path.match\n                                      method. this option can be given multiple\n                                      times.\n\n      -x, --exclude-from file         file from which to read a list of glob-\n                                      patterns to exclude, cf. --exclude. each\n                                      line in file is one pattern. this option can\n                                      be given multiple times.\n\n      --exclude-dotfiles / --include-dotfiles\n                                      whether or not to include dotfiles in the\n                                      zip files. by default, dotfiles are\n                                      included.\n\n      --exclude-vcs / --include-vcs   whether or not to include files and\n                                      directories commonly used by version control\n                                      systems. (git, cvs, rcs, sccs, svn, arch,\n                                      bazaar, mercurial, and darcs), e.g.\n                                      '.git/', '.gitignore' '.gitmodules'\n                                      '.gitattributes' for git. by default, vcs\n                                      are included.\n\n      --exclude-git-ignores / --include-git-ignores\n                                      whether or not to look for .gitignore files\n                                      and to process them for exclude patterns.\n                                      note that the .gitignore file itself is\n                                      still included in the zip archive unless\n                                      --exclude-vcs is given. by default,\n                                      .gitignore files are not processed.\n\n      -o, --outfile outfile           the path of the zip file to be written. by\n                                      default, the file is written to stdout.\n\n\n=======\nhistory\n=======\n\n\n0.4.1 (2021-04-21)\n------------------\n\n* bugfix: permissions (especially executable permissions) were not preserved on unix\n\n\n0.4.0 (2021-04-04)\n------------------\n\n* added: options ``--exclude-vcs``, ``--exclude-git-ignores``, and ``--exclude-vcs``\n\n\n0.3.0 (2020-01-19)\n------------------\n\n* added: option ``--exclude``\n\n\n0.2.0 (2020-01-17)\n------------------\n\n* added: option ``--auto-root``\n\n\n0.1.0 (2020-01-17)\n------------------\n\n* initial release\n\n\n",
  "docs_url": null,
  "keywords": "zip",
  "license": "bsd license",
  "name": "zip-files",
  "package_url": "https://pypi.org/project/zip-files/",
  "project_url": "https://pypi.org/project/zip-files/",
  "project_urls": {
    "Homepage": "https://github.com/goerz/zip_files"
  },
  "release_url": "https://pypi.org/project/zip-files/0.4.1/",
  "requires_dist": [
    "click",
    "coverage (<5.0) ; extra == 'dev'",
    "coveralls ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "gitpython ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pdbpp ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "black ; extra == 'dev'"
  ],
  "requires_python": ">=3.6",
  "summary": "command line utilities for creating zip files",
  "version": "0.4.1",
  "releases": [],
  "developers": [
    "mail@michaelgoerz.net",
    "michael_goerz"
  ],
  "kwds": "zip__files zip_files zip bzip2 unzips",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_zip_files",
  "homepage": "https://github.com/goerz/zip_files",
  "release_count": 6,
  "dependency_ids": [
    "pypi_black",
    "pypi_click",
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_flake8",
    "pypi_gitpython",
    "pypi_ipython",
    "pypi_isort",
    "pypi_pdbpp",
    "pypi_pre_commit",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_twine",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: other audience",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "pycuda: pythonic access to cuda, with arrays and algorithms\n=============================================================\n\n.. image:: https://gitlab.tiker.net/inducer/pycuda/badges/main/pipeline.svg\n    :alt: gitlab build status\n    :target: https://gitlab.tiker.net/inducer/pycuda/commits/main\n.. image:: https://badge.fury.io/py/pycuda.png\n    :target: https://pypi.org/project/pycuda\n.. image:: https://zenodo.org/badge/1575319.svg\n    :alt: zenodo doi for latest release\n    :target: https://zenodo.org/badge/latestdoi/1575319\n\npycuda lets you access `nvidia <https://nvidia.com>`_'s `cuda\n<https://nvidia.com/cuda/>`_ parallel computation api from python.\nseveral wrappers of the cuda api already exist-so what's so special\nabout pycuda?\n\n* object cleanup tied to lifetime of objects. this idiom, often\n  called\n  `raii <https://en.wikipedia.org/wiki/resource_acquisition_is_initialization>`_\n  in c++, makes it much easier to write correct, leak- and\n  crash-free code. pycuda knows about dependencies, too, so (for\n  example) it won't detach from a context before all memory\n  allocated in it is also freed.\n\n* convenience. abstractions like pycuda.driver.sourcemodule and\n  pycuda.gpuarray.gpuarray make cuda programming even more\n  convenient than with nvidia's c-based runtime.\n\n* completeness. pycuda puts the full power of cuda's driver api at\n  your disposal, if you wish. it also includes code for\n  interoperability with opengl.\n\n* automatic error checking. all cuda errors are automatically\n  translated into python exceptions.\n\n* speed. pycuda's base layer is written in c++, so all the niceties\n  above are virtually free.\n\n* helpful `documentation <https://documen.tician.de/pycuda>`_.\n\nrelatedly, like-minded computing goodness for `opencl <https://www.khronos.org/registry/opencl/>`_\nis provided by pycuda's sister project `pyopencl <https://pypi.org/project/pyopencl>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pycuda",
  "package_url": "https://pypi.org/project/pycuda/",
  "project_url": "https://pypi.org/project/pycuda/",
  "project_urls": {
    "Homepage": "http://mathema.tician.de/software/pycuda",
    "Source": "https://github.com/inducer/pycuda"
  },
  "release_url": "https://pypi.org/project/pycuda/2023.1/",
  "requires_dist": [
    "pytools>=2011.2",
    "appdirs>=1.4.0",
    "mako"
  ],
  "requires_python": "~=3.8",
  "summary": "python wrapper for nvidia cuda",
  "version": "2023.1",
  "releases": [],
  "developers": [
    "andreas_kloeckner",
    "inform@tiker.net"
  ],
  "kwds": "pycuda cuda py pythonic python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pycuda",
  "homepage": "http://mathema.tician.de/software/pycuda",
  "release_count": 52,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_mako",
    "pypi_pytools"
  ]
}
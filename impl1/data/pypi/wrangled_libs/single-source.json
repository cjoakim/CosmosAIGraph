{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# single-source: there is only one truth\n> `single-source` helps to reduce the entropy in your python project by keeping\n> single source of truth.\n\nthe targets of this library are modern python projects which want to have\none source of truth for version, name and etc.\n\nat the moment, the library provides the single point for a package version.\n\nit supports python 3.6+.\n\n## quick start\n\n```python\n# root_package/__init__.py\nfrom pathlib import path\nfrom single_source import get_version\n\n__version__ = get_version(__name__, path(__file__).parent.parent)\n```\n\n## root of the problem\n\nyou use modern `pyproject.toml` and want to keep the version of your package\nhere:\n```toml\n# pyproject.toml\n[tool.poetry]\nname = \"modern-project\"\nversion = \"0.1.0\"\n```\n\nlet's imagine the version of your package is required in some place of the code.\n\nsince you need the version in your python code, you may want to duplicate the version by putting it as a string variable to some python file:\n```python\n# modern_project/__init__.py\n__version__ = \"0.1.0\"\n\n# modern_project/version.py\nversion = \"0.1.0\"\n```\n\nthen you realize you don't want to have the version in a python file and in pyproject.toml at the same time. it's harder to keep them consistent and easier to forget to bump both versions before release.\n\nalso, you don't want to build the wheel by creating some script for auto incrementing the version in both places (and use it in your ci flow, for example). instead you want use `poetry version` commands.\n\n## installation\nyou can install `single-source` via [pip](https://pip.pypa.io/en/stable/)\n```bash\npip3 install single-source\n```\n\nor via [poetry](https://python-poetry.org/docs/#installation)\n```bash\npoetry add single-source\n```\n\nthe library also available as\n[a conda package](https://docs.conda.io/projects/conda/en/latest/) in\n[conda-forge](https://anaconda.org/conda-forge/repo) channel\n```bash\nconda install single-source --channel conda-forge\n```\n\n## advanced usage\n### changing default value\nif it's not possible to get the version from package metadata or\nthere is no pyproject.toml `get_version` returns `\"\"` - empty string by default.\nyou can change this value by providing a value as a `default_return` keyword argument.\n\n```python\nfrom pathlib import path\nfrom single_source import get_version\n\npath_to_pyproject_dir = path(__file__).parent.parent\n__version__ = get_version(__name__, path_to_pyproject_dir, default_return=none)\n```\n\n### raising an exception\nyou may want to raise an exception in case the version of the package\nhas not been found.\n```python\nfrom pathlib import path\nfrom single_source import get_version, versionnotfounderror\n\npath_to_pyproject_dir = path(__file__).parent.parent\ntry:\n    __version__ = get_version(__name__, path_to_pyproject_dir, fail=true)\nexcept versionnotfounderror:\n    pass\n```\n\n\n### not only pyproject.toml\nyou can use `single-source` even if you still store the version of your library\nin `setup.py` or in any other `utf-8` encoded text file.\n\n>first, try without custom `regex`, probably it can parse the version\n\nif the default internal `regex` does not find the version in your file,\nthe only thing you need to provide is a custom `regex` to `get_version`:\n```python\nfrom single_source import get_version\n\ncustom_regex = r\"\\s*version\\s*=\\s*[\\\"']\\s*([-.\\w]{3,})\\s*[\\\"']\\s*\"\n\npath_to_file = \"~/my-project/some_file_with_version.txt\"\n__version__ = get_version(__name__, path_to_file, version_regex=custom_regex)\n```\nversion must be in the first group `()` in the custom regex.\n\n## contributing\npull requests are welcome. for major changes, please open an issue first to\ndiscuss what you would like to change.\n\nplease make sure to update tests as appropriate.\n\n## license\n[mit](https://choosealicense.com/licenses/mit/)\n",
  "docs_url": null,
  "keywords": "pyproject,version,__version__,poetry,single source",
  "license": "mit",
  "name": "single-source",
  "package_url": "https://pypi.org/project/single-source/",
  "project_url": "https://pypi.org/project/single-source/",
  "project_urls": {
    "Bug Tracker": "https://github.com/rabbit72/single-source/issues",
    "Homepage": "https://github.com/rabbit72/single-source",
    "Repository": "https://github.com/rabbit72/single-source.git"
  },
  "release_url": "https://pypi.org/project/single-source/0.3.0/",
  "requires_dist": [
    "importlib_metadata (>=3.0,<5); python_version < \"3.8\""
  ],
  "requires_python": ">=3.6,<4.0",
  "summary": "access to the project version in python code for pep 621-style projects",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "daniil_shadrin",
    "rabbit72rus@gmail.com"
  ],
  "kwds": "some_file_with_version versionnotfounderror get_version single_source path_to_pyproject_dir",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_single_source",
  "homepage": "https://github.com/rabbit72/single-source",
  "release_count": 7,
  "dependency_ids": [
    "pypi_importlib_metadata"
  ]
}
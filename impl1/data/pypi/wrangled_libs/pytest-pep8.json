{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4"
  ],
  "description": ".. image:: https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/status.png\r\n   :target: https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/latest\r\n.. image:: https://pypip.in/v/pytest-pep8/badge.png\r\n   :target: https://pypi.python.org/pypi/pytest-pep8\r\n\r\npy.test plugin for efficiently checking pep8 compliance \r\n=======================================================\r\n\r\nusage\r\n-----\r\n\r\ninstall via::\r\n\r\n    pip install pytest-pep8\r\n\r\nif you then type::\r\n\r\n    py.test --pep8\r\n    \r\nevery file ending in ``.py`` will be discovered and pep8-checked, \r\nstarting from the command line arguments. \r\n\r\n.. warning::\r\n\r\n    running pep8 tests on your project is likely to cause a lot of \r\n    issues.  this plugin allows to configure on a per-project and\r\n    per-file basis which errors or warnings to care about, see\r\n    pep8ignore_.  as a preliminary advise, if you have \r\n    projects where you don't want to care at all about pep8 checks, \r\n    you can put configure it like this::\r\n\r\n        # content of setup.cfg (or pytest.ini)\r\n        [pytest]\r\n        pep8ignore = * all\r\n\r\n\r\na little example \r\n----------------\r\n\r\nif you have a pep8-violating file like this::\r\n\r\n    # content of myfile.py\r\n \r\n    somefunc( 123,456)\r\n\r\nyou can run it with the plugin installed::\r\n\r\n    $ py.test --pep8\r\n    =========================== test session starts ============================\n    platform linux2 -- python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py f\n    \n    ================================= failures =================================\n    ________________________________ pep8-check ________________________________\n    /tmp/doc-exec-2/myfile.py:2:10: e201 whitespace after '('\n    somefunc( 123,456)\n             ^\n    /tmp/doc-exec-2/myfile.py:2:14: e231 missing whitespace after ','\n    somefunc( 123,456)\n                 ^\n    \n    ========================= 1 failed in 0.00 seconds =========================\n\r\nfor the meaning of (e)rror and (w)arning codes, see the error\r\noutput when running against your files or checkout `pep8.py\r\n<https://github.com/jcrocholl/pep8/blob/master/pep8.py>`_.\r\n\r\nlet's not now fix the pep8 errors::\r\n\r\n    # content of myfile.py\r\n    somefunc(123, 456)\r\n\r\nand run again::\r\n\r\n    $ py.test --pep8\r\n    =========================== test session starts ============================\n    platform linux2 -- python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py .\n    \n    ========================= 1 passed in 0.00 seconds =========================\n\r\nthe pep8 check now is passing. moreover, if\r\nyou run it once again (and report skip reasons)::\r\n\r\n    $ py.test --pep8 -rs \r\n    =========================== test session starts ============================\n    platform linux2 -- python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py s\n    ========================= short test summary info ==========================\n    skip [1] /home/hpk/p/pytest-pep8/pytest_pep8.py:65: file(s) previously passed pep8 checks\n    \n    ======================== 1 skipped in 0.00 seconds =========================\n\r\nyou can see that the pep8 check was skipped because\r\nthe file has not been modified since it was last checked.\r\nas the pep8 plugin uses the \r\n`pytest-cache plugin <http://pypi.python.org/pypi/pytest-cache>`_\r\nto implement its caching, you can use its ``--clearcache`` option to \r\nremove all pytest caches, among them the pep8 related one, which \r\nwill trigger the pep8 checking code to run once again::\r\n\r\n    $ py.test --pep8 --clearcache\r\n    =========================== test session starts ============================\n    platform linux2 -- python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py .\n    \n    ========================= 1 passed in 0.00 seconds =========================\n\r\n.. _pep8ignore:\r\n\r\nconfiguring pep8 options per project and file\r\n---------------------------------------------\r\n\r\nyou may configure pep8-checking options for your project\r\nby adding an ``pep8ignore`` entry to your ``setup.cfg``\r\nor ``setup.cfg`` file like this::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8ignore = e201 e231\r\n\r\nthis would globally prevent complaints about two whitespace issues.\r\nrerunning with the above example will now look better::\r\n\r\n    $ py.test -q  --pep8\r\n    .\n    1 passed in 0.00 seconds\n\r\nif you have some files where you want to specifically ignore \r\nsome errors or warnings you can start a pep8ignore line with \r\na glob-pattern and a space-separated list of codes::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8ignore = \r\n        *.py e201\r\n        doc/conf.py all\r\n\r\nso if you have a conf.py like this::\r\n\r\n    # content of doc/conf.py\r\n\r\n    func (  [1,2,3]) #this line lots pep8 errors :)\r\n\r\nthen running again with the previous example will show a single\r\nfailure and it will ignore doc/conf.py alltogether::\r\n\r\n    $ py.test --pep8 -v # verbose shows what is ignored\r\n    =========================== test session starts ============================\n    platform linux2 -- python 2.7.6 -- py-1.4.30 -- pytest-2.7.2 -- /home/hpk/venv/clean/bin/python\n    cachedir: /tmp/doc-exec-2/.cache\n    rootdir: /tmp/doc-exec-2, inifile: setup.cfg\n    plugins: pep8, cache\n    collecting ... collected 1 items\n    \n    myfile.py passed\n    \n    ========================= 1 passed in 0.01 seconds =========================\n\r\nnote that doc/conf.py was not considered or imported.\r\n\r\nif you'ld like to have longer lines than 79 chars (which is the default for the\r\npep8 checker), you can configure it like this::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8maxlinelength = 99\r\n\r\nrunning pep8 checks and no other tests\r\n--------------------------------------\r\n\r\nyou can also restrict your test run to only perform \"pep8\" tests\r\nand not any other tests by typing::\r\n\r\n    py.test --pep8 -m pep8\r\n\r\nthis will only run test items with the \"pep8\" marker which this\r\nplugins adds dynamically.\r\n\r\nnotes\r\n-----\r\n\r\nthe repository of this plugin is at http://bitbucket.org/pytest-dev/pytest-pep8\r\n\r\nfor more info on py.test see http://pytest.org\r\n\r\nthe code is partially based on ronny pfannschmidt's pytest-codecheckers plugin.",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "pytest-pep8",
  "package_url": "https://pypi.org/project/pytest-pep8/",
  "project_url": "https://pypi.org/project/pytest-pep8/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://bitbucket.org/pytest-dev/pytest-pep8"
  },
  "release_url": "https://pypi.org/project/pytest-pep8/1.0.6/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "pytest plugin to check pep8 requirements",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "holger.krekel@gmail.com",
    "holger_krekel_and_ronny_pfannschmidt"
  ],
  "kwds": "pytest_pep8 pytest pep8 pypi pep8ignore",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pytest_pep8",
  "homepage": "https://bitbucket.org/pytest-dev/pytest-pep8",
  "release_count": 13,
  "dependency_ids": []
}
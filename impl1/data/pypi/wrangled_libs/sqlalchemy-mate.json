{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: https://readthedocs.org/projects/sqlalchemy_mate/badge/?version=latest\n    :target: https://sqlalchemy_mate.readthedocs.io/index.html\n    :alt: documentation status\n\n.. image:: https://github.com/machu-gwu/sqlalchemy_mate-project/workflows/ci/badge.svg\n    :target: https://github.com/machu-gwu/sqlalchemy_mate-project/actions?query=workflow:ci\n\n.. image:: https://codecov.io/gh/machu-gwu/sqlalchemy_mate-project/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/machu-gwu/sqlalchemy_mate-project\n\n.. image:: https://img.shields.io/pypi/v/sqlalchemy_mate.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_mate\n\n.. image:: https://img.shields.io/pypi/l/sqlalchemy_mate.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_mate\n\n.. image:: https://img.shields.io/pypi/pyversions/sqlalchemy_mate.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_mate\n\n.. image:: https://img.shields.io/badge/star_me_on_github!--none.svg?style=social\n    :target: https://github.com/machu-gwu/sqlalchemy_mate-project\n\n------\n\n\n.. image:: https://img.shields.io/badge/link-document-blue.svg\n      :target: https://sqlalchemy_mate.readthedocs.io/index.html\n\n.. image:: https://img.shields.io/badge/link-api-blue.svg\n      :target: https://sqlalchemy_mate.readthedocs.io/py-modindex.html\n\n.. image:: https://img.shields.io/badge/link-source_code-blue.svg\n      :target: https://sqlalchemy_mate.readthedocs.io/py-modindex.html\n\n.. image:: https://img.shields.io/badge/link-install-blue.svg\n      :target: `install`_\n\n.. image:: https://img.shields.io/badge/link-github-blue.svg\n      :target: https://github.com/machu-gwu/sqlalchemy_mate-project\n\n.. image:: https://img.shields.io/badge/link-submit_issue-blue.svg\n      :target: https://github.com/machu-gwu/sqlalchemy_mate-project/issues\n\n.. image:: https://img.shields.io/badge/link-request_feature-blue.svg\n      :target: https://github.com/machu-gwu/sqlalchemy_mate-project/issues\n\n.. image:: https://img.shields.io/badge/link-download-blue.svg\n      :target: https://pypi.org/pypi/sqlalchemy_mate#files\n\n\nwelcome to ``sqlalchemy_mate`` documentation\n==============================================================================\n\na sweet syntax sugar library simplify your in writing ``sqlalchemy`` code.\n\n\nfeatures\n------------------------------------------------------------------------------\n\n.. contents::\n    :class: this-will-duplicate-information-and-it-is-still-useful-here\n    :depth: 1\n    :local:\n\n\nread database credential safely\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. contents::\n    :class: this-will-duplicate-information-and-it-is-still-useful-here\n    :depth: 1\n    :local:\n\nput your database connection credential in your source code is always a **bad idea**.\n\n``sqlalchemy_mate`` provides several options to allow loading credential easily.\n\nif you want to read db secret from other source, such as bash scripts that having lots of ``export db_password=\"xxx\"``, aws secret manager, aws key management system (kms), please take a look at my another project `pysecret <https://pypi.org/project/pysecret/>`_.\n\n\nfrom json file\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nyou can put your credential in a json file somewhere in your $home directory, and let sqlalchemy_mate smartly load from it.\n\nyou need to specify two things:\n\n1. path to json file.\n2. field path to the data. if your connect info is nested deeply in the json, you can use the dot notation json path to point to it.\n\ncontent of json:\n\n.. code-block:: python\n\n    {\n        \"credentials\": {\n            \"db1\": {\n                \"host\": \"example.com\",\n                \"port\": 1234,\n                \"database\": \"test\",\n                \"username\": \"admin\",\n                \"password\": \"admin\",\n            },\n            \"db2\": {\n                ...\n            }\n        }\n    }\n\ncode:\n\n.. code-block:: python\n\n    from sqlalchemy_mate import enginecreator\n\n    ec = enginecreator.from_json(\n        json_file=\"path-to-json-file\",\n        json_path=\"credentials.db1\", # dot notation json path\n    )\n    engine = ec.create_postgresql_pg8000()\n\n**default data fields** are ``host``, ``port``, ``database``, ``username``, ``password``.\n\nif your json schema is different, you need to add the ``key_mapping`` to **specify the field name mapping**:\n\n.. code-block:: python\n\n    ec = enginecreator.from_json(\n        json_file=\"...\",\n        json_path=\"...\",\n        key_mapping={\n            \"host\": \"your-host-field\",\n            \"port\": \"your-port-field\",\n            \"database\": \"your-database-field\",\n            \"username\": \"your-username-field\",\n            \"password\": \"your-password-field\",\n        }\n    )\n\n\nfrom ``$home/.db.json``\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nyou can put lots of database connection info in a ``.db.json`` file in your ``$home`` directory.\n\n.. code-block:: python\n\n    from sqlalchemy_mate import enginecreator\n\n    ec = enginecreator.from_home_db_json(identifier=\"db1\")\n    engine = ec.create_postgresql_psycopg2()\n\n``$home/.db.json`` **assumes flat json schema**, but you can use dot notation json path for ``identifier`` to adapt any json schema:\n\n.. code-block:: python\n\n    {\n        \"identifier1\": {\n            \"host\": \"example.com\",\n            \"port\": 1234,\n            \"database\": \"test\",\n            \"username\": \"admin\",\n            \"password\": \"admin\",\n        },\n        \"identifier2\": {\n            ...\n        }\n    }\n\n\nfrom json file on aws s3\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nthis is similar to ``from_json``, but the json file is stored on aws s3.\n\n.. code-block:: python\n\n    from sqlalchemy_mate import enginecreator\n    ec = enginecreator.from_s3_json(\n        bucket_name=\"my-bucket\", key=\"db.json\",\n        json_path=\"identifier1\",\n        aws_profile=\"my-profile\",\n    )\n    engine = ec.create_redshift()\n\n\nfrom environment variable\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nyou can put your credentials in environment variable. for example:\n\n.. code-block:: bash\n\n    export db_dev_host=\"...\"\n    export db_dev_port=\"...\"\n    export db_dev_database=\"...\"\n    export db_dev_username=\"...\"\n    export db_dev_password=\"...\"\n\n.. code-block:: python\n\n    from sqlalchemy_mate import enginecreator\n    # read from db_dev_username, db_dev_password, ...\n    ec = enginecreator.from_env(prefix=\"db_dev\")\n    engine = ec.create_redshift()\n\nif you want to read database credential safely from cloud, for example, aws ec2, aws lambda, you can use aws kms to decrypt your credentials\n\n.. code-block:: python\n\n    # leave aws_profile=none if you are on cloud\n    ec = enginecreator.from_env(prefix=\"db_dev\", kms_decrypt=true, aws_profile=\"xxx\")\n    engine = ec.create_redshift()\n\n\nsmart insert\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nin bulk insert, if there are some rows having primary_key conflict, the classic solution is:\n\n.. code-block:: python\n\n    for row in data:\n        try:\n            engine.execute(table.insert(), row)\n        except sqlalchemy.sql.integrityerror:\n            pass\n\nit is like one-by-one insert, which is super slow.\n\n``sqlalchemy_mate`` uses ``smart_insert`` strategy to try with smaller bulk insert, which has higher probabily to work. as a result, total number of commits are greatly reduced.\n\nwith sql expression:\n\n.. code-block:: python\n\n    from sqlalchemy_mate import inserting\n    engine = create_engine(...)\n    t_users = table(\n        \"users\", metadata,\n        column(\"id\", integer),\n        ...\n    )\n    # lots of data\n    data = [{\"id\": 1, \"name\": \"alice}, {\"id\": 2, \"name\": \"bob\"}, ...]\n    # the magic function\n    inserting.smart_insert(engine, t_users, data)\n\n\nwith orm:\n\n.. code-block:: python\n\n    from sqlalchemy_mate import extendedbase\n    base = declarative_base()\n    class user(base, extendedbase): # inherit from extendedbase\n        ...\n    # lots of users\n    data = [user(id=1, name=\"alice\"), user(id=2, name=\"bob\"), ...]\n    # the magic method\n    user.smart_insert(engine_or_session, data) # that's it\n\n\nsmart update / upsert\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nautomatically update value by primary key.\n\n.. code-block:: python\n\n    # in sql expression\n    from sqlalchemy_mate import updating\n\n    data = [{\"id\": 1, \"name\": \"alice}, {\"id\": 2, \"name\": \"bob\"}, ...]\n    updating.update_all(engine, table, data)\n    updating.upsert_all(engine, table, data)\n\n    # in orm\n    data = [user(id=1, name=\"alice\"), user(id=2, name=\"bob\"), ...]\n    user.update_all(engine_or_session, user_list)\n    user.upsert_all(engine_or_session, user_list)\n\n\n.. _install:\n\ninstall\n------------------------------------------------------------------------------\n\n``sqlalchemy_mate`` is released on pypi, so all you need is:\n\n.. code-block:: console\n\n    $ pip install sqlalchemy_mate\n\nto upgrade to latest version:\n\n.. code-block:: console\n\n    $ pip install --upgrade sqlalchemy_mate\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "sqlalchemy-mate",
  "package_url": "https://pypi.org/project/sqlalchemy-mate/",
  "project_url": "https://pypi.org/project/sqlalchemy-mate/",
  "project_urls": {
    "Download": "https://pypi.python.org/pypi/sqlalchemy_mate/1.4.28.4#downloads",
    "Homepage": "https://github.com/MacHu-GWU/sqlalchemy_mate-project"
  },
  "release_url": "https://pypi.org/project/sqlalchemy-mate/1.4.28.4/",
  "requires_dist": [
    "sqlalchemy (<2.0.0,>=1.4.1)",
    "prettytable",
    "sphinx (==4.3.0) ; extra == 'docs'",
    "sphinx-inline-tabs (==2021.8.17b10) ; extra == 'docs'",
    "sphinx-jinja (==1.1.1) ; extra == 'docs'",
    "sphinx-copybutton (==0.4.0) ; extra == 'docs'",
    "rstobj (==0.0.7) ; extra == 'docs'",
    "docfly (==1.0.2) ; extra == 'docs'",
    "furo (==2021.8.31) ; extra == 'docs'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pg8000 ; extra == 'tests'",
    "attrs ; extra == 'tests'",
    "superjson ; extra == 'tests'",
    "pandas ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "a library extend sqlalchemy module, makes crud easier.",
  "version": "1.4.28.4",
  "releases": [],
  "developers": [
    "husanhe@gmail.com",
    "sanhe_hu",
    "unknown"
  ],
  "kwds": "sqlalchemy_mate sqlalchemy badge key_mapping py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sqlalchemy_mate",
  "homepage": "https://github.com/machu-gwu/sqlalchemy_mate-project",
  "release_count": 15,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_docfly",
    "pypi_furo",
    "pypi_pandas",
    "pypi_pg8000",
    "pypi_prettytable",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_rstobj",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_inline_tabs",
    "pypi_sphinx_jinja",
    "pypi_sqlalchemy",
    "pypi_superjson"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: education",
    "topic :: education :: testing",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development",
    "topic :: software development :: libraries"
  ],
  "description": "[![test simple](https://github.com/ratharog/lapx/actions/workflows/test_simple.yaml/badge.svg)](https://github.com/ratharog/lapx/actions/workflows/test_simple.yaml)\n[![benchmark](https://github.com/ratharog/lapx/actions/workflows/benchmark.yaml/badge.svg)](https://github.com/ratharog/lapx/actions/workflows/benchmark.yaml)\n[![test pypi build](https://github.com/ratharog/lapx/actions/workflows/prepublish.yaml/badge.svg)](https://github.com/ratharog/lapx/actions/workflows/prepublish.yaml)\n[![publish to pypi](https://github.com/ratharog/lapx/actions/workflows/publish.yaml/badge.svg)](https://github.com/ratharog/lapx/actions/workflows/publish.yaml)\n\n# linear assignment problem solver\n\n`lapx` basically is tomas kazmar's [`gatagat/lap`](https://github.com/gatagat/lap) with support for all windows/linux/macos and python 3.7/3.8/3.9/3.10/3.11/3.12.\n\n* based on: [[ed04ab7752]](https://github.com/gatagat/lap/tree/ed04ab7752c7c9688ddcbae534633f34ce04361f)\n* license: bsd-2-clause, see [`license`](license) @[`gatagat`](https://github.com/gatagat)\n\n## installation: windows \u2705 | linux \u2705 | macos \u2705\n\n* install from [pypi](https://pypi.org/project/lapx/):\n\n  ```\n  pip install lapx\n  ```\n\n* or install from github repo directly (require c++ compiler):\n\n  ```\n  pip install git+https://github.com/ratharog/lapx.git\n  ```\n\n* or clone and build on your local machine (require c++ compiler):\n\n  ```\n  git clone https://github.com/ratharog/lapx.git\n  cd lapx\n  python -m pip install --upgrade pip\n  pip install \"setuptools>=67.2.0\"\n  pip install wheel build\n  python -m build --wheel\n  cd dist\n  ```\n\n## usage \ud83e\uddea\n\n* `lapx` is just the name for package distribution.\n* the same as `lap`, use `import lap` to import; for example:\n\n  ```\n  import lap\n  import numpy as np\n  print(lap.lapjv(np.random.rand(4, 5), extend_cost=true))\n  ```\n\n<br />\n\n<details><summary>click here to show more...</summary>\n\n<br />\n\nlap: linear assignment problem solver\n=====================================\n\n**lap** is a [linear assignment\nproblem](https://en.wikipedia.org/wiki/assignment_problem) solver using\njonker-volgenant algorithm for dense (lapjv [1]) or sparse (lapmod [2])\nmatrices.\n\nboth algorithms are implemented from scratch based solely on the papers [1,2]\nand the public domain pascal implementation provided by a. volgenant [3].\n\nin my tests the lapmod implementation seems to be faster than the lapjv\nimplementation for matrices with a side of more than ~5000 and with less than\n50% finite coefficients.\n\n[1] r. jonker and a. volgenant, \"a shortest augmenting path algorithm for dense\nand sparse linear assignment problems\", computing 38, 325-340 (1987)<br>\n[2] a. volgenant, \"linear and semi-assignment problems: a core oriented\napproach\", computer ops res. 23, 917-932 (1996)<br>\n[3] http://www.assignmentproblems.com/lapjv.htm\n\n\n### usage\n\n```\ncost, x, y = lap.lapjv(c)\n```\n\nthe function `lapjv(c)` returns the assignment cost (`cost`) and two arrays, `x, y`. if cost matrix `c` has shape n x m, then `x` is a size-n array specifying to which column is row is assigned, and `y` is a size-m array specifying to which row each column is assigned. for example, an output of `x = [1, 0]` indicates that row 0 is assigned to column 1 and row 1 is assigned to column 0. similarly, an output of `x = [2, 1, 0]` indicates that row 0 is assigned to column 2, row 1 is assigned to column 1, and row 2 is assigned to column 0.\n\nnote that this function *does not* return the assignment matrix (as done by scipy's [`linear_sum_assignment`](https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.linear_sum_assignment.html) and lapsolver's [`solve dense`](https://github.com/cheind/py-lapsolver)). the assignment matrix can be constructed from `x` as follows:\n```\na = np.zeros((n, m))\nfor i in range(n):\n    a[i, x[i]] = 1\n```\nequivalently, we could construct the assignment matrix from `y`:\n```\na = np.zeros((n, m))\nfor j in range(m):\n    a[y[j], j] = 1\n```\n\nfinally, note that the outputs are redundant: we can construct `x` from `y`, and vise versa:\n```\nx = [np.where(y == i)[0][0] for i in range(n)]\ny = [np.where(x == j)[0][0] for j in range(m)]\n```\n\n</details>\n",
  "docs_url": null,
  "keywords": "linear assignment,lapjv,lapmod,lap",
  "license": "bsd-2-clause",
  "name": "lapx",
  "package_url": "https://pypi.org/project/lapx/",
  "project_url": "https://pypi.org/project/lapx/",
  "project_urls": {
    "Homepage": "https://github.com/rathaROG/lapx"
  },
  "release_url": "https://pypi.org/project/lapx/0.5.5/",
  "requires_dist": [
    "Cython >=0.29.32",
    "numpy >=1.21.6"
  ],
  "requires_python": "",
  "summary": "linear assignment problem solver (lapjv/lapmod).",
  "version": "0.5.5",
  "releases": [],
  "developers": [
    "ratharog"
  ],
  "kwds": "workflows lapx yaml lapmod benchmark",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_lapx",
  "homepage": "https://github.com/ratharog/lapx",
  "release_count": 5,
  "dependency_ids": [
    "pypi_cython",
    "pypi_numpy"
  ]
}
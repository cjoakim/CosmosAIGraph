{
  "classifiers": [
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "topic :: scientific/engineering :: bio-informatics"
  ],
  "description": "<img\nsrc=\"https://rawgithub.com/kappa-dev/kasim/master/man/img/kasim-logo.svg\"\nalt=\"kasim logo\" title=\"stochastic kappa simulator\" align=\"right\" height=\"90\"/>\n# kappatools\n\n[![build status](https://api.travis-ci.com/kappa-dev/kappatools.svg?branch=master)](https://travis-ci.com/kappa-dev/kappatools)\n[![join the chat at https://gitter.im/kappa-dev/kasim](https://badges.gitter.im/kappa-dev/kasim.svg)](https://gitter.im/kappa-dev/kasim?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nkasim is a stochastic simulator for rule-based models written in kappa. kasa is\na static analyser for kappa models.\n\nkappy is a python library to launch and analyse runs and outputs of\nkappa models.\n\n## user manual\nsee [documentation page on kappalanguage.org](https://kappalanguage.org/documentation).\n\nkappy [api\ndocumentation is online](https://kasim.readthedocs.io/en/latest/kappy.html).\n\nthe latex sources of the \"older\" reference manual (and kasa one) are\navailable in the `man/` directory. to compile the manuel, in addition of\na decent latex distribution you need\n[gnuplot](http://www.gnuplot.info/) and\n[graphviz](http://www.graphviz.org/) to generate images (make sure\nthat `dot` is in the path of your os). to generate the pdf of the\nmanual type\n\n`make doc`\n\n## installation\n\n### core tools\n\n[released versions](https://github.com/kappa-dev/kasim/releases) come with\nbinaries for macos, windows and debian derivatives (as ubuntu). [nightly\nbuilds](https://tools.kappalanguage.org/nightly-builds/) of the master branch\nare built for these platforms by the continuous integration tools.\n\nif you want or need your own build,\n - install [opam](https://opam.ocaml.org/doc/install.html) (the ocaml\n   package manager) and initialize it (by issuing `opam init`)\n - in the source directory, install all the dependencies by `opam install --deps-only .`\n - `dune build`\n\nyou can be more fine grained if you only need the command-line tools\n(and therefore could install less dependencies) by doing `opam install\n--deps-only kappa-binaries` followed by `make all`\n\nif nothing worked for you so far. well, you're pretty much on your\nown... kappa tools depend upon the ocaml native compiler version\n4.05.0 or above as well as _dune_, _findlib_, _lwt_ (>= 2.6.0), _re_,\n_fmt_, _logs_ and _yojson_ libraries. find any way to install them and\nyou'll be only a `make all` away from getting kappa binaries...\n\n### kappy\n\nyou should be able to `pip install kappy`.\n\n- under macos and linux (and if you're not using a python version so\n  cutting edge that we haven't notice its release yet), _wheels_ that\n  contain the core binaries should be available.\n- for other platforms/python versions, you need to get kappa agents by\n  yourself thanks to the *opam* package manager by `opam install\n  kappa-binaries kappa-agents` (or use an externaly hosted rest api)\n- in order to develop in kappy and run all its tests, you need to\n  follow the \"get your own build section\" above as well as install\n  _requests_ (and _future_).\n\n## usage\n\n### kasim\n\nin order to run a simulation for 100 time units printing observables values\nevery 0.5 time unit, type\n\n`bin/kasim kappa_file_1 ... kappa_file_n -l 100 -p 0.5 -o data_file`\n\nthis will produce a data file of 200 point containing the\ntrajectory that was produced during the simulation.\n\ntype:\n\n`bin/kasim --help`\n\nfor a complete list of options.\n\n### kappy\n\ndo:\n\n```python\nimport kappy\nclient = kappy.kapparest(\"http\\://url_of/the_server\",\"project_name\")\n```\n\nto get a kappa client that uses the rest api hosted by\n*http://url_of/the_server* and deals with project *project_name*.\n\nor do:\n\n```python\nimport kappy\nclient = kappy.kappastd()\n```\n\nto get a kappa client that uses a kappa agent installed locally. add a\nstring argument specifing the `path/to/kasimagent` to use a specific agent.\n\na minimal example of usage is:\n\n```python\nmodel = \"\\\n%agent: a(x[x.a]) \\\n%var: n_0 100 \\\n%var: k_on 1e-2 \\\n'rule' a(x[.]), a(x[.]) <-> a(x[1]), a(x[1]) @ k_on, 1 \\\n%plot: |a(x[.])| \\\n%init: n_0 a()\"\nclient.add_model_string(model)\nclient.project_parse()\nsim_params = kappy.simulationparameter(pause_condition=\"[t] > 100\",plot_period=1)\nclient.simulation_start(sim_params)\nclient.wait_for_simulation_stop()\nresults = client.simulation_plot()\nclient.simulation_delete()\n# rerun with some overwritten values for algebraic variables\nclient.project_parse(k_on=5e-2,n_0=500)\nclient.simulation_start(sim_params)\nclient.wait_for_simulation_stop()\nresults' = client.simulation_plot()\nclient.shutdown()\n```\n\n## tests\n\nlaunch the core/integration tests by `make check`.\n\nregenerate the reference files if you've changed something in the\noutputs by `make build-tests`\n\nlaunch python tests by `nosetests` (after having followed the \"get\nyour own build\" section).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "lgplv3",
  "name": "kappy",
  "package_url": "https://pypi.org/project/kappy/",
  "project_url": "https://pypi.org/project/kappy/",
  "project_urls": {
    "Homepage": "https://github.com/Kappa-Dev/KappaTools.git"
  },
  "release_url": "https://pypi.org/project/kappy/4.1.2/",
  "requires_dist": [
    "requests",
    "future",
    "nose"
  ],
  "requires_python": "",
  "summary": "wrapper to interact with the kappa tool suite",
  "version": "4.1.2",
  "releases": [],
  "developers": [
    "kappa",
    "kappa-dev@listes.sc.univ-paris-diderot.fr"
  ],
  "kwds": "kasim kappatools kasa kappa kappalanguage",
  "license_kwds": "lgplv3",
  "libtype": "pypi",
  "id": "pypi_kappy",
  "homepage": "https://github.com/kappa-dev/kappatools.git",
  "release_count": 11,
  "dependency_ids": [
    "pypi_future",
    "pypi_nose",
    "pypi_requests"
  ]
}
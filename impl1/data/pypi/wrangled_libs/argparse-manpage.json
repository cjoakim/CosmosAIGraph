{
  "classifiers": [],
  "description": "# argumentparser instance \u2192 manual page\n\navoid documenting your python script arguments on two places!  this is typically\ndone in an [argparse.argumentparser][ap-docs] help configuration (`help=`,\n`description=`, etc.), and also in a manually crafted manual page.\n\nthe good thing about an `argumentparser` objects is that it actually provides\na traversable \"tree-like\" structure, with all the necessary info needed to\n**automatically generate** documentation, for example in a *groff* typesetting\nsystem (manual pages).  and this is where this project can help.\n\nthere are two supported ways to generate the manual, either script it using the\ninstalled command `argparse-manpage`, or via `setup.py build` automation (with a\nslight bonus of automatic manual page installation with `setup.py install`).\n\n\n## what is need?\n\nmost of the (meta)data is stored in the `argumentparser` object, therefore\n`argparse-manpage` needs to know its location\u2014it can be either the object\nitself, or a method to call to get the object [^1].\n\non top of this, several manual page fields (like *author* or *project* name)\nneed to be specified, either on command-line or via `setup.py` metadata.\n\n\n## command-line usage\n\nsee the following example:\n\n```\n$ argparse-manpage --pyfile ./pythonfile.py --function get_parser \\\n                   --author \"john --author-email doe@example.com\" \\\n                   --project-name myproject --url https://pagure.io/myproject \\\n> cool-manpage.1\n```\n\nthis (a) processes the `./pythonfile.py`, (b) calls the `get_parser` inside to\nobtain the `argumentparser` instance, (c) transforms it into a manual page and\n(d) stores it into the `cool-manpage.1` file.\n\nalternatively those options above can be combined with\n\n- option `--module mymodule.main`, to load a python module `mymodule.main`\n  from `pythonpath`, or\n- `--object parser_object_name` if the `parser_object_name` is a global\n  variable.\n\n\n## use with pyproject.toml\n\nfirst, you need to declare in `pyproject.toml` that argparse-manpage is needed\nat build-time and use the setuptools.builds_meta` backend:\n\n```toml\n[build-system]\nrequires = [\"argparse-manpage[setuptools]\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\nalternatively, you can place the `build_manpages` (sub)directory from this\nproject somewhere onto `pythonpath` so you can use it at build time.  for\nexample:\n\n```bash\ngit submodule add --name build_manpages https://github.com/praiskup/build_manpages\ngit submodule update --init\n```\n\nthen in `pyproject.toml` (re)define `cmdclass` commands:\n\n```toml\n[tool.setuptools.cmdclass]\nbuild_py = \"build_manpages.build_py\"\ninstall = \"build_manpages.install\"\nbuild_manpages = \"build_manpages.build_manpages\"\n```\n\nand specify the list of built manual pages:\n\n```toml\n[tool.build_manpages]\nmanpages = [\n    \"man/foo.1:object=parser:pyfile=bin/foo.py\",\n    \"man/bar.1:function=get_parser:pyfile=bin/bar\",\n    \"man/baz.1:function=get_parser:pyfile=bin/bar:prog=baz\",\n]\n```\n\n## use with setup.py\n\nin your `setup.py` use pattern like:\n\n```python\n[...]\nfrom build_manpages import build_manpages, get_build_py_cmd, get_install_cmd\n\nsetup(\n  [...]\n  cmdclass={\n      'build_manpages': build_manpages,\n      # re-define build_py and install commands so the manual pages\n      # are automatically re-generated and installed\n      'build_py': get_build_py_cmd(),\n      'install': get_install_cmd(),\n  }\n)\n```\n\nand in `setup.cfg` configure the manual pages you want to automatically\ngenerate and install:\n\n```\n[build_manpages]\nmanpages =\n    man/foo.1:object=parser:pyfile=bin/foo.py\n    man/bar.1:function=get_parser:pyfile=bin/bar\n    man/baz.1:function=get_parser:pyfile=bin/bar:prog=baz\n```\n\n## list of manual pages\n\nthe format of those lines is a colon separated list of arguments/options.  the\nfirst argument determines the filename of the generated manual page.  then\nfollows a list of options of format `option=value`.  supported values are:\n\n- pyfile - what python file the argparse object resides in\n- object - the name of arparse object in \"pyfile\" to import\n- function - the name of function in pyfile to call to get the argparse object\n- format - format of the generated man page: `pretty` (default), `single-commands-section`\n- author - author of the program; can be specified multiple times\n- description - description of the program, used in the name section, after the\n    leading 'name - ' part, see man (7) man-pages for more info\n- project_name - name of the project the program is part of\n- version - version of the project, visible in manual page footer\n- prog - value that substitutes %prog in argumentparser's usage\n- url - link to project download page\n- manual_section - section of the manual, by default 1, see man (7) man-pages\n    for more info about existing sections\n- manual_title - the title of the manual, by default \"generated python manual\",\n    see man (7) man-pages for more instructions\n- include - a file of extra material to include; see below for the format\n- manfile - a file containing a complete man page that just needs to be installed\n    (such files must also be listed in `manifest.in`)\n\nthe values from setup.cfg override values from setup.py's setup(). note that\nwhen `manfile` is set for a particular page, no other option is allowed.\n\nthen run `setup.py build_manpages` to build a manpages for your project.  also,\nif you used `get_build_py` helper, `setup.py build` then transitively builds the\nmanual pages.\n\n## include file format\n\nthe include file format is based on gnu `help2man`'s `--include` format.\n\nthe format is simple:\n\n```\n[section]\ntext\n\n/pattern/\ntext\n```\n\nblocks of verbatim *roff text are inserted into the output either at\nthe start of the given `section` (case insensitive), or after a\nparagraph matching `pattern`, a python regular expression.\n\nlines before the first section are silently ignored and may be used for\ncomments and the like.\n\nother sections are prepended to the automatically produced output for the\nstandard sections given above, or included near the bottom of the man page,\nbefore the `author` section, in the order they occur in the include file.\n\nplacement of the text within the section may be explicitly requested by\nusing the syntax `[<section]`, `[=section]` or `[>section]` to place the\nadditional text before, in place of, or after the default output\nrespectively.\n\n## installation\n\nthis package is distributed [in pypi][pypi-page], can be installed by:\n\n    $ pip install argparse-manpage\n\nit can simply downloaded, or distributed as a git submodule (see above).\n\n\n## packaging status\n\nthe git snapshot rpms\u2013pre-release version automatically built from the `main`\nbranch\u2013are available in fedora copr build system\n\n[![build status](https://copr.fedorainfracloud.org/coprs/praiskup/argparse-manpage-ci/package/argparse-manpage/status_image/last_build.png)](https://copr.fedorainfracloud.org/coprs/praiskup/argparse-manpage-ci/)\n\nthe `argparse-manpage` project is provided natively on many distributions:\n\n![build status](https://repology.org/badge/vertical-allrepos/python:argparse-manpage.svg?exclude_unsupported=1&header=argparse-manpage)\n\ntry your package manager directly (e.g. on fedora `dnf install -y\nargparse-manpage`).\n\n\n## history\n\nthe initial code was developed for crunchyfrog, a database query tool for gnome.\nthe [frog] is now retired and [runsqlrun] is it's successor.  then, the\n`build_manpage` command was developed in [andialbrecht] and edited slightly\nin [gabrielegiammatteo].  there's even an [old blog post] about this command.\n\nsince some useful work has been done in [python pull request], the code from the\npr has been used here too.\n\nlater more options and flexibility has been implemented in this fork, with the\nhelp of many contributors.  thank you!\n\nhistorically, `build_manpage` setup.py command was provided (mostly for\n`optionparser`).  later we migrated to more versatile `build_manpages` command.\nbut the old variant is still [supported](examples/old\\_format/readme.md).\n\n## license\n\nthis work is released under the terms of the apache license v2.0.\nsee license for details.\n\n\n[^1]: `argparse-manpage` needs to process the location (file/module) via python\n      interpreter, and thus please avoid side-effects (typically, the `main.py`\n      files need to use the `if __name__ == \"__main__\"` condition, and similar).\n\n[gabrielegiammatteo]: https://github.com/andialbrecht/build\\_manpage\n[andialbrecht]: https://github.com/andialbrecht/build\\_manpage\n[frog]: http://crunchyfrog.googlecode.com/svn/\n[runsqlrun]: https://github.com/andialbrecht/runsqlrun\n[old blog post]: https://andialbrecht.wordpress.com/2009/03/17/creating-a-man-page-with-distutils-and-optparse/\n[python pull request]: https://github.com/python/cpython/pull/1169\n[ap-docs]: https://docs.python.org/3/library/argparse.html#argparse.argumentparser\n[pypi-page]: https://pypi.org/project/argparse-manpage/\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "argparse-manpage",
  "package_url": "https://pypi.org/project/argparse-manpage/",
  "project_url": "https://pypi.org/project/argparse-manpage/",
  "project_urls": {
    "Homepage": "https://github.com/praiskup/argparse-manpage"
  },
  "release_url": "https://pypi.org/project/argparse-manpage/4.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "build manual page from python's argumentparser object.",
  "version": "4.5",
  "releases": [],
  "developers": [
    "gabriele.giammatteo@eng.it",
    "gabriele_giammatteo",
    "pavel_raiskup",
    "praiskup@redhat.com"
  ],
  "kwds": "argparse documentation build_manpages build_manpage argumentparser",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_argparse_manpage",
  "homepage": "https://github.com/praiskup/argparse-manpage",
  "release_count": 17,
  "dependency_ids": []
}
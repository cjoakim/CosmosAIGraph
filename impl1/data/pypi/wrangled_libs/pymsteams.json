{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: internet",
    "topic :: office/business",
    "topic :: office/business :: groupware",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pymsteams\n\n[![circleci](https://circleci.com/gh/rveachkc/pymsteams/tree/master.svg?style=shield)](https://circleci.com/gh/rveachkc/pymsteams/tree/master) [![pypi version](https://badge.fury.io/py/pymsteams.svg)](https://badge.fury.io/py/pymsteams)\n\npython wrapper library to send requests to microsoft teams webhooks.\nmicrosoft refers to these messages as connector cards.  a message can be sent with only the main connector card, or additional sections can be included into the message.\n\nthis library uses webhook connectors for microsoft teams.  please visit the following microsoft documentation link for instructions on how to obtain the correct url for your channel: https://dev.outlook.com/connectors/getstarted#creating-messages-through-office-365-connectors-in-microsoft-teams\n\nplease refer to the microsoft documentation for the most up to date screenshots.\nhttps://dev.outlook.com/connectors/reference\n\n## installation\n\ninstall with pip:\n\n```bash\npip install pymsteams\n```\n\ninstall with async capabilities (python 3.6+):\n\n```bash\npip install pymsteams[async]\n```\n\n#### python 2 installation\n\nat time of writing, the latest release supported by python 2 is [version 0.1.16](https://github.com/rveachkc/pymsteams/releases/tag/0.1.16)\n\n## usage\n\n### creating connectorcard messages\n\nthis is the simplest implementation of pymsteams.  it will send a message to the teams webhook url with plain text in the message.\n\n```python\nimport pymsteams\n\n# you must create the connectorcard object with the microsoft webhook url\nmyteamsmessage = pymsteams.connectorcard(\"<microsoft webhook url>\")\n\n# add text to the message.\nmyteamsmessage.text(\"this is my text\")\n\n# send the message.\nmyteamsmessage.send()\n```\n\n### creating creatorcard messages to send via async loop\n\n```python\nimport asyncio\nimport pymsteams\n\nloop = asyncio.get_event_loop()\n\n# the async_connectorcard object is used instead of the normal one.\nmyteamsmessage = pymsteams.async_connectorcard(\"<microsoft webhook url>\")\n\n# all formatting for the message should be the same\nmyteamsmessage.text(\"this is my message\")\n\n# to send the message, pass to the event loop\nloop.run_until_complete(myteamsmessage.send())\n```\n\nplease visit the python asyncio documentation for more info on using asyncio and the event loop: https://docs.python.org/3/library/asyncio-eventloop.html\n\n\n### optional formatting methods for cards\n\n#### add a title\n```python\nmyteamsmessage.title(\"this is my message title\")\n```\n\n#### add a link button\n```python\nmyteamsmessage.addlinkbutton(\"this is the button text\", \"https://github.com/rveachkc/pymsteams/\")\n```\n\n#### change url\nthis is useful in the event you need to post the same message to multiple rooms.\n```python\nmyteamsmessage.newhookurl(\"<my new url>\")\n```\n\n#### set color theme\nthis sets the theme color of the card. the parameter is expected to be a hex color code without the hash or the string red.\n```python\nmyteamsmessage.color(\"<hex color code>\")\n```\n\n#### preview your object\nthis is a simple print command to view your connector card message object before sending.\n```python\nmyteamsmessage.printme()\n```\n\n### adding sections to the connector card message\nto create a section and add various formatting elements\n```python\n# create the section\nmymessagesection = pymsteams.cardsection()\n\n# section title\nmymessagesection.title(\"section title\")\n\n# activity elements\nmymessagesection.activitytitle(\"my activity title\")\nmymessagesection.activitysubtitle(\"my activity subtitle\")\nmymessagesection.activityimage(\"http://i.imgur.com/c4jt321l.png\")\nmymessagesection.activitytext(\"this is my activity text\")\n\n# facts are key value pairs displayed in a list.\nmymessagesection.addfact(\"this\", \"is fine\")\nmymessagesection.addfact(\"this is\", \"also fine\")\n\n# section text\nmymessagesection.text(\"this is my section text\")\n\n# section images\nmymessagesection.addimage(\"http://i.imgur.com/c4jt321l.png\", ititle=\"this is fine\")\n\n# add your section to the connector card object before sending\nmyteamsmessage.addsection(mymessagesection)\n```\nyou may also add multiple sections to a connector card message as well.\n```python\n# create section 1\nsection1 = pymsteams.cardsection()\nsection1.text(\"my first section\")\n\n# create section 2\nsection2 = pymsteams.cardsection()\nsection2.text(\"my second section\")\n\n# add both sections to the main card object\nmyteamsmessage.addsection(section1)\nmyteamsmessage.addsection(section2)\n\n# then send the card\nmyteamsmessage.send()\n```\n### adding potential actions to the connector card message\nto create a actions on which the user can interect with in ms teams\nto find out more information on what actions can be used, please visit https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using#setting-up-a-custom-incoming-webhook\n\n```python\nmyteamsmessage = pymsteams.connectorcard(\"<microsoft webhook url>\")\n\nmyteamspotentialaction1 = pymsteams.potentialaction(_name = \"add a comment\")\nmyteamspotentialaction1.addinput(\"textinput\",\"comment\",\"add a comment here\",false)\nmyteamspotentialaction1.addaction(\"httppost\",\"add comment\",\"https://...\"\") \n\nmyteamspotentialaction2 = pymsteams.potentialaction(_name = \"set due date\")\nmyteamspotentialaction2.addinput(\"dateinput\",\"duedate\",\"enter due date\")\nmyteamspotentialaction2.addaction(\"httppost\",\"save\",\"https://...\")\n\nmyteamspotentialaction3 = pymsteams.potentialaction(_name = \"change status\")\nmyteamspotentialaction3.choices.addchoices(\"in progress\",\"0\")\nmyteamspotentialaction3.choices.addchoices(\"active\",\"1\")\nmyteamspotentialaction3.addinput(\"multichoiceinput\",\"list\",\"select a status\",false)\nmyteamspotentialaction3.addaction(\"httppost\",\"save\",\"https://...\")\n\nmyteamsmessage.addpotentialaction(myteamspotentialaction1)\nmyteamsmessage.addpotentialaction(myteamspotentialaction2)\nmyteamsmessage.addpotentialaction(myteamspotentialaction3)\n\nmyteamsmessage.summary(\"test message\")\n\nmyteamsmessage.send()\n```\n### adding http post to potential actions in the connector card message\n\n```python\nmyteamsmessage = pymsteams.connectorcard(\"<microsoft webhook url>\")\n\nmyteamspotentialaction1 = pymsteams.potentialaction(_name = \"add a comment\")\n# you can add a textinput to your potential action like below - please note the 2nd argment below as the id name\nmyteamspotentialaction1.addinput(\"textinput\",\"comment\",\"add a comment here\",false)\n# we use the 2nd argument above as the id name to parse the values into the body post like below.\nmyteamspotentialaction1.addaction(\"httppost\",\"add comment\",\"https://...\", \"{{comment.value}}\") \nmyteamsmessage.addpotentialaction(myteamspotentialaction1)\n\n\nmyteamsmessage.summary(\"test message\")\n\nmyteamsmessage.send()\n\n# notes:\n# if you post anything via teams, you will get some javascript encoding happening via the post - for example:\n# posting this:  {\"name\":\"john\", \"comment\" : \"nice\"}\n# output will be:  b'{\\\\u0022name\\\\u0022:\\\\u0022john\\\\u0022, \\\\u0022comment\\\\u0022 : \\\\u0022nice\\\\u0022}'\n# i solved this issue by decoding unicode escape for a custom rest backend.\n```\n\nplease use github issues to report any bugs or request enhancements.\n\n## troubleshooting http response\n\nthis module is really just a nice wrapper pointed at the microsoft api. to help troubleshoot missing messages, the requests response content is saved to the connectorcard class attribute `last_http_response`.\n\nto get the last http status code:\n```python\nimport pymsteams\n\nmyteamsmessage = pymsteams.connectorcard(\"<microsoft webhook url>\")\nmyteamsmessage.text(\"this is my text\")\nmyteamsmessage.send()\n\nlast_status_code = myteamsmessage.last_http_response.status_code\n```\n\nmore info on the response content is available in the requests documentation, [link](https://2.python-requests.org/en/master/user/quickstart/#response-content).\n\n## exceptions\n\nif the call to the microsoft teams webhook service fails, a `teamswebhookexception` will be thrown.\n\n## testing\n\nin order to test in your environment with pytest, set the environment variable `ms_teams_webhook` to the microsoft teams webhook url you would like to use.\n\nthen, from the root of the repo, install the requirements and run pytest.\n\n```bash\npip install -r dev-requirements.txt\nms_teams_webhook=microsoftwebhookurl\nexport ms_teams_webhook\npytest --cov=./pymsteams --cov-report=term-missing --cov-branch\n```\n\nthis will send two ms teams messages describing how they are formatted.  manually validate that the message comes through as expected.\n\n## certificate validation\n\nin some situations, a custom ca bundle must be used.  this can be set on class initialization, by setting the verify parameter.\n\n```python\nimport pymsteams\n\n# set custom ca bundle\nmsg = pymsteams.connectorcard(\"<microsoft webhook url>\", verify=\"/path/to/file\")\n\n# disable ca validation\nmsg = pymsteams.connectorcard(\"<microsoft webhook url>\", verify=false)\n```\n\nset to either the path of a custom ca bundle or false to disable.\n\nthe requests documentation can be referenced for full details: https://2.python-requests.org/en/master/user/advanced/#ssl-cert-verification",
  "docs_url": null,
  "keywords": "microsoft,teams",
  "license": "apache",
  "name": "pymsteams",
  "package_url": "https://pypi.org/project/pymsteams/",
  "project_url": "https://pypi.org/project/pymsteams/",
  "project_urls": {
    "Homepage": "https://github.com/rveachkc/pymsteams"
  },
  "release_url": "https://pypi.org/project/pymsteams/0.2.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "format messages and post to microsoft teams.",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "rveach@gmail.com",
    "ryan_veach"
  ],
  "kwds": "ms_teams_webhook messages pymsteams microsoftteams outlook",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_pymsteams",
  "homepage": "https://github.com/rveachkc/pymsteams",
  "release_count": 19,
  "dependency_ids": []
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: utilities"
  ],
  "description": "# [wait-for-it](https://wait-for-it.readthedocs.io/en/latest/)\n\n[![pypi release](https://img.shields.io/pypi/v/wait-for-it.svg)](https://pypi.org/project/wait-for-it/)\n[![pypi versions](https://img.shields.io/pypi/pyversions/wait-for-it.svg)](https://pypi.org/project/wait-for-it/)\n[![downloads](https://pepy.tech/badge/wait-for-it)](https://pepy.tech/project/wait-for-it)\n[![documentation status](https://readthedocs.org/projects/wait-for-it/badge/?version=latest)](https://wait-for-it.readthedocs.io/en/latest/?badge=latest)\n\nwait for service(s) to be available before executing a command.\n\n<br>\n<a href=\"https://blog.travismclarke.com/project/wait-for-it/\">\n  <p align=\"center\"><img width=\"60%\" src=\"https://raw.githubusercontent.com/clarketm/wait-for-it/master/hero.png\" /></p>\n</a>\n\n\n`wait-for-it` is a script that will wait on the availability of one or more tcp services (i.e. `host:port`) before executing a user-defined command.\nit is useful for synchronizing the spin-up of interdependent services, such as linked docker containers.\n\n> since [v2.0.0](https://github.com/clarketm/wait-for-it/releases/tag/v2.0.0), `wait-for-it` will return the exit code of the executed command(s).\n\n[check out the wait-for-it docs](https://wait-for-it.readthedocs.io/en/latest/)\n\n## installation\n\n```bash\n$ pip install wait-for-it\n```\n\n## demo\n[![usage demo](https://asciinema.org/a/351695.svg)](https://asciinema.org/a/351695)\n\n## usage\n```text\nusage: wait-for-it [options] [commands]...\n\n  wait for service(s) to be available before executing a command.\n\noptions:\n  -h, --help               show this message and exit.\n  -v, --version            show the version and exit.\n  -q, --quiet              do not output any status messages\n  -p, --parallel           test services in parallel rather than in serial\n  -t, --timeout seconds    timeout in seconds, 0 for no timeout  [default: 15]\n  -s, --service host:port  services to test, in one of the formats: ':port',\n                           'hostname:port', 'v4addr:port', '[v6addr]:port' or\n                           'https://...'\n```\n\n## examples\n\ntest to see if we can access port 80 on www.google.com, and if it is available, echo the message **google is up**:\n\n```bash\n$ wait-for-it \\\n--service www.google.com:80 \\\n-- echo \"google is up\"\n```\n\n```text\n[*] waiting 15 seconds for www.google.com:80\n[+] www.google.com:80 is available after 0 seconds\ngoogle is up\n```\n\nyou can set your own timeout with the `-t` or `--timeout` option. setting the timeout value to **0** will disable the timeout:\n\n```bash\n$ wait-for-it \\\n--service www.google.com:80 \\\n--timeout 0 \\\n-- echo \"google is up\"\n```\n\n```text\n[*] waiting for www.google.com:80 without a timeout\n[+] www.google.com:80 is available after 0 seconds\ngoogle is up\n```\n\nmultiple services can be tested by adding additional `-s` or `--service` options:\n\n```bash\n$ wait-for-it \\\n--service www.google.com:80 \\\n--service www.bing.com:80 \\\n--service www.duckduckgo.com:80 \\\n-- echo \"google, bing, and duckduckgo are up\"\n```\n\n```text\n[*] waiting 15 seconds for www.google.com:80\n[+] www.google.com:80 is available after 0 seconds\n[*] waiting 15 seconds for www.bing.com:80\n[+] www.bing.com:80 is available after 0 seconds\n[*] waiting 15 seconds for www.duckduckgo.com:80\n[+] www.duckduckgo.com:80 is available after 0 seconds\ngoogle, bing, and duckduckgo are up\n```\n\nby adding the `-p` or `--parallel` option, `wait-for-it` can do the same in parallel rather than serial:\n\n```bash\n$ wait-for-it \\\n--parallel \\\n--service www.google.com:80 \\\n--service www.bing.com:80 \\\n--service www.duckduckgo.com:80 \\\n-- echo \"google, bing, and duckduckgo are up\"\n```\n\n```text\n[*] waiting 15 seconds for www.bing.com:80\n[*] waiting 15 seconds for www.duckduckgo.com:80\n[*] waiting 15 seconds for www.google.com:80\n[+] www.bing.com:80 is available after 0 seconds\n[+] www.duckduckgo.com:80 is available after 0 seconds\n[+] www.google.com:80 is available after 0 seconds\ngoogle, bing, and duckduckgo are up\n```\n\nstatus message output can be suppressed with the `-q` or `--quiet` option:\n\n```bash\n$ wait-for-it \\\n--quiet \\\n--service www.google.com:80 \\\n-- echo \"google is up\"\n```\n\n```text\ngoogle is up\n```\n\n## related\n* [vishnubob/wait-for-it](https://github.com/vishnubob/wait-for-it)\n\n## license\n\nmit &copy; [**travis clarke**](https://blog.travismclarke.com/),\n           [sebastian pipping](https://blog.hartwork.org/)\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "wait-for-it",
  "package_url": "https://pypi.org/project/wait-for-it/",
  "project_url": "https://pypi.org/project/wait-for-it/",
  "project_urls": {
    "Homepage": "https://github.com/clarketm/wait-for-it"
  },
  "release_url": "https://pypi.org/project/wait-for-it/2.2.2/",
  "requires_dist": [
    "click",
    "black ; extra == 'dev'",
    "click ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "parameterized ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "twine ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "wait for service(s) to be available before executing a command.",
  "version": "2.2.2",
  "releases": [],
  "developers": [
    "travis.m.clarke@gmail.com",
    "travis_clarke"
  ],
  "kwds": "pypi waiting pyversions status latest",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_wait_for_it",
  "homepage": "https://github.com/clarketm/wait-for-it",
  "release_count": 15,
  "dependency_ids": [
    "pypi_black",
    "pypi_click",
    "pypi_flake8",
    "pypi_parameterized",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_twine"
  ]
}
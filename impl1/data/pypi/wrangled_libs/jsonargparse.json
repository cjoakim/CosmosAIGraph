{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: https://readthedocs.org/projects/jsonargparse/badge/?version=stable\n    :target: https://readthedocs.org/projects/jsonargparse/\n.. image:: https://github.com/omni-us/jsonargparse/actions/workflows/tests.yml/badge.svg\n    :target: https://github.com/omni-us/jsonargparse/actions/workflows/tests.yml\n.. image:: https://codecov.io/gh/omni-us/jsonargparse/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/omni-us/jsonargparse\n.. image:: https://sonarcloud.io/api/project_badges/measure?project=omni-us_jsonargparse&metric=alert_status\n    :target: https://sonarcloud.io/dashboard?id=omni-us_jsonargparse\n.. image:: https://badge.fury.io/py/jsonargparse.svg\n    :target: https://badge.fury.io/py/jsonargparse\n\n\njsonargparse\n============\n\ndocs: https://jsonargparse.readthedocs.io/ | source: https://github.com/omni-us/jsonargparse/\n\n``jsonargparse`` is a library for creating command-line interfaces (clis) and\nmaking python apps easily configurable. it is a well-maintained project with\nfrequent releases, adhering to high standards of development: semantic\nversioning, deprecation periods, changelog, automated testing, and full test\ncoverage.\n\nalthough ``jsonargparse`` might not be widely recognized yet, it already boasts\na `substantial user base\n<https://github.com/omni-us/jsonargparse/network/dependents>`__. most notably,\nit serves as the framework behind pytorch-lightning's `lightningcli\n<https://lightning.ai/docs/pytorch/stable/cli/lightning_cli.html>`__.\n\n\nfeatures\n--------\n\n``jsonargparse`` is user-friendly and encourages the development of **clean,\nhigh-quality code**. it encompasses numerous powerful features, some unique to\n``jsonargparse``, while also combining advantages found in similar packages:\n\n- **automatic** creation of clis, like `fire\n  <https://pypi.org/project/fire/>`__, `typer\n  <https://pypi.org/project/typer/>`__, `clize\n  <https://pypi.org/project/clize/>`__ and `tyro\n  <https://pypi.org/project/tyro/>`__.\n\n- use **type hints** for argument validation, like `typer\n  <https://pypi.org/project/typer/>`__, `tap\n  <https://pypi.org/project/typed-argument-parser/>`__ and `tyro\n  <https://pypi.org/project/tyro/>`__.\n\n- use of **docstrings** for automatic generation of help, like `tap\n  <https://pypi.org/project/typed-argument-parser/>`__, `tyro\n  <https://pypi.org/project/tyro/>`__ and `simpleparsing\n  <https://pypi.org/project/simple-parsing/>`__.\n\n- parse from **configuration files** and **environment variables**, like\n  `omegaconf <https://pypi.org/project/omegaconf/>`__, `dynaconf\n  <https://pypi.org/project/dynaconf/>`__, `confuse\n  <https://pypi.org/project/confuse/>`__ and `configargparse\n  <https://pypi.org/project/configargparse/>`__.\n\n- **dataclasses** support, like `simpleparsing\n  <https://pypi.org/project/simple-parsing/>`__ and `tyro\n  <https://pypi.org/project/tyro/>`__.\n\nother notable features include:\n\n- **extensive type hint support:** nested types (union, optional), containers\n  (list, dict, etc.), user-defined generics, restricted types (regex, numbers),\n  paths, urls, types from stubs (``*.pyi``), future annotations (pep `563\n  <https://peps.python.org/pep-0563/>`__), and backports (peps `604\n  <https://peps.python.org/pep-0604>`__/`585\n  <https://peps.python.org/pep-0585>`__).\n\n- **keyword arguments introspection:** resolving of parameters used via\n  ``**kwargs``.\n\n- **dependency injection:** support types that expect a class instance and\n  callables that return a class instance.\n\n- **structured configs:** parse config files with more understandable non-flat\n  hierarchies.\n\n- **config file formats:** `json <https://www.json.org/>`__, `yaml\n  <https://yaml.org/>`__, `jsonnet <https://jsonnet.org/>`__ and extendible to\n  more formats.\n\n- **relative paths:** within config files and parsing of config paths referenced\n  inside other configs.\n\n- **argument linking:** directing parsed values to multiple parameters,\n  preventing unnecessary interpolation in configs.\n\n\ndesign principles\n-----------------\n\n- **non-intrusive/decoupled:**\n\n  there is no requirement for unrelated modifications throughout a codebase,\n  maintaining the `separation of concerns principle\n  <https://en.wikipedia.org/wiki/separation_of_concerns>`__. in simpler terms,\n  changes should make sense even without the cli. no need to inherit from a\n  special class, add decorators, or use cli-specific type hints.\n\n- **minimal boilerplate:**\n\n  a recommended practice is to write code with function/class parameters having\n  meaningful names, accurate type hints, and descriptive docstrings. reuse these\n  wherever they appear to automatically generate the cli, following the `don't\n  repeat yourself principle\n  <https://en.wikipedia.org/wiki/don%27t_repeat_yourself>`__. a notable\n  advantage is that when parameters are added or types changed, the cli will\n  remain synchronized, avoiding the need to update the cli's implementation.\n\n- **dependency injection:**\n\n  using as type hint a class or a callable that instantiates a class, a practice\n  known as `dependency injection\n  <https://en.wikipedia.org/wiki/dependency_injection>`__, is a sound design\n  pattern for developing loosely coupled and highly configurable software. such\n  type hints should be supported with minimal restrictions.\n\n\n.. _installation:\n\ninstallation\n============\n\nyou can install using `pip <https://pypi.org/project/jsonargparse/>`__ as:\n\n.. code-block:: bash\n\n    pip install jsonargparse\n\nby default the only dependency that jsonargparse installs is `pyyaml\n<https://pypi.org/project/pyyaml/>`__. however, several optional features can be\nenabled by specifying any of the following extras requires: ``signatures``,\n``jsonschema``, ``jsonnet``, ``urls``, ``fsspec``, ``ruyaml``, ``omegaconf`` and\n``argcomplete``. there is also the ``all`` extras require to enable all optional\nfeatures. installing jsonargparse with extras require is as follows:\n\n.. code-block:: bash\n\n    pip install \"jsonargparse[signatures,urls]\"  # enable signatures and urls features\n    pip install \"jsonargparse[all]\"              # enable all optional features\n",
  "docs_url": null,
  "keywords": "",
  "license": "the mit license (mit)  copyright (c) 2019-present, mauricio villegas <mauricio@omnius.com>  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "jsonargparse",
  "package_url": "https://pypi.org/project/jsonargparse/",
  "project_url": "https://pypi.org/project/jsonargparse/",
  "project_urls": {
    "Changes": "https://jsonargparse.readthedocs.io/en/stable/changelog.html",
    "CircleCI": "https://circleci.com/gh/omni-us/jsonargparse",
    "Codecov": "https://codecov.io/gh/omni-us/jsonargparse",
    "Documentation-latest": "https://jsonargparse.readthedocs.io/en/latest/",
    "Documentation-stable": "https://jsonargparse.readthedocs.io/en/stable/",
    "GitHub": "https://github.com/omni-us/jsonargparse",
    "PyPI": "https://pypi.org/project/jsonargparse",
    "SonarCloud": "https://sonarcloud.io/dashboard?id=omni-us_jsonargparse"
  },
  "release_url": "https://pypi.org/project/jsonargparse/4.27.1/",
  "requires_dist": [
    "PyYAML >=3.13",
    "jsonargparse[signatures] ; extra == 'all'",
    "jsonargparse[jsonschema] ; extra == 'all'",
    "jsonargparse[jsonnet] ; extra == 'all'",
    "jsonargparse[urls] ; extra == 'all'",
    "jsonargparse[fsspec] ; extra == 'all'",
    "jsonargparse[argcomplete] ; extra == 'all'",
    "jsonargparse[ruyaml] ; extra == 'all'",
    "jsonargparse[omegaconf] ; extra == 'all'",
    "jsonargparse[typing-extensions] ; extra == 'all'",
    "jsonargparse[reconplogger] ; extra == 'all'",
    "argcomplete >=2.0.0 ; extra == 'argcomplete'",
    "jsonargparse[test-no-urls] ; extra == 'coverage'",
    "pytest-cov >=4.0.0 ; extra == 'coverage'",
    "jsonargparse[test] ; extra == 'dev'",
    "jsonargparse[coverage] ; extra == 'dev'",
    "jsonargparse[doc] ; extra == 'dev'",
    "jsonargparse[mypy] ; extra == 'dev'",
    "pre-commit >=2.19.0 ; extra == 'dev'",
    "tox >=3.25.0 ; extra == 'dev'",
    "build >=0.10.0 ; extra == 'dev'",
    "Sphinx >=1.7.9 ; extra == 'doc'",
    "sphinx-rtd-theme >=1.2.2 ; extra == 'doc'",
    "autodocsumm >=0.1.10 ; extra == 'doc'",
    "sphinx-autodoc-typehints >=1.19.5 ; extra == 'doc'",
    "fsspec >=0.8.4 ; extra == 'fsspec'",
    "jsonnet-binary >=0.17.0 ; (os_name != \"posix\") and extra == 'jsonnet'",
    "jsonnet >=0.13.0 ; (os_name == \"posix\") and extra == 'jsonnet'",
    "jsonschema >=3.2.0 ; extra == 'jsonschema'",
    "bump2version >=0.5.11 ; extra == 'maintainer'",
    "twine >=4.0.2 ; extra == 'maintainer'",
    "omegaconf >=2.1.1 ; extra == 'omegaconf'",
    "reconplogger >=4.4.0 ; extra == 'reconplogger'",
    "ruyaml >=0.20.0 ; extra == 'ruyaml'",
    "jsonargparse[typing-extensions] ; extra == 'signatures'",
    "docstring-parser >=0.15 ; extra == 'signatures'",
    "typeshed-client >=2.1.0 ; extra == 'signatures'",
    "jsonargparse[test-no-urls] ; extra == 'test'",
    "types-PyYAML >=6.0.11 ; extra == 'test'",
    "types-requests >=2.28.9 ; extra == 'test'",
    "responses >=0.12.0 ; extra == 'test'",
    "pydantic >=2.3.0 ; extra == 'test'",
    "attrs >=22.2.0 ; extra == 'test'",
    "pytest >=6.2.5 ; extra == 'test-no-urls'",
    "pytest-subtests >=0.8.0 ; extra == 'test-no-urls'",
    "typing-extensions >=3.10.0.0 ; (python_version < \"3.10\") and extra == 'typing-extensions'",
    "requests >=2.18.4 ; extra == 'urls'"
  ],
  "requires_python": ">=3.7",
  "summary": "implement minimal boilerplate clis derived from type hints and parse from command line, config files and environment variables.",
  "version": "4.27.1",
  "releases": [],
  "developers": [
    "mauricio@omnius.com"
  ],
  "kwds": "us_jsonargparse jsonargparse project_badges badge yaml",
  "license_kwds": "copyright mit license liable software",
  "libtype": "pypi",
  "id": "pypi_jsonargparse",
  "homepage": "",
  "release_count": 168,
  "dependency_ids": [
    "pypi_argcomplete",
    "pypi_attrs",
    "pypi_autodocsumm",
    "pypi_build",
    "pypi_bump2version",
    "pypi_docstring_parser",
    "pypi_fsspec",
    "pypi_jsonargparse",
    "pypi_jsonnet",
    "pypi_jsonnet_binary",
    "pypi_jsonschema",
    "pypi_omegaconf",
    "pypi_pre_commit",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_subtests",
    "pypi_pyyaml",
    "pypi_reconplogger",
    "pypi_requests",
    "pypi_responses",
    "pypi_ruyaml",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_tox",
    "pypi_twine",
    "pypi_types_pyyaml",
    "pypi_types_requests",
    "pypi_typeshed_client",
    "pypi_typing_extensions"
  ]
}
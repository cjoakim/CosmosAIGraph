{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# strenum\n\n[![build status](https://github.com/irgeek/strenum/workflows/python%20package/badge.svg)](https://github.com/irgeek/strenum/actions)\n\nstrenum is a python `enum.enum` that inherits from `str` to complement\n`enum.intenum` in the standard library. supports python 3.7+.\n\n## installation\n\nyou can use [pip](https://pip.pypa.io/en/stable/) to install.\n\n```bash\npip install strenum\n```\n\n## usage\n\n```python\nfrom enum import auto\nfrom strenum import strenum\n\n\nclass httpmethod(strenum):\n    get = auto()\n    head = auto()\n    post = auto()\n    put = auto()\n    delete = auto()\n    connect = auto()\n    options = auto()\n    trace = auto()\n    patch = auto()\n\n\nassert httpmethod.get == \"get\"\n\n# you can use strenum values just like strings:\n\nimport urllib.request\n\nreq = urllib.request.request('https://www.python.org/', method=httpmethod.head)\nwith urllib.request.urlopen(req) as response:\n    html = response.read()\n\nassert len(html) == 0  # head requests do not (usually) include a body\n```\n\nthere are classes whose `auto()` value folds each member name to upper or lower\ncase:\n\n```python\nfrom enum import auto\nfrom strenum import lowercasestrenum, uppercasestrenum\n\n\nclass tag(lowercasestrenum):\n    head = auto()\n    body = auto()\n    div = auto()\n\n\nassert tag.head == \"head\"\nassert tag.body == \"body\"\nassert tag.div == \"div\"\n\n\nclass httpmethod(uppercasestrenum):\n    get = auto()\n    head = auto()\n    post = auto()\n\n\nassert httpmethod.get == \"get\"\nassert httpmethod.head == \"head\"\nassert httpmethod.post == \"post\"\n```\n\nas well as classes whose `auto()` value converts each member name to camelcase,\npascalcase, kebab-case, snake_case and macro_case:\n\n```python\nfrom enum import auto\nfrom strenum import camelcasestrenum, pascalcasestrenum\nfrom strenum import kebabcasestrenum, snakecasestrenum\nfrom strenum import macrocasestrenum\n\n\nclass cameltestenum(camelcasestrenum):\n    onetwothree = auto()\n\n\nclass pascaltestenum(pascalcasestrenum):\n    onetwothree = auto()\n\n\nclass kebabtestenum(kebabcasestrenum):\n    onetwothree = auto()\n\n\nclass snaketestenum(snakecasestrenum):\n    onetwothree = auto()\n\n\nclass macrotestenum(macrocasestrenum):\n    onetwothree = auto()\n\n\nassert cameltestenum.onetwothree == \"onetwothree\"\nassert pascaltestenum.onetwothree == \"onetwothree\"\nassert kebabtestenum.onetwothree == \"one-two-three\"\nassert snaketestenum.onetwothree == \"one_two_three\"\nassert macrotestenum.onetwothree == \"one_two_three\"\n```\n\nas with any enum you can, of course, manually assign values.\n\n```python\nfrom strenum import strenum\n\n\nclass shape(strenum):\n    circle = \"circle\"\n\n\nassert shape.circle == \"circle\"\n```\n\ndoing this with the case-changing classes, though, won't manipulate\nvalues--whatever you assign is the value they end up with.\n\n```python\nfrom strenum import kebabcasestrenum\n\n\nclass shape(kebabcasestrenum):\n    circle = \"circle\"\n\n\n# this will raise an assertionerror because the value wasn't converted to kebab-case.\nassert shape.circle == \"circle\"\n```\n\n## contributing\n\npull requests are welcome. for major changes, please open an issue first to\ndiscuss what you would like to change.\n\nplease ensure tests pass before submitting a pr. this repository uses\n[black](https://black.readthedocs.io/en/stable/) and\n[pylint](https://www.pylint.org/) for consistency. both are run automatically\nas part of the test suite.\n\n## running the tests\n\ntests can be run using `make`:\n\n```\nmake test\n```\n\nthis will create a virutal environment, install the module and its test\ndependencies and run the tests. alternatively you can do the same thing\nmanually:\n\n```\npython3 -m venv .venv\n.venv/bin/pip install .[test]\n.venv/bin/pytest\n```\n\n## license\n\n[mit](https://choosealicense.com/licenses/mit/)\n\n**n.b. starting with python 3.11, `enum.strenum` is available in the standard\nlibrary. this implementation is _not_ a drop-in replacement for the standard\nlibrary implementation. specifically, the python devs have decided to case fold\nname to lowercase by default when `auto()` is used which i think violates the\nprinciple of least surprise.**\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "strenum",
  "package_url": "https://pypi.org/project/StrEnum/",
  "project_url": "https://pypi.org/project/StrEnum/",
  "project_urls": {
    "Homepage": "https://github.com/irgeek/StrEnum"
  },
  "release_url": "https://pypi.org/project/StrEnum/0.4.15/",
  "requires_dist": [
    "sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "myst-parser[linkify] ; extra == 'docs'",
    "twine ; extra == 'release'",
    "pytest ; extra == 'test'",
    "pytest-black ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-pylint ; extra == 'test'",
    "pylint ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "an enum that inherits from str.",
  "version": "0.4.15",
  "releases": [],
  "developers": [
    "james@nurfherder.com",
    "james_sinclair"
  ],
  "kwds": "strenum enum pip python3 str",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_strenum",
  "homepage": "https://github.com/irgeek/strenum",
  "release_count": 16,
  "dependency_ids": [
    "pypi_myst_parser",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_cov",
    "pypi_pytest_pylint",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_twine"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries"
  ],
  "description": "-------------\nbackports.ssl\n-------------\n\nwhat is it?\n-----------\n\nit's the python 3.4 standard ``ssl`` module api implemented on top of\npyopenssl::\n\n    import backports.ssl as ssl\n    import socket\n\n    context = ssl.sslcontext(ssl.protocol_sslv23)\n    context.verify_mode = ssl.cert_required\n\n    conn = context.wrap_socket(socket.socket(socket.af_inet))\n    conn.connect(('google.com', 443))\n    print conn.getpeercert()\n    conn.close()\n\nwhy?\n----\n\nbecause the latest web technologies should be available to those running older\nversions of python.\n\nisn't this obsoleted by `pep 466`_?\n-----------------------------------\n\nif you're on python 2.7, then probably. but pep 466 doesn't cover python 2.6,\n3.2, or 3.3, and the ``ssl.rand_*()`` functions are explicitly out of scope.\nthis package supports it all.\n\nhow do i use it with third-party libraries?\n-------------------------------------------\n\nmonkey-patching support is included a la `gevent`_::\n\n    import backports.ssl.monkey as monkey\n    import requests\n\n    monkey.patch()\n    requests.get('https://google.com')\n\n\nwhy am i getting ``attributeerror``\\ s for newer features?\n------------------------------------------------------\n\nlike the standard ``ssl`` module, certain attributes will not be available if\nyour openssl does not support them. see `installing openssl`_ for instructions.\n\ninstalling openssl\n------------------\n\ntodo\n----\n\n- verify that we play nicely with gevent's monkey-patching.\n- backport and pass the standard python ``ssl`` test suite.\n- if not that, automate testing against hyper, urllib3, requests, and tornado\n  test suites.\n- use the bundled 3.x openssl, if available and newer than the default.\n\n.. _`pep 466`: http://legacy.python.org/dev/peps/pep-0466\n.. _`gevent`: http://gevent.org",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "backports.ssl",
  "package_url": "https://pypi.org/project/backports.ssl/",
  "project_url": "https://pypi.org/project/backports.ssl/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/alekstorm/backports.ssl"
  },
  "release_url": "https://pypi.org/project/backports.ssl/0.0.9/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "the python 3.4 standard `ssl` module api implemented on top of pyopenssl",
  "version": "0.0.9",
  "releases": [],
  "developers": [
    "alek.storm@gmail.com",
    "alek_storm"
  ],
  "kwds": "protocol_sslv23 ssl pyopenssl https openssl",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_backports.ssl",
  "homepage": "https://github.com/alekstorm/backports.ssl",
  "release_count": 9,
  "dependency_ids": []
}
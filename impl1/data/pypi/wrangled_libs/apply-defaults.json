{
  "classifiers": [],
  "description": "# apply_defaults\n\napply default values to functions.\n\nmakes configuration easy! application settings come from a config file into\nyour code cleanly.\n\n```sh\npip install apply_defaults\n```\n\n## @apply_config\n\nthis decorator applies options from a configparser object.\n\n```python\nfrom apply_defaults import apply_config\nfrom configparser import configparser\n\nconfig = configparser()\nconfig.read_dict({\"general\": {\"option\": true}})\n\n@apply_config(config)\ndef func(option: bool = false) -> bool:\n    return option\n```\n\nthe `option` parameter takes the value from the configuration.\n\n```python\n>>> func()\ntrue\n```\n\noverride the configuration by passing a value.\n\n```python\n>>> func(option=false)\nfalse\n```\n\nif the option is not in the configuration, the default value from the parameter\nlist is used.\n\n```python\n>>> config.remove_option(\"general\", \"option\")\n>>> func()\nfalse\n```\n\n_configparser's options are strings. type hints in the function signature allow\nthe apply_config decorator to cast options to the desired type.  alternatively\ncast the value yourself._\n\n## @apply_self\n\nthis decorator applies attributes from the bound object.\n\n```python\nfrom apply_defaults import apply_self\n\nclass myobject:\n    def __init__(self):\n        self.option = true\n\n    @apply_self\n    def func(self, option=false):\n        return option\n```\n\nthe parameter takes the value from the bound object, i.e. `self.option`.\n\n```python\n>>> obj = myobject()\n>>> obj.func()\ntrue\n```\n\noverride by passing a value.\n\n```python\n>>> obj.func(option=false)\nfalse\n```\n\nif the attribute is not in the bound object, the default value from the\nparameter list is used.\n\n```python\n>>> del obj.option\n>>> obj.func()\nfalse\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "apply-defaults",
  "package_url": "https://pypi.org/project/apply-defaults/",
  "project_url": "https://pypi.org/project/apply-defaults/",
  "project_urls": {
    "Homepage": "https://github.com/bcb/apply_defaults"
  },
  "release_url": "https://pypi.org/project/apply-defaults/0.1.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "apply values to optional params",
  "version": "0.1.6",
  "releases": [],
  "developers": [
    "beau_barker"
  ],
  "kwds": "apply_defaults apply_config _configparser configparser apply_self",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_apply_defaults",
  "homepage": "https://github.com/bcb/apply_defaults",
  "release_count": 7,
  "dependency_ids": []
}
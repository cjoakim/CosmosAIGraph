{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: office/business :: financial",
    "topic :: office/business :: financial :: investment",
    "topic :: scientific/engineering :: interface engine/protocol translator",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# download market data from yahoo! finance's api\n\n<table border=1 cellpadding=10><tr><td>\n\n#### \\*\\*\\* important legal disclaimer \\*\\*\\*\n\n---\n\n**yahoo!, y!finance, and yahoo! finance are registered trademarks of\nyahoo, inc.**\n\nyfinance is **not** affiliated, endorsed, or vetted by yahoo, inc. it's\nan open-source tool that uses yahoo's publicly available apis, and is\nintended for research and educational purposes.\n\n**you should refer to yahoo!'s terms of use**\n([here](https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm),\n[here](https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html), and\n[here](https://policies.yahoo.com/us/en/yahoo/terms/index.htm)) **for\ndetails on your rights to use the actual data downloaded. remember - the\nyahoo! finance api is intended for personal use only.**\n\n</td></tr></table>\n\n---\n\n<a target=\"new\" href=\"https://pypi.python.org/pypi/yfinance\"><img border=0 src=\"https://img.shields.io/badge/python-2.7,%203.6+-blue.svg?style=flat\" alt=\"python version\"></a>\n<a target=\"new\" href=\"https://pypi.python.org/pypi/yfinance\"><img border=0 src=\"https://img.shields.io/pypi/v/yfinance.svg?maxage=60%\" alt=\"pypi version\"></a>\n<a target=\"new\" href=\"https://pypi.python.org/pypi/yfinance\"><img border=0 src=\"https://img.shields.io/pypi/status/yfinance.svg?maxage=60\" alt=\"pypi status\"></a>\n<a target=\"new\" href=\"https://pypi.python.org/pypi/yfinance\"><img border=0 src=\"https://img.shields.io/pypi/dm/yfinance.svg?maxage=2592000&label=installs&color=%2327b1ff\" alt=\"pypi downloads\"></a>\n<a target=\"new\" href=\"https://travis-ci.com/github/ranaroussi/yfinance\"><img border=0 src=\"https://img.shields.io/travis/ranaroussi/yfinance/main.svg?maxage=1\" alt=\"travis-ci build status\"></a>\n<a target=\"new\" href=\"https://www.codefactor.io/repository/github/ranaroussi/yfinance\"><img border=0 src=\"https://www.codefactor.io/repository/github/ranaroussi/yfinance/badge\" alt=\"codefactor\"></a>\n<a target=\"new\" href=\"https://github.com/ranaroussi/yfinance\"><img border=0 src=\"https://img.shields.io/github/stars/ranaroussi/yfinance.svg?style=social&label=star&maxage=60\" alt=\"star this repo\"></a>\n<a target=\"new\" href=\"https://twitter.com/aroussi\"><img border=0 src=\"https://img.shields.io/twitter/follow/aroussi.svg?style=social&label=follow&maxage=60\" alt=\"follow me on twitter\"></a>\n\n\n**yfinance** offers a threaded and pythonic way to download market data from [yahoo!\u24e1 finance](https://finance.yahoo.com).\n\n\u2192 check out this [blog post](https://aroussi.com/#post/python-yahoo-finance) for a detailed tutorial with code examples.\n\n[changelog \u00bb](https://github.com/ranaroussi/yfinance/blob/main/changelog.rst)\n\n---\n\n## quick start\n\n### the ticker module\n\nthe `ticker` module, which allows you to access ticker data in a more pythonic way:\n\n```python\nimport yfinance as yf\n\nmsft = yf.ticker(\"msft\")\n\n# get all stock info\nmsft.info\n\n# get historical market data\nhist = msft.history(period=\"1mo\")\n\n# show meta information about the history (requires history() to be called first)\nmsft.history_metadata\n\n# show actions (dividends, splits, capital gains)\nmsft.actions\nmsft.dividends\nmsft.splits\nmsft.capital_gains  # only for mutual funds & etfs\n\n# show share count\nmsft.get_shares_full(start=\"2022-01-01\", end=none)\n\n# show financials:\n# - income statement\nmsft.income_stmt\nmsft.quarterly_income_stmt\n# - balance sheet\nmsft.balance_sheet\nmsft.quarterly_balance_sheet\n# - cash flow statement\nmsft.cashflow\nmsft.quarterly_cashflow\n# see `ticker.get_income_stmt()` for more options\n\n# show holders\nmsft.major_holders\nmsft.institutional_holders\nmsft.mutualfund_holders\n\n# show future and historic earnings dates, returns at most next 4 quarters and last 8 quarters by default. \n# note: if more are needed use msft.get_earnings_dates(limit=xx) with increased limit argument.\nmsft.earnings_dates\n\n# show isin code - *experimental*\n# isin = international securities identification number\nmsft.isin\n\n# show options expirations\nmsft.options\n\n# show news\nmsft.news\n\n# get option chain for specific expiration\nopt = msft.option_chain('yyyy-mm-dd')\n# data available via: opt.calls, opt.puts\n```\n\nif you want to use a proxy server for downloading data, use:\n\n```python\nimport yfinance as yf\n\nmsft = yf.ticker(\"msft\")\n\nmsft.history(..., proxy=\"proxy_server\")\nmsft.get_actions(proxy=\"proxy_server\")\nmsft.get_dividends(proxy=\"proxy_server\")\nmsft.get_splits(proxy=\"proxy_server\")\nmsft.get_capital_gains(proxy=\"proxy_server\")\nmsft.get_balance_sheet(proxy=\"proxy_server\")\nmsft.get_cashflow(proxy=\"proxy_server\")\nmsft.option_chain(..., proxy=\"proxy_server\")\n...\n```\n\n### multiple tickers\n\nto initialize multiple `ticker` objects, use\n\n```python\nimport yfinance as yf\n\ntickers = yf.tickers('msft aapl goog')\n\n# access each ticker using (example)\ntickers.tickers['msft'].info\ntickers.tickers['aapl'].history(period=\"1mo\")\ntickers.tickers['goog'].actions\n```\n\nto download price history into one table:\n\n```python\nimport yfinance as yf\ndata = yf.download(\"spy aapl\", period=\"1mo\")\n```\n\n#### `yf.download()` and `ticker.history()` have many options for configuring fetching and processing. [review the wiki](https://github.com/ranaroussi/yfinance/wiki) for more options and detail.\n\n### logging\n\n`yfinance` now uses the `logging` module to handle messages, default behaviour is only print errors. if debugging, use `yf.enable_debug_mode()` to switch logging to debug with custom formatting.\n\n### smarter scraping\n\nto use a custom `requests` session (for example to cache calls to the\napi or customize the `user-agent` header), pass a `session=` argument to\nthe ticker constructor.\n\n```python\nimport requests_cache\nsession = requests_cache.cachedsession('yfinance.cache')\nsession.headers['user-agent'] = 'my-program/1.0'\nticker = yf.ticker('msft', session=session)\n# the scraped response will be stored in the cache\nticker.actions\n```\n\ncombine a `requests_cache` with rate-limiting to avoid triggering yahoo's rate-limiter/blocker that can corrupt data.\n```python\nfrom requests import session\nfrom requests_cache import cachemixin, sqlitecache\nfrom requests_ratelimiter import limitermixin, memoryqueuebucket\nfrom pyrate_limiter import duration, requestrate, limiter\nclass cachedlimitersession(cachemixin, limitermixin, session):\n    pass\n\nsession = cachedlimitersession(\n    limiter=limiter(requestrate(2, duration.second*5)),  # max 2 requests per 5 seconds\n    bucket_class=memoryqueuebucket,\n    backend=sqlitecache(\"yfinance.cache\"),\n)\n```\n\n### managing multi-level columns\n\nthe following answer on stack overflow is for [how to deal with\nmulti-level column names downloaded with\nyfinance?](https://stackoverflow.com/questions/63107801)\n\n-   `yfinance` returns a `pandas.dataframe` with multi-level column\n    names, with a level for the ticker and a level for the stock price\n    data\n    -   the answer discusses:\n        -   how to correctly read the the multi-level columns after\n            saving the dataframe to a csv with `pandas.dataframe.to_csv`\n        -   how to download single or multiple tickers into a single\n            dataframe with single level column names and a ticker column\n\n### `pandas_datareader` override\n\nif your code uses `pandas_datareader` and you want to download data\nfaster, you can \"hijack\" `pandas_datareader.data.get_data_yahoo()`\nmethod to use **yfinance** while making sure the returned data is in the\nsame format as **pandas\\_datareader**'s `get_data_yahoo()`.\n\n```python\nfrom pandas_datareader import data as pdr\n\nimport yfinance as yf\nyf.pdr_override() # <== that's all it takes :-)\n\n# download dataframe\ndata = pdr.get_data_yahoo(\"spy\", start=\"2017-01-01\", end=\"2017-04-30\")\n```\n\n### timezone cache store\n\nwhen fetching price data, all dates are localized to stock exchange timezone. \nbut timezone retrieval is relatively slow, so yfinance attemps to cache them \nin your users cache folder. \nyou can direct cache to use a different location with `set_tz_cache_location()`:\n```python\nimport yfinance as yf\nyf.set_tz_cache_location(\"custom/cache/location\")\n...\n```\n\n---\n\n## installation\n\ninstall `yfinance` using `pip`:\n\n``` {.sourcecode .bash}\n$ pip install yfinance --upgrade --no-cache-dir\n```\n\ntest new features by installing betas, provide feedback in [corresponding discussion](https://github.com/ranaroussi/yfinance/discussions):\n``` {.sourcecode .bash}\n$ pip install yfinance --upgrade --no-cache-dir --pre\n```\n\nto install `yfinance` using `conda`, see\n[this](https://anaconda.org/ranaroussi/yfinance).\n\n### requirements\n\n-   [python](https://www.python.org) \\>= 2.7, 3.4+\n-   [pandas](https://github.com/pydata/pandas) \\>= 1.3.0\n-   [numpy](http://www.numpy.org) \\>= 1.16.5\n-   [requests](http://docs.python-requests.org/en/master) \\>= 2.31\n-   [lxml](https://pypi.org/project/lxml) \\>= 4.9.1\n-   [appdirs](https://pypi.org/project/appdirs) \\>= 1.4.4\n-   [pytz](https://pypi.org/project/pytz) \\>=2022.5\n-   [frozendict](https://pypi.org/project/frozendict) \\>= 2.3.4\n-   [beautifulsoup4](https://pypi.org/project/beautifulsoup4) \\>= 4.11.1\n-   [html5lib](https://pypi.org/project/html5lib) \\>= 1.1\n-   [peewee](https://pypi.org/project/peewee)  \\>= 3.16.2\n\n#### optional (if you want to use `pandas_datareader`)\n\n-   [pandas\\_datareader](https://github.com/pydata/pandas-datareader)\n    \\>= 0.4.0\n\n## developers: want to contribute?\n\n`yfinance` relies on community to investigate bugs and contribute code. developer guide: https://github.com/ranaroussi/yfinance/discussions/1084\n\n---\n\n### legal stuff\n\n**yfinance** is distributed under the **apache software license**. see\nthe [license.txt](./license.txt) file in the release for details.\n\n\nagain - yfinance is **not** affiliated, endorsed, or vetted by yahoo, inc. it's\nan open-source tool that uses yahoo's publicly available apis, and is\nintended for research and educational purposes. you should refer to yahoo!'s terms of use\n([here](https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm),\n[here](https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html), and\n[here](https://policies.yahoo.com/us/en/yahoo/terms/index.htm)) for\ndetailes on your rights to use the actual data downloaded.\n\n---\n\n### p.s.\n\nplease drop me an note with any feedback you have.\n\n**ran aroussi**\n",
  "docs_url": null,
  "keywords": "pandas,yahoo finance,pandas datareader",
  "license": "apache",
  "name": "yfinance",
  "package_url": "https://pypi.org/project/yfinance/",
  "project_url": "https://pypi.org/project/yfinance/",
  "project_urls": {
    "Homepage": "https://github.com/ranaroussi/yfinance"
  },
  "release_url": "https://pypi.org/project/yfinance/0.2.33/",
  "requires_dist": [
    "pandas >=1.3.0",
    "numpy >=1.16.5",
    "requests >=2.31",
    "multitasking >=0.0.7",
    "lxml >=4.9.1",
    "appdirs >=1.4.4",
    "pytz >=2022.5",
    "frozendict >=2.3.4",
    "peewee >=3.16.2",
    "beautifulsoup4 >=4.11.1",
    "html5lib >=1.1"
  ],
  "requires_python": "",
  "summary": "download market data from yahoo! finance api",
  "version": "0.2.33",
  "releases": [],
  "developers": [
    "ran@aroussi.com",
    "ran_aroussi"
  ],
  "kwds": "pandas_datareader pandas dataframe get_data_yahoo csv",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_yfinance",
  "homepage": "https://github.com/ranaroussi/yfinance",
  "release_count": 105,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_beautifulsoup4",
    "pypi_frozendict",
    "pypi_html5lib",
    "pypi_lxml",
    "pypi_multitasking",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_peewee",
    "pypi_pytz",
    "pypi_requests"
  ]
}
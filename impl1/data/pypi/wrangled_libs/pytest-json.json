{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "pytest-json\n===================================\n\n.. image:: https://travis-ci.org/mattcl/pytest-json.svg?branch=master\n    :target: https://travis-ci.org/mattcl/pytest-json\n    :alt: see build status on travis ci\n\npytest-json is a plugin for `py.test <http://pytest.org>`_ that generates json\nreports for test results\n\n----\n\nthis `pytest`_ plugin was generated with `cookiecutter`_ along with\n`@hackebrot`_'s `cookiecutter-pytest-plugin`_ template.\n\n\nrequirements\n------------\n\n- python 2.7, 3.3, 3.4, 3.5\n- py.test 2.7 or newer\n\n\ninstallation\n------------\n\nyou can install \"pytest-json\" via `pip`_ from `pypi`_::\n\n  $ pip install pytest-json\n\n\nusage\n-----\n\n.. code-block::\n\n  $ py.test --json=report.json\n\nor you can set the report path in an ini file::\n\n  [pytest]\n  json_report = report.json\n\nthe command-line option will override the ini file\n\nthere is an optional flag to normalize the generated report to\n`jsonapi <http://jsonapi.org>`_. this is intended for (easier) consumption by\nember-data and others::\n\n  $ py.test --json=report.json --jsonapi\n\nor you can set the jsonapi flag in an ini file::\n\n  [pytest]\n  jsonapi = anything\n\nnote that the value of the ini var can be anything. presence alone will cause\nit to be true.\n\nadding to environment\n---------------------\n\nyou can modify ``request.config._json_environment`` in a fixture\n\n.. code-block:: python\n\n  @pytest.fixture(scope='session', autouse=true):\n  def extra_json_environment(request):\n      request.config._json_environment.append(('herp', 'derp'))\n\n\nadding metadata per test stage\n------------------------------\n\nmetadata added via ``stage_metadata`` shows up in ``metadata`` field of the\nstage in the resulting json object\n\n.. code-block:: python\n\n  # conftest.py\n  @pytest.hookimpl(tryfirst=true, hookwrapper=true)\n  def pytest_runtest_makereport(item, call):\n      outcome = yield\n      report = outcome.get_result()\n      if report.when == 'call':\n          report.stage_metadata = {\n              'foo': 'bar'\n          }\n      elif report.when == 'setup':\n          report.stage_metadata = {\n              'hoof': 'doof'\n          }\n      elif report.when == 'teardown':\n          report.stage_metadata = {\n              'herp': 'derp'\n          }\n\n\naddint metadata per test\n------------------------\n\nmetadata added on the tests themselves are represented by an array. to avoid\ncollisions, etc. any stage (setup, teardown, call) that sets ``test_metadata``\non a report will have its metadata appended to the array. metadata added via\n``test_metadata`` ends up in the ``metadata`` field of the test in the\nresulting json object\n\n.. code-block:: python\n\n  # conftest.py\n  @pytest.hookimpl(tryfirst=true, hookwrapper=true)\n  def pytest_runtest_makereport(item, call):\n      outcome = yield\n      report = outcome.get_result()\n      # only add this during call instead of during any stage\n      if report.when == 'call':\n          report.test_metadata = 'whatever'\n\n\ncompatibility with pytest-html\n------------------------------\n\nto avoid issues with pytest-html, pytest-json uses\n``request.config._json_environment`` instead of ``request.config._environment``\n\nadditionally, pytest-json ignores the ``extra`` field on reports.\n\n\nexample json\n------------\n\na formatted example of the output can be found in example.json\n\nthe actual output is not formatted, but this was passed through jq for\nreadability.\n\na formatted example of the jsonapi output can be found in example_jsonapi.json\n\ncontributing\n------------\ncontributions are very welcome. tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nlicense\n-------\n\ndistributed under the terms of the `mit`_ license, \"pytest-json\" is free and open source software\n\n\nissues\n------\n\nif you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`mit`: http://opensource.org/licenses/mit\n.. _`bsd-3`: http://opensource.org/licenses/bsd-3-clause\n.. _`gnu gpl v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/mattcl/pytest-json/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.org/en/latest/\n.. _`pip`: https://pypi.python.org/pypi/pip/\n.. _`pypi`: https://pypi.python.org/pypi",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-json",
  "package_url": "https://pypi.org/project/pytest-json/",
  "project_url": "https://pypi.org/project/pytest-json/",
  "project_urls": {
    "Homepage": "https://github.com/mattcl/pytest-json"
  },
  "release_url": "https://pypi.org/project/pytest-json/0.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "generate json test reports",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "matt_chun",
    "mchunlum@gmail.com"
  ],
  "kwds": "pytest_runtest_makereport pytest json_report _json_environment extra_json_environment",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_json",
  "homepage": "https://github.com/mattcl/pytest-json",
  "release_count": 10,
  "dependency_ids": []
}
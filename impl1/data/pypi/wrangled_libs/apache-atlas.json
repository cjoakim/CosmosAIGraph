{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.6"
  ],
  "description": "# apache atlas python client\n\npython library for apache atlas.\n\n## installation\n\nuse the package manager [pip](https://pip.pypa.io/en/stable/) to install python client for apache atlas.\n\n```bash\n> pip install apache-atlas\n```\n\nverify if apache-atlas client is installed:\n```bash\n> pip list\n\npackage      version\n------------ ---------\napache-atlas 0.0.15\n```\n\n## usage\n\n```python atlas_example.py```\n```python\n# atlas_example.py\n\nimport time\n\nfrom apache_atlas.client.base_client import atlasclient\nfrom apache_atlas.model.instance     import atlasentity, atlasentitywithextinfo, atlasentitieswithextinfo, atlasrelatedobjectid\nfrom apache_atlas.model.enums        import entityoperation\n\n\n## step 1: create a client to connect to apache atlas server\nclient = atlasclient('http://localhost:21000', ('admin', 'atlasr0cks!'))\n\n# for kerberos authentication, use httpkerberosauth as shown below\n#\n# from requests_kerberos import httpkerberosauth\n#\n# client = atlasclient('http://localhost:21000', httpkerberosauth())\n\n# to disable ssl certificate validation (not recommended for production use!)\n#\n# client.session.verify = false\n\n\n## step 2: let's create a database entity\ntest_db            = atlasentity({ 'typename': 'hive_db' })\ntest_db.attributes = { 'name': 'test_db', 'clustername': 'prod', 'qualifiedname': 'test_db@prod' }\n\nentity_info        = atlasentitywithextinfo()\nentity_info.entity = test_db\n\nprint('creating test_db')\n\nresp = client.entity.create_entity(entity_info)\n\nguid_db = resp.get_assigned_guid(test_db.guid)\n\nprint('    created test_db: guid=' + guid_db)\n\n\n## step 3: let's create a table entity, and two column entities - in one call\ntest_tbl                        = atlasentity({ 'typename': 'hive_table' })\ntest_tbl.attributes             = { 'name': 'test_tbl', 'qualifiedname': 'test_db.test_tbl@prod' }\ntest_tbl.relationshipattributes = { 'db': atlasrelatedobjectid({ 'guid': guid_db }) }\n\ntest_col1                        = atlasentity({ 'typename': 'hive_column' })\ntest_col1.attributes             = { 'name': 'test_col1', 'type': 'string', 'qualifiedname': 'test_db.test_tbl.test_col1@prod' }\ntest_col1.relationshipattributes = { 'table': atlasrelatedobjectid({ 'guid': test_tbl.guid }) }\n\ntest_col2                        = atlasentity({ 'typename': 'hive_column' })\ntest_col2.attributes             = { 'name': 'test_col2', 'type': 'string', 'qualifiedname': 'test_db.test_tbl.test_col2@prod' }\ntest_col2.relationshipattributes = { 'table': atlasrelatedobjectid({ 'guid': test_tbl.guid }) }\n\nentities_info          = atlasentitieswithextinfo()\nentities_info.entities = [ test_tbl, test_col1, test_col2 ]\n\nprint('creating test_tbl')\n\nresp = client.entity.create_entities(entities_info)\n\nguid_tbl  = resp.get_assigned_guid(test_tbl.guid)\nguid_col1 = resp.get_assigned_guid(test_col1.guid)\nguid_col2 = resp.get_assigned_guid(test_col2.guid)\n\nprint('    created test_tbl:           guid=' + guid_tbl)\nprint('    created test_tbl.test_col1: guid=' + guid_col1)\nprint('    created test_tbl.test_col2: guid=' + guid_col2)\n\n\n## step 4: let's create a view entity that feeds from the table created earlier\n#          also create a lineage between the table and the view, and lineages between their columns as well\ntest_view                        = atlasentity({ 'typename': 'hive_table' })\ntest_view.attributes             = { 'name': 'test_view', 'qualifiedname': 'test_db.test_view@prod' }\ntest_view.relationshipattributes = { 'db': atlasrelatedobjectid({ 'guid': guid_db }) }\n\ntest_view_col1                        = atlasentity({ 'typename': 'hive_column' })\ntest_view_col1.attributes             = { 'name': 'test_col1', 'type': 'string', 'qualifiedname': 'test_db.test_view.test_col1@prod' }\ntest_view_col1.relationshipattributes = { 'table': atlasrelatedobjectid({ 'guid': test_view.guid }) }\n\ntest_view_col2                        = atlasentity({ 'typename': 'hive_column' })\ntest_view_col2.attributes             = { 'name': 'test_col2', 'type': 'string', 'qualifiedname': 'test_db.test_view.test_col2@prod' }\ntest_view_col2.relationshipattributes = { 'table': atlasrelatedobjectid({ 'guid': test_view.guid }) }\n\ntest_process                         = atlasentity({ 'typename': 'hive_process' })\ntest_process.attributes              = { 'name': 'create_test_view', 'username': 'admin', 'operationtype': 'create', 'qualifiedname': 'create_test_view@prod' }\ntest_process.attributes['querytext'] = 'create view test_view as select * from test_tbl'\ntest_process.attributes['queryplan'] = '<queryplan>'\ntest_process.attributes['queryid']   = '<queryid>'\ntest_process.attributes['starttime'] = int(time.time() * 1000)\ntest_process.attributes['endtime']   = int(time.time() * 1000)\ntest_process.relationshipattributes  = { 'inputs': [ atlasrelatedobjectid({ 'guid': guid_tbl }) ], 'outputs': [ atlasrelatedobjectid({ 'guid': test_view.guid }) ] }\n\ntest_col1_lineage                        = atlasentity({ 'typename': 'hive_column_lineage' })\ntest_col1_lineage.attributes             = { 'name': 'test_view.test_col1 lineage', 'depenendencytype': 'read', 'qualifiedname': 'test_db.test_view.test_col1@prod' }\ntest_col1_lineage.attributes['query']    = { 'guid': test_process.guid }\ntest_col1_lineage.relationshipattributes = { 'inputs': [ atlasrelatedobjectid({ 'guid': guid_col1 }) ], 'outputs': [ atlasrelatedobjectid({ 'guid': test_view_col1.guid }) ] }\n\ntest_col2_lineage                        = atlasentity({ 'typename': 'hive_column_lineage' })\ntest_col2_lineage.attributes             = { 'name': 'test_view.test_col2 lineage', 'depenendencytype': 'read', 'qualifiedname': 'test_db.test_view.test_col2@prod' }\ntest_col2_lineage.attributes['query']    = { 'guid': test_process.guid }\ntest_col2_lineage.relationshipattributes = { 'inputs': [ atlasrelatedobjectid({ 'guid': guid_col2 }) ], 'outputs': [ atlasrelatedobjectid({ 'guid': test_view_col2.guid }) ] }\n\nentities_info          = atlasentitieswithextinfo()\nentities_info.entities = [ test_process, test_col1_lineage, test_col2_lineage ]\n\nentities_info.add_referenced_entity(test_view)\nentities_info.add_referenced_entity(test_view_col1)\nentities_info.add_referenced_entity(test_view_col2)\n\nprint('creating test_view')\n\nresp = client.entity.create_entities(entities_info)\n\nguid_view         = resp.get_assigned_guid(test_view.guid)\nguid_view_col1    = resp.get_assigned_guid(test_view_col1.guid)\nguid_view_col2    = resp.get_assigned_guid(test_view_col2.guid)\nguid_process      = resp.get_assigned_guid(test_process.guid)\nguid_col1_lineage = resp.get_assigned_guid(test_col1_lineage.guid)\nguid_col2_lineage = resp.get_assigned_guid(test_col2_lineage.guid)\n\nprint('    created test_view:           guid=' + guid_view)\nprint('    created test_view.test_col1: guid=' + guid_view_col1)\nprint('    created test_view.test_col2: guid=' + guid_view_col1)\nprint('    created test_view lineage:   guid=' + guid_process)\nprint('    created test_col1 lineage:   guid=' + guid_col1_lineage)\nprint('    created test_col2 lineage:   guid=' + guid_col2_lineage)\n\n\n## step 5: finally, cleanup by deleting entities created above\nprint('deleting entities')\n\nresp = client.entity.delete_entities_by_guids([ guid_col1_lineage, guid_col2_lineage, guid_process, guid_view, guid_tbl, guid_db ])\n\ndeleted_count = len(resp.mutatedentities[entityoperation.delete.name]) if resp and resp.mutatedentities and entityoperation.delete.name in resp.mutatedentities else 0\n\nprint('    ' + str(deleted_count) + ' entities deleted')\n```\nfor more examples, checkout `sample-app` python project in [atlas-examples](https://github.com/apache/atlas/blob/master/atlas-examples/sample-app/src/main/python/sample_client.py) module.\n\n\n",
  "docs_url": null,
  "keywords": "atlas client,apache atlas",
  "license": "apache license 2.0",
  "name": "apache-atlas",
  "package_url": "https://pypi.org/project/apache-atlas/",
  "project_url": "https://pypi.org/project/apache-atlas/",
  "project_urls": {
    "Homepage": "https://github.com/apache/atlas/tree/master/intg/src/main/python"
  },
  "release_url": "https://pypi.org/project/apache-atlas/0.0.15/",
  "requires_dist": [
    "requests (>=2.24)"
  ],
  "requires_python": ">=3.6",
  "summary": "apache atlas python client",
  "version": "0.0.15",
  "releases": [],
  "developers": [
    "apache_atlas",
    "dev@atlas.apache.org"
  ],
  "kwds": "apache_atlas atlasclient atlas_example atlas atlasentitywithextinfo",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_apache_atlas",
  "homepage": "https://github.com/apache/atlas/tree/master/intg/src/main/python",
  "release_count": 10,
  "dependency_ids": [
    "pypi_requests"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": "==========================================\n**this project is currently unmaintained**\n==========================================\n\nalternatives to django-mptt include:\n\n* `django-treebeard <https://pypi.org/project/django-treebeard/>`_ includes a mptt\n  implementation (called nested set), but the state of maintenance is unclear.\n* maybe you do not need mptt, especially when using newer databases. see\n  `django-tree-queries <https://github.com/matthiask/django-tree-queries>`_ for an\n  implementation using recursive common table expressions (cte). see the\n  `announcement blog post <https://406.ch/writing/django-tree-queries/>`__.\n\n\n===========\ndjango-mptt\n===========\n\nutilities for implementing modified preorder tree traversal with your\ndjango models and working with trees of model instances.\n\n.. image:: https://secure.travis-ci.org/django-mptt/django-mptt.svg?branch=master\n    :alt: build status\n    :target: https://travis-ci.org/django-mptt/django-mptt\n\nproject home: https://github.com/django-mptt/django-mptt/\n\ndocumentation: https://django-mptt.readthedocs.io/\n\ndiscussion group: https://groups.google.com/forum/#!forum/django-mptt-dev\n\nwhat is modified preorder tree traversal?\n=========================================\n\nmptt is a technique for storing hierarchical data in a database. the aim is to\nmake retrieval operations very efficient.\n\nthe trade-off for this efficiency is that performing inserts and moving\nitems around the tree is more involved, as there's some extra work\nrequired to keep the tree structure in a good state at all times.\n\nhere are a few articles about mptt to whet your appetite and provide\ndetails about how the technique itself works:\n\n* `trees in sql`_\n* `storing hierarchical data in a database`_\n* `managing hierarchical data in mysql`_\n\n.. _`trees in sql`: https://www.ibase.ru/files/articles/programming/dbmstrees/sqltrees.html\n.. _`storing hierarchical data in a database`: https://www.sitepoint.com/hierarchical-data-database/\n.. _`managing hierarchical data in mysql`: http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/\n\nwhat is ``django-mptt``?\n========================\n\n``django-mptt`` is a reusable django app which aims to make it easy for you\nto use mptt with your own django models.\n\nit takes care of the details of managing a database table as a tree\nstructure and provides tools for working with trees of model instances.\n\nrequirements\n------------\n\n* python 3.6+\n* a supported version of django (currently 2.2+)\n\nfeature overview\n----------------\n\n* simple registration of models - fields required for tree structure will be\n  added automatically.\n\n* the tree structure is automatically updated when you create or delete\n  model instances, or change an instance's parent.\n\n* each level of the tree is automatically sorted by a field (or fields) of your\n  choice.\n\n* new model methods are added to each registered model for:\n\n  * changing position in the tree\n  * retrieving ancestors, siblings, descendants\n  * counting descendants\n  * other tree-related operations\n\n* a ``treemanager`` manager is added to all registered models. this provides\n  methods to:\n\n  * move nodes around a tree, or into a different tree\n  * insert a node anywhere in a tree\n  * rebuild the mptt fields for the tree (useful when you do bulk updates\n    outside of django)\n\n* `form fields`_ for tree models.\n\n* `utility functions`_ for tree models.\n\n* `template tags and filters`_ for rendering trees.\n\n* `admin classes`_ for visualizing and modifying trees in django's administration\n  interface.\n\n.. _`form fields`: https://django-mptt.readthedocs.io/en/latest/forms.html\n.. _`utility functions`: https://django-mptt.readthedocs.io/en/latest/utilities.html\n.. _`template tags and filters`: https://django-mptt.readthedocs.io/en/latest/templates.html\n.. _`admin classes`: https://django-mptt.readthedocs.io/en/latest/admin.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit-license",
  "name": "django-mptt",
  "package_url": "https://pypi.org/project/django-mptt/",
  "project_url": "https://pypi.org/project/django-mptt/",
  "project_urls": {
    "Homepage": "https://github.com/django-mptt/django-mptt/"
  },
  "release_url": "https://pypi.org/project/django-mptt/0.15.0/",
  "requires_dist": [
    "django-js-asset",
    "coverage[toml]; extra == 'tests'",
    "mock-django; extra == 'tests'"
  ],
  "requires_python": ">=3.9",
  "summary": "utilities for implementing modified preorder tree traversal with your django models and working with trees of model instances.",
  "version": "0.15.0",
  "releases": [],
  "developers": [
    "craig.ds@gmail.com"
  ],
  "kwds": "sqltrees django treemanager dbmstrees tree",
  "license_kwds": "mit-license",
  "libtype": "pypi",
  "id": "pypi_django_mptt",
  "homepage": "",
  "release_count": 41,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_django_js_asset",
    "pypi_mock_django"
  ]
}
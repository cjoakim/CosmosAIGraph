{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.5",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4"
  ],
  "description": "===============================\npymaybe\n===============================\n\n.. image:: https://travis-ci.org/ekampf/pymaybe.svg?branch=master\n        :target: https://travis-ci.org/ekampf/pymaybe\n\n.. image:: https://coveralls.io/repos/ekampf/pymaybe/badge.svg?branch=master&service=github\n        :target: https://coveralls.io/github/ekampf/pymaybe?branch=master\n\n.. image:: https://img.shields.io/pypi/v/pymaybe.svg\n        :target: https://pypi.python.org/pypi/pymaybe\n\na python implementation of the maybe pattern.\n\ninstallation\n------------\n\n::\n\n    pip install pymaybe\n\ngetting started\n---------------\n\n::\n\n    from pymaybe import maybe\n    first_name = maybe(deep_hash)['account']['user_profile']['first_name'].or_else(\"<unknown>\")\n\ndocumentation\n-------------\nmaybe monad is a programming pattern that allows to treat none values that same way as non-none values.\nthis is done by wrapping the value, which may or may not be none to, a wrapper class.\n\nthe implementation includes two classes: *maybe* and *something*.\n*something* represents a value while *nothing* represents a none value.\nthere's also a method *maybe* which wraps a regular value and and returns *something* or *nothing* instance.\n\n::\n\n    >>> maybe(\"i'm a value\")\n    \"i'm a value\"\n\n    >>> maybe(none);\n    none\n\nboth *something* and *nothing* implement 4 methods allowing you to test their real value: *is_some*, *is_none*, *get* and *or_else*\n\n::\n\n    >>> maybe(\"i'm a value\").is_some()\n    true\n\n    >>> maybe(\"i'm a value\").is_none()\n    false\n\n    >>> maybe(none).is_some()\n    false\n\n    >>> maybe(none).is_none()\n    true\n\n    >>> maybe(\"i'm a value\").get()\n    \"i'm a value\"\n\n    >>> maybe(\"i'm a value\").or_else(lambda: \"no value\")\n    \"i'm a value\"\n\n    >>> maybe(none).get()\n    traceback (most recent call last):\n    ...\n    exception: no such element\n\n    >>> maybe(none).or_else(lambda: \"value\")\n    'value'\n\n    >>> maybe(none).or_else(\"value\")\n    'value'\n\nin addition, *something* and *nothing* implement the python magic methods allowing you to treat them as dictionaries:\n\n::\n    >>> nested_dict = maybe(nested_dict)\n    >>> nested_dict['store']['name']\n    'mystore'\n\n    >>> nested_dict['store']['address']\n    none\n\n    >>> nested_dict['store']['address']['street'].or_else('no address specified')\n    'no address specified'\n\nall other method calls on *something* are forwarded to its real *value*:\n\n::\n\n    >>> maybe('value').lower()\n    'value'\n\n    >>> maybe(none).invalid().method().or_else('unknwon')\n    'unknwon'\n\nexamples & use cases\n--------------------\n\nthe maybe pattern helps you avoid nasty try..except blocks.\nconsider the following code:\n\n::\n    try:\n        url = rss.load_feeds()[0].url.domain\n    except (typeerror, indexerror, keyerror, attributeerror):\n        url = \"planetpython.org\"\n\nwith maybe you could simply do:\n\n::\n\n    url = maybe(rss).load_feeds()[0]['url'].domain.or_else(\"planetpython.org\")\n\ngetting the current logged in user's name.\nwithout maybe:\n\n::\n\n    def get_user_zipcode():\n        address = getattr(request.user, 'address', none)\n        if address:\n            return getattr(address, 'zipcode', '')\n\n        return ''\n\nwith maybe:\n\n::\n\n    def get_user_zipcode():\n        return maybe(request.user).address.zipcode.or_else('')\n\nfurther reading\n---------------\n\n* `option (scala) <http://www.scala-lang.org/api/current/scala/option.html>`_\n* `maybe (java) <https://github.com/npryce/maybe-java>`_\n* `maybe pattern (python recipe) <http://code.activestate.com/recipes/577248-maybe-pattern/>`_\n* `data.maybe (haskell) <http://www.haskell.org/ghc/docs/latest/html/libraries/base/data-maybe.html>`_\n* `maybe (ruby) <https://github.com/bhb/maybe>`_\n\ncopyright and license\n---------------------\ncopyright 2015 - `eran kampf <http://www.developerzen.com>`_\n\n* free software: bsd license\n* documentation: https://pymaybe.readthedocs.org.\n* code is hosted on `github <http://www.github.com/ekampf/pymaybe>`_\n\n\n\n\nhistory\n-------\n\n0.1.0 (2015-01-11)\n---------------------\n\n* first release on pypi.",
  "docs_url": null,
  "keywords": "pymaybe",
  "license": "bsd",
  "name": "pymaybe",
  "package_url": "https://pypi.org/project/pymaybe/",
  "project_url": "https://pypi.org/project/pymaybe/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/ekampf/pymaybe"
  },
  "release_url": "https://pypi.org/project/pymaybe/0.1.6/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a python implementation of the maybe pattern.",
  "version": "0.1.6",
  "releases": [],
  "developers": [
    "eran@ekampf.com",
    "eran_kampf"
  ],
  "kwds": "pymaybe ekampf pypi attributeerror python",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pymaybe",
  "homepage": "https://github.com/ekampf/pymaybe",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "# help scout api client\n\nthis package contains a wrapper to query help scout's api.\nthe package tries to be as general and assume as little as possible about the\napi. therefore, it will allow any endpoint to be requested and objects and\ntypes will be created on the fly.\n\ninformation about the available endpoints, objects and other stuff can be found\non the [api's documentation](https://developer.helpscout.com/mailbox-api/).\nthe client contains as little internal knowledge of the api as possible, mostly\nauthentication, pagination and how are objects returned.\n\nin order to handle pagination calls to api are done inside a generator.\nas a consequence, even post and deletes have to be \"nexted\" if using the *hit_*\nmethod.\n\n## installation\n\nthe package can be installed cloning the repository and doing\n`python setup.py install` or `pip install .`.\n\nit can also be install from pypi.org doing `pip install python-helpscout-v2`.\n\n## authentication\n\nin order to use the api you need an app id and app secret.\n\nmore about credentials can be found in\n[helpscout's documentation](https://developer.helpscout.com/mailbox-api/overview/authentication/).\n\n## general use\n\nthe general use is by instantiating a client and then hitting the api by\ndoing `client.<endpoint>.<method>(<resource_id>, <params>)`. where:\n\n* *endpoint* is one of the endpoints defined in the api's documentation.\n* *method* is one of get, post, patch, put or delete as defined in the api.\n* *resource id* can be none or the id of the specific resource to access,\n  update or delete. e.g.: a conversation id.\n* *params* can be none, a string or a dictionary with the parameters to access\n  in the get method or the data to send otherwise.\n\nto access attributes of specific resources, like the tags of a conversation,\nyou can do:\n`client.<endpoint>[<resource_id>].<attribute>.<method>(<resource_id>, <params>)`.\n\nexample: `client.conversations[212109].threads.get()`\n\n## examples\n\n### listing all users\n\n```python\n> from helpscout import helpscout\n> hs = helpscout(app_id='ax0912n', app_secret='axon129')\n> users = hs.users.get()\n> users[0]\nuser(id=12391,\n     firstname=\"john\",\n     lastname=\"doe\",\n     email=\"john.doe@gmail.com\",\n     role=\"user\",\n     timezone=\"america/new_york\",\n     createdat=\"2019-01-03t19:00:00z\",\n     updatedat=\"2019-05-20t18:00:00z\",\n     type=\"user\",\n     mention=\"johnny\",\n     initials=\"jd\",\n     _links={'self': {'href': 'https://api.helpscout.net/v2/users/12391'}})\n> users[1].id\n9320\n```\n\n### hitting the api directly to get all mailboxes\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='laknsdo', app_secret='12haosd9')\n> for mailbox in hs.hit('mailboxes', 'get'):\n>      print(mailbox)\n{'mailboxes': [\n   {'id': 1930,\n    'name': 'fake support',\n    'slug': '0912301u',\n    'email': 'support@fake.com',\n    'createdat': '2018-12-20t20:00:00z',\n    'updatedat': '2019-05-01t16:00:00z',\n    '_links': {\n      'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},\n      'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},\n      'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}\n    }\n   }\n ]\n}\n```\n\n### hitting the api directly to get all mailboxes but handling requests with pagination as iteration goes on\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='laknsdo', app_secret='12haosd9')\n> for mailbox in hs.hit_('mailboxes', 'get'):\n>      print(mailbox)\n{'mailboxes': [\n   {'id': 1930,\n    'name': 'fake support',\n    'slug': '0912301u',\n    'email': 'support@fake.com',\n    'createdat': '2018-12-20t20:00:00z',\n    'updatedat': '2019-05-01t16:00:00z',\n    '_links': {\n      'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},\n      'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},\n      'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}\n    }\n   }\n ]\n}\n```\n\n### hitting the api directly to get a specific mailbox\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='laknsdo', app_secret='12haosd9')\n> for mailbox in hs.hit('mailboxes', 'get', resource_id=1930):\n>      print(mailbox)\n{'id': 1930,\n 'name': 'fake support',\n 'slug': '0912301u',\n 'email': 'support@fake.com',\n 'createdat': '2018-12-20t20:00:00z',\n 'updatedat': '2019-05-01t16:00:00z',\n '_links': {\n   'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},\n   'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},\n   'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}\n }\n}\n```\n\n### hitting the api directly to get a specific mailbox dictionary style\n\nin this case, you will have to select the first element of the list yourself,\nas it is not quite clear if one or more elements should be expected from the\napi depending on the endpoint.\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='laknsdo', app_secret='12haosd9')\n> print(hs.mailboxes[1930].get())\nmailbox(\n id=1930,\n name='fake support',\n slug='0912301u',\n email='support@fake.com',\n createdat='2018-12-20t20:00:00z',\n updatedat='2019-05-01t16:00:00z',\n _links={\n   'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},\n   'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},\n   'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}\n }\n)\n```\n\n### listing conversations using a dictionary parameters\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='asd12', app_secret='onas912')\n> params = {'status': 'active'}\n> conversations = hs.conversations.get(params=params)\n```\n\n### listing conversations using a string with parameters\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='asdon123', app_secret='asdoin1')\n> params = 'query=(createdat:[2019-06-20t00:00:00z to 2019-06-22t23:59:59z])'\n> conversations = hs.conversations.get(params=params)\n```\n\n### deleting a conversation\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='asdon123', app_secret='asdoin1')\n> conversation_id = 10\n> hs.conversations.delete(resource_id=conversation_id)\n```\n\n### requesting a pre-made report\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='asdon123', app_secret='asdoin1')\n> report_url = 'reports/happiness?start=2019-06-01t00:00:00z&end=2019-06-15:00:00z'\n> next(hs.hit_(report_url, 'get'))\n...\n```\n\nor\n\n```python\n> from helpscout.client import helpscout\n> hs = helpscout(app_id='asdon123', app_secret='asdoin1')\n> report_url = 'reports/happiness?start=2019-06-01t00:00:00z&end=2019-06-15:00:00z'\n> hs.hit(report_url, 'get')\n...\n```\n\n### adding tags to a conversation\n\n```python\n> from helpscout import helpscout\n> helpscout_client = helpscout(app_id='ax0912n', app_secret='axon129')\n> conversation_id = 999\n> endpoint = 'conversations/%s/tags' % conversation_id\n> data = {'tags': conversation_tags}\n> helpscout_client.hit(endpoint, 'put', data=data)\n```\n\nor\n\n```python\n> from helpscout import helpscout\n> helpscout_client = helpscout(app_id='ax0912n', app_secret='axon129')\n> conversation_id = 999\n> endpoint = 'conversations/%s/tags' % conversation_id\n> data = {'tags': conversation_tags}\n> next(helpscout_client.hit_(endpoint, 'put', data=data))\n```\n\nor\n\n```python\n> from helpscout import helpscout\n> helpscout_client = helpscout(app_id='ax0912n', app_secret='axon129')\n> conversation_id = 999\n> data = {'tags': conversation_tags}\n> helpscout_client.conversations[999].tags.put(data=data)\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "python-helpscout-v2",
  "package_url": "https://pypi.org/project/python-helpscout-v2/",
  "project_url": "https://pypi.org/project/python-helpscout-v2/",
  "project_urls": {
    "Homepage": "https://github.com/santiher/python-helpscout-v2"
  },
  "release_url": "https://pypi.org/project/python-helpscout-v2/2.0.0/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": "",
  "summary": "wrapper to query help scout v2 api",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "santiher"
  ],
  "kwds": "api helpscout_client scout documentation pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_helpscout_v2",
  "homepage": "https://github.com/santiher/python-helpscout-v2",
  "release_count": 8,
  "dependency_ids": [
    "pypi_requests"
  ]
}
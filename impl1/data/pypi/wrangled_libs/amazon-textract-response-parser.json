{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "# textract response parser\n\nyou can use textract response parser library to easily parser json returned by amazon textract. library parses json and provides programming language specific constructs to work with different parts of the document. [textractor](https://github.com/aws-samples/amazon-textract-textractor) is an example of poc batch processing tool that takes advantage of textract response parser library and generate output in multiple formats.\n\n## installation\n\n```\npython -m pip install amazon-textract-response-parser\n```\n\n## pipeline and serializer/deserializer\n\n### serializer/deserializer\n\nbased on the [marshmallow](https://marshmallow.readthedocs.io/en/stable/) framework, the serializer/deserializer allows for creating an object represenation of the textract json response.\n\n#### deserialize textract json\n```python\n# j holds the textract json dict\nfrom trp.trp2 import tdocument, tdocumentschema\nt_doc = tdocumentschema().load(j)\n```\n\n#### serialize textract \n```python\nfrom trp.trp2 import tdocument, tdocumentschema\nt_doc = tdocumentschema().dump(t_doc)\n```\n\n#### deserialize textract analyzeid json\n```python\n# j holds the textract json\nfrom trp.trp2_analyzeid import tanalyzeiddocument, tanalyzeiddocumentschema\nt_doc = tanalyzeiddocumentschema().load(json.loads(j))\n```\n#### serialize textract analyzeid object to json\n```python\nfrom trp.trp2_analyzeid import tanalyzeiddocument, tanalyzeiddocumentschema\nt_doc = tanalyzeiddocumentschema().dump(t_doc)\n```\n\n\n### pipeline \n\nwe added some commonly requested features as easily consumable components that modify the textract json schema and ideally don't require big changes to any  existing workflow.\n\n#### order blocks (words, lines, table, key_value_set) by geometry y-axis\n\nby default textract does not put the elements identified in an order in the json response.\n\nthe sample implementation ```order_blocks_by_geo``` of a function using the serializer/deserializer shows how to change the structure and order the elements while maintaining the schema. this way no change is necessary to integrate with existing processing.\n\n```bash\n# the sample code below makes use of the amazon-textract-caller\npython -m pip install amazon-textract-caller\n```\n\n```python\nfrom textractcaller.t_call import call_textract, textract_features\nfrom trp.trp2 import tdocument, tdocumentschema\nfrom trp.t_pipeline import order_blocks_by_geo\nimport trp\nimport json\n\nj = call_textract(input_document=\"path_to_some_document (pdf, jpeg, png)\", features=[textract_features.forms, textract_features.tables])\n# the t_doc will be not ordered\nt_doc = tdocumentschema().load(j)\n# the ordered_doc has elements ordered by y-coordinate (top to bottom of page)\nordered_doc = order_blocks_by_geo(t_doc)\n# send to trp for further processing logic\ntrp_doc = trp.document(tdocumentschema().dump(ordered_doc))\n```\n\n#### page orientation in degrees\n\namazon textract supports all in-plane document rotations. however the response does not include a single number for the degree, but instead each word and line does have polygon points which can be used to calculate the degree of rotation. the following code adds this information as a custom field to amazon textract json response.\n\n```python\nfrom trp.t_pipeline import add_page_orientation\nimport trp.trp2 as t2\nimport trp as t1\n\n# assign the textract json dict to j\nj = <call_textract(input_document=\"path_to_some_document (pdf, jpeg, png)\") or your json dict>\nt_document: t2.tdocument = t2.tdocumentschema().load(j)\nt_document = add_page_orientation(t_document)\n\ndoc = t1.document(t2.tdocumentschema().dump(t_document))\n# page orientation can be read now for each page\nfor page in doc.pages:\n    print(page.custom['pageorientationbasedonwords'])\n```\n\n#### using the pipeline on command line\n\nthe amazon-textract-response-parser package also includes a command line tool to test pipeline components like the add_page_orientation or the order_blocks_by_geo.\n\nhere is one example of the usage (in combination with the ```amazon-textract``` command from amazon-textract-helper and the ```jq``` tool (https://stedolan.github.io/jq/))\n\n```bash\n> amazon-textract --input-document \"s3://somebucket/some-multi-page-pdf.pdf\" | amazon-textract-pipeline --components add_page_orientation | jq '.blocks[] | select(.blocktype==\"page\") | .custom'm\n\n{\n  \"orientation\": 7\n}\n{\n  \"orientation\": 11\n}\n...\n{\n  \"orientation\": -7\n}\n{\n  \"orientation\": 0\n}\n```\n\n\n#### merge or link tables across pages\n\nsometimes tables start on one page and continue across the next page or pages. this component identifies if that is the case based on the number of columns and if a header is present on the subsequent table and can modify the output textract json schema for down-stream processing. other custom-logic is possible to develop for specific use cases.\n\nthe mergeoptions.merge combines the tables and makes them appear as one for post processing, with the drawback that the geometry information is not accuracy any longer. so overlaying with bounding boxes will not be accuracy.\n\nthe mergeoptions.link maintains the geometric structure and enriches the table information with links between the table elements. there is a custom['previus_table'] and custom['next_table'] attribute added to the table blocks in the textract json schema.\n\nusage is simple\n\n```python\nfrom trp.t_pipeline import pipeline_merge_tables\nimport trp.trp2 as t2\n\nj = <call_textract(input_document=\"path_to_some_document (pdf, jpeg, png)\") or your json dict>\nt_document: t2.tdocument = t2.tdocumentschema().load(j)\nt_document = pipeline_merge_tables(t_document, mergeoptions.merge, none, headerfootertype.none)\n```\n\nusing from command line example\n\n```bash\n# from the root of the repository\ncat src-python/tests/data/gib_multi_page_table_merge.json | amazon-textract-pipeline --components merge_tables | amazon-textract --stdin --pretty-print tables\n# compare to cat src-python/tests/data/gib_multi_page_table_merge.json | amazon-textract --stdin --pretty-print tables\n```\n\n#### add ocr confidence score to key and value\n\nit can be useful for some use cases to validate the confidence score for a given key or the value from an analyze action with forms feature result.\n\nthe confidence property of a blocktype 'key_value_set' expresses the confidence in this particular prediction being a key or a value, but not the confidence of the underlying text value.\n\nsimplified example:\n\n```json\n{\n    \"confidence\": 95.5,\n    \"geometry\": {<...>},\n    \"id\": \"v1\",\n    \"relationships\": [{\"type\": \"child\", \"ids\": [\"c1\"]}],\n    \"entitytypes\": [\"value\"],\n    \"blocktype\": \"key_value_set\"\n},\n{\n    \"confidence\": 99.2610092163086,\n    \"texttype\": \"printed\",\n    \"geometry\": {<...>},\n    \"id\": \"c1\",\n    \"text\": \"2021-apr-08\",\n    \"blocktype\": \"word\"\n},\n```\n\nin this example the confidence in the prediction of the value to be an actual value in a key/value relationship is 95.5.\n\nthe confidence in the actual text representation is 99.2610092163086.\nfor simplicity in this example the value consists of just one word, but is not limited to that and could contain multiple words.\n\nthe kv_ocr_confidence pipeline component adds confidence scores for the underlying ocr to the json. after executing the example json will look like this:\n\n```json\n{\n    \"confidence\": 95.5,\n    \"geometry\": {<...>},\n    \"id\": \"v1\",\n    \"relationships\": [{\"type\": \"child\", \"ids\": [\"c1\"]}],\n    \"entitytypes\": [\"value\"],\n    \"blocktype\": \"key_value_set\",\n    \"custom\": {\"ocrconfidence\": {\"mean\": 99.2610092163086, \"min\": 99.2610092163086}}\n},\n{\n    \"confidence\": 99.2610092163086,\n    \"texttype\": \"printed\",\n    \"geometry\": {<...>},\n    \"id\": \"c1\",\n    \"text\": \"2021-apr-08\",\n    \"blocktype\": \"word\"\n},\n```\n\nusage is simple\n\n```python\nfrom trp.t_pipeline import add_kv_ocr_confidence\nimport trp.trp2 as t2\n\nj = <call_textract(input_document=\"path_to_some_document (pdf, jpeg, png)\") or your json dict>\nt_document: t2.tdocument = t2.tdocumentschema().load(j)\nt_document = add_kv_ocr_confidence(t_document)\n# further processing\n```\n\nusing from command line example and validating the output:\n\n```bash\n# from the root of the repository\ncat \"src-python/tests/data/employment-application.json\" | amazon-textract-pipeline --components kv_ocr_confidence | jq '.blocks[] | select(.blocktype==\"key_value_set\") '\n```\n\n# parse json response from textract\n\n```python\nfrom trp import document\ndoc = document(response)\n\n# iterate over elements in the document\nfor page in doc.pages:\n    # print lines and words\n    for line in page.lines:\n        print(\"line: {}--{}\".format(line.text, line.confidence))\n        for word in line.words:\n            print(\"word: {}--{}\".format(word.text, word.confidence))\n\n    # print tables\n    for table in page.tables:\n        for r, row in enumerate(table.rows):\n            for c, cell in enumerate(row.cells):\n                print(\"table[{}][{}] = {}-{}\".format(r, c, cell.text, cell.confidence))\n\n    # print fields\n    for field in page.form.fields:\n        print(\"field: key: {}, value: {}\".format(field.key.text, field.value.text))\n\n    # get field by key\n    key = \"phone number:\"\n    field = page.form.getfieldbykey(key)\n    if(field):\n        print(\"field: key: {}, value: {}\".format(field.key, field.value))\n\n    # search fields by key\n    key = \"address\"\n    fields = page.form.searchfieldsbykey(key)\n    for field in fields:\n        print(\"field: key: {}, value: {}\".format(field.key, field.value))\n\n```\n\n## test\n\n- clone the repo and run pytest\n\n```bash\ngit clone https://github.com/aws-samples/amazon-textract-response-parser.git\ncd amazon-textract-response-parser\npython -m venv virtualenv\nvirtualenv/bin/activate\n\npython -m pip install pip --upgrade\npython -m pip install pytest\npython -m pip install setuptools\npython -m pip install tabulate\npython src-python\\setup.py install\npytest\n```\n\n\n\n## other resources\n\n- [large scale document processing with amazon textract - reference architecture](https://github.com/aws-samples/amazon-textract-serverless-large-scale-document-processing)\n- [batch processing tool](https://github.com/aws-samples/amazon-textract-textractor)\n- [code samples](https://github.com/aws-samples/amazon-textract-code-samples)\n\n## license summary\n\nthis sample code is made available under the apache license version 2.0. see the license file.\n\n\n",
  "docs_url": null,
  "keywords": "amazon-textract-response-parser trp aws amazon textract ocr response parser",
  "license": "apache license version 2.0",
  "name": "amazon-textract-response-parser",
  "package_url": "https://pypi.org/project/amazon-textract-response-parser/",
  "project_url": "https://pypi.org/project/amazon-textract-response-parser/",
  "project_urls": {
    "Homepage": "https://github.com/aws-samples/amazon-textract-response-parser"
  },
  "release_url": "https://pypi.org/project/amazon-textract-response-parser/1.0.2/",
  "requires_dist": [
    "boto3",
    "marshmallow (<4,>=3.14)"
  ],
  "requires_python": ">=3.8",
  "summary": "easily parse json returned by amazon textract.",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "amazon_rekognition_textract_demoes",
    "rekognition-textract-demos@amazon.com"
  ],
  "kwds": "textract call_textract textract_features textractor parser",
  "license_kwds": "apache license version 2.0",
  "libtype": "pypi",
  "id": "pypi_amazon_textract_response_parser",
  "homepage": "https://github.com/aws-samples/amazon-textract-response-parser",
  "release_count": 46,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_marshmallow"
  ]
}
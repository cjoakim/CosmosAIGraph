{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: logging"
  ],
  "description": "python-logging-loki\n===================\n\n[![pypi version](https://img.shields.io/pypi/v/python-logging-loki.svg)](https://pypi.org/project/python-logging-loki/)\n[![python version](https://img.shields.io/badge/python-3.6%20%7c%203.7%20%7c%203.8-blue.svg)](https://www.python.org/)\n[![license](https://img.shields.io/pypi/l/python-logging-loki.svg)](https://opensource.org/licenses/mit)\n[![build status](https://travis-ci.org/greyzmeem/python-logging-loki.svg?branch=master)](https://travis-ci.org/greyzmeem/python-logging-loki)\n\npython logging handler for loki.  \nhttps://grafana.com/loki\n\ninstallation\n============\n```bash\npip install python-logging-loki\n```\n\nusage\n=====\n\n```python\nimport logging\nimport logging_loki\n\n\nhandler = logging_loki.lokihandler(\n    url=\"https://my-loki-instance/loki/api/v1/push\", \n    tags={\"application\": \"my-app\"},\n    auth=(\"username\", \"password\"),\n    version=\"1\",\n)\n\nlogger = logging.getlogger(\"my-logger\")\nlogger.addhandler(handler)\nlogger.error(\n    \"something happened\", \n    extra={\"tags\": {\"service\": \"my-service\"}},\n)\n```\n\nexample above will send `something happened` message along with these labels:\n- default labels from handler\n- message level as `serverity`\n- logger's name as `logger` \n- labels from `tags` item of `extra` dict\n\nthe given example is blocking (i.e. each call will wait for the message to be sent).  \nbut you can use the built-in `queuehandler` and` queuelistener` to send messages in a separate thread.  \n\n```python\nimport logging.handlers\nimport logging_loki\nfrom multiprocessing import queue\n\n\nqueue = queue(-1)\nhandler = logging.handlers.queuehandler(queue)\nhandler_loki = logging_loki.lokihandler(\n    url=\"https://my-loki-instance/loki/api/v1/push\", \n    tags={\"application\": \"my-app\"},\n    auth=(\"username\", \"password\"),\n    version=\"1\",\n)\nlogging.handlers.queuelistener(queue, handler_loki)\n\nlogger = logging.getlogger(\"my-logger\")\nlogger.addhandler(handler)\nlogger.error(...)\n```\n\nor you can use `lokiqueuehandler` shortcut, which will automatically create listener and handler.\n\n```python\nimport logging.handlers\nimport logging_loki\nfrom multiprocessing import queue\n\n\nhandler = logging_loki.lokiqueuehandler(\n    queue(-1),\n    url=\"https://my-loki-instance/loki/api/v1/push\", \n    tags={\"application\": \"my-app\"},\n    auth=(\"username\", \"password\"),\n    version=\"1\",\n)\n\nlogger = logging.getlogger(\"my-logger\")\nlogger.addhandler(handler)\nlogger.error(...)\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "python-logging-loki",
  "package_url": "https://pypi.org/project/python-logging-loki/",
  "project_url": "https://pypi.org/project/python-logging-loki/",
  "project_urls": {
    "Homepage": "https://github.com/greyzmeem/python-logging-loki"
  },
  "release_url": "https://pypi.org/project/python-logging-loki/0.3.1/",
  "requires_dist": [
    "rfc3339 (>=6.1)",
    "requests"
  ],
  "requires_python": ">=3.6",
  "summary": "python logging handler for grafana loki.",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "andrey_maslov",
    "greyzmeem@gmail.com"
  ],
  "kwds": "logging_loki logging handler_loki getlogger logger",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_logging_loki",
  "homepage": "https://github.com/greyzmeem/python-logging-loki",
  "release_count": 4,
  "dependency_ids": [
    "pypi_requests",
    "pypi_rfc3339"
  ]
}
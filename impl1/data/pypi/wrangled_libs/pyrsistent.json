{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "persistent/functional/immutable data structures\npyrsistent\n==========\n.. image:: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml/badge.svg\n    :target: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml\n\n\n.. _pyrthon: https://www.github.com/tobgu/pyrthon\n.. _pyrsistent_extras: https://github.com/mingmingrr/pyrsistent-extras\n\npyrsistent is a number of persistent collections (by some referred to as functional data structures). persistent in\nthe sense that they are immutable.\n\nall methods on a data structure that would normally mutate it instead return a new copy of the structure containing the\nrequested updates. the original structure is left untouched.\n\nthis will simplify the reasoning about what a program does since no hidden side effects ever can take place to these\ndata structures. you can rest assured that the object you hold a reference to will remain the same throughout its\nlifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application\nsomeone has decided to remove that element that you expected to be there.\n\npyrsistent is influenced by persistent data structures such as those found in the standard library of clojure. the\ndata structures are designed to share common elements through path copying.\nit aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python\nprogram without hassle.\n\nif you want use literal syntax to define them in your code rather\nthan function calls check out pyrthon_. be aware, that one is experimental, unmaintained and alpha software. \n\nif you cannot find the persistent data structure you're looking for here you may want to take a look at\npyrsistent_extras_ which is maintained by @mingmingrr. if you still don't find what you're looking for please\nopen an issue for discussion. if we agree that functionality is missing you may want to go ahead and create\na pull request implement the missing functionality.\n\nexamples\n--------\n.. _sequence: collections_\n.. _hashable: collections_\n.. _mapping: collections_\n.. _mappings: collections_\n.. _set: collections_\n.. _collections: https://docs.python.org/3/library/collections.abc.html\n.. _documentation: http://pyrsistent.readthedocs.org/\n\nthe collection types and key features currently implemented are:\n\n* pvector_, similar to a python list\n* pmap_, similar to dict\n* pset_, similar to set\n* precord_, a pmap on steroids with fixed fields, optional type and invariant checking and much more\n* pclass_, a python class fixed fields, optional type and invariant checking and much more\n* `checked collections`_, pvector, pmap and pset with optional type and invariance checks and more\n* pbag, similar to collections.counter\n* plist, a classic singly linked list\n* pdeque, similar to collections.deque\n* immutable object type (immutable) built on the named tuple\n* freeze_ and thaw_ functions to convert between pythons standard collections and pyrsistent collections.\n* flexible transformations_ of arbitrarily complex structures built from pmaps and pvectors.\n\nbelow are examples of common usage patterns for some of the structures and features. more information and\nfull documentation for all data structures is available in the documentation_.\n\n.. _pvector:\n\npvector\n~~~~~~~\nwith full support for the sequence_ protocol pvector is meant as a drop in replacement to the built in list from a readers\npoint of view. write operations of course differ since no in place mutation is done but naming should be in line\nwith corresponding operations on the built in list.\n\nsupport for the hashable_ protocol also means that it can be used as key in mappings_.\n\nappends are amortized o(1). random access and insert is log32(n) where n is the size of the vector.\n\n.. code:: python\n\n    >>> from pyrsistent import v, pvector\n\n    # no mutation of vectors once created, instead they\n    # are \"evolved\" leaving the original untouched\n    >>> v1 = v(1, 2, 3)\n    >>> v2 = v1.append(4)\n    >>> v3 = v2.set(1, 5)\n    >>> v1\n    pvector([1, 2, 3])\n    >>> v2\n    pvector([1, 2, 3, 4])\n    >>> v3\n    pvector([1, 5, 3, 4])\n\n    # random access and slicing\n    >>> v3[1]\n    5\n    >>> v3[1:3]\n    pvector([5, 3])\n\n    # iteration\n    >>> list(x + 1 for x in v3)\n    [2, 6, 4, 5]\n    >>> pvector(2 * x for x in range(3))\n    pvector([0, 2, 4])\n\n.. _pmap:\n\npmap\n~~~~\nwith full support for the mapping_ protocol pmap is meant as a drop in replacement to the built in dict from a readers point\nof view. support for the hashable_ protocol also means that it can be used as key in other mappings_.\n\nrandom access and insert is log32(n) where n is the size of the map.\n\n.. code:: python\n\n    >>> from pyrsistent import m, pmap, v\n\n    # no mutation of maps once created, instead they are\n    # \"evolved\" leaving the original untouched\n    >>> m1 = m(a=1, b=2)\n    >>> m2 = m1.set('c', 3)\n    >>> m3 = m2.set('a', 5)\n    >>> m1\n    pmap({'a': 1, 'b': 2})\n    >>> m2\n    pmap({'a': 1, 'c': 3, 'b': 2})\n    >>> m3\n    pmap({'a': 5, 'c': 3, 'b': 2})\n    >>> m3['a']\n    5\n\n    # evolution of nested persistent structures\n    >>> m4 = m(a=5, b=6, c=v(1, 2))\n    >>> m4.transform(('c', 1), 17)\n    pmap({'a': 5, 'c': pvector([1, 17]), 'b': 6})\n    >>> m5 = m(a=1, b=2)\n\n    # evolve by merging with other mappings\n    >>> m5.update(m(a=2, c=3), {'a': 17, 'd': 35})\n    pmap({'a': 17, 'c': 3, 'b': 2, 'd': 35})\n    >>> pmap({'x': 1, 'y': 2}) + pmap({'y': 3, 'z': 4})\n    pmap({'y': 3, 'x': 1, 'z': 4})\n\n    # dict-like methods to convert to list and iterate\n    >>> m3.items()\n    pvector([('a', 5), ('c', 3), ('b', 2)])\n    >>> list(m3)\n    ['a', 'c', 'b']\n\n.. _pset:\n\npset\n~~~~\nwith full support for the set_ protocol pset is meant as a drop in replacement to the built in set from a readers point\nof view. support for the hashable_ protocol also means that it can be used as key in mappings_.\n\nrandom access and insert is log32(n) where n is the size of the set.\n\n.. code:: python\n\n    >>> from pyrsistent import s\n\n    # no mutation of sets once created, you know the story...\n    >>> s1 = s(1, 2, 3, 2)\n    >>> s2 = s1.add(4)\n    >>> s3 = s1.remove(1)\n    >>> s1\n    pset([1, 2, 3])\n    >>> s2\n    pset([1, 2, 3, 4])\n    >>> s3\n    pset([2, 3])\n\n    # full support for set operations\n    >>> s1 | s(3, 4, 5)\n    pset([1, 2, 3, 4, 5])\n    >>> s1 & s(3, 4, 5)\n    pset([3])\n    >>> s1 < s2\n    true\n    >>> s1 < s(3, 4, 5)\n    false\n\n.. _precord:\n\nprecord\n~~~~~~~\na precord is a pmap with a fixed set of specified fields. records are declared as python classes inheriting\nfrom precord. because it is a pmap it has full support for all mapping methods such as iteration and element\naccess using subscript notation.\n\n.. code:: python\n\n    >>> from pyrsistent import precord, field\n    >>> class arecord(precord):\n    ...     x = field()\n    ...\n    >>> r = arecord(x=3)\n    >>> r\n    arecord(x=3)\n    >>> r.x\n    3\n    >>> r.set(x=2)\n    arecord(x=2)\n    >>> r.set(y=2)\n    traceback (most recent call last):\n    attributeerror: 'y' is not among the specified fields for arecord\n\ntype information\n****************\nit is possible to add type information to the record to enforce type checks. multiple allowed types can be specified\nby providing an iterable of types.\n\n.. code:: python\n\n    >>> class brecord(precord):\n    ...     x = field(type=int)\n    ...     y = field(type=(int, type(none)))\n    ...\n    >>> brecord(x=3, y=none)\n    brecord(y=none, x=3)\n    >>> brecord(x=3.0)\n    traceback (most recent call last):\n    ptypeerror: invalid type for field brecord.x, was float\n\n\ncustom types (classes) that are iterable should be wrapped in a tuple to prevent their\nmembers being added to the set of valid types.  although enums in particular are now\nsupported without wrapping, see #83 for more information.\n\nmandatory fields\n****************\nfields are not mandatory by default but can be specified as such. if fields are missing an\n*invariantexception* will be thrown which contains information about the missing fields.\n\n.. code:: python\n\n    >>> from pyrsistent import invariantexception\n    >>> class crecord(precord):\n    ...     x = field(mandatory=true)\n    ...\n    >>> r = crecord(x=3)\n    >>> try:\n    ...    r.discard('x')\n    ... except invariantexception as e:\n    ...    print(e.missing_fields)\n    ...\n    ('crecord.x',)\n\ninvariants\n**********\nit is possible to add invariants that must hold when evolving the record. invariants can be\nspecified on both field and record level. if invariants fail an *invariantexception* will be\nthrown which contains information about the failing invariants. an invariant function should\nreturn a tuple consisting of a boolean that tells if the invariant holds or not and an object\ndescribing the invariant. this object can later be used to identify which invariant that failed.\n\nthe global invariant function is only executed if all field invariants hold.\n\nglobal invariants are inherited to subclasses.\n\n.. code:: python\n\n    >>> class restrictedvector(precord):\n    ...     __invariant__ = lambda r: (r.y >= r.x, 'x larger than y')\n    ...     x = field(invariant=lambda x: (x > 0, 'x negative'))\n    ...     y = field(invariant=lambda y: (y > 0, 'y negative'))\n    ...\n    >>> r = restrictedvector(y=3, x=2)\n    >>> try:\n    ...    r.set(x=-1, y=-2)\n    ... except invariantexception as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('y negative', 'x negative')\n    >>> try:\n    ...    r.set(x=2, y=1)\n    ... except invariantexception as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('x larger than y',)\n\ninvariants may also contain multiple assertions. for those cases the invariant function should\nreturn a tuple of invariant tuples as described above. this structure is reflected in the\ninvariant_errors attribute of the exception which will contain tuples with data from all failed\ninvariants. eg:\n\n.. code:: python\n\n    >>> class evenx(precord):\n    ...     x = field(invariant=lambda x: ((x > 0, 'x negative'), (x % 2 == 0, 'x odd')))\n    ...\n    >>> try:\n    ...    evenx(x=-1)\n    ... except invariantexception as e:\n    ...    print(e.invariant_errors)\n    ...\n    (('x negative', 'x odd'),)\n\n\nfactories\n*********\nit's possible to specify factory functions for fields. the factory function receives whatever\nis supplied as field value and the actual returned by the factory is assigned to the field\ngiven that any type and invariant checks hold.\nprecords have a default factory specified as a static function on the class, create(). it takes\na *mapping* as argument and returns an instance of the specific record.\nif a record has fields of type precord the create() method of that record will\nbe called to create the \"sub record\" if no factory has explicitly been specified to override\nthis behaviour.\n\n.. code:: python\n\n    >>> class drecord(precord):\n    ...     x = field(factory=int)\n    ...\n    >>> class erecord(precord):\n    ...     d = field(type=drecord)\n    ...\n    >>> erecord.create({'d': {'x': '1'}})\n    erecord(d=drecord(x=1))\n\ncollection fields\n*****************\nit is also possible to have fields with ``pyrsistent`` collections.\n\n.. code:: python\n\n   >>> from pyrsistent import pset_field, pmap_field, pvector_field\n   >>> class multirecord(precord):\n   ...     set_of_ints = pset_field(int)\n   ...     map_int_to_str = pmap_field(int, str)\n   ...     vector_of_strs = pvector_field(str)\n   ...\n\nserialization\n*************\nprecords support serialization back to dicts. default serialization will take keys and values\n\"as is\" and output them into a dict. it is possible to specify custom serialization functions\nto take care of fields that require special treatment.\n\n.. code:: python\n\n    >>> from datetime import date\n    >>> class person(precord):\n    ...     name = field(type=unicode)\n    ...     birth_date = field(type=date,\n    ...                        serializer=lambda format, d: d.strftime(format['date']))\n    ...\n    >>> john = person(name=u'john', birth_date=date(1985, 10, 21))\n    >>> john.serialize({'date': '%y-%m-%d'})\n    {'birth_date': '1985-10-21', 'name': u'john'}\n\n\n.. _instar: https://github.com/boxed/instar/\n\n.. _pclass:\n\npclass\n~~~~~~\na pclass is a python class with a fixed set of specified fields. pclasses are declared as python classes inheriting\nfrom pclass. it is defined the same way that precords are and behaves like a precord in all aspects except that it\nis not a pmap and hence not a collection but rather a plain python object.\n\n.. code:: python\n\n    >>> from pyrsistent import pclass, field\n    >>> class aclass(pclass):\n    ...     x = field()\n    ...\n    >>> a = aclass(x=3)\n    >>> a\n    aclass(x=3)\n    >>> a.x\n    3\n\n\nchecked collections\n~~~~~~~~~~~~~~~~~~~\nchecked collections currently come in three flavors: checkedpvector, checkedpmap and checkedpset.\n\n.. code:: python\n\n    >>> from pyrsistent import checkedpvector, checkedpmap, checkedpset, thaw\n    >>> class positives(checkedpset):\n    ...     __type__ = (long, int)\n    ...     __invariant__ = lambda n: (n >= 0, 'negative')\n    ...\n    >>> class lottery(precord):\n    ...     name = field(type=str)\n    ...     numbers = field(type=positives, invariant=lambda p: (len(p) > 0, 'no numbers'))\n    ...\n    >>> class lotteries(checkedpvector):\n    ...     __type__ = lottery\n    ...\n    >>> class lotteriesbydate(checkedpmap):\n    ...     __key_type__ = date\n    ...     __value_type__ = lotteries\n    ...\n    >>> lotteries = lotteriesbydate.create({date(2015, 2, 15): [{'name': 'superlotto', 'numbers': {1, 2, 3}},\n    ...                                                         {'name': 'megalotto',  'numbers': {4, 5, 6}}],\n    ...                                     date(2015, 2, 16): [{'name': 'superlotto', 'numbers': {3, 2, 1}},\n    ...                                                         {'name': 'megalotto',  'numbers': {6, 5, 4}}]})\n    >>> lotteries\n    lotteriesbydate({datetime.date(2015, 2, 15): lotteries([lottery(numbers=positives([1, 2, 3]), name='superlotto'), lottery(numbers=positives([4, 5, 6]), name='megalotto')]), datetime.date(2015, 2, 16): lotteries([lottery(numbers=positives([1, 2, 3]), name='superlotto'), lottery(numbers=positives([4, 5, 6]), name='megalotto')])})\n\n    # the checked versions support all operations that the corresponding\n    # unchecked types do\n    >>> lottery_0215 = lotteries[date(2015, 2, 15)]\n    >>> lottery_0215.transform([0, 'name'], 'superduperlotto')\n    lotteries([lottery(numbers=positives([1, 2, 3]), name='superduperlotto'), lottery(numbers=positives([4, 5, 6]), name='megalotto')])\n\n    # but also makes asserts that types and invariants hold\n    >>> lottery_0215.transform([0, 'name'], 999)\n    traceback (most recent call last):\n    ptypeerror: invalid type for field lottery.name, was int\n\n    >>> lottery_0215.transform([0, 'numbers'], set())\n    traceback (most recent call last):\n    invariantexception: field invariant failed\n\n    # they can be converted back to python built ins with either thaw()\n    # or serialize() (which provides possibilities to customize serialization)\n    >>> thaw(lottery_0215)\n    [{'numbers': set([1, 2, 3]), 'name': 'superlotto'}, {'numbers': set([4, 5, 6]), 'name': 'megalotto'}]\n    >>> lottery_0215.serialize()\n    [{'numbers': set([1, 2, 3]), 'name': 'superlotto'}, {'numbers': set([4, 5, 6]), 'name': 'megalotto'}]\n\n.. _transformations:\n\ntransformations\n~~~~~~~~~~~~~~~\ntransformations are inspired by the cool library instar_ for clojure. they let you evolve pmaps and pvectors\nwith arbitrarily deep/complex nesting using simple syntax and flexible matching syntax.\n\nthe first argument to transformation is the path that points out the value to transform. the\nsecond is the transformation to perform. if the transformation is callable it will be applied\nto the value(s) matching the path. the path may also contain callables. in that case they are\ntreated as matchers. if the matcher returns true for a specific key it is considered for transformation.\n\n.. code:: python\n\n    # basic examples\n    >>> from pyrsistent import inc, freeze, thaw, rex, ny, discard\n    >>> v1 = freeze([1, 2, 3, 4, 5])\n    >>> v1.transform([2], inc)\n    pvector([1, 2, 4, 4, 5])\n    >>> v1.transform([lambda ix: 0 < ix < 4], 8)\n    pvector([1, 8, 8, 8, 5])\n    >>> v1.transform([lambda ix, v: ix == 0 or v == 5], 0)\n    pvector([0, 2, 3, 4, 0])\n\n    # the (a)ny matcher can be used to match anything\n    >>> v1.transform([ny], 8)\n    pvector([8, 8, 8, 8, 8])\n\n    # regular expressions can be used for matching\n    >>> scores = freeze({'john': 12, 'joseph': 34, 'sara': 23})\n    >>> scores.transform([rex('^jo')], 0)\n    pmap({'joseph': 0, 'sara': 23, 'john': 0})\n\n    # transformations can be done on arbitrarily deep structures\n    >>> news_paper = freeze({'articles': [{'author': 'sara', 'content': 'a short article'},\n    ...                                   {'author': 'steve', 'content': 'a slightly longer article'}],\n    ...                      'weather': {'temperature': '11c', 'wind': '5m/s'}})\n    >>> short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:25] + '...' if len(c) > 25 else c)\n    >>> very_short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:15] + '...' if len(c) > 15 else c)\n    >>> very_short_news.articles[0].content\n    'a short article'\n    >>> very_short_news.articles[1].content\n    'a slightly long...'\n\n    # when nothing has been transformed the original data structure is kept\n    >>> short_news is news_paper\n    true\n    >>> very_short_news is news_paper\n    false\n    >>> very_short_news.articles[0] is news_paper.articles[0]\n    true\n\n    # there is a special transformation that can be used to discard elements. also\n    # multiple transformations can be applied in one call\n    >>> thaw(news_paper.transform(['weather'], discard, ['articles', ny, 'content'], discard))\n    {'articles': [{'author': 'sara'}, {'author': 'steve'}]}\n\nevolvers\n~~~~~~~~\npvector, pmap and pset all have support for a concept dubbed *evolvers*. an evolver acts like a mutable\nview of the underlying persistent data structure with \"transaction like\" semantics. no updates of the original\ndata structure is ever performed, it is still fully immutable.\n\nthe evolvers have a very limited api by design to discourage excessive, and inappropriate, usage as that would\ntake us down the mutable road. in principle only basic mutation and element access functions are supported.\ncheck out the documentation_ of each data structure for specific examples.\n\nexamples of when you may want to use an evolver instead of working directly with the data structure include:\n\n* multiple updates are done to the same data structure and the intermediate results are of no\n  interest. in this case using an evolver may be a more efficient and easier to work with.\n* you need to pass a vector into a legacy function or a function that you have no control\n  over which performs in place mutations. in this case pass an evolver instance\n  instead and then create a new pvector from the evolver once the function returns.\n\n.. code:: python\n\n    >>> from pyrsistent import v\n\n    # in place mutation as when working with the built in counterpart\n    >>> v1 = v(1, 2, 3)\n    >>> e = v1.evolver()\n    >>> e[1] = 22\n    >>> e = e.append(4)\n    >>> e = e.extend([5, 6])\n    >>> e[5] += 1\n    >>> len(e)\n    6\n\n    # the evolver is considered *dirty* when it contains changes compared to the underlying vector\n    >>> e.is_dirty()\n    true\n\n    # but the underlying pvector still remains untouched\n    >>> v1\n    pvector([1, 2, 3])\n\n    # once satisfied with the updates you can produce a new pvector containing the updates.\n    # the new pvector will share data with the original pvector in the same way that would have\n    # been done if only using operations on the pvector.\n    >>> v2 = e.persistent()\n    >>> v2\n    pvector([1, 22, 3, 4, 5, 7])\n\n    # the evolver is now no longer considered *dirty* as it contains no differences compared to the\n    # pvector just produced.\n    >>> e.is_dirty()\n    false\n\n    # you may continue to work with the same evolver without affecting the content of v2\n    >>> e[0] = 11\n\n    # or create a new evolver from v2. the two evolvers can be updated independently but will both\n    # share data with v2 where possible.\n    >>> e2 = v2.evolver()\n    >>> e2[0] = 1111\n    >>> e.persistent()\n    pvector([11, 22, 3, 4, 5, 7])\n    >>> e2.persistent()\n    pvector([1111, 22, 3, 4, 5, 7])\n\n.. _freeze:\n.. _thaw:\n\nfreeze and thaw\n~~~~~~~~~~~~~~~\nthese functions are great when your cozy immutable world has to interact with the evil mutable world outside.\n\n.. code:: python\n\n    >>> from pyrsistent import freeze, thaw, v, m\n    >>> freeze([1, {'a': 3}])\n    pvector([1, pmap({'a': 3})])\n    >>> thaw(v(1, m(a=3)))\n    [1, {'a': 3}]\n\nby default, freeze will also recursively convert values inside pvectors and pmaps. this behaviour can be changed by providing freeze with the flag strict=false.\n\n.. code:: python\n\n    >>> from pyrsistent import freeze, v, m\n    >>> freeze(v(1, v(2, [3])))\n    pvector([1, pvector([2, pvector([3])])])\n    >>> freeze(v(1, v(2, [3])), strict=false)\n    pvector([1, pvector([2, [3]])])\n    >>> freeze(m(a=m(b={'c': 1})))\n    pmap({'a': pmap({'b': pmap({'c': 1})})})\n    >>> freeze(m(a=m(b={'c': 1})), strict=false)\n    pmap({'a': pmap({'b': {'c': 1}})})\n\nin this regard, thaw operates as the inverse of freeze so will thaw values inside native data structures unless passed the strict=false flag.\n\n\ncompatibility\n-------------\n\npyrsistent is developed and tested on python 3.8+ and pypy3.\n\nperformance\n-----------\n\npyrsistent is developed with performance in mind. still, while some operations are nearly on par with their built in,\nmutable, counterparts in terms of speed, other operations are slower. in the cases where attempts at\noptimizations have been done, speed has generally been valued over space.\n\npyrsistent comes with two api compatible flavors of pvector (on which pmap and pset are based), one pure python\nimplementation and one implemented as a c extension. the latter generally being 2 - 20 times faster than the former.\nthe c extension will be used automatically when possible.\n\nthe pure python implementation is fully pypy compatible. running it under pypy speeds operations up considerably if\nthe structures are used heavily (if jited), for some cases the performance is almost on par with the built in counterparts.\n\ntype hints\n----------\n\npep 561 style type hints for use with mypy and various editors are available for most types and functions in pyrsistent.\n\ntype classes for annotating your own code with pyrsistent types are also available under pyrsistent.typing.\n\ninstallation\n------------\n\npip install pyrsistent\n\ndocumentation\n-------------\n\navailable at http://pyrsistent.readthedocs.org/\n\nbrief presentation available at http://slides.com/tobiasgustafsson/immutability-and-python/\n\ncontributors\n------------\n\ntobias gustafsson https://github.com/tobgu\n\nchristopher armstrong https://github.com/radix\n\nanders hovm\u00f6ller https://github.com/boxed\n\nitamar turner-trauring https://github.com/itamarst\n\njonathan lange https://github.com/jml\n\nrichard futrell https://github.com/futrell\n\njakob hollenstein https://github.com/jkbjh\n\ndavid honour https://github.com/foolswood\n\ndavid r. maciver https://github.com/drmaciver\n\nmarcus ewert https://github.com/sarum90\n\njean-paul calderone https://github.com/exarkun\n\ndouglas treadwell https://github.com/douglas-treadwell\n\ntravis parker https://github.com/teepark\n\njulian berman https://github.com/julian\n\ndennis tomas https://github.com/dtomas\n\nneil vyas https://github.com/neilvyas\n\ndoozr https://github.com/doozr\n\nkamil galuszka https://github.com/galuszkak\n\ntsuyoshi hombashi https://github.com/thombashi\n\nnattofriends https://github.com/nattofriends\n\nagberk https://github.com/agberk\n\nwaleed khan https://github.com/arxanas\n\njean-louis fuchs https://github.com/ganwell\n\ncarlos corbacho https://github.com/ccorbacho\n\nfelix yan https://github.com/felixonmars\n\nbenrg https://github.com/benrg\n\njere lahelma https://github.com/je-l\n\nmax taggart https://github.com/maxtaggart\n\nvincent philippon https://github.com/vphilippon\n\nsemen zhydenko https://github.com/ss18\n\ntill varoquaux  https://github.com/till-varoquaux\n\nmichal kowalik https://github.com/michalvi\n\nossdev07 https://github.com/ossdev07\n\nkerry olesen https://github.com/qhesz\n\njohnthagen https://github.com/johnthagen\n\nbastien vallet https://github.com/djailla\n\nram rachum  https://github.com/cool-rr\n\nvincent philippon https://github.com/vphilippon\n\nandrey bienkowski https://github.com/hexagonrecursion\n\nethan mccue https://github.com/bowbahdoe\n\njason r. coombs https://github.com/jaraco\n\nnathan https://github.com/ndowens\n\ngeert barentsen https://github.com/barentsen\n\nphil-arh https://github.com/phil-arh\n\ntam\u00e1s nepusz https://github.com/ntamas\n\nhugo van kemenade https://github.com/hugovk\n\nben beasley https://github.com/musicinmybrain\n\nnoah c. benson https://github.com/noahbenson\n\ndscrofts https://github.com/dscrofts\n\nandy reagan https://github.com/andyreagan\n\naaron durant https://github.com/aaron-durant\n\njoshua munn https://github.com/jams2\n\nlukas https://github.com/lukask9999\n\narshad https://github.com/arshad-ml\n\ncontributing\n------------\n\nwant to contribute? that's great! if you experience problems please log them on github. if you want to contribute code,\nplease fork the repository and submit a pull request.\n\nrun tests\n~~~~~~~~~\n.. _tox: https://tox.readthedocs.io/en/latest/\n\ntests can be executed using tox_.\n\ninstall tox: ``pip install tox``\n\nrun test for python 3.8: ``tox -e py38``\n\nrelease\n~~~~~~~\n* `pip install -r requirements.txt`\n* update changes.txt\n* update readme.rst with any new contributors and potential info needed.\n* update _pyrsistent_version.py\n* commit and tag with new version: `git add -u . && git commit -m 'prepare version vx.y.z' && git tag -a vx.y.z -m 'vx.y.z'`\n* push commit and tags: `git push --follow-tags`\n* build new release using github actions\n\nproject status\n--------------\npyrsistent can be considered stable and mature (who knows, there may even be a 1.0 some day :-)). the project is\nmaintained, bugs fixed, prs reviewed and merged and new releases made. i currently do not have time for development\nof new features or functionality which i don't have use for myself. i'm more than happy to take prs for new\nfunctionality though!\n\nthere are a bunch of issues marked with ``enhancement`` and ``help wanted`` that contain requests for new functionality\nthat would be nice to include. the level of difficulty and extend of the issues varies, please reach out to me if you're\ninterested in working on any of them.\n\nif you feel that you have a grand master plan for where you would like pyrsistent to go and have the time to put into\nit please don't hesitate to discuss this with me and submit prs for it. if all goes well i'd be more than happy to add\nadditional maintainers to the project!\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyrsistent",
  "package_url": "https://pypi.org/project/pyrsistent/",
  "project_url": "https://pypi.org/project/pyrsistent/",
  "project_urls": {
    "Changelog": "https://pyrsistent.readthedocs.io/en/latest/changes.html",
    "Homepage": "https://github.com/tobgu/pyrsistent/"
  },
  "release_url": "https://pypi.org/project/pyrsistent/0.20.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "persistent/functional/immutable data structures",
  "version": "0.20.0",
  "releases": [],
  "developers": [
    "tobias.l.gustafsson@gmail.com",
    "tobias_gustafsson"
  ],
  "kwds": "persistent pyrthon pyrsistent_extras_ workflows _pyrsistent_version",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyrsistent",
  "homepage": "https://github.com/tobgu/pyrsistent/",
  "release_count": 75,
  "dependency_ids": [],
  "documentation_summary": "Pyrsistent is a Python library offering persistent, immutable, and functional data structures. It provides collections like lists, dictionaries, and sets that, unlike Python's built-in mutable structures, do not change in place. Instead, operations that would normally modify a collection return a new version, leaving the original unchanged. This approach simplifies reasoning about program behavior by eliminating hidden side effects. Pyrsistent's design is inspired by similar data structures in Clojure and aims to be as Pythonic as possible for easy integration into Python programs. The library supports Python 3.8+ and PyPy3, focusing on performance with both pure Python and C extension implementations. Pyrsistent is stable, maintained, and open to contributions, especially for new features.",
  "embedding": [
    -0.01008762139827013,
    0.005886807106435299,
    -0.025459909811615944,
    -0.005160696804523468,
    -0.0027468225453048944,
    0.007222142070531845,
    0.024354804307222366,
    -0.027358422055840492,
    -0.007636555936187506,
    -0.0317363366484642,
    0.005245704669505358,
    0.007969504222273827,
    -0.00912419706583023,
    0.019665194675326347,
    0.022725483402609825,
    -0.005964731331914663,
    0.026394998654723167,
    -0.025544917210936546,
    0.013997991569340229,
    -0.012496182695031166,
    0.022654643282294273,
    -0.015315616503357887,
    -0.040095459669828415,
    -0.0015602518105879426,
    0.005862012971192598,
    0.011362741701304913,
    0.024241460487246513,
    -0.007289439905434847,
    -0.00621975539252162,
    0.003180717583745718,
    0.04785953089594841,
    -0.012354502454400063,
    -0.0036978500429540873,
    -0.020756131038069725,
    -0.04162560775876045,
    -0.01939600147306919,
    0.0198352113366127,
    -0.01401924341917038,
    0.020671123638749123,
    -0.012892886996269226,
    0.02969614416360855,
    -0.0017612604424357414,
    -0.007579884026199579,
    -0.012737038545310497,
    -0.014961415901780128,
    0.015669817104935646,
    -0.006747513543814421,
    -0.01243242621421814,
    0.015683984383940697,
    0.00010603867849567905,
    0.030687903985381126,
    0.030291199684143066,
    -0.010668509639799595,
    0.0009740505483932793,
    0.0035738798324018717,
    -0.029781151562929153,
    0.029526127502322197,
    0.053555067628622055,
    -0.021266179159283638,
    -0.021634547039866447,
    -0.0010183255653828382,
    -0.0007504616514779627,
    -0.04199397563934326,
    -0.011575262062251568,
    -0.0074098678305745125,
    -0.0014415947953239083,
    -0.021903740242123604,
    0.005564484745264053,
    -0.0031842596363276243,
    0.01406883168965578,
    0.03386153653264046,
    0.029384447261691093,
    0.004289364442229271,
    -0.0017196419648826122,
    0.019509347155690193,
    -0.00789158046245575,
    0.012899970635771751,
    0.02367474138736725,
    -0.01047724112868309,
    -0.00020432923338375986,
    0.0016904204385355115,
    -0.023844756186008453,
    0.003828904125839472,
    0.03791358694434166,
    0.03318147361278534,
    0.035391684621572495,
    -0.0024014771915972233,
    0.010208049789071083,
    -0.0021163460332900286,
    -0.014578879810869694,
    0.028194334357976913,
    0.01902763359248638,
    -0.004122890066355467,
    0.0296678077429533,
    -0.000237092754105106,
    0.03434325009584427,
    0.0049021304585039616,
    0.01897096261382103,
    0.009450061246752739,
    0.000683606369420886,
    -0.003722643945366144,
    0.024808181449770927,
    0.0035845059901475906,
    -0.017114952206611633,
    -0.025417406111955643,
    -0.008784164674580097,
    -0.011029793880879879,
    -0.03454160317778587,
    0.028364351019263268,
    0.017993370071053505,
    -0.018092544749379158,
    0.03984043747186661,
    0.0015699922805652022,
    -0.03403155505657196,
    0.009605908766388893,
    -0.0014415947953239083,
    0.03703517094254494,
    -0.010718097910284996,
    -0.01745498552918434,
    -0.019679361954331398,
    0.0019392460817471147,
    -0.0070946295745670795,
    0.025006532669067383,
    -0.0063897715881466866,
    0.03720518946647644,
    -0.021620379760861397,
    0.0019268490141257644,
    -0.011405246332287788,
    0.0007787976646795869,
    -0.020458603277802467,
    0.00043787999311462045,
    0.014947247691452503,
    -0.011603598482906818,
    -0.03292645141482353,
    0.006336641497910023,
    -0.0062905955128371716,
    -0.02254129946231842,
    0.0043283263221383095,
    -0.029072752222418785,
    -0.020798634737730026,
    0.009400472976267338,
    0.010030949488282204,
    -0.023929765447974205,
    0.0016116108745336533,
    -0.005461766850203276,
    0.015683984383940697,
    0.01050557754933834,
    4.834279025089927e-05,
    -0.014564711600542068,
    -0.010342645458877087,
    0.03782857954502106,
    0.0027539064176380634,
    -0.018701769411563873,
    0.015528135932981968,
    -0.016803257167339325,
    -0.01540062390267849,
    -0.010002613067626953,
    -0.004958802834153175,
    -0.0157831609249115,
    0.011334406211972237,
    0.0019233070779591799,
    0.01406883168965578,
    -0.02336304448544979,
    0.008444132283329964,
    -0.014692223630845547,
    0.02101115509867668,
    0.01025763712823391,
    -0.003233847673982382,
    -0.002112804213538766,
    0.026720862835645676,
    -0.0052209109999239445,
    0.0010068140691146255,
    -0.0473211444914341,
    0.001173288095742464,
    0.010668509639799595,
    0.021252011880278587,
    0.003504810854792595,
    0.006166625302284956,
    -0.01322583481669426,
    -0.008267031982541084,
    0.020841138437390327,
    -0.008621232584118843,
    0.0038041099905967712,
    0.05882556736469269,
    -0.01263077836483717,
    -0.013856311328709126,
    0.017965033650398254,
    0.018871786072850227,
    -0.004052049946039915,
    0.029922831803560257,
    0.015528135932981968,
    0.007565715815871954,
    0.012524519115686417,
    -0.01620819978415966,
    -0.5762411952018738,
    0.006099327467381954,
    -0.016916600987315178,
    -0.04698111489415169,
    0.008656652644276619,
    0.013948403298854828,
    -0.004384998232126236,
    0.009400472976267338,
    -0.03434325009584427,
    0.016080688685178757,
    -0.006464153528213501,
    0.011525673791766167,
    0.004268112126737833,
    -0.0035632539074867964,
    -0.015046424232423306,
    -0.030319536104798317,
    0.00907460879534483,
    -0.031169617548584938,
    0.019084306433796883,
    -0.0019569559954106808,
    -0.007643640041351318,
    0.040067125111818314,
    -0.01772417686879635,
    0.027485935017466545,
    0.007927000522613525,
    -0.0005981555441394448,
    -0.0018471539951860905,
    0.01169569045305252,
    0.02211626060307026,
    0.0354483537375927,
    -0.04295739904046059,
    0.02840685471892357,
    -0.004197272006422281,
    -0.0067191775888204575,
    0.04890796169638634,
    0.011121885851025581,
    0.0025466992519795895,
    0.056672029197216034,
    0.030206192284822464,
    0.04927632957696915,
    0.0006552703562192619,
    -0.013339179567992687,
    0.016888264566659927,
    0.02887439914047718,
    0.013006230816245079,
    -0.0069989957846701145,
    -0.019891882315278053,
    -0.01324708666652441,
    0.027457598596811295,
    -0.023986436426639557,
    0.006853773724287748,
    -0.024000605568289757,
    0.009464229457080364,
    -0.02536073327064514,
    0.0316229946911335,
    -0.02486485242843628,
    0.009612993337213993,
    0.0073106917552649975,
    0.011943629942834377,
    -0.03272809833288193,
    0.02806682325899601,
    0.016321545466780663,
    0.00404142402112484,
    -0.017936697229743004,
    -0.027075061574578285,
    0.026990054175257683,
    -0.028633542358875275,
    -0.028251007199287415,
    -0.010888113640248775,
    -0.051203180104494095,
    0.028251007199287415,
    0.009811345487833023,
    0.00872749276459217,
    -0.027514271438121796,
    0.014777231961488724,
    0.04060550779104233,
    0.014082999899983406,
    0.029356110841035843,
    0.018701769411563873,
    0.019976891577243805,
    0.00932254921644926,
    -0.008840836584568024,
    -0.020302753895521164,
    -0.008493720553815365,
    0.02963947132229805,
    0.013282506726682186,
    -0.003977668005973101,
    -0.004866710398346186,
    0.009641328826546669,
    -0.005897433031350374,
    0.012914138846099377,
    0.003938706126064062,
    0.0007889809203334153,
    -0.02690504677593708,
    -0.0022172932513058186,
    0.019169313833117485,
    -0.030177855864167213,
    0.0073106917552649975,
    -0.017596665769815445,
    -0.015627311542630196,
    -0.0197360347956419,
    -0.015471464022994041,
    0.006680215708911419,
    0.013856311328709126,
    0.005688454955816269,
    0.011185642331838608,
    -0.005050894804298878,
    0.0022527133114635944,
    0.011284817941486835,
    -0.015343951992690563,
    0.024354804307222366,
    -0.03216137737035751,
    -0.0036695138551294804,
    0.00624454952776432,
    0.008784164674580097,
    -0.04312741383910179,
    0.05264831706881523,
    0.008592896163463593,
    -0.00986801739782095,
    -0.007346111815422773,
    0.008493720553815365,
    -0.013976739719510078,
    -0.013707547448575497,
    -0.0030425796285271645,
    0.009641328826546669,
    0.013742967508733273,
    0.006666047498583794,
    0.004020172171294689,
    -0.005890348926186562,
    0.00562824122607708,
    0.01622236892580986,
    -0.009627161547541618,
    -0.0007863244391046464,
    -0.015103096142411232,
    0.02927110344171524,
    -0.0013140826486051083,
    8.617026469437405e-05,
    0.009450061246752739,
    0.020472770556807518,
    -0.004423960577696562,
    0.001510663772933185,
    0.008578728884458542,
    0.0032320767641067505,
    -0.011851537972688675,
    -0.02334887720644474,
    -0.030744576826691628,
    -0.020302753895521164,
    -0.013162079267203808,
    -0.00523153692483902,
    -0.01656240038573742,
    -0.002111033070832491,
    -0.0005817738128826022,
    -0.00971925351768732,
    0.025190716609358788,
    -0.008911676704883575,
    -0.005723875015974045,
    -0.013162079267203808,
    -0.002086239168420434,
    -0.03009284846484661,
    -0.0029805945232510567,
    0.023972269147634506,
    0.005288208834826946,
    -0.003116961568593979,
    0.029526127502322197,
    -0.031452976167201996,
    -0.00703441584482789,
    -0.037431877106428146,
    0.012722870334982872,
    -0.004643564578145742,
    -0.024737341329455376,
    0.004395624157041311,
    -0.021436195820569992,
    -0.01105104573071003,
    -0.00012308456643950194,
    -0.001815275987610221,
    0.02761344611644745,
    -0.03408822789788246,
    0.01110063400119543,
    -0.014026327058672905,
    -0.008019092492759228,
    -0.010951870121061802,
    0.0023501182440668344,
    -0.025190716609358788,
    -0.010498493909835815,
    0.021039491519331932,
    -0.0027999524027109146,
    -0.018319234251976013,
    0.013771302998065948,
    0.0020277961157262325,
    0.0010227530729025602,
    0.006060365121811628,
    0.030206192284822464,
    -0.020373594015836716,
    0.013778387568891048,
    -0.02213042788207531,
    0.00019990172586403787,
    0.0050048488192260265,
    0.01110063400119543,
    0.01364379096776247,
    0.03125462308526039,
    0.005174864549189806,
    0.0010289516067132354,
    0.009428809396922588,
    -0.04788786545395851,
    0.025190716609358788,
    -0.04547930508852005,
    0.02411394938826561,
    -0.018744273111224174,
    0.0061064111068844795,
    0.0033914668019860983,
    0.029951168224215508,
    0.010987290181219578,
    -0.0395004041492939,
    -0.019594354555010796,
    -0.0012698076898232102,
    0.04477090388536453,
    0.004912756849080324,
    0.01542896032333374,
    -0.023986436426639557,
    0.0002919937833212316,
    -0.004346036352217197,
    0.004367288202047348,
    0.009584656916558743,
    0.01772417686879635,
    0.004965886473655701,
    -0.006850231438875198,
    0.033464834094047546,
    0.004303532186895609,
    0.021492866799235344,
    -0.03998211771249771,
    -0.020302753895521164,
    0.024213124066591263,
    0.014104251749813557,
    -0.009875101037323475,
    0.016689913347363472,
    0.0035721089225262403,
    0.06205587461590767,
    -0.01820589043200016,
    0.008947096765041351,
    -0.024623997509479523,
    0.00872749276459217,
    0.04182395711541176,
    0.014380527660250664,
    -0.02333470806479454,
    0.004023713991045952,
    -0.005720333196222782,
    0.009046272374689579,
    0.012970810756087303,
    -0.03513665869832039,
    0.018319234251976013,
    -0.008734576404094696,
    -0.003488871967419982,
    -0.004799412563443184,
    0.0019551850855350494,
    -0.009053356945514679,
    -0.00828828476369381,
    0.01243242621421814,
    0.007268188055604696,
    0.04003879055380821,
    -0.00033759704092517495,
    0.010321393609046936,
    -0.024836517870426178,
    0.012375754304230213,
    0.01931099407374859,
    0.04375080764293671,
    -0.024354804307222366,
    0.003125816583633423,
    -0.04426085576415062,
    0.0023253243416547775,
    0.02613997459411621,
    -0.024680668488144875,
    -0.0475194975733757,
    -0.03595840185880661,
    -0.004647106397897005,
    0.00435312045738101,
    0.010370981879532337,
    0.015287280082702637,
    0.04627271369099617,
    0.008982516825199127,
    -0.013013315387070179,
    0.006761681754142046,
    -0.030177855864167213,
    0.0021535372361540794,
    0.02057194709777832,
    -0.008663736283779144,
    -0.027556775137782097,
    -0.019891882315278053,
    -0.011355658061802387,
    -0.008217444643378258,
    -0.01525894459336996,
    -0.011185642331838608,
    0.026168309152126312,
    -0.004346036352217197,
    0.005550317000597715,
    -0.013636707328259945,
    -0.0035473147872835398,
    0.03782857954502106,
    -0.014097167178988457,
    -0.004006003960967064,
    -0.0073957000859081745,
    -0.02020357921719551,
    -0.0037474380806088448,
    -0.009839680977165699,
    0.0277409590780735,
    0.0218045637011528,
    0.004912756849080324,
    -0.004891504533588886,
    -0.0028902734629809856,
    0.003970583900809288,
    0.00494463462382555,
    0.017313305288553238,
    -0.018730105832219124,
    -0.020699458196759224,
    -0.00771448016166687,
    0.012382838875055313,
    0.0002479401300661266,
    0.020798634737730026,
    -0.003129358636215329,
    0.03989711031317711,
    0.00340563477948308,
    -0.015953175723552704,
    -0.017469152808189392,
    -0.027372591197490692,
    0.008855004794895649,
    0.04689610376954079,
    0.012354502454400063,
    -0.012219906784594059,
    0.009464229457080364,
    -0.031141281127929688,
    -0.004579808562994003,
    -0.019693531095981598,
    -0.0035933610051870346,
    0.005015474744141102,
    -0.001369869220070541,
    0.002146453130990267,
    0.016349880024790764,
    0.0048383744433522224,
    -0.007764067966490984,
    -0.006988369859755039,
    0.0029274646658450365,
    -0.01666157692670822,
    -0.004583350382745266,
    -0.022413788363337517,
    -0.014734728261828423,
    0.009535068646073341,
    -0.01523060817271471,
    0.04715112969279289,
    0.03799859806895256,
    0.022002914920449257,
    0.002697234507650137,
    0.019849378615617752,
    -0.0018808030290529132,
    -0.005047352518886328,
    -0.019466841593384743,
    -0.03729019686579704,
    -6.070520726098039e-07,
    0.024723174050450325,
    0.013771302998065948,
    -0.016675744205713272,
    -0.0058938912115991116,
    0.022031251341104507,
    0.022399619221687317,
    -0.002086239168420434,
    0.0032143667340278625,
    0.016774920746684074,
    0.02017524279654026,
    0.007261103950440884,
    -0.005521981045603752,
    -0.0035969028249382973,
    -0.012000302784144878,
    0.013367515057325363,
    -0.006070991046726704,
    -0.02847769483923912,
    0.003963500261306763,
    0.029469456523656845,
    0.021039491519331932,
    -0.031056271865963936,
    0.002249171258881688,
    0.04219232499599457,
    0.003233847673982382,
    0.018758442252874374,
    -0.004763992503285408,
    -0.0198352113366127,
    -0.04233400523662567,
    0.011178557761013508,
    -0.020656954497098923,
    -0.010406401939690113,
    -0.0027893264777958393,
    0.004555014427751303,
    0.013920067809522152,
    -0.0026210814248770475,
    0.015570640563964844,
    -0.04454421624541283,
    0.018446745350956917,
    -0.004083928186446428,
    -0.022215435281395912,
    -0.00952090136706829,
    -0.03048955276608467,
    0.05330004543066025,
    0.020430266857147217,
    0.012871635146439075,
    0.009032105095684528,
    0.0052209109999239445,
    -0.00910294521600008,
    0.01931099407374859,
    -0.02220126800239086,
    0.006074533332139254,
    -0.018050041049718857,
    0.021492866799235344,
    0.010200965218245983,
    0.020727794617414474,
    0.0019109100103378296,
    -0.008316620253026485,
    0.030149519443511963,
    0.008174940012395382,
    -0.015457295812666416,
    0.008097016252577305,
    0.014111335389316082,
    -0.03408822789788246,
    0.02642333321273327,
    -0.006743971724063158,
    0.0029788236133754253,
    -0.00847955234348774,
    -0.016505729407072067,
    0.0022084382362663746,
    -0.01701577752828598,
    -0.006790017709136009,
    -0.012956642545759678,
    0.008741660974919796,
    -0.013069987297058105,
    -0.0029805945232510567,
    0.009825513698160648,
    -0.01695910468697548,
    -0.005479476880282164,
    0.019920218735933304,
    -0.008146604523062706,
    0.029951168224215508,
    0.007222142070531845,
    -0.0018312149913981557,
    0.03746021166443825,
    -0.020288586616516113,
    0.02810932695865631,
    0.0018808030290529132,
    -0.020486939698457718,
    0.01164610218256712,
    -0.016378216445446014,
    0.008429964073002338,
    0.007466540206223726,
    -0.008153688162565231,
    -0.005344880744814873,
    0.004597518593072891,
    -0.0022155221085995436,
    -0.030716240406036377,
    0.022342948243021965,
    0.009060440585017204,
    0.04579100012779236,
    -0.017979200929403305,
    -0.0028885025531053543,
    -0.01483390387147665,
    0.003031953703612089,
    -0.0026671274099498987,
    0.012319082394242287,
    0.0030903967563062906,
    0.01362962368875742,
    -0.03199136257171631,
    -0.02215876430273056,
    0.003974126186221838,
    -0.00663771154358983,
    -0.007091087754815817,
    -0.02333470806479454,
    -0.020798634737730026,
    0.014607216231524944,
    -0.020727794617414474,
    0.008777081035077572,
    0.012800795026123524,
    -0.0032143667340278625,
    0.015683984383940697,
    -0.02020357921719551,
    -0.010321393609046936,
    -0.0014123732689768076,
    -0.002520134439691901,
    -0.01814921759068966,
    0.031396303325891495,
    0.012595358304679394,
    0.02089781127870083,
    0.005015474744141102,
    0.02486485242843628,
    0.034598276019096375,
    0.01939600147306919,
    -0.007282355800271034,
    -0.00703087355941534,
    0.0013778387801721692,
    -0.024383140727877617,
    -0.00027583338669501245,
    -0.002741509350016713,
    0.005886807106435299,
    -0.0022721942514181137,
    -0.03867866098880768,
    0.014012159779667854,
    0.02248462848365307,
    -0.011702774092555046,
    0.004197272006422281,
    -0.02682003751397133,
    -0.02693338319659233,
    -0.029101086780428886,
    0.015188104473054409,
    0.0022615680936723948,
    0.014607216231524944,
    -0.02208792418241501,
    -0.02295217290520668,
    -0.011121885851025581,
    -0.029101086780428886,
    0.020359426736831665,
    0.011426498182117939,
    0.020430266857147217,
    -0.0017656879499554634,
    0.03119795210659504,
    -0.0019835210405290127,
    0.029001912102103233,
    -0.006807727739214897,
    0.008557476103305817,
    -0.0315379835665226,
    -0.0013636706862598658,
    -0.009563405066728592,
    -0.029837824404239655,
    0.03831029310822487,
    -0.0013220522087067366,
    0.03085792064666748,
    -0.008274116553366184,
    0.0075940522365272045,
    -0.010668509639799595,
    -0.02096865139901638,
    0.02057194709777832,
    -0.0015425417805090547,
    -0.0257574375718832,
    0.008628316223621368,
    -0.059165600687265396,
    -0.04100221395492554,
    0.004976512864232063,
    0.0002875662758015096,
    -0.012517434544861317,
    0.019679361954331398,
    -0.03357817605137825,
    -0.02646583877503872,
    0.009336717426776886,
    -0.022031251341104507,
    0.04975804314017296,
    0.009620076976716518,
    0.03442825749516487,
    0.04083219915628433,
    -0.0019215360516682267,
    -0.023065516725182533,
    -0.010215133428573608,
    0.002631707349792123,
    -0.003226763801649213,
    0.023844756186008453,
    -0.014139671809971333,
    -0.03003617562353611,
    -0.04547930508852005,
    0.016449056565761566,
    -0.006655421573668718,
    -0.03590173274278641,
    -0.026791702955961227,
    0.015301448293030262,
    8.661301399115473e-05,
    0.011199809610843658,
    -0.027585111558437347,
    0.009195037186145782,
    -0.02210209146142006,
    -0.0031063356436789036,
    -0.04859626665711403,
    0.019934386014938354,
    -0.0027981814928352833,
    0.0005839875666424632,
    -0.023051347583532333,
    0.017511656507849693,
    -0.0027379675302654505,
    0.02014690637588501,
    0.020359426736831665,
    -0.017284968867897987,
    -0.024638164788484573,
    -0.034569937735795975,
    0.01904180273413658,
    0.01265911478549242,
    0.020387763157486916,
    0.01824839413166046,
    0.010278889909386635,
    -0.0014168007764965296,
    0.03845197334885597,
    -0.018885953351855278,
    -0.01110063400119543,
    -0.004466464277356863,
    -0.014607216231524944,
    0.04460088908672333,
    -0.0178516898304224,
    -0.01325417123734951,
    -0.004767534323036671,
    -0.023603901267051697,
    -0.022824659943580627,
    -0.030347872525453568,
    -0.026352494955062866,
    -0.029526127502322197,
    0.01661907322704792,
    -0.005189032759517431,
    0.01732747256755829,
    -0.016477392986416817,
    -0.013410018756985664,
    -0.015273111872375011,
    -0.005872639361768961,
    -0.0034552228171378374,
    -0.010009697638452053,
    0.006393313407897949,
    0.015188104473054409,
    -0.025119876489043236,
    -0.01226241048425436,
    -0.01819172129034996,
    -0.014706391841173172,
    0.012935390695929527,
    -0.004190188366919756,
    0.0003542001941241324,
    -0.0069954534992575645,
    0.040917206555604935,
    -0.007856160402297974,
    0.020727794617414474,
    0.008437048643827438,
    -0.0013317926786839962,
    -0.04462922364473343,
    0.017653336748480797,
    -0.0012405861634761095,
    0.014500956051051617,
    0.02534656599164009,
    0.004434586502611637,
    -0.04270237311720848,
    -0.02101115509867668,
    0.0008106756722554564,
    0.013927151449024677,
    -0.001016554539091885,
    0.01070392969995737,
    -0.0052209109999239445,
    0.0062091294676065445,
    0.02286716364324093,
    -0.01902763359248638,
    -0.021053658798336983,
    0.007459456101059914,
    -0.020430266857147217,
    0.0064074816182255745,
    0.012404090724885464,
    -0.02094031497836113,
    0.015513968653976917,
    -0.003839530050754547,
    0.010434737429022789,
    -0.001905597047880292,
    -0.009974277578294277,
    -0.009563405066728592,
    0.0005153612582944334,
    -0.015301448293030262,
    -0.022300444543361664,
    0.006903361529111862,
    0.006591665558516979,
    -0.009088777005672455,
    -0.010314309038221836,
    0.018730105832219124,
    0.01285746693611145,
    -0.00573450094088912,
    -0.010328477248549461,
    0.03989711031317711,
    0.023603901267051697,
    -0.0016647408483549953,
    -0.02568659745156765,
    0.0035065817646682262,
    -0.015046424232423306,
    0.019693531095981598,
    -0.012347418814897537,
    -0.017667505890130997,
    -0.006860857829451561,
    0.0354766920208931,
    0.04511093720793724,
    -0.019183482974767685,
    -0.03252974525094032,
    0.010803105309605598,
    -0.02058611437678337,
    -0.008472468703985214,
    -0.009053356945514679,
    0.023816421627998352,
    0.02101115509867668,
    0.01814921759068966,
    0.013835059478878975,
    0.014132587239146233,
    0.008267031982541084,
    0.03692182898521423,
    -0.021620379760861397,
    0.0008894852362573147,
    0.004161852411925793,
    0.004494800232350826,
    0.02842102386057377,
    -0.004852542653679848,
    -0.04825623333454132,
    -0.008621232584118843,
    0.032246384769678116,
    -0.008259948343038559,
    0.027060894295573235,
    0.015188104473054409,
    -0.02489318884909153,
    0.011029793880879879,
    -0.014692223630845547,
    -0.0028105785604566336,
    0.017270801588892937,
    0.006248091347515583,
    0.014090083539485931,
    -0.007388615980744362,
    -0.022215435281395912,
    -0.011823202483355999,
    0.026210814714431763,
    0.015981512144207954,
    -0.004473548382520676,
    0.015173936262726784,
    -0.006453527603298426,
    0.019140977412462234,
    -0.0028158915229141712,
    -0.02299467660486698,
    0.007813655771315098,
    -0.0003588490653783083,
    0.006765223573893309,
    -0.009336717426776886,
    0.011327321641147137,
    0.020430266857147217,
    -0.011461918242275715,
    0.0015620228368788958,
    -0.031764671206474304,
    -0.003694307990372181,
    -0.025884950533509254,
    0.0006380031118169427,
    0.009393389336764812,
    0.008968348614871502,
    0.016420720145106316,
    -0.008883340284228325,
    0.023249700665473938,
    0.00024351263709831983,
    -0.011922378093004227,
    -0.011454833671450615,
    -0.012595358304679394,
    -0.02802431955933571,
    0.019580187276005745,
    -0.005610531195998192,
    -0.006991911679506302,
    0.004002462141215801,
    -0.014522207900881767,
    0.02051527425646782,
    -0.008968348614871502,
    -0.01382089126855135,
    -0.0020649870857596397,
    -0.0033666728995740414,
    0.021577876061201096,
    -0.016689913347363472,
    -0.006857315544039011,
    -0.03825362026691437,
    -0.0052209109999239445,
    0.009740505367517471,
    -0.016760753467679024,
    -0.005284667015075684,
    0.19155146181583405,
    0.02648000605404377,
    0.02927110344171524,
    0.04035048559308052,
    0.0015292592579498887,
    0.04791620001196861,
    -0.011830286122858524,
    -0.00582305109128356,
    -0.017865857109427452,
    0.008607064373791218,
    0.014111335389316082,
    -0.0178516898304224,
    -0.013806723058223724,
    0.01343127153813839,
    0.029866160824894905,
    -0.022413788363337517,
    -0.015329783782362938,
    -0.0512881875038147,
    -0.021974580362439156,
    -0.007969504222273827,
    0.01386339496821165,
    -0.025034869089722633,
    0.011150222271680832,
    -0.044430870562791824,
    0.017299138009548187,
    -0.019055970013141632,
    -0.013190414756536484,
    -0.01364379096776247,
    0.013997991569340229,
    -0.0010572875617071986,
    -0.018035873770713806,
    0.014394695870578289,
    -0.0017559474799782038,
    -0.02801015041768551,
    -0.03516499325633049,
    -0.007841992191970348,
    0.01625070534646511,
    -0.002420958364382386,
    0.004250402096658945,
    -0.0019728951156139374,
    0.005791173316538334,
    -0.018786778673529625,
    0.004002462141215801,
    -0.025134045630693436,
    0.007565715815871954,
    -0.012311998754739761,
    -0.029101086780428886,
    0.011660270392894745,
    -0.017625002190470695,
    0.013013315387070179,
    -0.010796021670103073,
    -0.014522207900881767,
    -0.006496031302958727,
    -0.01228366233408451,
    -0.013806723058223724,
    0.0033401078544557095,
    -0.00187903200276196,
    0.018701769411563873,
    0.006970659829676151,
    0.002553783357143402,
    -0.0051004826091229916,
    0.015074759721755981,
    -0.018715938553214073,
    -0.01285746693611145,
    -0.03275643289089203,
    0.01404757983982563,
    -0.04451587796211243,
    0.00991760566830635,
    -0.01705828122794628,
    -0.0011405246332287788,
    0.006198503077030182,
    -0.03216137737035751,
    -0.007572799921035767,
    0.026720862835645676,
    -0.022286275401711464,
    -0.011702774092555046,
    0.03986877202987671,
    0.016109025105834007,
    0.02844935841858387,
    0.0016266644233837724,
    -0.01088103000074625,
    -0.004930466413497925,
    -0.006595207378268242,
    0.0018400700064375997,
    -0.03510832414031029,
    -0.00986801739782095,
    0.025403236970305443,
    -0.02733008749783039,
    -0.021152835339307785,
    -0.0012255326146259904,
    -0.008380376733839512,
    -0.01559897605329752,
    0.01006636954843998,
    -0.029781151562929153,
    0.012552854605019093,
    -0.015953175723552704,
    0.0011980821145698428,
    0.031793009489774704,
    -0.003782857907935977,
    -0.01147608645260334,
    -0.02611163817346096,
    0.04916298761963844,
    0.01581149734556675,
    0.012156150303781033,
    -0.016760753467679024,
    -0.006056823302060366,
    0.0029150675982236862,
    0.006761681754142046,
    -0.005436972714960575,
    -0.015103096142411232,
    -0.0011892270995303988,
    -0.01778084971010685,
    0.0036181549075990915,
    -0.02375974878668785,
    -0.0013114261673763394,
    0.007324859965592623,
    -0.008189108222723007,
    0.014104251749813557,
    0.007565715815871954,
    0.040548838675022125,
    0.010916450060904026,
    -0.010030949488282204,
    0.003821820020675659,
    -0.012602442875504494,
    -0.018829282373189926,
    -0.02177622728049755,
    -0.030631233006715775,
    0.03533501178026199,
    -0.0039032860659062862,
    -0.008947096765041351,
    0.005691997241228819,
    -0.006287053227424622,
    0.004994222894310951,
    -0.011242314241826534,
    -0.015046424232423306,
    -0.01406883168965578,
    0.002284591319039464,
    -0.016519896686077118,
    -0.011114802211523056,
    0.011511506512761116,
    -0.028576871380209923,
    -0.009577573277056217,
    0.030942928045988083,
    0.027089230716228485,
    0.014918912202119827,
    -0.030716240406036377,
    -0.008267031982541084,
    0.0148055674508214,
    0.005837219301611185,
    0.016902433708310127,
    0.014621383510529995,
    -0.017568329349160194,
    0.0003599559422582388,
    -0.010512661188840866,
    0.0003566353116184473,
    -0.02721674181520939,
    -0.012814963236451149,
    -0.007905748672783375,
    0.0034109477419406176,
    -1.3669913641933817e-05,
    -0.02140785939991474,
    0.010732266120612621,
    0.013934235088527203,
    0.008550392463803291,
    -0.0357033796608448,
    -0.035760052502155304,
    -0.17919695377349854,
    0.0012025096220895648,
    0.006074533332139254,
    -0.022413788363337517,
    0.010328477248549461,
    -0.012970810756087303,
    0.006733345799148083,
    -0.0006614688318222761,
    -0.006014319136738777,
    -0.006857315544039011,
    0.02296634018421173,
    0.010548081248998642,
    -0.00810409989207983,
    -0.03411656245589256,
    -0.01263786293566227,
    -0.014274267479777336,
    0.000555651553440839,
    0.02288133278489113,
    0.018390074372291565,
    0.02128034643828869,
    0.0033135428093373775,
    -0.032558079808950424,
    0.013381683267652988,
    0.010030949488282204,
    -0.008798332884907722,
    -0.012644946575164795,
    0.0063047632575035095,
    0.0014681598404422402,
    0.0023146981839090586,
    -0.027556775137782097,
    0.0003302916884422302,
    -0.023533061146736145,
    0.03641178086400032,
    0.015131431631743908,
    -0.0011830286821350455,
    0.004416876472532749,
    0.023249700665473938,
    -0.01525894459336996,
    0.008437048643827438,
    0.02052944339811802,
    0.033719856292009354,
    0.042050644755363464,
    0.012935390695929527,
    -0.01857425831258297,
    -0.0023536602966487408,
    -0.00048658251762390137,
    0.00930129736661911,
    -0.024638164788484573,
    0.0013539302162826061,
    -0.008826668374240398,
    0.01897096261382103,
    0.0022899042814970016,
    -0.009825513698160648,
    -0.010604754090309143,
    0.04233400523662567,
    -0.011355658061802387,
    0.004271654412150383,
    0.0022261482663452625,
    0.019877715036273003,
    0.011164389550685883,
    -0.005642408970743418,
    -0.016704080626368523,
    0.007827823981642723,
    0.0032604127191007137,
    0.009308381006121635,
    -0.000822629954200238,
    0.00012341662659309804,
    0.03289811313152313,
    -0.022626308724284172,
    0.013410018756985664,
    0.01739831268787384,
    0.01046307384967804,
    0.005741585046052933,
    0.023490557447075844,
    0.019098473712801933,
    0.005444056820124388,
    -0.037318531423807144,
    0.027202574536204338,
    0.01742664910852909,
    -0.009527985006570816,
    -0.025077372789382935,
    0.01970769837498665,
    -0.01822005771100521,
    -0.009223372675478458,
    0.008989600464701653,
    -0.006641253363341093,
    0.030772913247346878,
    -0.005256330594420433,
    0.027797630056738853,
    0.0017674589762464166,
    -0.008663736283779144,
    -0.03839530050754547,
    0.004654190503060818,
    -0.008564560674130917,
    0.0009253479656763375,
    0.02089781127870083,
    -0.03899035602807999,
    0.011964882723987103,
    0.03819694742560387,
    -0.02494986169040203,
    0.011858622543513775,
    0.0006654536118730903,
    -0.019084306433796883,
    -0.007424036040902138,
    -0.004795870743691921,
    0.016704080626368523,
    -0.011355658061802387,
    -0.002029567025601864,
    0.021847067400813103,
    -0.011114802211523056,
    -0.007176095619797707,
    0.003676597960293293,
    0.017681673169136047,
    0.05650201439857483,
    -0.009428809396922588,
    0.021577876061201096,
    -0.007849075831472874,
    0.012297830544412136,
    0.022782156243920326,
    -0.0028814184479415417,
    0.06177251413464546,
    -0.00533779663965106,
    0.009010853245854378,
    0.0031754046212881804,
    -0.012127814814448357,
    -0.01382089126855135,
    -0.10421986132860184,
    -0.04658440873026848,
    0.010583501309156418,
    0.011192725971341133,
    -0.01778084971010685,
    0.0017816269537433982,
    0.003180717583745718,
    0.01105104573071003,
    -0.03388987481594086,
    0.0010705700842663646,
    -0.008493720553815365,
    -0.025516580790281296,
    0.01127064973115921,
    0.01520227175205946,
    -0.022753819823265076,
    -0.0076082199811935425,
    -0.01070392969995737,
    0.017936697229743004,
    -0.02247045934200287,
    0.03210470452904701,
    0.009202120825648308,
    0.008238696493208408,
    -0.008224528282880783,
    0.00613120524212718,
    -0.02604079805314541,
    0.019098473712801933,
    -0.02533239684998989,
    -0.000316566409310326,
    -0.0148622402921319,
    0.021818730980157852,
    -0.007381531875580549,
    0.006347267422825098,
    -0.013721715658903122,
    -0.01246076263487339,
    0.007346111815422773,
    0.016491560265421867,
    -0.021436195820569992,
    -0.018007537350058556,
    0.02806682325899601,
    -0.01404049526900053,
    0.006187877152115107,
    -0.006485405378043652,
    0.007962420582771301,
    0.005266956984996796,
    -0.010193881578743458,
    -0.017511656507849693,
    -0.0003052762767765671,
    0.01110063400119543,
    0.01857425831258297,
    -0.029497791081666946,
    -0.030574560165405273,
    -0.03598674014210701,
    0.005380300804972649,
    -0.0031452977564185858,
    0.020671123638749123,
    -0.01939600147306919,
    0.01189404260367155,
    0.004395624157041311,
    0.0001160005631390959,
    -0.031396303325891495,
    -0.010944785550236702,
    0.0021871861536055803,
    -0.009896352887153625,
    0.04630104824900627,
    0.011454833671450615,
    0.02129451557993889,
    -0.005210284609347582,
    -0.011986134573817253,
    0.006294137332588434,
    -0.030206192284822464,
    -0.02296634018421173,
    0.010470157489180565,
    -0.027443431317806244,
    0.009648413397371769,
    -0.011043962091207504,
    0.01902763359248638,
    -0.010590585879981518,
    -0.015372288413345814,
    0.032614752650260925,
    -0.024709004908800125,
    -0.006751055829226971,
    0.0020083151757717133,
    -0.004912756849080324,
    -0.016859928146004677,
    0.01657656952738762,
    0.020260250195860863,
    0.020784467458724976,
    -0.0003457879356574267,
    0.040520500391721725,
    -0.014118419960141182,
    -0.0035756509751081467,
    -0.014607216231524944,
    0.03587339445948601,
    -0.018390074372291565,
    0.00931546464562416,
    0.01520227175205946,
    0.0039316220209002495,
    2.31336998695042e-05,
    0.004753366578370333,
    0.035731714218854904,
    -0.04862460121512413,
    -0.004048508126288652,
    -0.06551286578178406,
    0.017143288627266884,
    0.017199961468577385,
    -0.02533239684998989,
    -0.00165411492343992,
    -0.03281310573220253,
    0.01782335340976715,
    -0.016718249768018723,
    0.009527985006570816,
    -0.012949558906257153,
    -0.04533762484788895,
    -0.01404757983982563,
    0.008366208523511887,
    -0.01822005771100521,
    -0.012000302784144878,
    -0.019594354555010796,
    0.017596665769815445,
    -0.008252864703536034,
    0.013147911056876183,
    0.028775222599506378,
    -0.0004755137488245964,
    0.024666501209139824,
    0.02214459516108036,
    -0.008458300493657589,
    -0.03476829081773758,
    -0.0158681683242321,
    -0.003621696960180998,
    0.04672608897089958,
    -0.008812501095235348,
    -0.030177855864167213,
    0.0030779996886849403,
    -0.015896504744887352,
    0.0034747037570923567,
    0.031878016889095306,
    0.024680668488144875,
    0.012184486724436283,
    0.036581795662641525,
    0.018446745350956917,
    0.019055970013141632,
    -0.007062751799821854,
    -0.014423031359910965,
    -0.02609746903181076,
    0.014125503599643707,
    -0.008012007921934128,
    -0.009527985006570816,
    -0.004969428759068251,
    -0.003811194095760584,
    0.010314309038221836,
    0.02128034643828869,
    0.019636858254671097,
    0.03887701407074928,
    0.01941017061471939,
    -0.009464229457080364,
    -0.03473995625972748,
    0.0013822662876918912,
    -0.013183331117033958,
    0.013140827417373657,
    -0.005752210970968008,
    -0.029044415801763535,
    0.004335410427302122,
    0.02844935841858387,
    0.00760113587602973,
    0.005408636759966612,
    -0.011511506512761116,
    -0.005858471151441336,
    -0.04375080764293671,
    -0.03740353882312775,
    -0.0158681683242321,
    -0.01005928497761488,
    -0.007558632176369429,
    0.0033737567719072104,
    -0.034201569855213165,
    0.04063384607434273,
    -0.005288208834826946,
    0.036950163543224335,
    -0.025998294353485107,
    0.0004976512864232063,
    -0.02336304448544979,
    -0.016094855964183807,
    0.023008843883872032,
    0.0011883416445925832,
    -0.02095448225736618,
    -0.027528438717126846,
    -0.0012556397123262286,
    0.03819694742560387,
    -0.005635324865579605,
    -0.029186096042394638,
    0.0048242066986858845,
    -0.016009848564863205,
    0.02295217290520668,
    0.001510663772933185,
    0.016675744205713272,
    -0.012319082394242287,
    -0.020656954497098923,
    0.002344805281609297,
    -0.010300141759216785,
    0.0003732384357135743,
    0.0049233827739953995,
    0.014564711600542068,
    0.0020968650933355093,
    0.0029699685983359814,
    -0.016123192384839058,
    0.007137133739888668,
    -0.0004755137488245964,
    -0.019112642854452133,
    -0.0138492276892066,
    -0.004452296532690525,
    -0.0003550856781657785,
    -0.013360431417822838,
    0.019891882315278053,
    0.02490735799074173,
    0.005160696804523468,
    -0.018064210191369057,
    0.019665194675326347,
    -0.005957647226750851,
    0.04066218063235283,
    0.030744576826691628,
    -0.013657959178090096,
    -0.012113646604120731,
    0.004795870743691921,
    0.00966966524720192,
    0.008635400794446468,
    0.02849186398088932,
    0.003991836216300726,
    0.0016603133408352733,
    0.02485068514943123,
    0.02101115509867668,
    -0.011922378093004227,
    0.007261103950440884,
    0.018829282373189926,
    -0.0031506107188761234,
    -0.017199961468577385,
    -0.016123192384839058,
    -0.03408822789788246,
    -0.00828828476369381,
    -0.04074718803167343,
    0.007133591920137405,
    0.017625002190470695,
    -0.010144293308258057,
    0.07979422062635422,
    0.0038324459455907345,
    -0.01902763359248638,
    -0.003387924749404192,
    -0.01705828122794628,
    0.0010130124865099788,
    0.005150070879608393,
    -0.002752135507762432,
    0.009060440585017204,
    -0.02210209146142006,
    0.026593349874019623,
    -0.014578879810869694,
    -0.01404049526900053,
    -0.037771906703710556,
    0.015953175723552704,
    0.03269976004958153,
    -0.030602896586060524,
    0.011823202483355999,
    -0.02248462848365307,
    0.008174940012395382,
    0.036553461104631424,
    0.016902433708310127,
    -0.0015496257692575455,
    -0.0148622402921319,
    -0.03995378315448761,
    -0.010016781277954578,
    0.004055592231452465,
    0.008337872102856636,
    0.018276730552315712,
    -0.043694134801626205,
    0.032586418092250824,
    -0.00867790449410677,
    -0.03989711031317711,
    -0.02011856995522976,
    -0.009605908766388893,
    0.0073106917552649975,
    -0.007856160402297974,
    0.0017674589762464166,
    -0.0009589969995431602,
    0.02290966734290123,
    -0.013551698997616768,
    -0.025034869089722633,
    -0.0011316696181893349,
    -0.03873533383011818,
    0.014182175509631634,
    0.010540997609496117,
    0.0018489250214770436,
    -0.011483170092105865,
    -0.05695538967847824
  ]
}
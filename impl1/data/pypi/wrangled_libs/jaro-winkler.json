{
  "classifiers": [
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "operating system :: posix",
    "programming language :: python :: 3",
    "topic :: text processing",
    "topic :: text processing :: general",
    "topic :: text processing :: indexing"
  ],
  "description": "jarowinkler\n===========\n\n[![pypi version](https://badge.fury.io/py/jaro-winkler.svg)](https://badge.fury.io/py/jaro-winkler)\n\noriginal, standard and customisable versions of the jaro-winkler functions.\n\n<pre>\n>>> import jaro\n>>> jaro.jaro_winkler_metric(u'shackleford', u'shackelford')\n0.9818181\n>>> help(jaro)\n\nhelp on package jaro:\n\n<strong>name</strong>\n    jaro - python translation of the original jaro-winkler functions.\n\n<strong>description</strong>\n    the jaro-winkler functions compare two strings and return a score indicating\n    how closely the strings match. the score ranges from 0 (no match) to 1\n    (perfect match).\n\n    two null strings ('') will compare as equal. strings should be unicode\n    strings, and will be compared as given; the caller is responsible for\n    capitalisations and trimming leading/trailing spaces.\n\n    you should normally only need to use either the jaro_metric() or\n    jaro_winkler_metric() functions defined here. if you want to implement your\n    own, non-standard metrics, look at the comments and functions in the jaro.py\n    submodule.\n\n<strong>package contents</strong>\n   ...\n   jaro\n   strcmp95\n   ...\n\n<strong>functions</strong>\n    <strong>jaro_metric</strong>(string1, string2)\n        the standard, basic jaro string metric.\n\n    <strong>jaro_winkler_metric</strong>(string1, string2)\n        the jaro metric adjusted with winkler's modification, which boosts\n        the metric for strings whose prefixes match.\n\n    <strong>original_metric</strong>(string1, string2)\n        the same metric that would be returned from the reference jaro-winkler\n        c code, taking as it does into account a typo table and adjustments for\n        longer strings.\n        ...\n\n    <strong>custom_metric</strong>(string1, string2, typo_table, typo_scale,\n                               boost_threshold, pre_len, pre_scale, longer_prob)\n        calculate the jaro-winkler metric with parameters of your own choosing.\n        ...\n</pre>\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "gnu general public license v3 (gplv3)",
  "name": "jaro-winkler",
  "package_url": "https://pypi.org/project/jaro-winkler/",
  "project_url": "https://pypi.org/project/jaro-winkler/",
  "project_urls": {
    "Homepage": "https://github.com/richmilne/JaroWinkler.git"
  },
  "release_url": "https://pypi.org/project/jaro-winkler/2.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "original, standard and customisable versions of the jaro-winkler functions.",
  "version": "2.0.3",
  "releases": [],
  "developers": [
    "richard_milne",
    "richmilne@hotmail.com"
  ],
  "kwds": "jaro_winkler_metric jaro_metric jaro jarowinkler winkler",
  "license_kwds": "gnu general public license v3 (gplv3)",
  "libtype": "pypi",
  "id": "pypi_jaro_winkler",
  "homepage": "https://github.com/richmilne/jarowinkler.git",
  "release_count": 4,
  "dependency_ids": []
}
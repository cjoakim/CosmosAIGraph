{
  "classifiers": [],
  "description": "# psychic\n\n`psychicapi` is the python client library for [psychic](https://www.psychic.dev/).\n\n## what is psychic?\n\npsychic is a platform for integrating with your customer\u2019s saas tools like notion, zendesk, confluence, and google drive via oauth and syncing documents from these applications to your sql or vector database. you can think of it like plaid for unstructured data. psychic is easy to set up - you use it by importing the react library and configuring it with your psychic api key, which you can get from the [psychic dashboard](https://dashboard.psychic.dev/). when your users connect their applications, you can view these connections from the dashboard and retrieve data using the server-side libraries. \n\n## quick start\n\n1. create an account in the [dashboard](https://dashboard.psychic.dev/).\n2. use the [react library](https://docs.psychic.dev/psychic-link) to add the psychic link modal to your frontend react app. users will use this to connect their saas apps. or, use the [playground](https://dashboard.psychic.dev/playground) to connect your own data sources.\n3. use `psychicapi` to retrieve documents from your active connections.\n\n## usage \n\n### initialization\n\n```\nfrom psychicapi import connectorid, psychic \npsychic = psychic(secret_key=\"secret-key\")\n```\n\n### get active connections\n\n```\n# get all active connections and optionally filter by connector id and/or account id\nconnections = psychic.get_connections(account_id=\"account_id\")\n```\n\n### retrieve documents from a connection\n\n```\npage_cursor = none\nall_docs = []\nwhile true:\n    docs_response = psychic.get_documents(account_id=\"account_id\", connector_id=connectorid.notion, page_cursor=page_cursor, page_size=100)\n    if docs_response is none:\n        break\n    all_docs.extend(docs_response.documents)\n    page_cursor = docs_response.next_page_cursor\n    if page_cursor is none:\n        break\nprint(all_docs)\n```\n\n### retrieve messages from a connection\n\nto retrieve messages from connectors like `slack` and `gmail`, use the `get_conversations` function.\n\n```\npage_cursor = none\nall_messages = []\nwhile true:\n    messages_response = psychic.get_conversations(account_id=\"account_id\", connector_id=connectorid.gmail, page_cursor=page_cursor)\n    if messages_response is none:\n        break\n    all_messages.extend(messages_response.messages)\n    page_cursor = messages_response.next_page_cursor\n    if page_cursor is none:\n        break\nprint(all_messages)\n```\n\n### retrieve tickets from a connection\n\nto retrieve messages from connectors like `zendesk`, use the `get_tickets` function.\n\n```\npage_cursor = none\nall_tickets = []\nwhile true:\n    tickets_response = psychic.get_tickets(account_id=\"account_id\", connector_id=connectorid.zendesk, redact_pii=true, page_cursor=page_cursor)\n    if tickets_response is none:\n        break\n    all_tickets.extend(tickets_response.tickets)\n    page_cursor = tickets_response.next_page_cursor\n    if page_cursor is none:\n        break\nprint(all_tickets)\n```\n\n## advanced filtering\n\n### filtering by section(s)\n\nmost file storage, crm and helpdesk apps have documents organized in sections. confluence calls them spaces, zendesk calls them  sections, google drive calls them folders. psychic allows you to define filters based on these sections using the `sectionfilter` class. you can define and query sections as follows:\n\n```\nfrom psychicapi import psychic, connectorid, section, sectionfilter\n\nclient = psychic(\"your-secret-key\")\nconnections = client.get_connections(connector_id=connectorid.notion, account_id=\"test\")\nconnection = connections[0]\n\n# get existing section filters\nexisting_filters = connection.section_filters\n\n# get all available sections from the connection. these will be folders, sections, spaces, etc. depending on the connector\nsections = connection.sections\n\n# have the user pick one or more sections\ni = 0\nfilter = sectionfilter(id='index1', sections=[sections[i]])\n\n# add the section filter to the connection\nclient.add_section_filter(connector_id=connectorid.notion, account_id=\"test\", section_filter=filter)\n\n# get documents from the sections in the filter\nclient.get_documents(account_id=\"test\", connector_id=connectorid.notion, section_filter_id=\"index1\")\n```\n\n### filtering by uri\n\nevery document returned by psychic has a uri. if you want to query a document by uri instead of retrieving all documents in a connection, you can use the optional `uris` parameter in `get_documents`\n\n\n```\nclient.get_documents(\n    account_id=\"test\", \n    connector_id=connectorid.notion, \n    uris=[\"https://docs.google.com/document/d/document-id-1/edit?usp=drivesdk\", \"https://drive.google.com/file/d/document-id-2/view?usp=drivesdk\"]\n)\n```\n## local development\n\nto run the python package locally, use the following command:\n\n```\npip install -e /path/to/package\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "psychicapi",
  "package_url": "https://pypi.org/project/psychicapi/",
  "project_url": "https://pypi.org/project/psychicapi/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/psychicapi/0.8.4/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": "",
  "summary": "psychic.dev is an open-source data integration platform for llms. this is the python client for psychic",
  "version": "0.8.4",
  "releases": [],
  "developers": [
    "ayan@psychic.dev",
    "ayan_bandyopadhyay"
  ],
  "kwds": "api psychicapi psychic database frontend",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_psychicapi",
  "homepage": "",
  "release_count": 21,
  "dependency_ids": [
    "pypi_requests"
  ]
}
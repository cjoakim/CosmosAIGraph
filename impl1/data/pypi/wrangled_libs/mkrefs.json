{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "topic :: documentation",
    "topic :: software development :: documentation",
    "topic :: text processing :: markup :: markdown"
  ],
  "description": "# mkrefs\n\nthe **mkrefs** [plugin](http://www.mkdocs.org/user-guide/plugins/)\nfor [`mkdocs`](https://www.mkdocs.org/) \ngenerates reference markdown pages from a knowledge graph, \nbased on the [`kglab`](https://github.com/derwenai/kglab) project.\n\nno graph database is required; however, let us know if you'd like to\nuse one in particular.\n\nthere are several planned use cases for the **mkrefs** plugin,\nincluding:\n\n  * *biblio* \u2013 semantic bibliography entries, generated from rdf\n  * *glossary* \u2013 semantic glossary entries, generated from rdf\n  * *apidocs* \u2013 semantic [*apidocs*](https://pypi.org/search/?q=apidocs) supporting the [di\u00e1taxis](https://derwen.ai/docs/kgl/learn/#a-grammar-of-learning) grammar for documentation, generated as rdf from python source code\n  * *depend* \u2013 semantic dependency graph for python libraries, generated as rdf from `setup.py`\n  * *index* \u2013 semantic search index, generated as rdf from mkdocs content\n\nonly the *apidocs*, *biblio*, and *glossary* components have been\nadded to **mkrefs** so far, although the other mentioned components\nexist in separate projects and are being integrated.\n\n\n<details>\n  <summary>contributing code</summary>\n\nwe welcome people getting involved as contributors to this open source\nproject!\n\nfor detailed instructions please see:\n[contributing.md](https://github.com/derwenai/mkrefs/blob/main/contributing.md)\n</details>\n\n<details>\n  <summary>semantic versioning</summary>\n\nbefore <strong>mkrefs</strong> reaches release <code>v1.0.0</code> the \ntypes and classes may undergo substantial changes and the project is \nnot guaranteed to have a consistent api.\n\neven so, we'll try to minimize breaking changes.\nwe'll also be sure to provide careful notes.\n\nsee:\n[changelog.txt](https://github.com/derwenai/mkrefs/blob/main/changelog.txt)\n</details>\n\n\n## why does this matter?\n\na key takeaway is that many software engineering aspects of open\nsource projects involve graphs, therefore a knowledge graph can\nprovide an integral part of an open source repository.\nmoreover, by using semantic representation (rdf) projects that\nintegrate with each other can share (i.e., federate) common resources,\nfor example to share definitions, analyze mutual dependencies, etc.\n\n\n## installation\n\nto install the plugin using `pip`:\n\n```\npython3 -m pip install mkrefs\n```\n\nthen add the plugin into the `mkdocs.yml` file:\n```yaml\nplugins:\n  - mkrefs\n```\nin addition, the following configuration parameter is expected:\n\n  * `mkrefs_config` - yaml configuration file for **mkrefs**; e.g., `mkrefs.yml`\n\n---\n\n## api docs\n\na `apidocs` parameter within the configuration file expects four\nrequired sub-parameters:\n\n * `page` \u2013 name of the generated markdown page, e.g., `ref.md`\n * `template` \u2013 a [jinja2 template](https://jinja.palletsprojects.com/en/3.0.x/) to generate markdown, e.g., `ref.jinja`\n * `package` \u2013 name of the package being documented\n * `git` \u2013 base url for source modules in git, e.g., `https://github.com/derwenai/mkrefs/blob/main`\n\nthere is an optional `includes` parameter, as a list of class\ndefinitions to include.\nif this is used, then all other classes get ignored.\n\nsee the source code in this repo for examples of how to format\nmarkdown within *docstrings*.\nspecifically see the parameter documentation per method or function,\nwhich differs slightly from pre-exisiting frameworks.\n\nnote that the name of the generated markdown page for the\napidocs must appear in the `nav` section of your `mkdocs.yml`\nconfiguration file.\nsee the structure used in this repo for an example.\n\n### best practices: rdf representation\n\nyou can use this library outside of mkdocs, i.e., calling it\nprogrammatically, to generate an rdf graph to represent your package\napi reference:\n\n```\npackage_name = \"mkrefs\"\ngit_url = \"https://github.com/derwenai/mkrefs/blob/main\"\nincludes = [ \"mkrefsplugin\", \"packagedoc\" ]\n\npkg_doc = packagedoc(package_name, git_url, includes)\npkg_doc.build()\n\nkg = pkg_doc.get_rdf()\n```\n\nthe `packagedoc.get_rdf()` method returns an rdf graph as an instance\nof an `kglab.knowledgegraph` object.\nfor more details, see <https://derwen.ai/docs/kgl/>\n\n\n## bibliography\n\na `biblio` parameter within the configuration file expects four\nrequired sub-parameters:\n\n * `graph` \u2013 an rdf graph represented as a turtle (ttl) file, e.g., `mkrefs.ttl`\n * `page` \u2013 name of the generated markdown page, e.g., `biblio.md`\n * `template` \u2013 a [jinja2 template](https://jinja.palletsprojects.com/en/3.0.x/) to generate markdown, e.g., `biblio.jinja`\n * `queries` \u2013 [sparql queries](https://rdflib.readthedocs.io/en/stable/intro_to_sparql.html) used to extract bibliography data from the knowledge graph\n\nsee the [`mkrefs.ttl`](https://github.com/derwenai/mkrefs/blob/main/docs/mkrefs.ttl)\nfile for an example bibliography represented in rdf.\nthis comes from the documentation for the [`pytextrank`](https://derwen.ai/docs/ptr/biblio/)\nopen source project.\n\nin the example rdf, the [*bibo*](http://bibliontology.com/) vocabulary represents\nbibliographic entries, and the [*foaf*](http://xmlns.com/foaf/spec/) vocabulary\nrepresents authors.\nthis also uses two custom owl relations from the [*derwen*](https://derwen.ai/ns/v1)\nvocabulary:\n\n  * `derw:citekey` \u2013 citekey used to identify a bibliography entry within the documentation\n  * `derw:openaccess` \u2013 open access url for a bibliography entry (if any)\n\nthe `queries` parameter has three required sparql queries:\n\n  * `entry` \u2013 to select the identifiers for all of the bibliograpy entries\n  * `entry_author` \u2013 a mapping to identify author links for each bibliography entry\n  * `entry_publisher` - the publisher link for each bibliography entry (if any)\n\nnote that the name of the generated markdown page for the\nbibliography must appear in the `nav` section of your `mkdocs.yml`\nconfiguration file.\nsee the structure used in this repo for an example.\n\nyou may use any valid rdf representation for a bibliography.\njust be sure to change the three sparql queries and the jinja2\ntemplate accordingly.\n\nwhile this example uses an adaptation of the\n[mla citation style](https://www.easybib.com/guides/citation-guides/mla-format/mla-citation/),\nfeel free to modify the jinja2 template to generate whatever\nbibliographic style you need.\n\n\n### best practices: constructing bibliographies\n\nas much as possible, bibliography entries should use the conventions at\n<https://www.bibsonomy.org/>\nfor their [*citation keys*](https://bibdesk.sourceforge.io/manual/bibdeskhelp_2.html).\n\njournal abbreviations should use\n[*iso 4*](https://en.wikipedia.org/wiki/iso_4) standards, \nfor example from <https://academic-accelerator.com/journal-abbreviation/system>\n\nlinks to online versions of cited works should use\n[doi](https://www.doi.org/)\nfor [*persistent identifiers*](https://www.crossref.org/education/metadata/persistent-identifiers/).\n\nwhen available, \n[*open access*](https://peerj.com/preprints/3119v1/)\nurls should be listed as well.\n\n\n## glossary\n\na `glossary` parameter within the configuration file expects four\nrequired sub-parameters:\n\n * `graph` \u2013 an rdf graph represented as a turtle (ttl) file, e.g., `mkrefs.ttl`\n * `page` \u2013 name of the generated markdown page, e.g., `glossary.md`\n * `template` \u2013 a [jinja2 template](https://jinja.palletsprojects.com/en/3.0.x/) to generate markdown, e.g., `glossary.jinja`\n * `queries` \u2013 [sparql queries](https://rdflib.readthedocs.io/en/stable/intro_to_sparql.html) used to extract glossary data from the knowledge graph\n\nsee the [`mkrefs.ttl`](https://github.com/derwenai/mkrefs/blob/main/docs/mkrefs.ttl)\nfile for an example glossary represented in rdf.\nthis example rdf comes from documentation for the\n[`pytextrank`](https://derwen.ai/docs/ptr/glossary/)\nopen source project.\n\nin the example rdf, the [*cito*](http://purl.org/spar/cito/)\nvocabulary represents citations to locally represented bibliographic\nentries.\nthe [*skos*](http://www.w3.org/2004/02/skos/core#) vocabulary\nprovides support for [*taxonomy*](http://accidental-taxonomist.blogspot.com/)\nfeatures, e.g., semantic relations among glossary entries.\nthis example rdf also uses a definition from the\n[*derwen*](https://derwen.ai/ns/v1) vocabulary:\n\n  * `derw:topic` \u2013 a `skos:concept` used to represent glossary entries\n\nthe `queries` parameter has three required sparql queries:\n\n  * `entry` \u2013 to select the identifiers for all of the bibliograpy entries\n  * `entry_syn` \u2013 a mapping of synonyms (if any)\n  * `entry_ref` \u2013 a mapping of external references (if any)\n  * `entry_cite` \u2013 citations to the local bibliography citekeys (if any)\n  * `entry_hyp` \u2013 a mapping of [*hypernyms*](https://en.wikipedia.org/wiki/hyponymy_and_hypernymy) (if any)\n\nnote that the name of the generated markdown page for the glossary\nmust appear in the `nav` section of your `mkdocs.yml` configuration\nfile.\nsee the structure used in this repo for an example.\n\nyou may use any valid rdf representation for a glossary.\njust be sure to change the three sparql queries and the jinja2\ntemplate accordingly.\n\n\n## usage\n\nthe standard way to generate documentation with mkdocs is:\n```\nmkdocs build\n```\n\nif you'd prefer to generate reference pages programmatically using\npython scripts, see the code for usage of the `mkrefsplugin` class,\nplus some utility functions:\n\n  * `load_kg()`\n  * `render_apidocs()`\n  * `render_biblio()`\n  * `render_glossary()`\n\nthere are also command line *entry points* provided, which can be\nhelpful during dev/test cycles on the semantic representation of your\ncontent:\n```\nmkrefs apidocs docs/mkrefs.yml\nmkrefs biblio docs/mkrefs.yml\nmkrefs glossary docs/mkrefs.yml\n```\n\n\n## what is going on here?\n\nfor example with the bibliography use case, when the plugin runs...\n\n1. it parses its configuration file to identify the target markdown page to generate and the jinja2 template\n2. the plugin also loads an rdf graph from the indicated ttl file\n3. three sparql queries are run to identify the unique entities to extract from the graph\n4. the graph is serialized as [json-ld](https://derwen.ai/docs/kgl/ref/#kglab.knowledgegraph.save_jsonld)\n5. the `author`, `publisher`, and bibliography `entry` entities are used to *denormalize* the graph into a json data object\n6. the json is rendered using the jinja2 template to generate the markdown\n7. the markdown page is parsed and rendered by mkdocs as html, etc.\n\n\n## caveats\n\nwhile the [`mkdocs`](https://www.mkdocs.org/) utility is astoundingly useful,\nits documentation (and coding style) leave much room for improvement.\nthe [documentation for developing plugins](https://www.mkdocs.org/user-guide/plugins/#developing-plugins)\nis not even close to what happens when its code executes.\n\nconsequently, the **mkrefs** project is an attempt to reverse-engineer\nthe code from many other mkdocs plugins, while documenting its observed\nevent sequence, required parameters, limitations and workarounds, etc.\n\ntwo issues persist, where you will see warnings even though the **mkrefs**\ncode is handling configuration as recommended:\n\n```\nwarning -  config value: 'mkrefs_config'. warning: unrecognised configuration name: mkrefs_config \n```\n\nand\n\n```\ninfo    -  the following pages exist in the docs directory, but are not included in the \"nav\" configuration:\n  - biblio.md\n  - glossary.md\n  - ref.md\n```\n\nfor now, you can simply ignore both of these warnings.\nmeanwhile, we'll work on eliminating them.\n\n\n## feature roadmap\n\nlet us know if you need features to parse and generate\n[bibtex](http://www.bibtex.org/).\n\n\n## license and copyright\n\nsource code for **mkrefs** plus its logo, documentation, and examples\nhave an [mit license](https://spdx.org/licenses/mit.html) which is\nsuccinct and simplifies use in commercial applications.\n\nall materials herein are copyright &copy; 2021 derwen, inc.\n\n\n## acknowledgements\n\nthis plugin code is based on the marvelous examples in\n<https://github.com/byrnereese/mkdocs-plugin-template>\nwith kudos to [@byrnereese](https://github.com/byrnereese/),\nand also many thanks to \n[@louisguitton](https://github.com/louisguitton),\n[@dmccreary](https://github.com/dmccreary),\nand\n[@larryswanson](https://github.com/larryswanson)\nfor their inspiration and insights.\n\n\n",
  "docs_url": null,
  "keywords": "apidocs,bibliography,documentation,glossary,kglab,knowledge graph,mkdocs,plugin,reference",
  "license": "mit",
  "name": "mkrefs",
  "package_url": "https://pypi.org/project/mkrefs/",
  "project_url": "https://pypi.org/project/mkrefs/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/mkrefs/0.2.0/",
  "requires_dist": [
    "Jinja2 (>=2.10.3)",
    "PyYAML (>=5.1)",
    "livereload (>=2.6.1)",
    "mkdocs (>=1.0.4)",
    "typer (>=0.3.2)"
  ],
  "requires_python": ">=3.6",
  "summary": "mkdocs plugin to generate semantic reference markdown pages",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "paco@derwen.ai",
    "paco_nathan"
  ],
  "kwds": "knowledgegraph bibliographies documentation documenting metadata",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_mkrefs",
  "homepage": "",
  "release_count": 2,
  "dependency_ids": [
    "pypi_jinja2",
    "pypi_livereload",
    "pypi_mkdocs",
    "pypi_pyyaml",
    "pypi_typer"
  ]
}
{
  "classifiers": [
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# pins\n<a href=\"https://rstudio.github.io/pins-python/\"><img src=\"docs/logo.png\" align=\"right\" height=\"138\" /></a>\n\nthe pins package publishes data, models, and other python objects,\nmaking it easy to share them across projects and with your colleagues.\nyou can pin objects to a variety of pin *boards*, including folders (to\nshare on a networked drive or with services like dropbox), posit\nconnect, amazon s3, and google cloud storage. pins can be automatically\nversioned, making it straightforward to track changes, re-run analyses\non historical data, and undo mistakes.\n\nsee the [documentation](https://rstudio.github.io/pins-python) for\ngetting started.\n\nyou can use pins from r as well as python. for example, you can use one\nlanguage to read a pin created with the other. learn more about [pins\nfor r](https://pins.rstudio.com).\n\n## installation\n\nyou can install the released version of vetiver from\n[pypi](https://pypi.org/project/pins/):\n\n``` shell\npython -m pip install pins\n```\n\nand the development version from\n[github](https://github.com/rstudio/pins-python) with:\n\n``` shell\npython -m pip install git+https://github.com/rstudio/pins-python\n```\n\n## usage\n\nto use the pins package, you must first create a pin board. a good place\nto start is `board_folder()`, which stores pins in a directory you\nspecify. here i\u2019ll use a special version of `board_folder()` called\n`board_temp()` which creates a temporary board that\u2019s automatically\ndeleted when your python script or notebook session ends. this is great\nfor examples, but obviously you shouldn\u2019t use it for real work!\n\n``` python\nimport pins\nfrom pins.data import mtcars\n\nboard = pins.board_temp()\n```\n\nyou can \u201cpin\u201d (save) data to a board with the `.pin_write()` method. it\nrequires three arguments: an object, a name, and a pin type:\n\n``` python\nboard.pin_write(mtcars.head(), \"mtcars\", type=\"csv\")\n```\n\n    writing pin:\n    name: 'mtcars'\n    version: 20230523t115348z-120a5\n\n    meta(title='mtcars: a pinned 5 x 11 dataframe', description=none, created='20230523t115348z', pin_hash='120a54f7e0818041', file='mtcars.csv', file_size=249, type='csv', api_version=1, version=version(created=datetime.datetime(2023, 5, 23, 11, 53, 48, 555797), hash='120a54f7e0818041'), tags=none, name='mtcars', user={}, local={})\n\nabove, we saved the data as a csv, but depending on what you\u2019re saving\nand who else you want to read it, you might use the `type` argument to\ninstead save it as a `joblib`, `parquet`, or `json` file.\n\nyou can later retrieve the pinned data with `.pin_read()`:\n\n``` python\nboard.pin_read(\"mtcars\")\n```\n\n        mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n    0  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n    1  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n    2  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n    3  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n    4  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n\na board on your computer is good place to start, but the real power of\npins comes when you use a board that\u2019s shared with multiple people. to\nget started, you can use `board_folder()` with a directory on a shared\ndrive or in dropbox, or if you use [posit\nconnect](https://posit.co/products/enterprise/connect/) you can use\n`board_connect()`:\n\n``` python\n# note that this uses one approach to connecting,\n# the environment variables connect_server and connect_api_key\n\nboard = pins.board_connect()\nboard.pin_write(tidy_sales_data, \"hadley/sales-summary\", type=\"csv\")\n```\n\nthen, someone else (or an automated report) can read and use your pin:\n\n``` python\nboard = board_connect()\nboard.pin_read(\"hadley/sales-summary\")\n```\n\nyou can easily control who gets to access the data using the posit\nconnect permissions pane.\n\nthe pins package also includes boards that allow you to share data on\nservices like amazon\u2019s s3 (`board_s3()`), google cloud storage\n(`board_gcs()`), and azure blob storage (`board_azure()`).\n\n## contributing\n\n- this project is released with a [contributor code of\n  conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html).\n  by contributing to this project, you agree to abide by its terms.\n\n- if you think you have encountered a bug, please [submit an\n  issue](https://github.com/rstudio/pins-python/issues).\n",
  "docs_url": null,
  "keywords": "data,tidyverse",
  "license": "mit",
  "name": "pins",
  "package_url": "https://pypi.org/project/pins/",
  "project_url": "https://pypi.org/project/pins/",
  "project_urls": {
    "Documentation": "https://rstudio.github.io/pins-python",
    "Homepage": "https://github.com/rstudio/pins-python"
  },
  "release_url": "https://pypi.org/project/pins/0.8.3/",
  "requires_dist": [
    "fsspec <2023.9.0,>=0.8.0",
    "pyyaml >=3.13",
    "xxhash >=1.0.0",
    "pandas >=0.23.0",
    "jinja2 >=2.10.0",
    "joblib >=0.12.0",
    "importlib-metadata >=4.4",
    "importlib-resources >=1.3",
    "appdirs <2.0.0",
    "humanize >=1.0.0",
    "requests",
    "s3fs ; extra == 'aws'",
    "adlfs ; extra == 'azure'",
    "ipython <=8.12.0 ; extra == 'doc'",
    "ipykernel ; extra == 'doc'",
    "nbformat ; extra == 'doc'",
    "nbclient ; extra == 'doc'",
    "quartodoc ; extra == 'doc'",
    "gcsfs ; extra == 'gcs'",
    "pip-tools ; extra == 'test'",
    "pytest ==7.1.3 ; extra == 'test'",
    "pytest-cases ; extra == 'test'",
    "pytest-dotenv ; extra == 'test'",
    "pytest-parallel ; extra == 'test'",
    "s3fs ; extra == 'test'",
    "adlfs ==2022.2.0 ; extra == 'test'",
    "gcsfs ; extra == 'test'",
    "fastparquet ; extra == 'test'",
    "pyarrow ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "publish data sets, models, and other python objects, making it easy to share them across projects and with your colleagues.",
  "version": "0.8.3",
  "releases": [],
  "developers": [
    "mc_al_github@fastmail.com",
    "michael_chow"
  ],
  "kwds": "rstudio python github pip pins",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pins",
  "homepage": "https://github.com/rstudio/pins-python",
  "release_count": 21,
  "dependency_ids": [
    "pypi_adlfs",
    "pypi_appdirs",
    "pypi_fastparquet",
    "pypi_fsspec",
    "pypi_gcsfs",
    "pypi_humanize",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_ipykernel",
    "pypi_ipython",
    "pypi_jinja2",
    "pypi_joblib",
    "pypi_nbclient",
    "pypi_nbformat",
    "pypi_pandas",
    "pypi_pip_tools",
    "pypi_pyarrow",
    "pypi_pytest",
    "pypi_pytest_cases",
    "pypi_pytest_dotenv",
    "pypi_pytest_parallel",
    "pypi_pyyaml",
    "pypi_quartodoc",
    "pypi_requests",
    "pypi_s3fs",
    "pypi_xxhash"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: system :: networking",
    "topic :: system :: networking :: firewalls",
    "topic :: utilities"
  ],
  "description": "# python sdk for ngrok\n\n[![pypi][pypi-badge]][pypi-url]\n[![supported versions][ver-badge]][ver-url]\n[![mit licensed][mit-badge]][mit-url]\n[![apache-2.0 licensed][apache-badge]][apache-url]\n[![continuous integration][ci-badge]][ci-url]\n\n[pypi-badge]: https://img.shields.io/pypi/v/ngrok\n[pypi-url]: https://pypi.org/project/ngrok\n[ver-badge]: https://img.shields.io/pypi/pyversions/ngrok.svg\n[ver-url]: https://pypi.org/project/ngrok\n[mit-badge]: https://img.shields.io/badge/license-mit-blue.svg\n[mit-url]: https://github.com/ngrok/ngrok-rust/blob/main/license-mit\n[apache-badge]: https://img.shields.io/badge/license-apache_2.0-blue.svg\n[apache-url]: https://github.com/ngrok/ngrok-rust/blob/main/license-apache\n[ci-badge]: https://github.com/ngrok/ngrok-python/actions/workflows/ci.yml/badge.svg\n[ci-url]: https://github.com/ngrok/ngrok-python/actions/workflows/ci.yml\n\n`ngrok-python` is the official python sdk for ngrok that requires no binaries. quickly enable secure production-ready connectivity to your applications and services directly from your code.\n\n[ngrok](https://ngrok.com) is a globally distributed gateway that provides secure connectivity for applications and services running in any environment.\n\n# installation\n\nthe `ngrok-python` sdk can be installed from [pypi](https://pypi.org/project/ngrok) via `pip`:\n\n```shell\npip install ngrok\n```\n\n# quickstart\n\n1. [install `ngrok-python`](#installation)\n2. export your [authtoken from the ngrok dashboard](https://dashboard.ngrok.com/get-started/your-authtoken) as `ngrok_authtoken` in your terminal\n3. add the following code to your application to establish connectivity via the [forward method](https://github.com/ngrok/ngrok-python/blob/main/examples/ngrok-forward-minimal.py) through port `9000` on `localhost`:\n\n    ```python\n    # import ngrok python sdk\n    import ngrok\n    \n    # establish connectivity\n    listener = ngrok.forward(9000, authtoken_from_env=true)\n    \n    # output ngrok url to console\n    print(f\"ingress established at {listener.url()}\")\n    ```\n\nthat's it! your application should now be available through the url output in your terminal. \n\n> **note**\n> you can find more examples in [the examples directory](https://github.com/ngrok/ngrok-python/tree/main/examples).\n\n# documentation\n\na full quickstart guide and api reference can be found in the [ngrok-python documentation](https://ngrok.github.io/ngrok-python/).\n\n### authentication\n\nto use most of ngrok's features, you'll need an authtoken. to obtain one, sign up for free at [ngrok.com](https://dashboard.ngrok.com/signup) and retrieve it from the [authtoken page in your ngrok dashboard](https://dashboard.ngrok.com/get-started/your-authtoken). once you have copied your authtoken, you can reference it in several ways.\n\nyou can set it in the `ngrok_authtoken` environment variable and pass `authtoken_from_env=true` to the [forward](https://ngrok.github.io/ngrok-python/module.html) method:\n\n```python\nngrok.forward(authtoken_from_env=true, ...)\n```\n\nor pass the authtoken directly to the [forward](https://ngrok.github.io/ngrok-python/module.html) method:\n\n```python\nngrok.forward(authtoken=token, ...)\n```\n\nor set it for all connections with the [set_auth_token](https://ngrok.github.io/ngrok-python/module.html) method:\n\n```python\nngrok.set_auth_token(token)\n```\n\n### connection\n\nthe [forward](https://ngrok.github.io/ngrok-python/module.html) method is the easiest way to start an ngrok session and establish a listener to a specified address. if an asynchronous runtime is running, the [forward](https://ngrok.github.io/ngrok-python/module.html) method returns a promise that resolves to the public listener object.\n\nwith no arguments, the [forward](https://ngrok.github.io/ngrok-python/module.html) method will start an http listener to `localhost` port `80`:\n\n```python\nlistener = ngrok.forward()\n```\n\nyou can pass the port number to forward on `localhost`:\n\n```python\nlistener = ngrok.forward(4242)\n```\n\nor you can specify the host and port via a string:\n\n```python\nlistener = ngrok.forward(\"localhost:4242\")\n```\n\nmore options can be passed to the `forward` method to customize the connection:\n\n```python\nlistener = ngrok.forward(8080, basic_auth=\"ngrok:online1line\"})\nlistener = ngrok.forward(8080, oauth_provider=\"google\", oauth_allow_domains=\"example.com\")\n```\n\nthe second (optional) argument is the listener type, which defaults to `http`. to create a tcp listener:\n\n```python\nlistener = ngrok.forward(25565, \"tcp\")\n```\n\nsince the options are kwargs, you can also use the `**` operator to pass a dictionary for configuration:\n\n```python\noptions = {\"authtoken_from_env\":true, \"response_header_add\":\"x-awesome:yes\"}\nlistener = ngrok.forward(8080, **options)\n```\n\nsee [full configuration](#full-configuration) for the list of possible configuration options.\n\n### disconnection\n\nto close a listener use the [disconnect](https://ngrok.github.io/ngrok-python/module.html) method with the `url` of the listener to close. if there is an asynchronous runtime running the [disconnect](https://ngrok.github.io/ngrok-python/module.html) method returns a promise that resolves when the call is complete.\n\n```python\nngrok.disconnect(url)\n```\n\nor omit the `url` to close all listeners:\n\n```python\nngrok.disconnect()\n```\n\nthe [close](https://ngrok.github.io/ngrok-python/ngrok_listener.html) method on a listener will shut it down, and also stop the ngrok session if it is no longer needed. this method returns a promise that resolves when the listener is closed.\n\n```python\nawait listener.close()\n```\n\n### list all listeners\n\nto list all current non-closed listeners use the [get_listeners](https://ngrok.github.io/ngrok-python/module.html) method. if there is an asynchronous runtime running the [get_listeners](https://ngrok.github.io/ngrok-python/module.html) method returns a promise that resolves to the list of listener objects.\n\n```python\nlisteners = ngrok.get_listeners()\n```\n\n### tls backends\n\nas of version `0.10.0` there is backend tls connection support, validated by a filepath specified in the `ssl_cert_file` environment variable, or falling back to the host os installed trusted certificate authorities. so it is now possible to do this to connect:\n\n```python\nngrok.forward(\"https://127.0.0.1:3000\", authtoken_from_env=true)\n```\n\nif the service is using certs not trusted by the os, such as self-signed certificates, add an environment variable like this before running: `ssl_cert_file=/path/to/ca.crt`.\n\n### unix sockets\n\nyou may also choose to use unix sockets instead of tcp. you can view an example of this [here](https://github.com/ngrok/ngrok-python/blob/main/examples/ngrok-http-full.py).\n\na socket address may be passed directly into the listener `forward()` call as well by prefixing the address with `unix:`, for example `unix:/tmp/socket-123`.\n\n### builders\n\nfor more control over sessions and listeners, the builder classes can be used.\n\na minimal example using the builder class looks like [the following](https://github.com/ngrok/ngrok-python/blob/main/examples/ngrok-http-minimal.py):\n\n```python\nasync def create_listener():\n    session = await ngrok.ngroksessionbuilder().authtoken_from_env().connect()\n    listener = await session.http_endpoint().listen()\n    print (f\"ingress established at {listener.url()}\")\n    listener.forward(\"localhost:9000\")\n```\n\nsee here for a [full configuration example](https://github.com/ngrok/ngrok-python/blob/main/examples/ngrok-http-full.py)\n\n### full configuration\n\nthis example shows [all the possible configuration items of ngrok.forward](https://github.com/ngrok/ngrok-python/blob/main/examples/ngrok-forward-full.py):\n\n```python\nlistener = ngrok.forward(\n    # session configuration\n    addr=\"localhost:8080\",\n    authtoken=\"<authtoken>\",\n    authtoken_from_env=true,\n    session_metadata=\"online in one line\",\n    # listener configuration\n    metadata=\"example listener metadata from python\",\n    domain=\"<domain>\",\n    schemes=[\"https\"],\n    proto=\"http\",\n    proxy_proto=\"\",  # one of: \"\", \"1\", \"2\"\n    # module configuration\n    basic_auth=[\"ngrok:online1line\"],\n    circuit_breaker=0.1,\n    compression=true,\n    allow_user_agent=\"^mozilla.*\",\n    deny_user_agent=\"^curl.*\",\n    ip_restriction_allow_cidrs=\"0.0.0.0/0\",\n    ip_restriction_deny_cidrs=\"10.1.1.1/32\",\n    crt=load_file(\"crt.pem\"),\n    key=load_file(\"key.pem\"),\n    mutual_tls_cas=load_file(\"ca.crt\"),\n    oauth_provider=\"google\",\n    oauth_allow_domains=[\"<domain>\"],\n    oauth_allow_emails=[\"<email>\"],\n    oauth_scopes=[\"<scope>\"],\n    oauth_client_id=\"<id>\",\n    oauth_client_secret=\"<id>\",\n    oidc_issuer_url=\"<url>\",\n    oidc_client_id=\"<id>\",\n    oidc_client_secret=\"<secret>\",\n    oidc_allow_domains=[\"<domain>\"],\n    oidc_allow_emails=[\"<email>\"],\n    oidc_scopes=[\"<scope>\"],\n    request_header_remove=\"x-req-nope\",\n    response_header_remove=\"x-res-nope\",\n    request_header_add=\"x-req-yup:true\",\n    response_header_add=\"x-res-yup:true\",\n    verify_webhook_provider=\"twilio\",\n    verify_webhook_secret=\"asdf\",\n    websocket_tcp_converter=true,\n)\n```\n\n# asgi runner\n\n`ngrok-python` comes bundled with an asgi (asynchronous server gateway interface) runner `ngrok-asgi` that can be used for uvicorn, gunicorn, django and more, with no code. \n\nto use prefix your start up command for a uvicorn or gunicorn web server with either `ngrok-asgi` or `python -m ngrok`. \n\nany tcp or unix domain socket arguments will be used to establish connectivity automatically. the ngrok listener can be configured using command flags, for instance adding `--basic-auth ngrok online1line` will introduce basic authentication to the ingress listener.\n\n### uvicorn\n\n```shell\n# basic usage\nngrok-asgi uvicorn mysite.asgi:application\n\n# with custom host and port\nngrok-asgi uvicorn mysite.asgi:application \\\n    --host localhost \\\n    --port 1234\n\n# using basic auth\nngrok-asgi uvicorn mysite.asgi:application \\\n    --host localhost \\\n    --port 1234 \\\n    --basic-auth ngrok online1line\n\n# using custom sock file\nngrok-asgi uvicorn mysite.asgi:application \\\n    --uds /tmp/uvicorn.sock\n\n# using module name\npython -m ngrok uvicorn mysite.asgi:application \\\n    --oauth-provider google \\\n    --allow-emails bob@example.com\n```\n\n### gunicorn\n\n```shell\n# basic usage\nngrok-asgi gunicorn mysite.asgi:application -k uvicorn.workers.uvicornworker\n\n# with custom host and port\nngrok-asgi gunicorn mysite.asgi:application -k uvicorn.workers.uvicornworker \\\n    --bind localhost:1234\n\n# using webhook verifications\nngrok-asgi gunicorn mysite.asgi:application -k uvicorn.workers.uvicornworker \\\n    --webhook-verification twilio s3cr3t\n\n# using custom sock file\nngrok-asgi gunicorn mysite.asgi:application -k uvicorn.workers.uvicornworker \\\n    --bind unix:/tmp/gunicorn.sock\n\n# using module name\npython -m ngrok gunicorn mysite.asgi:application -k uvicorn.workers.uvicornworker --response-header x-awesome true\n```\n\n# examples\n\n#### listeners\n  - [http](https://github.com/ngrok/ngrok-python/tree/main/examples/ngrok-http-minimal.py)\n    - [full configuration example](https://github.com/ngrok/ngrok-python/tree/main/examples/ngrok-http-full.py)\n  - [labeled](https://github.com/ngrok/ngrok-python/tree/main/examples/ngrok-labeled.py)\n  - [tcp](https://github.com/ngrok/ngrok-python/tree/main/examples/ngrok-tcp.py)\n  - [tls](https://github.com/ngrok/ngrok-python/tree/main/examples/ngrok-tls.py)\n\n#### frameworks\n  - [aiohttp](https://github.com/ngrok/ngrok-python/tree/main/examples/aiohttp-ngrok.py)\n  - [aws app runner](https://github.com/ngrok/ngrok-sdk-serverless-example)\n    - with [changes for python](https://docs.aws.amazon.com/apprunner/latest/dg/service-source-code-python.html)\n  - django\n    - [single file example](https://github.com/ngrok/ngrok-python/tree/main/examples/django-single-file.py)\n    - [modify manage.py example](https://github.com/ngrok/ngrok-python/tree/main/examples/djangosite/manage.py)\n    - [modify asgi.py example](https://github.com/ngrok/ngrok-python/tree/main/examples/djangosite/djangosite/ngrok-asgi.py)\n    - or [via `ngrok-asgi`](#asgi-runner)\n  - [flask](https://github.com/ngrok/ngrok-python/tree/main/examples/flask-ngrok.py)\n  - [gunicorn](#gunicorn)\n  - [streamlit](https://github.com/ngrok/ngrok-python/tree/main/examples/streamlit/streamlit-ngrok.py)\n  - [tornado](https://github.com/ngrok/ngrok-python/tree/main/examples/tornado-ngrok.py)\n  - [uvicorn](https://github.com/ngrok/ngrok-python/tree/main/examples/uvicorn-ngrok.py)\n\n#### machine learning\n  - gradio\n    - [ngrok-asgi example](https://github.com/ngrok/ngrok-python/tree/main/examples/gradio/gradio-asgi.py)\n    - [gradio cli example](https://github.com/ngrok/ngrok-python/tree/main/examples/gradio/gradio-ngrok.py)\n  - [openplayground](https://github.com/ngrok/ngrok-python/tree/main/examples/openplayground/run.py)\n  - [gpt4all](https://github.com/ngrok/ngrok-python/tree/main/examples/gpt4all/run.py)\n  - [stable diffusion webui](https://github.com/automatic1111/stable-diffusion-webui/) by automatic1111\n    - `ngrok-python` is now built-in, see the `--ngrok` and `--ngrok-options` arguments.\n  - [text generation webui](https://github.com/oobabooga/text-generation-webui) by oobabooga\n    - `ngrok-python` is now built-in, see the `--extension ngrok` argument.\n\n# platform support\n\npre-built binaries are provided on pypi for the following platforms:\n\n| os         | i686 | x64 | aarch64 | arm |\n| ---------- | -----|-----|---------|-----|\n| windows    |   \u2713  |  \u2713  |    *    |     |\n| macos      |      |  \u2713  |    \u2713    |     |\n| linux      |      |  \u2713  |    \u2713    |  \u2713  |\n| linux musl |      |  \u2713  |    \u2713    |     |\n| freebsd    |      |  *  |         |     |\n\n> **note**\n> `ngrok-python`, and [ngrok-rust](https://github.com/ngrok/ngrok-rust/) which it depends on, are open source, so it may be possible to build them for other platforms.\n> - windows-aarch64 will be supported after the next release of [ring](https://github.com/briansmith/ring/issues/1167).\n> - freebsd-x64 is built by the release process, but pypi won't accept bsd flavors.\n\n# dependencies\n\n- this project relies on [pyo3](https://pyo3.rs/), an excellent system to ease development and building of rust plugins for python.\n- thank you to [openiothub](https://github.com/openiothub/ngrok) for handing over the ngrok name on pypi.\n\n# changelog\n\nchanges to `ngrok-python` are tracked under [changelog.md](https://github.com/ngrok/ngrok-python/blob/main/changelog.md).\n\n# join the ngrok community\n\n- check out [our official docs](https://docs.ngrok.com)\n- read about updates on [our blog](https://blog.ngrok.com)\n- open an [issue](https://github.com/ngrok/ngrok-python/issues) or [pull request](https://github.com/ngrok/ngrok-python/pulls)\n- join our [slack community](https://ngrok.com/slack)\n- follow us on [x / twitter (@ngrokhq)](https://twitter.com/ngrokhq)\n- subscribe to our [youtube channel (@ngrokhq)](https://www.youtube.com/@ngrokhq)\n\n# license\n\nthis project is dual-licensed under [apache, version 2.0](license-apache) and [mit](license-mit).\nyou can choose between one of them if you use this work.\n\n### contributions\n\nunless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in `ngrok-python` by you, as defined in the apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n",
  "docs_url": null,
  "keywords": "ngrok,python,pypi,pyo3,ingress,networking",
  "license": "mit or apache-2.0",
  "name": "ngrok",
  "package_url": "https://pypi.org/project/ngrok/",
  "project_url": "https://pypi.org/project/ngrok/",
  "project_urls": {
    "changelog": "https://github.com/ngrok/ngrok-python/blob/main/CHANGELOG.md",
    "homepage": "https://ngrok.com",
    "repository": "https://github.com/ngrok/ngrok-python"
  },
  "release_url": "https://pypi.org/project/ngrok/0.12.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "the ngrok agent sdk for python",
  "version": "0.12.1",
  "releases": [],
  "developers": [],
  "kwds": "badge ngrok ngrok_authtoken ngroksessionbuilder ngrok_listener",
  "license_kwds": "mit or apache-2.0",
  "libtype": "pypi",
  "id": "pypi_ngrok",
  "homepage": "",
  "release_count": 19,
  "dependency_ids": []
}
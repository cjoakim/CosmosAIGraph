{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# clang tidy runner\n\n## installation\n\nplease install it via `pip install pyclang`.\n\n[![pyclang](https://img.shields.io/pypi/v/pyclang?color=green&label=pyclang)](https://pypi.org/project/pyclang/)\n\n## examples\n\n```python\nimport os\n\nfrom pyclang import runner\n\n# all the dirs you want to run clang-tidy in, will use this value to pass to all chained methods automatically\nrunner = runner([os.path.join(os.environ['idf_path'], 'examples', 'get-started', 'hello_world')])\nrunner.idf_reconfigure().normalize()  # each function is a step, all these steps are chainable\nrunner()  # the class instance is callable, call it to run all the chained methods\n```\n\nyou can write custom chain method by using decorator `@chain`.\n\nrestrictions: all arguments are fixed, you need to pass the rest of them when initializing `runner` instance with kwargs\n\n- `folder`: which is the folder you passed when initializing `runner` instance\n- `log_fs`: file stream (if you provided `log_path`) or `sys.stdout`\n\n```python\nimport os\n\nfrom pyclang import runner\n\n\nclass customrunner(runner):\n    @chain\n    def hello(self, *args):\n        print('hello world')\n\n\n# and used by\nrunner = runner([os.path.join(os.environ['idf_path'], 'examples', 'get-started', 'hello_world')])\nrunner.hello().idf_reconfigure()\nrunner()\n```\n\n## cli extension\n\nfor each custom chain method, you should also define this in `cli_ext.py` if there're additional arguments.\n\n## use as a script\n\nyou can also customize it into a scripts. now we provide a predefined script: `idf_clang_tidy`, which procedure\nis: `idf_reconfigure().filter_cmd().run_clang_tidy().normalize()`. you can run it by `idf_clang_tidy --help` for detail.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyclang",
  "package_url": "https://pypi.org/project/pyclang/",
  "project_url": "https://pypi.org/project/pyclang/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/pyclang/0.4.2/",
  "requires_dist": [
    "codereport (~=0.2.5) ; extra == 'html'",
    "pygments (<2.12) ; extra == 'html'"
  ],
  "requires_python": ">=3.6",
  "summary": "a python clang-tidy runner",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "fu_hanxi",
    "fuhanxi@espressif.com"
  ],
  "kwds": "run_clang_tidy idf_clang_tidy tidy pyclang run",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyclang",
  "homepage": "",
  "release_count": 11,
  "dependency_ids": [
    "pypi_codereport",
    "pypi_pygments"
  ]
}
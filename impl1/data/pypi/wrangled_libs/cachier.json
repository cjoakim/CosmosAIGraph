{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: other/nonlisted topic",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "persistent, stale-free, local and cross-machine caching for python functions.\ncachier\n#######\n\n|pypi-status| |downloads| |pypi-versions| |build-status| |codecov| |codefactor| |licence|\n\npersistent, stale-free, local and cross-machine caching for python functions.\n\n.. code-block:: python\n\n  from cachier import cachier\n  import datetime\n\n  @cachier(stale_after=datetime.timedelta(days=3))\n  def foo(arg1, arg2):\n    \"\"\"foo now has a persistent cache, trigerring recalculation for values stored more than 3 days.\"\"\"\n    return {'arg1': arg1, 'arg2': arg2}\n\n\n.. role:: python(code)\n  :language: python\n\n.. contents::\n\n.. section-numbering:\n\n\n\ninstallation\n============\n\ninstall ``cachier`` with:\n\n.. code-block:: python\n\n    pip install cachier\n\nfor the latest version supporting python 2.7 please use:\n\n.. code-block:: python\n\n    pip install 'cachier==1.2.8'\n\nfeatures\n========\n\n* pure python.\n* compatible with python 3.8+ (python 2.7 was discontinued in version 1.2.8).\n* supported and `tested on linux, os x and windows <https://travis-ci.org/shaypal5/cachier>`_.\n* a simple interface.\n* defining \"shelf life\" for cached values.\n* local caching using pickle files.\n* cross-machine caching using mongodb.\n* thread-safety.\n\ncachier is **not**:\n\n* meant as a transient cache. python's @lru_cache is better.\n* especially fast. it is meant to replace function calls that take more than... a second, say (overhead is around 1 millisecond).\n\nfuture features\n---------------\n\n* s3 core.\n* multi-core caching.\n* `cache replacement policies <https://en.wikipedia.org/wiki/cache_replacement_policies>`_\n\n\nuse\n===\n\ncachier provides a decorator which you can wrap around your functions to give them a persistent cache. the positional and keyword arguments to the wrapped function must be hashable (i.e. python's immutable built-in objects, not mutable containers). also, notice that since objects which are instances of user-defined classes are hashable but all compare unequal (their hash value is their id), equal objects across different sessions will not yield identical keys.\n\nsetting up a cache\n------------------\nyou can add a default, pickle-based, persistent cache to your function - meaning it will last across different python kernels calling the wrapped function - by decorating it with the ``cachier`` decorator (notice the ``()``!).\n\n.. code-block:: python\n\n  from cachier import cachier\n\n  @cachier()\n  def foo(arg1, arg2):\n    \"\"\"your function now has a persistent cache mapped by argument values!\"\"\"\n    return {'arg1': arg1, 'arg2': arg2}\n\nclass and object methods can also be cached. cachier will automatically ignore the `self` parameter when determining the cache key for an object method. **this means that methods will be cached across all instances of an object, which may not be what you want.**\n\n.. code-block:: python\n\n  from cachier import cachier\n\n  class foo():\n    @staticmethod\n    @cachier()\n    def good_static_usage(arg_1, arg_2):\n      return arg_1 + arg_2\n\n    # instance method does not depend on object's internal state, so good to cache\n    @cachier()\n    def good_usage_1(self, arg_1, arg_2)\n      return arg_1 + arg_2\n\n    # instance method is calling external service, probably okay to cache\n    @cachier()\n    def good_usage_2(self, arg_1, arg_2)\n      result = self.call_api(arg_1, arg_2)\n      return result\n\n    # instance method relies on object attribute, not good to cache\n    @cachier()\n    def bad_usage(self, arg_1, arg_2)\n      return arg_1 + arg_2 + self.arg_3\n\n\nresetting a cache\n-----------------\nthe cachier wrapper adds a ``clear_cache()`` function to each wrapped function. to reset the cache of the wrapped function simply call this method:\n\n.. code-block:: python\n\n  foo.clear_cache()\n\ngeneral configuration\n----------------------\n\nglobal defaults\n~~~~~~~~~~~~~~~\n\nsettings can be globally configured across all cachier wrappers through the use of the `set_default_params` function. this function takes the same keyword parameters as the ones defined in the decorator, which can be passed all at once or with multiple calls. parameters given directly to a decorator take precedence over any values set by this function.\n\nthe following parameters will only be applied to decorators defined after `set_default_params` is called:\n\n*  `hash_func`\n*  `backend`\n*  `mongetter`\n*  `cache_dir`\n*  `pickle_reload`\n*  `separate_files`\n\nthese parameters can be changed at any time and they will apply to all decorators:\n\n*  `allow_none`\n*  `caching_enabled`\n*  `stale_after`\n*  `next_time`\n*  `wait_for_calc_timeout`\n\nthe current defaults can be fetched by calling `get_default_params`.\n\nthreads limit\n~~~~~~~~~~~~~\n\nto limit the number of threads cachier is allowed to spawn, set the ``cachier_max_workers`` with the desired number. the defeault is 8, so to enable cachier to spawn even more threads, you'll have to set a higher limit explicitly.\n\n\nglobal enable/disable\n---------------------\n\ncaching can be turned off across all decorators by calling `disable_caching`, and then re-activated by calling `enable_caching`.\n\nthese functions are convenience wrappers around the `caching_enabled` default setting.\n\n\ncache shelf life\n----------------\n\nsetting shelf life\n~~~~~~~~~~~~~~~~~~\nyou can set any duration as the shelf life of cached return values of a function by providing a corresponding ``timedelta`` object to the ``stale_after`` parameter:\n\n.. code-block:: python\n\n  import datetime\n\n  @cachier(stale_after=datetime.timedelta(weeks=2))\n  def bar(arg1, arg2):\n    return {'arg1': arg1, 'arg2': arg2}\n\nnow when a cached value matching the given arguments is found the time of its calculation is checked; if more than ``stale_after`` time has since passed, the function will be run again for the same arguments and the new value will be cached and returned.\n\nthis is useful for lengthy calculations that depend on a dynamic data source.\n\nfuzzy shelf life\n~~~~~~~~~~~~~~~~\nsometimes you may want your function to trigger a calculation when it encounters a stale result, but still not wait on it if it's not that critical. in that case, you can set ``next_time`` to ``true`` to have your function trigger a recalculation **in a separate thread**, but return the currently cached stale value:\n\n.. code-block:: python\n\n  @cachier(next_time=true)\n\nfurther function calls made while the calculation is being performed will not trigger redundant calculations.\n\n\nworking with unhashable arguments\n---------------------------------\n\nas mentioned above, the positional and keyword arguments to the wrapped function must be hashable (i.e. python's immutable built-in objects, not mutable containers). to get around this limitation the ``hash_func`` parameter of the ``cachier`` decorator can be provided with a callable that gets the args and kwargs from the decorated function and returns a hash key for them.\n\n.. code-block:: python\n\n  def calculate_hash(args, kwds):\n    key = ...  # compute a hash key here based on arguments\n    return key\n\n  @cachier(hash_func=calculate_hash)\n  def calculate_super_complex_stuff(custom_obj):\n    # amazing code goes here\n\nsee here for an example:\n\n`question: how to work with unhashable arguments <https://github.com/python-cachier/cachier/issues/91>`_\n\n\nprecaching values\n---------------------------------\n\nif you want to load a value into the cache without calling the underlying function, this can be done with the `precache_value` function.\n\n.. code-block:: python\n\n  @cachier()\n  def add(arg1, arg2):\n    return arg1 + arg2\n\n  add.precache_value(2, 2, value_to_cache=5)\n\n  result = add(2, 2)\n  print(result)  # prints 5\n\n\nper-function call arguments\n---------------------------\n\ncachier also accepts several keyword arguments in the calls of the function it wraps rather than in the decorator call, allowing you to modify its behaviour for a specific function call.\n\nignore cache\n~~~~~~~~~~~~\n\nyou can have ``cachier`` ignore any existing cache for a specific function call by passing ``ignore_cache=true`` to the function call. the cache will neither be checked nor updated with the new return value.\n\n.. code-block:: python\n\n  @cachier()\n  def sum(first_num, second_num):\n    return first_num + second_num\n\n  def main():\n    print(sum(5, 3, ignore_cache=true))\n\noverwrite cache\n~~~~~~~~~~~~~~~\n\nyou can have ``cachier`` overwrite an existing cache entry - if one exists - for a specific function call by passing ``overwrite_cache=true`` to the function call. the cache will not be checked but will be updated with the new return value.\n\nverbose cache call\n~~~~~~~~~~~~~~~~~~\n\nyou can have ``cachier`` print out a detailed explanation of the logic of a specific call by passing ``verbose_cache=true`` to the function call. this can be useful if you are not sure why a certain function result is, or is not, returned.\n\ncache `none` values\n~~~~~~~~~~~~~~~~~~~\n\nby default, ``cachier`` does not cache ``none`` values. you can override this behaviour by passing ``allow_none=true`` to the function call.\n\n\ncachier cores\n=============\n\npickle core\n-----------\n\nthe default core for cachier is pickle based, meaning each function will store its cache is a separate pickle file in the ``~/.cachier`` directory. naturally, this kind of cache is both machine-specific and user-specific.\n\nyou can configure ``cachier`` to use another directory by providing the ``cache_dir`` parameter with the path to that directory:\n\n.. code-block:: python\n\n  @cachier(cache_dir='~/.temp/.cache')\n\n\nyou can slightly optimise pickle-based caching if you know your code will only be used in a single thread environment by setting:\n\n.. code-block:: python\n\n  @cachier(pickle_reload=false)\n\nthis will prevent reading the cache file on each cache read, speeding things up a bit, while also nullifying inter-thread functionality (the code is still thread safe, but different threads will have different versions of the cache at times, and will sometime make unnecessary function calls).\n\nsetting the optional argument ``separate_files`` to ``true`` will cause the cache to be stored in several files: a file per argument set, per function. this can help if your per-function cache files become too large.\n\n.. code-block:: python\n\n  from cachier import cachier\n\n  @cachier(separate_files=true)\n  def foo(arg1, arg2):\n    \"\"\"your function now has a persistent cache mapped by argument values, split across several files, per argument set\"\"\"\n    return {'arg1': arg1, 'arg2': arg2}\n\nyou can get the fully qualified path to the directory of cache files used by ``cachier`` (``~/.cachier`` by default) by calling the ``cache_dpath()`` function:\n\n.. code-block:: python\n\n  >>> foo.cache_dpath()\n      \"/home/bigus/.cachier/\"\n\n\nmongodb core\n------------\nyou can set a mongodb-based cache by assigning ``mongetter`` with a callable that returns a ``pymongo.collection`` object with writing permissions:\n\n.. code-block:: python\n\n    from pymongo import mongoclient\n\n    def my_mongetter():\n        client = mongoclient(get_cachier_db_auth_uri())\n        db_obj = client['cachier_db']\n        if 'someapp_cachier_db' not in db_obj.list_collection_names():\n            db_obj.create_collection('someapp_cachier_db')\n        return db_obj['someapp_cachier_db']\n\n  @cachier(mongetter=my_mongetter)\n\nthis allows you to have a cross-machine, albeit slower, cache. this functionality requires that the installation of the ``pymongo`` python package.\n\nin certain cases the mongodb backend might leave a deadlock behind, blocking all subsequent requests from being processed. if you encounter this issue, supply the ``wait_for_calc_timeout`` with a reasonable number of seconds; calls will then wait at most this number of seconds before triggering a recalculation.\n\n.. code-block:: python\n\n  @cachier(mongetter=false, wait_for_calc_timeout=2)\n\n\nmemory core\n-----------\n\nyou can set an in-memory cache by assigning the ``backend`` parameter with ``'memory'``:\n\n.. code-block:: python\n\n  @cachier(backend='memory')\n\nnote, however, that ``cachier``'s in-memory core is simple, and has no monitoring or cap on cache size, and can thus lead to memory errors on large return values - it is mainly intended to be used with future multi-core functionality. as a rule, python's built-in ``lru_cache`` is a much better stand-alone solution.\n\n\ncontributing\n============\n\ncurrent maintainers are shay palachy affek (`shay.palachy@gmail.com <mailto:shay.palachy@gmail.com>`_, `@shaypal5 <https://github.com/shaypal5>`_) and judson neer (`@lordjabez <https://github.com/lordjabez>`_); you are more than welcome to approach them for help. contributions are very welcomed! :)\n\ninstalling for development\n--------------------------\n\nclone:\n\n.. code-block:: bash\n\n  git clone git@github.com:python-cachier/cachier.git\n\n\ninstall in development mode with test dependencies:\n\n.. code-block:: bash\n\n  cd cachier\n  pip install -e \".[test]\"\n\n\nrunning the tests\n-----------------\n\nto run the tests, call the ``pytest`` command in the repository's root, or:\n\n.. code-block:: bash\n\n  python -m pytest\n\nto run only mongodb core related tests, use:\n\n.. code-block:: bash\n\n  pytest -m mongo\n\nto run only memory core related tests, use:\n\n.. code-block:: bash\n\n  pytest -m memory\n\nto run all tests except mongodb core related tests, use:\n\n.. code-block:: bash\n\n  pytest -m \"not mongo\"\n\n\nto run all tests except memory core and mongodb core related tests, use:\n\n.. code-block:: bash\n\n  pytest -m \"not (mongo or memory)\"\n\n\nrunning mongodb tests against a live mongodb instance\n-----------------------------------------------------\n\n**note to developers:** by default, all mongodb tests are run against a mocked mongodb instance, provided by the ``pymongo_inmemory`` package. to run them against a live mongodb instance, the ``cachier_test_vs_live_mongo`` environment variable is set to ``true`` in the ``test`` environment of this repository (and additional environment variables are populated with the appropriate credentials), used by the github action running tests on every commit and pull request.\n\ncontributers are not expected to run these tests against a live mongodb instance when developing, as credentials for the testing instance used will not be shared, but rather use the testing against the in-memory mongodb instance as a good proxy.\n\n**however, the tests run against a live mongodb instance when you submit a pr are the determining tests for deciding whether your code functions correctly against mongodb.**\n\n\nadding documentation\n--------------------\n\nthis project is documented using the `numpy docstring conventions`_, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as sphinx and result in human-readable docstrings (in my personal opinion, of course). when documenting code you add to this project, please follow `these conventions`_.\n\n.. _`numpy docstring conventions`: https://github.com/numpy/numpy/blob/master/doc/howto_document.rst.txt\n.. _`these conventions`: https://github.com/numpy/numpy/blob/master/doc/howto_document.rst.txt\n\nadditionally, if you update this ``readme.rst`` file, use ``python setup.py checkdocs`` to validate it compiles.\n\n\ncredits\n=======\n\ncreated by `shay palachy affek <https://github.com/shaypal5>`_ (shay.palachy@gmail.com), which currently assists in maintenance.\n\ncurrent lead developer/contributor: `judson neer <https://github.com/lordjabez>`_ (`@lordjabez <https://github.com/lordjabez>`_ on github).\n\nother major contributors:\n\n* `judson neer <https://github.com/lordjabez>`_ - precaching, method caching support and numerous improvements and bugfixes.\n\n* `cthoyt <https://github.com/cthoyt>`_ - base memory core implementation.\n\n* `amarczew <https://github.com/amarczew>`_ - the ``hash_func`` kwarg.\n\n* `non-senses <https://github.com/non-senses>`_ - the ``wait_for_calc_timeout`` kwarg.\n\n* `elad rapaport <https://github.com/erap129>`_ - multi-file pickle core, a.k.a ``separate_files`` (released on ``v1.5.3``).\n\n* `john didion <https://github.com/jdidion>`_ - support for pickle-based caching for cases where two identically-named methods of different classes are defined in the same module.\n\nnotable bugfixers:\n\n* `michaelrazum <https://github.com/michaelrazum>`_.\n\n* `eric ma <https://github.com/ericmjl>`_ - the inotify bugfix (released on ``v1.5.3``).\n\n* `ofir <https://github.com/ofirnk>`_ - the inotify bugfix (released on ``v1.5.3``).\n\n\n\n.. |pypi-status| image:: https://img.shields.io/pypi/v/cachier.svg\n  :target: https://pypi.python.org/pypi/cachier\n\n.. |pypi-versions| image:: https://img.shields.io/pypi/pyversions/cachier.svg\n   :target: https://pypi.python.org/pypi/cachier\n\n.. |build-status| image:: https://github.com/python-cachier/cachier/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/python-cachier/cachier/actions/workflows/test.yml\n\n.. |licence| image:: https://img.shields.io/pypi/l/cachier.svg\n  :target: https://pypi.python.org/pypi/cachier\n\n.. |codecov| image:: https://codecov.io/github/python-cachier/cachier/coverage.svg?branch=master\n   :target: https://codecov.io/github/python-cachier/cachier?branch=master\n\n.. |downloads| image:: https://pepy.tech/badge/cachier\n     :target: https://pepy.tech/project/cachier\n     :alt: pepy stats\n\n.. |codefactor| image:: https://www.codefactor.io/repository/github/python-cachier/cachier/badge?style=plastic\n     :target: https://www.codefactor.io/repository/github/python-cachier/cachier\n     :alt: codefactor code quality\n\n.. links:\n.. _pymongo: https://api.mongodb.com/python/current/\n.. _watchdog: https://github.com/gorakhargosh/watchdog\n",
  "docs_url": null,
  "keywords": "cache,persistence,mongo,memoization,decorator",
  "license": "mit",
  "name": "cachier",
  "package_url": "https://pypi.org/project/cachier/",
  "project_url": "https://pypi.org/project/cachier/",
  "project_urls": {
    "Homepage": "https://github.com/python-cachier/cachier"
  },
  "release_url": "https://pypi.org/project/cachier/2.2.2/",
  "requires_dist": [
    "watchdog",
    "portalocker",
    "setuptools >=67.6.0",
    "pytest ; extra == 'test'",
    "coverage ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "birch ; extra == 'test'",
    "bandit ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "pylint ; extra == 'test'",
    "safety ; extra == 'test'",
    "mypy ; extra == 'test'",
    "types-setuptools ; extra == 'test'",
    "pandas-stubs ; extra == 'test'",
    "pymongo ; extra == 'test'",
    "dnspython ; extra == 'test'",
    "pymongo-inmemory ; extra == 'test'",
    "pandas ; extra == 'test'",
    "collective.checkdocs ; extra == 'test'",
    "pygments ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "persistent, stale-free, local and cross-machine caching for python functions.",
  "version": "2.2.2",
  "releases": [],
  "developers": [
    "shay.palachy@gmail.com",
    "shay_palachy"
  ],
  "kwds": "verbose_cache caching_enabled enable_caching value_to_cache cachier_test_vs_live_mongo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cachier",
  "homepage": "https://github.com/python-cachier/cachier",
  "release_count": 54,
  "dependency_ids": [
    "pypi_bandit",
    "pypi_birch",
    "pypi_collective.checkdocs",
    "pypi_coverage",
    "pypi_dnspython",
    "pypi_flake8",
    "pypi_mypy",
    "pypi_pandas",
    "pypi_pandas_stubs",
    "pypi_portalocker",
    "pypi_pygments",
    "pypi_pylint",
    "pypi_pymongo",
    "pypi_pymongo_inmemory",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_safety",
    "pypi_setuptools",
    "pypi_types_setuptools",
    "pypi_watchdog"
  ],
  "documentation_summary": "The GitHub repository \"python-cachier/cachier\" offers a Python library for persistent, stale-free, local, and cross-machine caching for Python functions. It is designed to be simple to use, allowing for the definition of \"shelf life\" for cached values. The library supports local caching using pickle files and cross-machine caching using MongoDB, ensuring thread safety. It is compatible with Python 3.8 and above, and it is tested on Linux, OS X, and Windows. Future features include S3 core and multi-core caching. The library is not intended for transient caching or as a high-speed solution but is suitable for replacing function calls that take more than a second. Installation is straightforward via pip, and the library is licensed under the MIT license.",
  "embedding": [
    -0.02036065235733986,
    -0.008568089455366135,
    0.01740371063351631,
    -0.023050060495734215,
    -0.017812050879001617,
    0.010109922848641872,
    0.03128725290298462,
    -0.03497638925909996,
    -0.023331673815846443,
    -0.01571403071284294,
    0.007385312579572201,
    0.007645804900676012,
    -0.012552919797599316,
    0.027246100828051567,
    -0.007184662856161594,
    -0.012841572985053062,
    0.019163794815540314,
    -0.013862421736121178,
    0.029541250318288803,
    -0.0023725933860987425,
    0.027992377057671547,
    -0.010074720717966557,
    -0.03922875225543976,
    -0.010898440144956112,
    -0.018290793523192406,
    0.011011085473001003,
    0.02652798593044281,
    -0.02196584828197956,
    0.02126181498169899,
    0.01239803247153759,
    0.03111828677356243,
    0.011539110913872719,
    -0.027147537097334862,
    -0.030442412942647934,
    -0.036412619054317474,
    -0.010905480943620205,
    0.009926874190568924,
    -0.01610828936100006,
    0.035821229219436646,
    0.0074416352435946465,
    0.018375277519226074,
    -0.017502276226878166,
    -0.0065510328859090805,
    -0.018361195921897888,
    -0.020740831270813942,
    0.02931595966219902,
    -0.01475654449313879,
    -0.043678246438503265,
    -0.016840483993291855,
    -0.006360943894833326,
    0.017812050879001617,
    0.014643899165093899,
    -0.02106468565762043,
    -0.0022881091572344303,
    0.008103426545858383,
    -0.03356832265853882,
    -0.0008703615749254823,
    0.029851024970412254,
    -0.018854020163416862,
    -0.019741103053092957,
    -0.004329806659370661,
    0.0015937561402097344,
    -0.024429965764284134,
    0.0007863175706006587,
    0.015826676040887833,
    0.0005729073309339583,
    -0.012799330987036228,
    0.004924715030938387,
    0.008997549302875996,
    0.035624101758003235,
    0.02051553875207901,
    0.035229843109846115,
    0.010447858832776546,
    -0.00026401260402053595,
    0.016291337087750435,
    -0.008779299445450306,
    -0.026950407773256302,
    0.046466220170259476,
    -0.011039246805012226,
    0.0032649559434503317,
    0.027105294167995453,
    -0.029287798330187798,
    -0.0005469461320899427,
    0.04469205439090729,
    0.025288887321949005,
    0.018924424424767494,
    0.005604107398539782,
    0.008483605459332466,
    -0.007962619885802269,
    0.000631870178040117,
    0.008138628676533699,
    0.0014459090307354927,
    0.005642829462885857,
    0.02806277945637703,
    0.005547784734517336,
    0.03827126696705818,
    0.014503092505037785,
    0.005174647085368633,
    -0.0033846416044980288,
    -0.02420467510819435,
    -0.015474658459424973,
    0.007744369562715292,
    -0.012862694449722767,
    -0.01823447085916996,
    -0.027527714148163795,
    -0.011018126271665096,
    0.00018227870168630034,
    -0.015474658459424973,
    0.032132092863321304,
    0.01926236040890217,
    -0.023021899163722992,
    0.049535803496837616,
    0.01406659185886383,
    -0.054295074194669724,
    -0.00041119963862001896,
    -0.019853748381137848,
    0.02644350193440914,
    -0.01599564403295517,
    -0.01192632969468832,
    -0.01843160018324852,
    -0.0012162181083112955,
    0.008462483994662762,
    0.021543428301811218,
    -0.014094753190875053,
    0.012679645791649818,
    -0.010468980297446251,
    0.00046554222353734076,
    0.0019132113084197044,
    -0.01603788509964943,
    -0.016136450693011284,
    -0.0014247880317270756,
    0.012848613783717155,
    -0.003914427012205124,
    -0.01271484699100256,
    -0.012200902216136456,
    -0.025134000927209854,
    -0.024317320436239243,
    -0.005544264800846577,
    -0.010412657633423805,
    -0.01847384124994278,
    0.017938775941729546,
    0.013130227103829384,
    -0.010877319611608982,
    -0.0039038665127009153,
    -0.014812867157161236,
    0.05229561775922775,
    -0.022669881582260132,
    0.0055724261328577995,
    -0.013623050414025784,
    -0.0004589419113472104,
    0.012672604992985725,
    -0.006586234550923109,
    -0.04066498205065727,
    -0.012405072338879108,
    -0.019642537459731102,
    -0.0036152126267552376,
    0.004294604994356632,
    -0.029344120994210243,
    -0.003361760638654232,
    0.011503909714519978,
    0.018572406843304634,
    0.014003228396177292,
    3.085647404077463e-05,
    -0.00591388251632452,
    -0.004762787371873856,
    0.029963670298457146,
    0.019586214795708656,
    -0.02488054893910885,
    0.003108308417722583,
    0.00834983866661787,
    0.011412384919822216,
    0.020529620349407196,
    -0.024852387607097626,
    0.013841301202774048,
    -0.010637948289513588,
    0.009025710634887218,
    -0.0006283500115387142,
    0.02040289342403412,
    -0.010532342828810215,
    -0.0002963541483040899,
    0.0045058149844408035,
    0.005125364754348993,
    -0.0008730016998015344,
    0.03418787196278572,
    -0.03142806142568588,
    -0.03708849102258682,
    -0.01291197631508112,
    -0.008659613318741322,
    0.006311661563813686,
    0.010997004806995392,
    -0.015770353376865387,
    0.010813956148922443,
    -0.0020082558039575815,
    -0.018656890839338303,
    -0.5826019048690796,
    0.008730016648769379,
    -0.04074946418404579,
    -0.03142806142568588,
    -0.04294605180621147,
    -0.007793652359396219,
    -0.0010622107656672597,
    0.021768718957901,
    -0.02468341775238514,
    0.02609148621559143,
    -0.014939593151211739,
    0.03001999296247959,
    0.00591388251632452,
    -0.023134544491767883,
    -0.025246646255254745,
    -0.027260182425379753,
    0.011686958372592926,
    -0.008694815449416637,
    -0.007321949582546949,
    0.02271212451159954,
    0.012567000463604927,
    0.02578171156346798,
    -0.04263627529144287,
    0.03855288028717041,
    -0.0021173811983317137,
    0.027105294167995453,
    0.023050060495734215,
    -0.016263175755739212,
    0.023866739124059677,
    -0.00021561030007433146,
    -0.002803813898935914,
    0.026936326175928116,
    0.025443775579333305,
    -0.026147808879613876,
    0.06020895391702652,
    -0.0017204821342602372,
    0.006741121876984835,
    0.04080578684806824,
    0.00035773709532804787,
    0.03765171766281128,
    -0.002171943662688136,
    -0.03556777909398079,
    0.018882181495428085,
    0.026781437918543816,
    0.010504181496798992,
    -0.003956669010221958,
    -0.0023514723870903254,
    0.012010813690721989,
    0.0072937882505357265,
    -0.017713485285639763,
    -0.003439204301685095,
    0.0009522054460830986,
    0.02189544588327408,
    -0.023331673815846443,
    0.018910342827439308,
    -0.02365553006529808,
    0.011933369562029839,
    -0.016967210918664932,
    0.005885721184313297,
    0.010039519518613815,
    0.017122097313404083,
    0.006885448936372995,
    -0.005509063135832548,
    -0.011018126271665096,
    -0.021289976313710213,
    0.022669881582260132,
    -0.015826676040887833,
    -0.02661246992647648,
    0.012686685658991337,
    -0.007462756242603064,
    0.03210393339395523,
    -0.004428371321409941,
    0.002807334065437317,
    -0.010828036814928055,
    0.008807460777461529,
    0.04046785086393356,
    0.01871321350336075,
    -0.010384496301412582,
    0.007997822016477585,
    0.02040289342403412,
    0.016826404258608818,
    0.0138905830681324,
    -0.0029340600594878197,
    -0.024345481768250465,
    0.012947178445756435,
    0.014080672524869442,
    0.001226778607815504,
    -0.004900074098259211,
    0.021712396293878555,
    0.001457349630072713,
    -0.006065249443054199,
    0.012728927657008171,
    -0.017755728214979172,
    -0.022500913590192795,
    0.008068225346505642,
    0.027696682140231133,
    -0.03275164216756821,
    -0.009363647550344467,
    -0.02098020166158676,
    -0.033230386674404144,
    -0.01867097243666649,
    -0.011975611560046673,
    -0.02479606494307518,
    0.026823680847883224,
    0.0009196439059451222,
    0.0050796023570001125,
    -0.014418608509004116,
    -0.006417266558855772,
    0.03038609027862549,
    -0.031174609437584877,
    0.008201991207897663,
    -0.03339935466647148,
    -0.0020716190338134766,
    -0.0020592983346432447,
    -0.005787156522274017,
    -0.031456220895051956,
    0.030780348926782608,
    0.019107472151517868,
    0.01929052174091339,
    -0.0011273338459432125,
    -0.021388541907072067,
    0.0005504662985913455,
    -0.00019096912001259625,
    -0.019149715080857277,
    0.021543428301811218,
    0.023472480475902557,
    0.0261759702116251,
    -0.00271228956989944,
    -0.03038609027862549,
    -0.01795285753905773,
    -0.0014159876154735684,
    0.0008523206925019622,
    0.007476836908608675,
    -0.012574040330946445,
    0.05080306529998779,
    0.016418064013123512,
    0.01941724680364132,
    -0.0053647360764443874,
    0.010637948289513588,
    -0.0273165050894022,
    -0.012623323127627373,
    0.014770625159144402,
    -0.0003891985979862511,
    -0.02251499518752098,
    -0.027063053101301193,
    -0.022895174100995064,
    -0.012996460311114788,
    0.004699424374848604,
    -0.020107200369238853,
    -0.005706192459911108,
    -0.01405251119285822,
    0.010109922848641872,
    -0.03280796483159065,
    0.010736512951552868,
    -0.026654712855815887,
    0.004048193339258432,
    -0.01349632441997528,
    0.004407250322401524,
    -0.0016491987043991685,
    -0.02931595966219902,
    0.006272939499467611,
    0.012447314336895943,
    0.011130771599709988,
    0.016516627743840218,
    -0.0532812625169754,
    0.010701310820877552,
    -0.007526119239628315,
    0.01289085578173399,
    -0.0014151075156405568,
    -0.027964215725660324,
    -0.015221206471323967,
    -0.018135905265808105,
    -0.010813956148922443,
    0.0003913987020496279,
    -0.0013579048682004213,
    0.009877591393887997,
    -0.009659341536462307,
    0.010722432285547256,
    -0.028541522100567818,
    -0.004921195097267628,
    0.004009471274912357,
    0.010799875482916832,
    -0.049338676035404205,
    -0.035342488437891006,
    0.03399074450135231,
    0.010124003514647484,
    -0.017065774649381638,
    0.012376911006867886,
    -0.019276440143585205,
    0.017037613317370415,
    0.004541016649454832,
    -0.005054961424320936,
    -0.02771076373755932,
    -0.013566727750003338,
    -6.789386475247738e-07,
    -0.003071346553042531,
    0.006452468223869801,
    -0.02358512580394745,
    0.007321949582546949,
    0.028231747448444366,
    0.011715119704604149,
    0.00436148839071393,
    0.012679645791649818,
    -0.027893811464309692,
    -0.009448131546378136,
    -0.0044741337187588215,
    0.03370913118124008,
    -1.919591704790946e-05,
    0.021979929879307747,
    -0.03179415687918663,
    0.0354551337659359,
    0.0043368469923734665,
    -0.030357928946614265,
    -0.00397074967622757,
    -0.01678416132926941,
    0.05694223940372467,
    -0.02196584828197956,
    0.014826947823166847,
    0.0014555895468220115,
    -0.0012751808390021324,
    0.012665565125644207,
    0.006628476548939943,
    0.011116690933704376,
    0.018178148195147514,
    0.013784978538751602,
    -0.00714242085814476,
    -0.01579851470887661,
    0.0120248943567276,
    0.02161383256316185,
    -0.024077950045466423,
    -0.011665836907923222,
    0.02562682330608368,
    -0.009638220071792603,
    -0.0016342380549758673,
    0.03905978426337242,
    0.000297674210742116,
    0.029146991670131683,
    -0.02299373783171177,
    0.020191684365272522,
    -0.026316776871681213,
    0.0037102571222931147,
    0.03328670933842659,
    0.01291197631508112,
    -0.023725932464003563,
    -0.017234742641448975,
    -0.004076354671269655,
    -0.0014423888642340899,
    0.006350383162498474,
    -0.018994826823472977,
    0.01922011747956276,
    0.002733410568907857,
    0.0115320710465312,
    0.003851063782349229,
    0.002828455064445734,
    0.015319771133363247,
    -0.005322494078427553,
    0.020571861416101456,
    -0.005322494078427553,
    0.019586214795708656,
    0.017783889546990395,
    0.020839395001530647,
    0.0003414562961552292,
    0.022782528772950172,
    -0.00162631762214005,
    0.04221385717391968,
    -0.007688046898692846,
    -0.013235831633210182,
    -0.04573402553796768,
    -0.005597067065536976,
    0.0018674491439014673,
    0.002154342830181122,
    -0.044973667711019516,
    -0.04959212988615036,
    -0.012954218313097954,
    0.01396802719682455,
    0.012820452451705933,
    0.01776980794966221,
    0.04469205439090729,
    -0.008772258646786213,
    -0.010328172706067562,
    -0.010518262162804604,
    -0.009293243288993835,
    0.02338799647986889,
    -0.004678303375840187,
    0.009011629968881607,
    0.001525112777017057,
    -0.025711307302117348,
    0.015305690467357635,
    -0.004442451987415552,
    -0.011884087696671486,
    -0.0046431017108261585,
    0.013862421736121178,
    0.004695904441177845,
    -0.0030889473855495453,
    -0.009194678626954556,
    0.0007871976122260094,
    0.034244194626808167,
    -0.0052344901487231255,
    -0.029372282326221466,
    -0.0017231223173439503,
    0.006132132839411497,
    0.004083395004272461,
    -0.011046287603676319,
    0.00923692062497139,
    0.027893811464309692,
    0.002298669656738639,
    -0.0012919016880914569,
    0.0024306760169565678,
    -0.0008052384364418685,
    -0.004115076269954443,
    0.028865378350019455,
    -0.017671244218945503,
    -0.016418064013123512,
    -0.009370687417685986,
    0.006765763275325298,
    0.008033023215830326,
    0.02385265938937664,
    0.011595433577895164,
    0.033033255487680435,
    0.027175698429346085,
    -0.03590571507811546,
    -0.022782528772950172,
    -0.027640359476208687,
    -0.02200809121131897,
    0.027443230152130127,
    0.003682095790281892,
    -0.011757361702620983,
    0.01418627705425024,
    -0.018530163913965225,
    -0.02012128010392189,
    0.0009170037810690701,
    -0.004160838667303324,
    0.016460305079817772,
    -0.01674192026257515,
    0.0018146466463804245,
    0.01279229111969471,
    0.01115893293172121,
    -0.004773348104208708,
    0.003703216789290309,
    0.007526119239628315,
    -0.0012285386910662055,
    0.0062940604984760284,
    0.0015427136095240712,
    -0.01127861812710762,
    0.0026119647081941366,
    -0.015193045139312744,
    0.0022282663267105818,
    0.02810502238571644,
    0.026711035519838333,
    0.0074416352435946465,
    0.025725388899445534,
    0.023514723405241966,
    -0.010595706291496754,
    -0.02911883033812046,
    -0.03418787196278572,
    -0.003601131960749626,
    0.005252090748399496,
    0.01858648657798767,
    -0.003071346553042531,
    0.03767988085746765,
    0.018445679917931557,
    0.020543700084090233,
    0.012869734317064285,
    -0.00042044007568620145,
    0.006998094264417887,
    -0.0009706863784231246,
    0.009046832099556923,
    0.020529620349407196,
    0.02157158963382244,
    -0.026204131543636322,
    0.011510949581861496,
    0.011539110913872719,
    -0.012827492319047451,
    0.01355968788266182,
    0.03139989823102951,
    0.014390447176992893,
    -0.0211491696536541,
    -0.01524936780333519,
    0.01807958260178566,
    0.0011986172758042812,
    0.013946905732154846,
    -0.026739196851849556,
    -0.011581352911889553,
    -0.03824310749769211,
    -0.002675327705219388,
    -0.005635789129883051,
    -0.021937686949968338,
    0.007378272246569395,
    0.02771076373755932,
    0.00949037354439497,
    0.0059385234490036964,
    0.016136450693011284,
    -0.005935003515332937,
    0.02393714338541031,
    0.012250185012817383,
    -0.02562682330608368,
    -0.007064977195113897,
    -0.009187638759613037,
    0.01784021221101284,
    0.014080672524869442,
    0.004611419979482889,
    -0.020937960594892502,
    -0.008363919332623482,
    -0.01658703200519085,
    0.01650254800915718,
    -0.028034618124365807,
    -0.015615466050803661,
    -0.038017816841602325,
    0.006065249443054199,
    -0.005681551061570644,
    0.03399074450135231,
    -0.025091757997870445,
    -0.03038609027862549,
    0.031259093433618546,
    -0.003625773126259446,
    -0.009856470860540867,
    0.028710490092635155,
    0.001767124398611486,
    -0.029851024970412254,
    -0.0024799583479762077,
    0.0056709907948970795,
    0.0027386907022446394,
    0.005498502403497696,
    0.0009953274857252836,
    0.007885176688432693,
    -0.00010984024265781045,
    -0.00563930906355381,
    0.0018093663966283202,
    -0.0031276694498956203,
    -0.0007524359389208257,
    0.00011429545702412724,
    0.008673693984746933,
    -0.00673056161031127,
    0.026711035519838333,
    0.021191412582993507,
    0.0018832898931577802,
    0.009110194630920887,
    0.00436148839071393,
    -0.0029129390604794025,
    0.016319498419761658,
    -0.00021143010235391557,
    0.03644077852368355,
    -0.005121844355016947,
    0.010609786957502365,
    0.019360924139618874,
    -0.01709393598139286,
    0.026190049946308136,
    -0.00475574703887105,
    0.014981835149228573,
    -0.002274028491228819,
    0.0028442959301173687,
    0.004122116602957249,
    -0.01713617891073227,
    0.017755728214979172,
    0.027837488800287247,
    0.005220409482717514,
    -0.015826676040887833,
    -0.041397176682949066,
    -0.02762627974152565,
    -0.023528803139925003,
    0.014615737833082676,
    -0.0031364697497338057,
    -0.008335758000612259,
    0.001438868697732687,
    -0.026105565950274467,
    -0.002823174698278308,
    0.0031681512482464314,
    0.007286747917532921,
    -0.0036363336257636547,
    -0.02499319426715374,
    -0.00645598815754056,
    0.009926874190568924,
    0.002861896762624383,
    0.015207125805318356,
    -0.004502295050770044,
    0.005512583069503307,
    -0.017037613317370415,
    -0.02110692858695984,
    -0.003847543615847826,
    -0.0006767523009330034,
    0.025162162259221077,
    0.015432416461408138,
    0.01623501442372799,
    0.018797697499394417,
    0.012876775115728378,
    0.0077302888967096806,
    0.01819222792983055,
    0.017037613317370415,
    0.02060002274811268,
    -0.010898440144956112,
    -0.01961437612771988,
    0.019459489732980728,
    -0.016826404258608818,
    -0.012454355135560036,
    0.0017908854642882943,
    0.015897078439593315,
    -0.020726749673485756,
    -0.022303784266114235,
    -2.65800190391019e-05,
    0.03137173876166344,
    0.0023356315214186907,
    -0.007336030248552561,
    -0.018206309527158737,
    -0.029175153002142906,
    -0.008765218779444695,
    0.003770099952816963,
    -0.0023426718544214964,
    -0.01610828936100006,
    -0.0009918073192238808,
    -0.030357928946614265,
    0.010644988156855106,
    -0.016291337087750435,
    0.03500455245375633,
    0.012827492319047451,
    -0.004776868037879467,
    -0.002275788690894842,
    0.03537064790725708,
    0.012447314336895943,
    2.1299767468008213e-05,
    0.0006943531334400177,
    -0.006385584827512503,
    -0.027950134128332138,
    0.011405345052480698,
    -0.019191956147551537,
    -0.006565113551914692,
    0.023331673815846443,
    0.006498230155557394,
    0.0017785648815333843,
    -0.005625228397548199,
    0.012883814983069897,
    -0.003851063782349229,
    -0.03179415687918663,
    0.015728110447525978,
    -0.022881092503666878,
    -0.015474658459424973,
    -0.022655801847577095,
    -0.029484927654266357,
    -0.02727426216006279,
    0.010250729508697987,
    0.003576490795239806,
    -0.014841028489172459,
    0.0018199268961325288,
    0.0011669357772916555,
    0.0032403147779405117,
    -0.002031137002632022,
    -0.02314862608909607,
    0.045565057545900345,
    -0.021782800555229187,
    0.03128725290298462,
    0.03584939241409302,
    0.007666925899684429,
    -0.006279979832470417,
    -0.010483060963451862,
    0.02181096188724041,
    0.007526119239628315,
    0.035511456429958344,
    0.019304601475596428,
    -0.013278073631227016,
    -0.01603788509964943,
    0.03618732839822769,
    -0.0005073442007414997,
    -0.012947178445756435,
    -0.012771169655025005,
    0.02979470230638981,
    0.017699405550956726,
    0.0027474912349134684,
    -0.03627181053161621,
    -0.010447858832776546,
    -0.003083667252212763,
    -0.015362013131380081,
    -0.027091214433312416,
    -0.0003355160297360271,
    -0.001224138424731791,
    -0.019670698791742325,
    -0.01056754495948553,
    0.019445408135652542,
    0.027330584824085236,
    0.010616826824843884,
    0.02137446030974388,
    -0.006392625160515308,
    -0.02962573431432247,
    -0.05744914337992668,
    0.002089219866320491,
    0.006325742229819298,
    0.028780894353985786,
    0.024218756705522537,
    -0.0010146884014829993,
    -0.004551577381789684,
    0.02205033227801323,
    -0.01878361776471138,
    -0.011517990380525589,
    -0.01768532395362854,
    -0.013376638293266296,
    0.03139989823102951,
    -0.016122369095683098,
    0.0024711580481380224,
    -0.008554008789360523,
    -0.024472208693623543,
    -0.008131587877869606,
    -0.04587483033537865,
    -0.04241098463535309,
    -0.02413427270948887,
    -0.007624683901667595,
    0.016967210918664932,
    0.01619277335703373,
    -0.012602201662957668,
    -0.04066498205065727,
    -0.015897078439593315,
    -0.009173558093607426,
    0.016122369095683098,
    -0.001981854671612382,
    0.013017581775784492,
    0.02126181498169899,
    -0.003882745513692498,
    -0.00303086475469172,
    -0.016572952270507812,
    -0.0018903302261605859,
    0.01125749759376049,
    -0.01757267862558365,
    -0.01008176151663065,
    -0.0016280777053907514,
    0.03798965364694595,
    -0.03300509601831436,
    0.027175698429346085,
    0.0010622107656672597,
    0.002552121877670288,
    -0.023444319143891335,
    0.011370142921805382,
    0.0011396544286981225,
    0.004477653652429581,
    0.034018903970718384,
    -0.009067952632904053,
    -0.04176327586174011,
    -0.03844023495912552,
    0.01135606225579977,
    0.04162246733903885,
    0.008265354670584202,
    0.008758177980780602,
    0.007688046898692846,
    0.023092303425073624,
    0.03556777909398079,
    -0.02652798593044281,
    -0.011834804899990559,
    0.0038053016178309917,
    -0.027485473081469536,
    -0.0033635206054896116,
    0.0108843594789505,
    -0.036525264382362366,
    0.01289085578173399,
    0.0005795076722279191,
    0.010616826824843884,
    0.012179781682789326,
    -0.006199016235768795,
    -0.014643899165093899,
    -0.001533913193270564,
    0.00596316484734416,
    -0.04170695319771767,
    0.01224314421415329,
    -0.015263448469340801,
    -0.037116650491952896,
    -0.01669967733323574,
    0.04035520553588867,
    -0.01340479962527752,
    -0.009603018872439861,
    -0.019318683072924614,
    0.021473025903105736,
    0.02837255410850048,
    -0.00019063909712713212,
    0.0030643062200397253,
    0.007617643568664789,
    0.004512855317443609,
    -0.0015559142921119928,
    -0.03784884884953499,
    0.004745186772197485,
    -0.005213369149714708,
    0.015122641809284687,
    0.033033255487680435,
    -0.0130105409771204,
    -0.023162705823779106,
    -0.006258858833462,
    -0.013644171878695488,
    0.001178376260213554,
    -0.026950407773256302,
    0.021078767254948616,
    0.03235738351941109,
    -0.021994009613990784,
    0.004093955270946026,
    0.019389085471630096,
    0.008659613318741322,
    0.04170695319771767,
    -0.01709393598139286,
    -0.007504998240619898,
    -0.00931436475366354,
    0.00581531785428524,
    0.005438659805804491,
    0.0009337245719507337,
    -0.016319498419761658,
    -0.004569177981466055,
    0.01163063570857048,
    0.019586214795708656,
    0.02499319426715374,
    0.031822320073843,
    -0.013827220536768436,
    -0.02773892506957054,
    -0.012362830340862274,
    -0.0058786808513104916,
    0.012060095556080341,
    0.008216071873903275,
    -0.01271484699100256,
    -0.010440818965435028,
    0.006899529602378607,
    -0.012109378352761269,
    0.005804757121950388,
    0.00872297678142786,
    0.0002497119130566716,
    0.0005812677554786205,
    -0.0004114196344744414,
    0.01475654449313879,
    -0.0011299739126116037,
    -0.0036398537922650576,
    -0.0014494291972368956,
    0.0071917031891644,
    0.027767086401581764,
    -0.015826676040887833,
    0.01127861812710762,
    0.010898440144956112,
    0.003632813459262252,
    -0.018304873257875443,
    -0.016136450693011284,
    0.013263992965221405,
    -0.048747286200523376,
    0.007029775530099869,
    0.019741103053092957,
    -0.0026770879048854113,
    0.026598390191793442,
    0.0040693143382668495,
    0.019248278811573982,
    0.0032315142452716827,
    -0.011334940791130066,
    -0.01568586938083172,
    -0.02861192636191845,
    -0.0022775486577302217,
    0.005945563782006502,
    0.006375024560838938,
    -0.024190595373511314,
    -0.015305690467357635,
    0.018220389261841774,
    0.004942316096276045,
    -0.009624139405786991,
    -0.03170967474579811,
    -0.011419425718486309,
    -0.031146448105573654,
    -0.0010146884014829993,
    -0.0037595394533127546,
    0.015545062720775604,
    -0.036609746515750885,
    0.014615737833082676,
    0.0003117548767477274,
    0.018206309527158737,
    -0.0052661714144051075,
    0.20095935463905334,
    0.015221206471323967,
    0.006670718546956778,
    0.01988190971314907,
    0.0026436462067067623,
    0.041284531354904175,
    0.018685052171349525,
    0.005755474790930748,
    -0.010616826824843884,
    0.03599019721150398,
    0.008194951340556145,
    -0.011757361702620983,
    -0.026190049946308136,
    0.011271578259766102,
    0.002291629323735833,
    -0.019037069752812386,
    -0.016178691759705544,
    -0.035342488437891006,
    -0.02582395263016224,
    0.011870007030665874,
    0.025964759290218353,
    -0.020529620349407196,
    -0.007603562902659178,
    -0.026894085109233856,
    0.0229092538356781,
    -0.01564362645149231,
    0.00515000568702817,
    -0.023021899163722992,
    0.009933914057910442,
    -0.004942316096276045,
    -0.008392080664634705,
    -0.000650351052172482,
    -0.006628476548939943,
    0.007709167897701263,
    -0.041875921189785004,
    -0.007152981590479612,
    -0.002251147525385022,
    -0.033033255487680435,
    0.021205492317676544,
    0.0033916819375008345,
    -0.0019519332563504577,
    -0.05080306529998779,
    0.00635742349550128,
    -0.03370913118124008,
    -0.0012496596900746226,
    -0.010518262162804604,
    -0.002923499559983611,
    0.009300284087657928,
    -0.006924170535057783,
    0.026035163551568985,
    -0.015728110447525978,
    -0.04542424902319908,
    0.0053858570754528046,
    0.01834711618721485,
    -0.007681006565690041,
    -0.0029252597596496344,
    0.007638764567673206,
    0.0012558199232444167,
    -0.0019677740056067705,
    0.002230026526376605,
    -0.02538745291531086,
    0.026894085109233856,
    -0.02365553006529808,
    -0.018755456432700157,
    -0.05592843145132065,
    0.03461029380559921,
    -0.02652798593044281,
    -0.007899257354438305,
    -0.009821268729865551,
    0.004111556336283684,
    -0.0022617080248892307,
    -0.025528259575366974,
    -0.009011629968881607,
    0.021289976313710213,
    0.012862694449722767,
    -0.016319498419761658,
    0.033737290650606155,
    0.002154342830181122,
    0.016755999997258186,
    0.01851608417928219,
    -0.003928507678210735,
    -0.010335213504731655,
    -0.00542457913979888,
    0.02326127141714096,
    -0.024429965764284134,
    -0.0042875646613538265,
    0.02483830600976944,
    -0.0013271033531054854,
    -0.009779026731848717,
    -0.02385265938937664,
    -0.01385538186877966,
    -0.020008634775877,
    0.025373371317982674,
    -0.022726204246282578,
    0.0032508752774447203,
    -0.012771169655025005,
    0.020022716373205185,
    0.02734466642141342,
    0.004396690055727959,
    -0.008497686125338078,
    -0.014967754483222961,
    0.03480742126703262,
    0.006783363875001669,
    0.011144852265715599,
    -0.012778210453689098,
    0.012757088989019394,
    -0.01941724680364132,
    0.02510583959519863,
    0.010053600184619427,
    -0.012130498886108398,
    0.006839686539024115,
    -0.03796149417757988,
    0.011496868915855885,
    -0.019206037744879723,
    0.0069065699353814125,
    0.005262651480734348,
    -0.023134544491767883,
    -0.014939593151211739,
    -2.560372195148375e-05,
    0.005713232792913914,
    0.0261759702116251,
    -0.0085258474573493,
    -0.002106820698827505,
    0.004900074098259211,
    -0.015671787783503532,
    -0.022472752258181572,
    -0.029344120994210243,
    0.007107219193130732,
    -0.0057589951902627945,
    -0.0005055841174907982,
    -0.005994846113026142,
    -0.024613015353679657,
    -0.00815270934253931,
    0.013017581775784492,
    -0.0012892615050077438,
    -0.012102337554097176,
    -0.0076598855666816235,
    0.0029252597596496344,
    -0.003910906612873077,
    0.007716208230704069,
    -0.020346570760011673,
    -0.028696410357952118,
    0.016671516001224518,
    -0.0017222422175109386,
    0.017474114894866943,
    -0.025922518223524094,
    -0.006132132839411497,
    0.019867828115820885,
    -0.0013596649514511228,
    0.001261100172996521,
    0.000457181828096509,
    -0.0013323836028575897,
    -0.004921195097267628,
    -0.029428604990243912,
    0.012538839131593704,
    -0.03556777909398079,
    -0.013545607216656208,
    -0.03430051729083061,
    0.03199128806591034,
    0.008293516002595425,
    -0.0051288846880197525,
    -0.006441907491534948,
    0.012017853558063507,
    0.00596316484734416,
    -0.03368096798658371,
    -0.018642811104655266,
    -0.17764176428318024,
    0.010736512951552868,
    0.010328172706067562,
    -0.04083395004272461,
    0.01125749759376049,
    -0.028316231444478035,
    0.01650254800915718,
    -0.005681551061570644,
    -0.006762242875993252,
    -0.01972702145576477,
    0.006607355549931526,
    0.002485238714143634,
    0.0051852078177034855,
    -0.03818678483366966,
    -0.0058399587869644165,
    0.010856198146939278,
    -0.007744369562715292,
    -0.0005579466233029962,
    -0.007652845233678818,
    0.034131549298763275,
    0.048043254762887955,
    -0.03435683995485306,
    0.029766540974378586,
    0.01869913376867771,
    0.013151347637176514,
    -0.01595340110361576,
    -0.007997822016477585,
    0.004769827704876661,
    0.002316270489245653,
    -0.018727295100688934,
    -0.011222295463085175,
    0.00129454187117517,
    0.040890272706747055,
    0.03235738351941109,
    0.017037613317370415,
    0.010912520810961723,
    0.007177622523158789,
    -0.0010815716814249754,
    0.002323310822248459,
    0.01619277335703373,
    0.013158388435840607,
    0.03351199999451637,
    0.028273990377783775,
    -0.007681006565690041,
    -0.017389630898833275,
    0.00460790004581213,
    -0.0005350655410438776,
    -0.01623501442372799,
    0.003344159573316574,
    -0.0213040579110384,
    0.021205492317676544,
    -0.004192520398646593,
    -0.016403982415795326,
    0.0025820431765168905,
    0.02396530471742153,
    0.002031137002632022,
    0.03109012544155121,
    0.007899257354438305,
    0.004502295050770044,
    -0.00021110007946845144,
    -0.0018093663966283202,
    -0.007814773358404636,
    0.015376093797385693,
    -0.0036468941252678633,
    0.002080419333651662,
    -0.0190229881554842,
    0.0024253958836197853,
    0.029879186302423477,
    -0.004368528723716736,
    0.014446769841015339,
    0.004790948703885078,
    0.02538745291531086,
    0.012841572985053062,
    0.0072233849205076694,
    0.002358512720093131,
    0.02837255410850048,
    -0.01175032090395689,
    -0.005431619472801685,
    0.018220389261841774,
    0.008018942549824715,
    -0.01564362645149231,
    0.048916254192590714,
    -0.012390991672873497,
    -0.028090940788388252,
    0.00028249347815290093,
    -0.02126181498169899,
    0.0063644638285040855,
    0.00529433274641633,
    -0.00549146207049489,
    -0.008532887324690819,
    0.013278073631227016,
    -0.006962892599403858,
    -0.001837527728639543,
    -0.028865378350019455,
    -0.029287798330187798,
    0.03170967474579811,
    -0.00817382987588644,
    0.005776595789939165,
    0.02771076373755932,
    -0.01796693727374077,
    0.0045234160497784615,
    0.0022476273588836193,
    -0.03190680220723152,
    -0.022148897871375084,
    -0.003675055457279086,
    0.04142533987760544,
    -0.04683231562376022,
    0.008913065306842327,
    0.01338367909193039,
    -0.0045938193798065186,
    0.0136582525447011,
    0.0010067680850625038,
    0.03779252618551254,
    0.01678416132926941,
    -0.023711852729320526,
    0.013151347637176514,
    0.008385040797293186,
    0.009976156055927277,
    0.00825127400457859,
    -0.029484927654266357,
    0.037004005163908005,
    -0.0012743008555844426,
    -0.016403982415795326,
    0.012778210453689098,
    -0.009258042089641094,
    0.002303950022906065,
    -0.11996732652187347,
    -0.04787428677082062,
    -0.004709985107183456,
    0.028541522100567818,
    -0.014038430526852608,
    -0.003183992113918066,
    0.014334124512970448,
    0.007328989915549755,
    -0.014841028489172459,
    0.013158388435840607,
    -0.011165972799062729,
    -0.014531253837049007,
    -0.007244505919516087,
    0.010771714150905609,
    -0.03618732839822769,
    -0.0057097128592431545,
    -0.0010270089842379093,
    -0.010342254303395748,
    -0.003699696622788906,
    0.004241802729666233,
    0.009187638759613037,
    -0.000972446461673826,
    0.0023761135526001453,
    0.0012505396734923124,
    -0.01685456559062004,
    -0.0049986387602984905,
    -0.029372282326221466,
    0.00011259037273703143,
    0.002291629323735833,
    0.021036524325609207,
    -0.003657454624772072,
    0.021515266969799995,
    -0.03345567733049393,
    -0.020656345412135124,
    -0.00016973810852505267,
    -0.0008074385696090758,
    0.0037208176217973232,
    -0.019079310819506645,
    0.03247002884745598,
    -0.03936956077814102,
    0.009680462069809437,
    -0.014038430526852608,
    0.0003687376156449318,
    0.020177602767944336,
    0.007603562902659178,
    0.008701855316758156,
    0.01595340110361576,
    0.03500455245375633,
    0.012947178445756435,
    -0.01643214374780655,
    -0.03827126696705818,
    -0.0011854165932163596,
    0.013003501109778881,
    -0.014101793058216572,
    0.042467307299375534,
    -0.036609746515750885,
    0.022881092503666878,
    0.013784978538751602,
    -0.0012012573424726725,
    -0.005526663735508919,
    0.00581531785428524,
    0.005973725114017725,
    -0.006086370442062616,
    0.03359648585319519,
    0.02141670323908329,
    0.02134629897773266,
    0.009208759292960167,
    0.0006710320594720542,
    -0.007272667251527309,
    0.002752771368250251,
    -0.0019202516414225101,
    0.004843751434236765,
    -0.045677702873945236,
    0.026654712855815887,
    -0.009525574743747711,
    0.013996188528835773,
    0.014714302495121956,
    -0.008335758000612259,
    0.009370687417685986,
    -0.02264172025024891,
    -0.010806916281580925,
    0.003463845467194915,
    -0.023134544491767883,
    -0.020008634775877,
    0.006121572107076645,
    0.02821766771376133,
    0.0061074914410710335,
    0.01076467428356409,
    0.021318137645721436,
    -0.02982286363840103,
    0.00014146674948278815,
    0.0069065699353814125,
    0.026626551523804665,
    -0.01933276280760765,
    -0.011187094263732433,
    0.0013482243521139026,
    -0.0067376019433140755,
    0.02940044365823269,
    0.0008087586029432714,
    0.009342526085674763,
    -0.024218756705522537,
    -0.022726204246282578,
    -0.06984013319015503,
    0.006639036815613508,
    0.026584308594465256,
    -0.016220934689044952,
    0.025091757997870445,
    -0.028640087693929672,
    0.022346027195453644,
    -0.015925239771604538,
    -0.011517990380525589,
    0.023373916745185852,
    -0.007631724234670401,
    -0.012897895649075508,
    0.004417811054736376,
    -0.007350110914558172,
    0.0006186695536598563,
    -0.018755456432700157,
    0.0406368188560009,
    -0.009046832099556923,
    0.008793380111455917,
    0.007033295929431915,
    0.00970862340182066,
    0.03548329323530197,
    0.016953129321336746,
    -0.0051852078177034855,
    -0.045959316194057465,
    0.01398914773017168,
    -0.00519576808437705,
    0.05567497760057449,
    -0.001088612014427781,
    -0.023641448467969894,
    0.003009743755683303,
    0.017657162621617317,
    0.00834983866661787,
    0.019994555041193962,
    0.031822320073843,
    0.02845703810453415,
    0.039285074919462204,
    0.011327900923788548,
    0.0337936133146286,
    -0.011426465585827827,
    -0.020149441435933113,
    -0.03280796483159065,
    0.028978023678064346,
    0.0023145105224102736,
    -0.008863783441483974,
    -0.024613015353679657,
    0.012278346344828606,
    0.002171943662688136,
    0.03261083737015724,
    0.004973997361958027,
    0.026035163551568985,
    0.0030607860535383224,
    -0.014094753190875053,
    -0.04880360886454582,
    0.01340479962527752,
    0.008307596668601036,
    0.02597884088754654,
    0.0014195077819749713,
    -0.028794974088668823,
    -0.010384496301412582,
    0.01957213506102562,
    0.028034618124365807,
    -0.005502022802829742,
    0.004498774651437998,
    0.012567000463604927,
    -0.03877817094326019,
    -0.041002918034791946,
    -0.027682602405548096,
    0.007519078906625509,
    -0.004614940378814936,
    -0.011194134131073952,
    -0.02514808066189289,
    0.028893539682030678,
    0.014629818499088287,
    0.032047610729932785,
    -0.018009180203080177,
    0.010511222295463085,
    -0.014031389728188515,
    -0.04272076115012169,
    0.015559143386781216,
    0.02417651377618313,
    -0.0251903235912323,
    -0.023669609799981117,
    -0.010525302961468697,
    0.04046785086393356,
    0.004914154764264822,
    -0.03911610692739487,
    -0.003917946945875883,
    -0.0029094188939779997,
    0.008356879465281963,
    0.005667470395565033,
    -0.002085699699819088,
    0.008730016648769379,
    -0.013031662441790104,
    0.012954218313097954,
    -0.004836711101233959,
    -0.0354551337659359,
    -0.015897078439593315,
    0.008420241996645927,
    -0.008061184547841549,
    0.0035324885975569487,
    -0.006579194217920303,
    -0.00023827137192711234,
    0.009173558093607426,
    -0.01524936780333519,
    -0.0069875335320830345,
    -8.690414688317105e-05,
    -0.011151892133057117,
    -0.003703216789290309,
    0.022810690104961395,
    0.020839395001530647,
    -0.012574040330946445,
    -0.004329806659370661,
    0.028865378350019455,
    -0.00673056161031127,
    0.04660702496767044,
    0.024697499349713326,
    -0.012475475668907166,
    0.004681823775172234,
    -0.010940682142972946,
    -0.002323310822248459,
    -0.01550282072275877,
    0.0013271033531054854,
    -0.011116690933704376,
    0.027724843472242355,
    0.026344938203692436,
    0.027598118409514427,
    -0.0266406312584877,
    0.008518806658685207,
    -0.012250185012817383,
    0.0072233849205076694,
    -0.00012859613343607634,
    0.008990509435534477,
    -0.023021899163722992,
    -0.002552121877670288,
    -0.017812050879001617,
    0.009279162622988224,
    0.01584075577557087,
    -0.03528616577386856,
    0.080034539103508,
    -0.005607627797871828,
    -0.019008908420801163,
    0.0006116292206570506,
    0.018614649772644043,
    0.007012174930423498,
    0.013362557627260685,
    -0.012700766324996948,
    -0.0027193299029022455,
    -0.011426465585827827,
    0.007871096022427082,
    -0.018642811104655266,
    -0.003995390608906746,
    -0.02621821127831936,
    -0.003967229276895523,
    0.017023533582687378,
    0.004442451987415552,
    0.031934965401887894,
    0.027063053101301193,
    -0.015629546716809273,
    0.002802053699269891,
    0.030555058270692825,
    -0.008103426545858383,
    -0.020726749673485756,
    -0.018952585756778717,
    -0.01127861812710762,
    0.03148438408970833,
    0.003844023449346423,
    -0.004340367391705513,
    -0.0455087348818779,
    0.027372827753424644,
    0.007047376595437527,
    0.011229336261749268,
    -0.012545878998935223,
    -0.014545334503054619,
    -0.0021455425303429365,
    -0.037708040326833725,
    0.004470613319426775,
    -0.005861079785972834,
    0.02224746160209179,
    -0.02374001406133175,
    0.00559002673253417,
    -0.03466661646962166,
    -0.041678790003061295,
    -0.0023637928534299135,
    0.005737874191254377,
    0.010426738299429417,
    0.004678303375840187,
    -0.043171342462301254
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: healthcare industry",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: bio-informatics",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "# `pronto` [![stars](https://img.shields.io/github/stars/althonos/pronto.svg?style=social&maxage=3600&label=star)](https://github.com/althonos/pronto/stargazers)\n\n*a python frontend to ontologies.*\n\n[![actions](https://img.shields.io/github/actions/workflow/status/althonos/pronto/test.yml?branch=master&logo=github&style=flat-square&maxage=300)](https://github.com/althonos/pronto/actions)\n[![license](https://img.shields.io/badge/license-mit-blue.svg?style=flat-square&maxage=2678400)](https://choosealicense.com/licenses/mit/)\n[![source](https://img.shields.io/badge/source-github-303030.svg?maxage=2678400&style=flat-square)](https://github.com/althonos/pronto/)\n[![docs](https://img.shields.io/readthedocs/pronto?style=flat-square&maxage=3600)](http://pronto.readthedocs.io/en/stable/?badge=stable)\n[![coverage](https://img.shields.io/codecov/c/gh/althonos/pronto?style=flat-square&maxage=3600)](https://codecov.io/gh/althonos/pronto/)\n[![sanity](https://img.shields.io/codacy/grade/157b5fd24e5648ea80580f28399e79a4.svg?style=flat-square&maxage=3600)](https://codacy.com/app/althonos/pronto)\n[![pypi](https://img.shields.io/pypi/v/pronto.svg?style=flat-square&maxage=3600)](https://pypi.python.org/pypi/pronto)\n[![bioconda](https://img.shields.io/conda/vn/bioconda/pronto?style=flat-square&maxage=3600)](https://anaconda.org/bioconda/pronto)\n[![versions](https://img.shields.io/pypi/pyversions/pronto.svg?style=flat-square&maxage=3600)](https://pypi.org/project/pronto/#files)\n[![wheel](https://img.shields.io/pypi/wheel/pronto?style=flat-square&maxage=3600)](https://pypi.org/project/pronto/#files)\n[![changelog](https://img.shields.io/badge/keep%20a-changelog-8a0707.svg?maxage=2678400&style=flat-square)](https://github.com/althonos/pronto/blob/master/changelog.md)\n[![github issues](https://img.shields.io/github/issues/althonos/pronto.svg?style=flat-square&maxage=600)](https://github.com/althonos/pronto/issues)\n[![doi](https://img.shields.io/badge/doi-10.5281%2fzenodo.595572-purple?style=flat-square&maxage=2678400)](https://doi.org/10.5281/zenodo.595572)\n[![downloads](https://img.shields.io/pypi/dm/pronto?style=flat-square&color=303f9f&maxage=86400&label=downloads)](https://pepy.tech/project/pronto)\n\n## \ud83d\udea9 table of contents\n\n- [overview](#%ef%b8%8f-overview)\n- [supported languages](#%ef%b8%8f-supported-languages)\n- [installing](#-installing)\n- [examples](#-examples)\n- [api reference](#-api-reference)\n- [license](#-license)\n\n## \ud83d\uddfa\ufe0f overview\n\npronto is a python library to parse, browse, create, and export\nontologies, supporting several ontology languages and formats. it\nimplement the specifications of the\n[open biomedical ontologies 1.4](http://owlcollab.github.io/oboformat/doc/obo-syntax.html)\nin the form of an safe high-level interface. *if you're only interested in\nparsing obo or obo graphs document, you may wish to consider\n[`fastobo`](https://pypi.org/project/fastobo) instead.*\n\n\n## \ud83c\udff3\ufe0f supported languages\n\n- [open biomedical ontologies 1.4](http://owlcollab.github.io/oboformat/doc/go.format.obo-1_4.html).\n  *because this format is fairly new, not all obo ontologies can be parsed at the\n  moment. see the [obo foundry roadmap](https://github.com/orgs/fastobo/projects/2)\n  listing the compliant ontologies, and don't hesitate to contact their developers\n  to push adoption forward.*\n- [obo graphs](https://github.com/geneontology/obographs) in [json](http://json.org/)\n  format. *the format is not yet stabilized to the results may change from file\n  to file.*\n- [ontology web language 2](https://www.w3.org/tr/owl2-overview/)\n  in [rdf/xml format](https://www.w3.org/tr/2012/rec-owl2-mapping-to-rdf-20121211/).\n  *owl2 ontologies are reverse translated to obo using the mapping defined in the\n  [obo 1.4 semantics](http://owlcollab.github.io/oboformat/doc/obo-syntax.html).*\n\n## \ud83d\udd27 installing\n\n\ninstalling with `pip` is the easiest:\n```console\n# pip install pronto          # if you have the admin rights\n$ pip install pronto --user   # install it in a user-site directory\n```\n\nthere is also a `conda` recipe in the `bioconda` channel:\n```console\n$ conda install -c bioconda pronto\n```\n\nfinally, a development version can be installed from github\nusing `setuptools`, provided you have the right dependencies\ninstalled already:\n```console\n$ git clone https://github.com/althonos/pronto\n$ cd pronto\n# python setup.py install\n```\n\n## \ud83d\udca1 examples\n\nif you're only reading ontologies, you'll only use the `ontology`\nclass, which is the main entry point.\n\n```python\n>>> from pronto import ontology\n```\n\nit can be instantiated from a path to an ontology in one of the supported\nformats, even if the file is compressed:\n```python\n>>> go = ontology(\"tests/data/go.obo.gz\")\n```\n\nloading a file from a persistent url is also supported, although you may also\nwant to use the `ontology.from_obo_library` method if you're using persistent\nurls a lot:\n```python\n>>> cl = ontology(\"http://purl.obolibrary.org/obo/cl.obo\")\n>>> stato = ontology.from_obo_library(\"stato.owl\")\n```\n\n### \ud83c\udff7\ufe0f get a term by accession\n\n`ontology` objects can be used as mappings to access any entity\nthey contain from their identifier in compact form:\n```python\n>>> cl['cl:0002116']\nterm('cl:0002116', name='b220-low cd38-positive unswitched memory b cell')\n```\n\nnote that when loading an owl ontology, uris will be compacted to curies\nwhenever possible:\n\n```python\n>>> aeo = ontology.from_obo_library(\"aeo.owl\")\n>>> aeo[\"aeo:0000078\"]\nterm('aeo:0000078', name='lumen of tube')\n```\n\n### \ud83d\udd8a\ufe0f create a new term from scratch\n\nwe can load an ontology, and edit it locally. here, we add a new protein class\nto the protein ontology.\n```python\n>>> pr = ontology.from_obo_library(\"pr.obo\")\n>>> brh = ms.create_term(\"pr:xxxxxxxx\")\n>>> brh.name = \"bacteriorhodopsin\"\n>>> brh.superclasses().add(pr[\"pr:000001094\"])  # is a rhodopsin-like g-protein\n>>> brh.disjoint_from.add(pr[\"pr:000036194\"])   # disjoint from eukaryotic proteins\n```\n\n### \u270f\ufe0f convert an owl ontology to obo format\n\nthe `ontology.dump` method can be used to serialize an ontology to any of the\nsupported formats (currently obo and obo json):\n```python\n>>> edam = ontology(\"http://edamontology.org/edam.owl\")\n>>> with open(\"edam.obo\", \"wb\") as f:\n...     edam.dump(f, format=\"obo\")\n```\n\n### \ud83c\udf3f find ontology terms without subclasses\n\nthe `terms` method of `ontology` instances can be used to\niterate over all the terms in the ontology (including the\nones that are imported). we can then use the `is_leaf`\nmethod of `term` objects to check is the term is a leaf in the\nclass inclusion graph.\n\n```python\n>>> ms = ontology(\"ms.obo\")\n>>> for term in ms.terms():\n...     if term.is_leaf():\n...         print(term.id)\nms:0000000\nms:1000001\n...\n```\n\n### \ud83e\udd2b silence warnings\n\n`pronto` is explicit about the parts of the code that are doing \nnon-standard assumptions, or missing capabilities to handle certain\nconstructs. it does so by raising warnings with the `warnings` module, \nwhich can get quite verbose. \n\nif you are fine with the inconsistencies, you can manually disable \nwarning reports in your consumer code with the `filterwarnings` function:\n\n```python\nimport warnings\nimport pronto\nwarnings.filterwarnings(\"ignore\", category=pronto.warnings.prontowarning)\n```\n\n<!-- ### \ud83e\udd1d merging several ontologies -->\n\n## \ud83d\udcd6 api reference\n\na complete api reference can be found in the\n[online documentation](https://pronto.readthedocs.io/en/latest/api.html), or\ndirectly from the command line using `pydoc`:\n```console\n$ pydoc pronto.ontology\n```\n\n## \ud83d\udcdc license\n\nthis library is provided under the open-source\n[mit license](https://choosealicense.com/licenses/mit/).\nplease cite this library if you are using it in a scientific\ncontext using the following doi:\n[**10.5281/zenodo.595572**](https://doi.org/10.5281/zenodo.595572)\n",
  "docs_url": null,
  "keywords": "bioinformatics,ontology,obo,owl,convert,parse",
  "license": "mit",
  "name": "pronto",
  "package_url": "https://pypi.org/project/pronto/",
  "project_url": "https://pypi.org/project/pronto/",
  "project_urls": {
    "Bug Tracker": "https://github.com/althonos/pronto/issues",
    "CI": "https://github.com/althonos/pronto/actions",
    "Changelog": "https://pronto.readthedocs.io/en/latest/changes.html",
    "Coverage": "https://app.codecov.io/gh/althonos/pronto",
    "Documentation": "https://pronto.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/althonos/pronto"
  },
  "release_url": "https://pypi.org/project/pronto/2.5.5/",
  "requires_dist": [
    "chardet ~=5.0",
    "fastobo ~=0.12.2",
    "networkx <4.0,>=2.3",
    "python-dateutil ~=2.8"
  ],
  "requires_python": ">=3.7",
  "summary": "python frontend to ontologies.",
  "version": "2.5.5",
  "releases": [],
  "developers": [
    "martin.larralde@embl.de",
    "martin_larralde"
  ],
  "kwds": "ontologies owlcollab owl2 ontology owl",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pronto",
  "homepage": "https://github.com/althonos/pronto",
  "release_count": 76,
  "dependency_ids": [
    "pypi_chardet",
    "pypi_fastobo",
    "pypi_networkx",
    "pypi_python_dateutil"
  ]
}
{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: chemistry",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "<h1 align=\"center\">chgnet</h1>\n\n<h4 align=\"center\">\n\n[![tests](https://github.com/cedergrouphub/chgnet/actions/workflows/test.yml/badge.svg)](https://github.com/cedergrouphub/chgnet/actions/workflows/test.yml)\n[![codacy badge](https://app.codacy.com/project/badge/coverage/e3bdcea0382a495d96408e4f84408e85)](https://app.codacy.com/gh/cedergrouphub/chgnet/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=badge_coverage)\n[![arxiv](https://img.shields.io/badge/arxiv-2302.14231-blue)](https://arxiv.org/abs/2302.14231)\n![github repo size](https://img.shields.io/github/repo-size/cedergrouphub/chgnet)\n[![pypi](https://img.shields.io/pypi/v/chgnet?logo=pypi&logocolor=white)](https://pypi.org/project/chgnet?logo=pypi&logocolor=white)\n[![docs](https://img.shields.io/badge/api-docs-blue)](https://chgnet.lbl.gov)\n[![requires python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg?logo=python&logocolor=white)](https://python.org/downloads)\n\n</h4>\n\na pretrained universal neural network potential for\n**charge**-informed atomistic modeling ([see publication](https://nature.com/articles/s42256-023-00716-3))\n![logo](https://raw.github.com/cedergrouphub/chgnet/main/site/static/chgnet-logo.png)\n**c**rystal **h**amiltonian **g**raph neural **net**work is pretrained on the gga/gga+u static and relaxation trajectories from materials project,\na comprehensive dataset consisting of more than 1.5 million structures from 146k compounds spanning the whole periodic table.\n\nchgnet highlights its ability to study electron interactions and charge distribution\nin atomistic modeling with near dft accuracy. the charge inference is realized by regularizing the atom features with\ndft magnetic moments, which carry rich information about both local ionic environments and charge distribution.\n\npretrained chgnet achieves excellent performance on materials stability prediction from unrelaxed structures according to [matbench discovery](https://matbench-discovery.materialsproject.org) [[repo](https://github.com/janosh/matbench-discovery)].\n\n<slot name=\"metrics-table\" />\n\n## example notebooks\n\n| notebooks                                                                                                                                      | google&nbsp;colab                                                                                                                                        | descriptions                                                                                                                                                                                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [chgnet basics](https://github.com/cedergrouphub/chgnet/blob/main/examples/basics.ipynb)                                                       | [![open in google colab]](https://colab.research.google.com/github/cedergrouphub/chgnet/blob/main/examples/basics.ipynb)                                 | examples for loading pre-trained chgnet, predicting energy, force, stress, magmom as well as running structure optimization and md.                                                                                                                                                                                                                                                                       |\n| [tuning chgnet](https://github.com/cedergrouphub/chgnet/blob/main/examples/fine_tuning.ipynb)                                                  | [![open in google colab]](https://colab.research.google.com/github/cedergrouphub/chgnet/blob/main/examples/fine_tuning.ipynb)                            | examples of fine tuning the pretrained chgnet to your system of interest.                                                                                                                                                                                                                                                                                                                                 |\n| [visualize relaxation](https://github.com/cedergrouphub/chgnet/blob/main/examples/crystaltoolkit_relax_viewer.ipynb)                           | [![open in google colab]](https://colab.research.google.com/github/cedergrouphub/chgnet/blob/main/examples/crystaltoolkit_relax_viewer.ipynb)            | crystal toolkit app that visualizes convergence of atom positions, energies and forces of a structure during chgnet relaxation.                                                                                                                                                                                                                                                                           |\n| [phonon dos + bands](https://github.com/jageo/tutorialatomate2forcefields/blob/main/atomate2_workflow_tutorial/phonon.ipynb)                   | [![open in google colab]](https://colab.research.google.com/github/jageo/tutorialatomate2forcefields/blob/main/atomate2_workflow_tutorial/phonon.ipynb)  | use chgnet with the [`atomate2` phonon workflow](https://github.com/materialsproject/atomate2/blob/3764841109840ccc4d1fec6a84af43f244641021/src/atomate2/forcefields/flows/phonons.py#l33) based on finite displacements as implemented in phonopy to calculate phonon density of states and band structure for `si` ([mp-149](https://legacy.materialsproject.org/materials/mp-149/#phonon-dispersion)). |\n| [elastic tensor + bulk/shear modulus](https://github.com/jageo/tutorialatomate2forcefields/blob/main/atomate2_workflow_tutorial/elastic.ipynb) | [![open in google colab]](https://colab.research.google.com/github/jageo/tutorialatomate2forcefields/blob/main/atomate2_workflow_tutorial/elastic.ipynb) | use chgnet with the [`atomate2` elastic workflow](https://github.com/materialsproject/atomate2/blob/3764841109840ccc4d1fec6a84af43f244641021/src/atomate2/forcefields/flows/elastic.py#l17) based on a stress-strain approach to calculate elastic tensor and derived bulk and shear modulus for `si` ([mp-149](https://legacy.materialsproject.org/materials/mp-149/#elastic-tensor)).                   |\n\n[open in google colab]: https://colab.research.google.com/assets/colab-badge.svg\n\n## installation\n\n```sh\npip install chgnet\n```\n\nif pypi installation fails or you need the latest `main` branch commits, you can install from source:\n\n```sh\npip install git+https://github.com/cedergrouphub/chgnet\n```\n\n## tutorials and docs\n\n[![2023-11-02-sciml-webinar](https://github.com/cedergrouphub/chgnet/assets/30958850/49fe7d89-bf47-4ea0-aca6-f9014d2f41b8)](https://youtu.be/lm148f_1dn4)\n\nsee the [sciml webinar tutorial](https://youtu.be/lm148f_1dn4) on 2023-11-02 and [api docs](https://cedergrouphub.github.io/chgnet/api).\n\n## usage\n\n### direct inference (static calculation)\n\npretrained `chgnet` can predict the energy (ev/atom), force (ev/a), stress (gpa) and\nmagmom ($\\mu_b$) of a given structure.\n\n```python\nfrom chgnet.model.model import chgnet\nfrom pymatgen.core import structure\n\nchgnet = chgnet.load()\nstructure = structure.from_file('examples/mp-18767-limno2.cif')\nprediction = chgnet.predict_structure(structure)\n\nfor key, unit in [\n    (\"energy\", \"ev/atom\"),\n    (\"forces\", \"ev/a\"),\n    (\"stress\", \"gpa\"),\n    (\"magmom\", \"mu_b\"),\n]:\n    print(f\"chgnet-predicted {key} ({unit}):\\n{prediction[key[0]]}\\n\")\n```\n\n### molecular dynamics\n\ncharge-informed molecular dynamics can be simulated with pretrained `chgnet` through `ase` python interface (see below),\nor through [lammps](https://github.com/advancesoftcorp/lammps/tree/based-on-lammps_2jun2022/src/ml-chgnet).\n\n```python\nfrom chgnet.model.model import chgnet\nfrom chgnet.model.dynamics import moleculardynamics\nfrom pymatgen.core import structure\nimport warnings\nwarnings.filterwarnings(\"ignore\", module=\"pymatgen\")\nwarnings.filterwarnings(\"ignore\", module=\"ase\")\n\nstructure = structure.from_file(\"examples/mp-18767-limno2.cif\")\nchgnet = chgnet.load()\n\nmd = moleculardynamics(\n    atoms=structure,\n    model=chgnet,\n    ensemble=\"nvt\",\n    temperature=1000,  # in k\n    timestep=2,  # in femto-seconds\n    trajectory=\"md_out.traj\",\n    logfile=\"md_out.log\",\n    loginterval=100,\n)\nmd.run(50)  # run a 0.1 ps md simulation\n```\n\nthe md defaults to cuda if available, to manually set device to cpu or mps:\n`moleculardynamics(use_device='cpu')`.\n\nmd outputs are saved to the ase trajectory file, to visualize the md trajectory\nand magnetic moments after the md run:\n\n```python\nfrom ase.io.trajectory import trajectory\nfrom pymatgen.io.ase import aseatomsadaptor\nfrom chgnet.utils import solve_charge_by_mag\n\ntraj = trajectory(\"md_out.traj\")\nmag = traj[-1].get_magnetic_moments()\n\n# get the non-charge-decorated structure\nstructure = aseatomsadaptor.get_structure(traj[-1])\nprint(structure)\n\n# get the charge-decorated structure\nstruct_with_chg = solve_charge_by_mag(structure)\nprint(struct_with_chg)\n```\n\nto manipulate the md trajectory, convert to other data formats, calculate mean square displacement, etc,\nplease refer to [ase trajectory documentation](https://wiki.fysik.dtu.dk/ase/ase/io/trajectory.html).\n\n### structure optimization\n\n`chgnet` can perform fast structure optimization and provide site-wise magnetic moments. this makes it ideal for pre-relaxation and\n`magmom` initialization in spin-polarized dft.\n\n```python\nfrom chgnet.model import structoptimizer\n\nrelaxer = structoptimizer()\nresult = relaxer.relax(structure)\nprint(\"chgnet relaxed structure\", result[\"final_structure\"])\nprint(\"relaxed total energy in ev:\", result['trajectory'].energies[-1])\n```\n\n### available weights\n\nchgnet 0.3.0 is released with new pretrained weights! (release date: 10/22/23)\n\n`chgnet.load()` now loads `0.3.0` by default,\nprevious `0.2.0` version can be loaded with `chgnet.load('0.2.0')`\n\n- [chgnet_0.3.0](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/pretrained/0.3.0/readme.md)\n- [chgnet_0.2.0](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/pretrained/0.2.0/readme.md)\n\n### model training / fine-tune\n\nfine-tuning will help achieve better accuracy if a high-precision study is desired. to train/tune a `chgnet`, you need to define your data in a\npytorch `dataset` object. the example datasets are provided in `data/dataset.py`\n\n```python\nfrom chgnet.data.dataset import structuredata, get_train_val_test_loader\nfrom chgnet.trainer import trainer\n\ndataset = structuredata(\n    structures=list_of_structures,\n    energies=list_of_energies,\n    forces=list_of_forces,\n    stresses=list_of_stresses,\n    magmoms=list_of_magmoms,\n)\ntrain_loader, val_loader, test_loader = get_train_val_test_loader(\n    dataset, batch_size=32, train_ratio=0.9, val_ratio=0.05\n)\ntrainer = trainer(\n    model=chgnet,\n    targets=\"efsm\",\n    optimizer=\"adam\",\n    criterion=\"mse\",\n    learning_rate=1e-2,\n    epochs=50,\n    use_device=\"cuda\",\n)\n\ntrainer.train(train_loader, val_loader, test_loader)\n```\n\n#### notes for training\n\ncheck [fine-tuning example notebook](https://github.com/cedergrouphub/chgnet/blob/main/examples/fine_tuning.ipynb)\n\n1. the target quantity used for training should be energy/atom (not total energy) if you're fine-tuning the pretrained `chgnet`.\n2. the pretrained dataset of `chgnet` comes from gga+u dft with [`materialsproject2020compatibility`](https://github.com/materialsproject/pymatgen/blob/v2023.2.28/pymatgen/entries/compatibility.py#l826-l1102) corrections applied.\n   the parameter for vasp is described in [`mprelaxset`](https://github.com/materialsproject/pymatgen/blob/v2023.2.28/pymatgen/io/vasp/sets.py#l862-l879).\n   if you're fine-tuning with [`mprelaxset`](https://github.com/materialsproject/pymatgen/blob/v2023.2.28/pymatgen/io/vasp/sets.py#l862-l879), it is recommended to apply the [`mp2020`](https://github.com/materialsproject/pymatgen/blob/v2023.2.28/pymatgen/entries/compatibility.py#l826-l1102)\n   compatibility to your energy labels so that they're consistent with the pretrained dataset.\n3. if you're fine-tuning to functionals other than gga, we recommend you refit the [`atomref`](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/model/composition_model.py).\n4. `chgnet` stress is in units of gpa, and the unit conversion has already been included in\n   [`dataset.py`](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/data/dataset.py). so `vasp` stress can be directly fed to `structuredata`\n5. to save time from graph conversion step for each training, we recommend you use [`graphdata`](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/data/dataset.py) defined in\n   [`dataset.py`](https://github.com/cedergrouphub/chgnet/blob/main/chgnet/data/dataset.py), which reads graphs directly from saved directory. to create saved graphs,\n   see [`examples/make_graphs.py`](https://github.com/cedergrouphub/chgnet/blob/main/examples/make_graphs.py).\n\n## mptrj dataset\n\nthe materials project trajectory (mptrj) dataset used to pretrain chgnet is available at\n[figshare](https://figshare.com/articles/dataset/materials_project_trjectory_mptrj_dataset/23713842).\n\nthe mptrj dataset consists of all the gga/gga+u dft calculations from the september 2022 [materials project](https://next-gen.materialsproject.org/).\nby using the mptrj dataset, users agree to abide the [materials project terms of use](https://next-gen.materialsproject.org/about/terms).\n\n## reference\n\nif you use chgnet or mptrj dataset, please cite [this paper](https://nature.com/articles/s42256-023-00716-3):\n\n```bib\n@article{deng_2023_chgnet,\n    title={chgnet as a pretrained universal neural network potential for charge-informed atomistic modelling},\n    doi={10.1038/s42256-023-00716-3},\n    journal={nature machine intelligence},\n    author={deng, bowen and zhong, peichen and jun, kyujung and riebesell, janosh and han, kevin and bartel, christopher j. and ceder, gerbrand},\n    year={2023},\n    pages={1\u201311}\n}\n```\n\n## development & bugs\n\n`chgnet` is under active development, if you encounter any bugs in installation and usage,\nplease open an [issue](https://github.com/cedergrouphub/chgnet/issues). we appreciate your contributions!\n",
  "docs_url": null,
  "keywords": "",
  "license": "modified bsd",
  "name": "chgnet",
  "package_url": "https://pypi.org/project/chgnet/",
  "project_url": "https://pypi.org/project/chgnet/",
  "project_urls": {
    "Package": "https://pypi.org/project/chgnet",
    "Source": "https://github.com/CederGroupHub/chgnet"
  },
  "release_url": "https://pypi.org/project/chgnet/0.3.3/",
  "requires_dist": [
    "ase",
    "cython >=0.29.26",
    "numpy >=1.21.6",
    "nvidia-ml-py3 >=7.352.0",
    "pymatgen >=2023.10.11",
    "torch >=1.11.0",
    "lazydocs ; extra == 'docs'",
    "crystal-toolkit ; extra == 'examples'",
    "pandas ; extra == 'examples'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.9",
  "summary": "pretrained universal neural network potential for charge-informed atomistic modeling",
  "version": "0.3.3",
  "releases": [],
  "developers": [
    "bowendeng@berkeley.edu"
  ],
  "kwds": "badge_coverage badge arxiv yml decorated",
  "license_kwds": "modified bsd",
  "libtype": "pypi",
  "id": "pypi_chgnet",
  "homepage": "",
  "release_count": 10,
  "dependency_ids": [
    "pypi_ase",
    "pypi_crystal_toolkit",
    "pypi_cython",
    "pypi_lazydocs",
    "pypi_numpy",
    "pypi_nvidia_ml_py3",
    "pypi_pandas",
    "pypi_pymatgen",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_torch"
  ]
}
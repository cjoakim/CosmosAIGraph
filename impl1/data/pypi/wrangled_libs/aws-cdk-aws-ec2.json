{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::ec2\n# amazon ec2 construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthe `@aws-cdk/aws-ec2` package contains primitives for setting up networking and\ninstances.\n\n```python\nimport aws_cdk.aws_ec2 as ec2\n```\n\n## vpc\n\nmost projects need a virtual private cloud to provide security by means of\nnetwork partitioning. this is achieved by creating an instance of\n`vpc`:\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\n```\n\nall default constructs require ec2 instances to be launched inside a vpc, so\nyou should generally start by defining a vpc whenever you need to launch\ninstances for your project.\n\n### subnet types\n\na vpc consists of one or more subnets that instances can be placed into. cdk\ndistinguishes three different subnet types:\n\n* **public (`subnettype.public`)** - public subnets connect directly to the internet using an\n  internet gateway. if you want your instances to have a public ip address\n  and be directly reachable from the internet, you must place them in a\n  public subnet.\n* **private with internet access (`subnettype.private_with_nat`)** - instances in private subnets are not directly routable from the\n  internet, and connect out to the internet via a nat gateway. by default, a\n  nat gateway is created in every public subnet for maximum availability. be\n  aware that you will be charged for nat gateways.\n* **isolated (`subnettype.private_isolated`)** - isolated subnets do not route from or to the internet, and\n  as such do not require nat gateways. they can only connect to or be\n  connected to from other instances in the same vpc. a default vpc configuration\n  will not include isolated subnets,\n\na default vpc configuration will create public and **private** subnets. however, if\n`natgateways:0` **and** `subnetconfiguration` is undefined, default vpc configuration\nwill create public and **isolated** subnets. see [*advanced subnet configuration*](#advanced-subnet-configuration)\nbelow for information on how to change the default subnet configuration.\n\nconstructs using the vpc will \"launch instances\" (or more accurately, create\nelastic network interfaces) into one or more of the subnets. they all accept\na property called `subnetselection` (sometimes called `vpcsubnets`) to allow\nyou to select in what subnet to place the enis, usually defaulting to\n*private* subnets if the property is omitted.\n\nif you would like to save on the cost of nat gateways, you can use\n*isolated* subnets instead of *private* subnets (as described in advanced\n*subnet configuration*). if you need private instances to have\ninternet connectivity, another option is to reduce the number of nat gateways\ncreated by setting the `natgateways` property to a lower value (the default\nis one nat gateway per availability zone). be aware that this may have\navailability implications for your application.\n\n[read more about\nsubnets](https://docs.aws.amazon.com/amazonvpc/latest/userguide/vpc_subnets.html).\n\n### control over availability zones\n\nby default, a vpc will spread over at most 3 availability zones available to\nit. to change the number of availability zones that the vpc will spread over,\nspecify the `maxazs` property when defining it.\n\nthe number of availability zones that are available depends on the *region*\nand *account* of the stack containing the vpc. if the [region and account are\nspecified](https://docs.aws.amazon.com/cdk/latest/guide/environments.html) on\nthe stack, the cli will [look up the existing availability\nzones](https://docs.aws.amazon.com/awsec2/latest/userguide/using-regions-availability-zones.html#using-regions-availability-zones-describe)\nand get an accurate count. if region and account are not specified, the stack\ncould be deployed anywhere and it will have to make a safe choice, limiting\nitself to 2 availability zones.\n\ntherefore, to get the vpc to spread over 3 or more availability zones, you\nmust specify the environment where the stack will be deployed.\n\nyou can gain full control over the availability zones selection strategy by overriding the stack's [`get availabilityzones()`](https://github.com/aws/aws-cdk/blob/master/packages/@aws-cdk/core/lib/stack.ts) method:\n\n```text\n// this example is only available in typescript\n\nclass mystack extends stack {\n\n  constructor(scope: construct, id: string, props?: stackprops) {\n    super(scope, id, props);\n\n    // ...\n  }\n\n  get availabilityzones(): string[] {\n    return ['us-west-2a', 'us-west-2b'];\n  }\n\n}\n```\n\nnote that overriding the `get availabilityzones()` method will override the default behavior for all constructs defined within the stack.\n\n### choosing subnets for resources\n\nwhen creating resources that create elastic network interfaces (such as\ndatabases or instances), there is an option to choose which subnets to place\nthem in. for example, a vpc endpoint by default is placed into a subnet in\nevery availability zone, but you can override which subnets to use. the property\nis typically called one of `subnets`, `vpcsubnets` or `subnetselection`.\n\nthe example below will place the endpoint into two azs (`us-east-1a` and `us-east-1c`),\nin isolated subnets:\n\n```python\n# vpc: ec2.vpc\n\n\nec2.interfacevpcendpoint(self, \"vpc endpoint\",\n    vpc=vpc,\n    service=ec2.interfacevpcendpointservice(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.subnetselection(\n        subnet_type=ec2.subnettype.private_isolated,\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)\n```\n\nyou can also specify specific subnet objects for granular control:\n\n```python\n# vpc: ec2.vpc\n# subnet1: ec2.subnet\n# subnet2: ec2.subnet\n\n\nec2.interfacevpcendpoint(self, \"vpc endpoint\",\n    vpc=vpc,\n    service=ec2.interfacevpcendpointservice(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.subnetselection(\n        subnets=[subnet1, subnet2]\n    )\n)\n```\n\nwhich subnets are selected is evaluated as follows:\n\n* `subnets`: if specific subnet objects are supplied, these are selected, and no other\n  logic is used.\n* `subnettype`/`subnetgroupname`: otherwise, a set of subnets is selected by\n  supplying either type or name:\n\n  * `subnettype` will select all subnets of the given type.\n  * `subnetgroupname` should be used to distinguish between multiple groups of subnets of\n    the same type (for example, you may want to separate your application instances and your\n    rds instances into two distinct groups of isolated subnets).\n  * if neither are given, the first available subnet group of a given type that\n    exists in the vpc will be used, in this order: private, then isolated, then public.\n    in short: by default enis will preferentially be placed in subnets not connected to\n    the internet.\n* `availabilityzones`/`oneperaz`: finally, some availability-zone based filtering may be done.\n  this filtering by availability zones will only be possible if the vpc has been created or\n  looked up in a non-environment agnostic stack (so account and region have been set and\n  availability zones have been looked up).\n\n  * `availabilityzones`: only the specific subnets from the selected subnet groups that are\n    in the given availability zones will be returned.\n  * `oneperaz`: per availability zone, a maximum of one subnet will be returned (useful for resource\n    types that do not allow creating two enis in the same availability zone).\n* `subnetfilters`: additional filtering on subnets using any number of user-provided filters which\n  extend `subnetfilter`.  the following methods on the `subnetfilter` class can be used to create\n  a filter:\n\n  * `byids`: chooses subnets from a list of ids\n  * `availabilityzones`: chooses subnets in the provided list of availability zones\n  * `oneperaz`: chooses at most one subnet per availability zone\n  * `containsipaddresses`: chooses a subnet which contains *any* of the listed ip addresses\n  * `bycidrmask`: chooses subnets that have the provided cidr netmask\n\n### using nat instances\n\nby default, the `vpc` construct will create nat *gateways* for you, which\nare managed by aws. if you would prefer to use your own managed nat\n*instances* instead, specify a different value for the `natgatewayprovider`\nproperty, as follows:\n\n```python\n# configure the `natgatewayprovider` when defining a vpc\nnat_gateway_provider = ec2.natprovider.instance(\n    instance_type=ec2.instancetype(\"t3.small\")\n)\n\nvpc = ec2.vpc(self, \"myvpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # the 'natgateways' parameter now controls the number of nat instances\n    nat_gateways=2\n)\n```\n\nthe construct will automatically search for the most recent nat gateway ami.\nif you prefer to use a custom ami, use `machineimage: machineimage.genericlinux({ ... })` and configure the right ami id for the\nregions you want to deploy to.\n\nby default, the nat instances will route all traffic. to control what traffic\ngets routed, pass a custom value for `defaultallowedtraffic` and access the\n`natinstanceprovider.connections` member after having passed the nat provider to\nthe vpc:\n\n```python\n# instance_type: ec2.instancetype\n\n\nprovider = ec2.natprovider.instance(\n    instance_type=instance_type,\n    default_allowed_traffic=ec2.nattrafficdirection.outbound_only\n)\nec2.vpc(self, \"thevpc\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.peer.ipv4(\"1.2.3.4/8\"), ec2.port.tcp(80))\n```\n\n### advanced subnet configuration\n\nif the default vpc configuration (public and private subnets spanning the\nsize of the vpc) don't suffice for you, you can configure what subnets to\ncreate by specifying the `subnetconfiguration` property. it allows you\nto configure the number and size of all subnets. specifying an advanced\nsubnet configuration could look like this:\n\n```python\nvpc = ec2.vpc(self, \"thevpc\",\n    # 'cidr' configures the ip range and size of the entire vpc.\n    # the ip space will be divided over the configured subnets.\n    cidr=\"10.0.0.0/21\",\n\n    # 'maxazs' configures the maximum number of availability zones to use\n    max_azs=3,\n\n    # 'subnetconfiguration' specifies the \"subnet groups\" to create.\n    # every subnet group will have a subnet for each az, so this\n    # configuration will create `3 groups \u00d7 3 azs = 9` subnets.\n    subnet_configuration=[ec2.subnetconfiguration(\n        # 'subnettype' controls internet access, as described above.\n        subnet_type=ec2.subnettype.public,\n\n        # 'name' is used to name this particular subnet group. you will have to\n        # use the name for subnet selection if you have more than one subnet\n        # group of the same type.\n        name=\"ingress\",\n\n        # 'cidrmask' specifies the ip addresses in the range of of individual\n        # subnets in the group. each of the subnets in this group will contain\n        # `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n        # usable ip addresses.\n        #\n        # if 'cidrmask' is left out the available address space is evenly\n        # divided across the remaining subnet groups.\n        cidr_mask=24\n    ), ec2.subnetconfiguration(\n        cidr_mask=24,\n        name=\"application\",\n        subnet_type=ec2.subnettype.private_with_nat\n    ), ec2.subnetconfiguration(\n        cidr_mask=28,\n        name=\"database\",\n        subnet_type=ec2.subnettype.private_isolated,\n\n        # 'reserved' can be used to reserve ip address space. no resources will\n        # be created for this subnet, but the ip range will be kept available for\n        # future creation of this subnet, or even for future subdivision.\n        reserved=true\n    )\n    ]\n)\n```\n\nthe example above is one possible configuration, but the user can use the\nconstructs above to implement many other network configurations.\n\nthe `vpc` from the above configuration in a region with three\navailability zones will be the following:\n\nsubnet name       |type      |ip block      |az|features\n------------------|----------|--------------|--|--------\ningresssubnet1    |`public`  |`10.0.0.0/24` |#1|nat gateway\ningresssubnet2    |`public`  |`10.0.1.0/24` |#2|nat gateway\ningresssubnet3    |`public`  |`10.0.2.0/24` |#3|nat gateway\napplicationsubnet1|`private` |`10.0.3.0/24` |#1|route to nat in ingresssubnet1\napplicationsubnet2|`private` |`10.0.4.0/24` |#2|route to nat in ingresssubnet2\napplicationsubnet3|`private` |`10.0.5.0/24` |#3|route to nat in ingresssubnet3\ndatabasesubnet1   |`isolated`|`10.0.6.0/28` |#1|only routes within the vpc\ndatabasesubnet2   |`isolated`|`10.0.6.16/28`|#2|only routes within the vpc\ndatabasesubnet3   |`isolated`|`10.0.6.32/28`|#3|only routes within the vpc\n\n### accessing the internet gateway\n\nif you need access to the internet gateway, you can get its id like so:\n\n```python\n# vpc: ec2.vpc\n\n\nigw_id = vpc.internet_gateway_id\n```\n\nfor a vpc with only `isolated` subnets, this value will be undefined.\n\nthis is only supported for vpcs created in the stack - currently you're\nunable to get the id for imported vpcs. to do that you'd have to specifically\nlook up the internet gateway by name, which would require knowing the name\nbeforehand.\n\nthis can be useful for configuring routing using a combination of gateways:\nfor more information see [routing](#routing) below.\n\n#### routing\n\nit's possible to add routes to any subnets using the `addroute()` method. if for\nexample you want an isolated subnet to have a static route via the default\ninternet gateway created for the public subnet - perhaps for routing a vpn\nconnection - you can do so like this:\n\n```python\nvpc = ec2.vpc(self, \"vpc\",\n    subnet_configuration=[ec2.subnetconfiguration(\n        subnet_type=ec2.subnettype.public,\n        name=\"public\"\n    ), ec2.subnetconfiguration(\n        subnet_type=ec2.subnettype.private_isolated,\n        name=\"isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"staticroute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.routertype.gateway,\n    destination_cidr_block=\"8.8.8.8/32\"\n)\n```\n\n*note that we cast to `subnet` here because the list of subnets only returns an\n`isubnet`.*\n\n### reserving subnet ip space\n\nthere are situations where the ip space for a subnet or number of subnets\nwill need to be reserved. this is useful in situations where subnets would\nneed to be added after the vpc is originally deployed, without causing ip\nrenumbering for existing subnets. the ip space for a subnet may be reserved\nby setting the `reserved` subnetconfiguration property to true, as shown\nbelow:\n\n```python\nvpc = ec2.vpc(self, \"thevpc\",\n    nat_gateways=1,\n    subnet_configuration=[ec2.subnetconfiguration(\n        cidr_mask=26,\n        name=\"public\",\n        subnet_type=ec2.subnettype.public\n    ), ec2.subnetconfiguration(\n        cidr_mask=26,\n        name=\"application1\",\n        subnet_type=ec2.subnettype.private_with_nat\n    ), ec2.subnetconfiguration(\n        cidr_mask=26,\n        name=\"application2\",\n        subnet_type=ec2.subnettype.private_with_nat,\n        reserved=true\n    ), ec2.subnetconfiguration(\n        cidr_mask=27,\n        name=\"database\",\n        subnet_type=ec2.subnettype.private_isolated\n    )\n    ]\n)\n```\n\nin the example above, the subnet for application2 is not actually provisioned\nbut its ip space is still reserved. if in the future this subnet needs to be\nprovisioned, then the `reserved: true` property should be removed. reserving\nparts of the ip space prevents the other subnets from getting renumbered.\n\n### sharing vpcs between stacks\n\nif you are creating multiple `stack`s inside the same cdk application, you\ncan reuse a vpc defined in one stack in another by simply passing the vpc\ninstance around:\n\n```python\n#\n# stack1 creates the vpc\n#\nclass stack1(cdk.stack):\n\n    def __init__(self, scope, id, *, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        self.vpc = ec2.vpc(self, \"vpc\")\n\n#\n# stack2 consumes the vpc\n#\nclass stack2(cdk.stack):\n    def __init__(self, scope, id, *, vpc, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, vpc=vpc, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        # pass the vpc to a construct that needs it\n        constructthattakesavpc(self, \"construct\",\n            vpc=vpc\n        )\n\nstack1 = stack1(app, \"stack1\")\nstack2 = stack2(app, \"stack2\",\n    vpc=stack1.vpc\n)\n```\n\n### importing an existing vpc\n\nif your vpc is created outside your cdk app, you can use `vpc.fromlookup()`.\nthe cdk cli will search for the specified vpc in the the stack's region and\naccount, and import the subnet configuration. looking up can be done by vpc\nid, but more flexibly by searching for a specific tag on the vpc.\n\nsubnet types will be determined from the `aws-cdk:subnet-type` tag on the\nsubnet if it exists, or the presence of a route to an internet gateway\notherwise. subnet names will be determined from the `aws-cdk:subnet-name` tag\non the subnet if it exists, or will mirror the subnet type otherwise (i.e.\na public subnet will have the name `\"public\"`).\n\nthe result of the `vpc.fromlookup()` operation will be written to a file\ncalled `cdk.context.json`. you must commit this file to source control so\nthat the lookup values are available in non-privileged environments such\nas ci build steps, and to ensure your template builds are repeatable.\n\nhere's how `vpc.fromlookup()` can be used:\n\n```python\nvpc = ec2.vpc.from_lookup(stack, \"vpc\",\n    # this imports the default vpc but you can also\n    # specify a 'vpcname' or 'tags'.\n    is_default=true\n)\n```\n\n`vpc.fromlookup` is the recommended way to import vpcs. if for whatever\nreason you do not want to use the context mechanism to look up a vpc at\nsynthesis time, you can also use `vpc.fromvpcattributes`. this has the\nfollowing limitations:\n\n* every subnet group in the vpc must have a subnet in each availability zone\n  (for example, each az must have both a public and private subnet). asymmetric\n  vpcs are not supported.\n* all vpcid, subnetid, routetableid, ... parameters must either be known at\n  synthesis time, or they must come from deploy-time list parameters whose\n  deploy-time lengths are known at synthesis time.\n\nusing `vpc.fromvpcattributes()` looks like this:\n\n```python\nvpc = ec2.vpc.from_vpc_attributes(self, \"vpc\",\n    vpc_id=\"vpc-1234\",\n    availability_zones=[\"us-east-1a\", \"us-east-1b\"],\n\n    # either pass literals for all ids\n    public_subnet_ids=[\"s-12345\", \"s-67890\"],\n\n    # or: import a list of known length\n    private_subnet_ids=fn.import_list_value(\"privatesubnetids\", 2),\n\n    # or: split an imported string to a list of known length\n    isolated_subnet_ids=fn.split(\",\", ssm.stringparameter.value_for_string_parameter(self, \"myparameter\"), 2)\n)\n```\n\n## allowing connections\n\nin aws, all network traffic in and out of **elastic network interfaces** (enis)\nis controlled by **security groups**. you can think of security groups as a\nfirewall with a set of rules. by default, security groups allow no incoming\n(ingress) traffic and all outgoing (egress) traffic. you can add ingress rules\nto them to allow incoming traffic streams. to exert fine-grained control over\negress traffic, set `allowalloutbound: false` on the `securitygroup`, after\nwhich you can add egress traffic rules.\n\nyou can manipulate security groups directly:\n\n```python\nmy_security_group = ec2.securitygroup(self, \"securitygroup\",\n    vpc=vpc,\n    description=\"allow ssh access to ec2 instances\",\n    allow_all_outbound=true\n)\nmy_security_group.add_ingress_rule(ec2.peer.any_ipv4(), ec2.port.tcp(22), \"allow ssh access from the world\")\n```\n\nall constructs that create enis on your behalf (typically constructs that create\nec2 instances or other vpc-connected resources) will all have security groups\nautomatically assigned. those constructs have an attribute called\n**connections**, which is an object that makes it convenient to update the\nsecurity groups. if you want to allow connections between two constructs that\nhave security groups, you have to add an **egress** rule to one security group,\nand an **ingress** rule to the other. the connections object will automatically\ntake care of this for you:\n\n```python\n# load_balancer: elbv2.applicationloadbalancer\n# app_fleet: autoscaling.autoscalinggroup\n# db_fleet: autoscaling.autoscalinggroup\n\n\n# allow connections from anywhere\nload_balancer.connections.allow_from_any_ipv4(ec2.port.tcp(443), \"allow inbound https\")\n\n# the same, but an explicit ip address\nload_balancer.connections.allow_from(ec2.peer.ipv4(\"1.2.3.4/32\"), ec2.port.tcp(443), \"allow inbound https\")\n\n# allow connection between autoscalinggroups\napp_fleet.connections.allow_to(db_fleet, ec2.port.tcp(443), \"app can call database\")\n```\n\n### connection peers\n\nthere are various classes that implement the connection peer part:\n\n```python\n# app_fleet: autoscaling.autoscalinggroup\n# db_fleet: autoscaling.autoscalinggroup\n\n\n# simple connection peers\npeer = ec2.peer.ipv4(\"10.0.0.0/16\")\npeer = ec2.peer.any_ipv4()\npeer = ec2.peer.ipv6(\"::0/0\")\npeer = ec2.peer.any_ipv6()\npeer = ec2.peer.prefix_list(\"pl-12345\")\napp_fleet.connections.allow_to(peer, ec2.port.tcp(443), \"allow outbound https\")\n```\n\nany object that has a security group can itself be used as a connection peer:\n\n```python\n# fleet1: autoscaling.autoscalinggroup\n# fleet2: autoscaling.autoscalinggroup\n# app_fleet: autoscaling.autoscalinggroup\n\n\n# these automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allow_to(fleet2, ec2.port.tcp(80), \"allow between fleets\")\n\napp_fleet.connections.allow_from_any_ipv4(ec2.port.tcp(80), \"allow from load balancer\")\n```\n\n### port ranges\n\nthe connections that are allowed are specified by port ranges. a number of classes provide\nthe connection specifier:\n\n```python\nec2.port.tcp(80)\nec2.port.tcp_range(60000, 65535)\nec2.port.all_tcp()\nec2.port.all_traffic()\n```\n\n> note: this set is not complete yet; for example, there is no library support for icmp at the moment.\n> however, you can write your own classes to implement those.\n\n### default ports\n\nsome constructs have default ports associated with them. for example, the\nlistener of a load balancer does (it's the public port), or instances of an\nrds database (it's the port the database is accepting connections on).\n\nif the object you're calling the peering method on has a default port associated with it, you can call\n`allowdefaultportfrom()` and omit the port specifier. if the argument has an associated default port, call\n`allowdefaultportto()`.\n\nfor example:\n\n```python\n# listener: elbv2.applicationlistener\n# app_fleet: autoscaling.autoscalinggroup\n# rds_database: rds.databasecluster\n\n\n# port implicit in listener\nlistener.connections.allow_default_port_from_any_ipv4(\"allow public\")\n\n# port implicit in peer\napp_fleet.connections.allow_default_port_to(rds_database, \"fleet can access database\")\n```\n\n### security group rules\n\nby default, security group wills be added inline to the security group in the output cloud formation\ntemplate, if applicable.  this includes any static rules by ip address and port range.  this\noptimization helps to minimize the size of the template.\n\nin some environments this is not desirable, for example if your security group access is controlled\nvia tags. you can disable inline rules per security group or globally via the context key\n`@aws-cdk/aws-ec2.securitygroupdisableinlinerules`.\n\n```python\nmy_security_group_without_inline_rules = ec2.securitygroup(self, \"securitygroup\",\n    vpc=vpc,\n    description=\"allow ssh access to ec2 instances\",\n    allow_all_outbound=true,\n    disable_inline_rules=true\n)\n# this will add the rule as an external cloud formation construct\nmy_security_group_without_inline_rules.add_ingress_rule(ec2.peer.any_ipv4(), ec2.port.tcp(22), \"allow ssh access from the world\")\n```\n\n### importing an existing security group\n\nif you know the id and the configuration of the security group to import, you can use `securitygroup.fromsecuritygroupid`:\n\n```python\nsg = ec2.securitygroup.from_security_group_id(self, \"securitygroupimport\", \"sg-1234\",\n    allow_all_outbound=true\n)\n```\n\nalternatively, use lookup methods to import security groups if you do not know the id or the configuration details. method `securitygroup.fromlookupbyname` looks up a security group if the secruity group id is unknown.\n\n```python\nsg = ec2.securitygroup.from_lookup_by_name(self, \"securitygrouplookup\", \"security-group-name\", vpc)\n```\n\nif the security group id is known and configuration details are unknown, use method `securitygroup.fromlookupbyid` instead. this method will lookup property `allowalloutbound` from the current configuration of the security group.\n\n```python\nsg = ec2.securitygroup.from_lookup_by_id(self, \"securitygrouplookup\", \"sg-1234\")\n```\n\nthe result of `securitygroup.fromlookupbyname` and `securitygroup.fromlookupbyid` operations will be written to a file called `cdk.context.json`. you must commit this file to source control so that the lookup values are available in non-privileged environments such as ci build steps, and to ensure your template builds are repeatable.\n\n### cross stack connections\n\nif you are attempting to add a connection from a peer in one stack to a peer in a different stack, sometimes it is necessary to ensure that you are making the connection in\na specific stack in order to avoid a cyclic reference. if there are no other dependencies between stacks then it will not matter in which stack you make\nthe connection, but if there are existing dependencies (i.e. stack1 already depends on stack2), then it is important to make the connection in the dependent stack (i.e. stack1).\n\nwhenever you make a `connections` function call, the ingress and egress security group rules will be added to the stack that the calling object exists in.\nso if you are doing something like `peer1.connections.allowfrom(peer2)`, then the security group rules (both ingress and egress) will be created in `peer1`'s stack.\n\nas an example, if we wanted to allow a connection from a security group in one stack (egress) to a security group in a different stack (ingress),\nwe would make the connection like:\n\n**if stack1 depends on stack2**\n\n```python\n# stack 1\n# stack1: stack\n# stack2: stack\n\n\nsg1 = ec2.securitygroup(stack1, \"sg1\",\n    allow_all_outbound=false,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# stack 2\nsg2 = ec2.securitygroup(stack2, \"sg2\",\n    allow_all_outbound=false,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# `connections.allowto` on `sg1` since we want the\n# rules to be created in stack1\nsg1.connections.allow_to(sg2, ec2.port.tcp(3333))\n```\n\nin this case both the ingress rule for `sg2` and the egress rule for `sg1` will both be created\nin `stack 1` which avoids the cyclic reference.\n\n**if stack2 depends on stack1**\n\n```python\n# stack 1\n# stack1: stack\n# stack2: stack\n\n\nsg1 = ec2.securitygroup(stack1, \"sg1\",\n    allow_all_outbound=false,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# stack 2\nsg2 = ec2.securitygroup(stack2, \"sg2\",\n    allow_all_outbound=false,  # if this is `true` then no egress rule will be created\n    vpc=vpc\n)\n\n# `connections.allowfrom` on `sg2` since we want the\n# rules to be created in stack2\nsg2.connections.allow_from(sg1, ec2.port.tcp(3333))\n```\n\nin this case both the ingress rule for `sg2` and the egress rule for `sg1` will both be created\nin `stack 2` which avoids the cyclic reference.\n\n## machine images (amis)\n\namis control the os that gets launched when you start your ec2 instance. the ec2\nlibrary contains constructs to select the ami you want to use.\n\ndepending on the type of ami, you select it a different way. here are some\nexamples of things you might want to use:\n\n```python\n# pick the right amazon linux edition. all arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.machineimage.latest_amazon_linux(\n    generation=ec2.amazonlinuxgeneration.amazon_linux,\n    edition=ec2.amazonlinuxedition.standard,\n    virtualization=ec2.amazonlinuxvirt.hvm,\n    storage=ec2.amazonlinuxstorage.general_purpose,\n    cpu_type=ec2.amazonlinuxcputype.x86_64\n)\n\n# pick a windows edition to use\nwindows = ec2.machineimage.latest_windows(ec2.windowsversion.windows_server_2019_english_full_base)\n\n# read ami id from ssm parameter store\nssm = ec2.machineimage.from_ssm_parameter(\"/my/ami\", os=ec2.operatingsystemtype.linux)\n\n# look up the most recent image matching a set of ami filters.\n# in this case, look up the nat instance ami, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.machineimage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# for other custom (linux) images, instantiate a `genericlinuximage` with\n# a map giving the ami to in for each region:\nlinux = ec2.machineimage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# for other custom (windows) images, instantiate a `genericwindowsimage` with\n# a map giving the ami to in for each region:\ngeneric_windows = ec2.machineimage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n```\n\n> note: the amis selected by `machineimage.lookup()` will be cached in\n> `cdk.context.json`, so that your autoscalinggroup instances aren't replaced while\n> you are making unrelated changes to your cdk app.\n>\n> to query for the latest ami again, remove the relevant cache entry from\n> `cdk.context.json`, or use the `cdk context` command. for more information, see\n> [runtime context](https://docs.aws.amazon.com/cdk/latest/guide/context.html) in the cdk\n> developer guide.\n>\n> `machineimage.genericlinux()`, `machineimage.genericwindows()` will use `cfnmapping` in\n> an agnostic stack.\n\n## special vpc configurations\n\n### vpn connections to a vpc\n\ncreate your vpc with vpn connections by specifying the `vpnconnections` props (keys are construct `id`s):\n\n```python\nvpc = ec2.vpc(self, \"myvpc\",\n    vpn_connections={\n        \"dynamic\": ec2.vpnconnectionoptions( # dynamic routing (bgp)\n            ip=\"1.2.3.4\"),\n        \"static\": ec2.vpnconnectionoptions( # static routing\n            ip=\"4.5.6.7\",\n            static_routes=[\"192.168.10.0/24\", \"192.168.20.0/24\"\n            ])\n    }\n)\n```\n\nto create a vpc that can accept vpn connections, set `vpngateway` to `true`:\n\n```python\nvpc = ec2.vpc(self, \"myvpc\",\n    vpn_gateway=true\n)\n```\n\nvpn connections can then be added:\n\n```python\nvpc.add_vpn_connection(\"dynamic\",\n    ip=\"1.2.3.4\"\n)\n```\n\nby default, routes will be propagated on the route tables associated with the private subnets. if no\nprivate subnets exist, isolated subnets are used. if no isolated subnets exist, public subnets are\nused. use the `vpc` property `vpnroutepropagation` to customize this behavior.\n\nvpn connections expose [metrics (cloudwatch.metric)](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-cloudwatch/readme.md) across all tunnels in the account/region and per connection:\n\n```python\n# across all tunnels in the account/region\nall_data_out = ec2.vpnconnection.metric_all_tunnel_data_out()\n\n# for a specific vpn connection\nvpn_connection = vpc.add_vpn_connection(\"dynamic\",\n    ip=\"1.2.3.4\"\n)\nstate = vpn_connection.metric_tunnel_state()\n```\n\n### vpc endpoints\n\na vpc endpoint enables you to privately connect your vpc to supported aws services and vpc endpoint services powered by privatelink without requiring an internet gateway, nat device, vpn connection, or aws direct connect connection. instances in your vpc do not require public ip addresses to communicate with resources in the service. traffic between your vpc and the other service does not leave the amazon network.\n\nendpoints are virtual devices. they are horizontally scaled, redundant, and highly available vpc components that allow communication between instances in your vpc and services without imposing availability risks or bandwidth constraints on your network traffic.\n\n```python\n# add gateway endpoints when creating the vpc\nvpc = ec2.vpc(self, \"myvpc\",\n    gateway_endpoints={\n        \"s3\": ec2.gatewayvpcendpointoptions(\n            service=ec2.gatewayvpcendpointawsservice.s3\n        )\n    }\n)\n\n# alternatively gateway endpoints can be added on the vpc\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"dynamodbendpoint\",\n    service=ec2.gatewayvpcendpointawsservice.dynamodb\n)\n\n# this allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.policystatement( # restrict to listing and describing tables\n        principals=[iam.anyprincipal()],\n        actions=[\"dynamodb:describetable\", \"dynamodb:listtables\"],\n        resources=[\"*\"]))\n\n# add an interface endpoint\nvpc.add_interface_endpoint(\"ecrdockerendpoint\",\n    service=ec2.interfacevpcendpointawsservice.ecr_docker\n)\n```\n\nby default, cdk will place a vpc endpoint in one subnet per az. if you wish to override the azs cdk places the vpc endpoint in,\nuse the `subnets` parameter as follows:\n\n```python\n# vpc: ec2.vpc\n\n\nec2.interfacevpcendpoint(self, \"vpc endpoint\",\n    vpc=vpc,\n    service=ec2.interfacevpcendpointservice(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # choose which availability zones to place the vpc endpoint in, based on\n    # available azs\n    subnets=ec2.subnetselection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)\n```\n\nper the [aws documentation](https://aws.amazon.com/premiumsupport/knowledge-center/interface-endpoint-availability-zone/), not all\nvpc endpoint services are available in all azs. if you specify the parameter `lookupsupportedazs`, cdk attempts to discover which\nazs an endpoint service is available in, and will ensure the vpc endpoint is not placed in a subnet that doesn't match those azs.\nthese azs will be stored in cdk.context.json.\n\n```python\n# vpc: ec2.vpc\n\n\nec2.interfacevpcendpoint(self, \"vpc endpoint\",\n    vpc=vpc,\n    service=ec2.interfacevpcendpointservice(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # choose which availability zones to place the vpc endpoint in, based on\n    # available azs\n    lookup_supported_azs=true\n)\n```\n\npre-defined aws services are defined in the [interfacevpcendpointawsservice](lib/vpc-endpoint.ts) class, and can be used to\ncreate vpc endpoints without having to configure name, ports, etc. for example, a keyspaces endpoint can be created for\nuse in your vpc:\n\n```python\n# vpc: ec2.vpc\n\n\nec2.interfacevpcendpoint(self, \"vpc endpoint\",\n    vpc=vpc,\n    service=ec2.interfacevpcendpointawsservice.keyspaces\n)\n```\n\n#### security groups for interface vpc endpoints\n\nby default, interface vpc endpoints create a new security group and traffic is **not**\nautomatically allowed from the vpc cidr.\n\nuse the `connections` object to allow traffic to flow to the endpoint:\n\n```python\n# my_endpoint: ec2.interfacevpcendpoint\n\n\nmy_endpoint.connections.allow_default_port_from_any_ipv4()\n```\n\nalternatively, existing security groups can be used by specifying the `securitygroups` prop.\n\n### vpc endpoint services\n\na vpc endpoint service enables you to expose a network load balancer(s) as a provider service to consumers, who connect to your service over a vpc endpoint. you can restrict access to your service via allowed principals (anything that extends arnprincipal), and require that new connections be manually accepted.\n\n```python\n# network_load_balancer1: elbv2.networkloadbalancer\n# network_load_balancer2: elbv2.networkloadbalancer\n\n\nec2.vpcendpointservice(self, \"endpointservice\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=true,\n    allowed_principals=[iam.arnprincipal(\"arn:aws:iam::123456789012:root\")]\n)\n```\n\nendpoint services support private dns, which makes it easier for clients to connect to your service by automatically setting up dns in their vpc.\nyou can enable private dns on an endpoint service like so:\n\n```python\nfrom aws_cdk.aws_route53 import hostedzone, vpcendpointservicedomainname\n# zone: hostedzone\n# vpces: ec2.vpcendpointservice\n\n\nvpcendpointservicedomainname(self, \"endpointdomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)\n```\n\nnote: the domain name must be owned (registered through route53) by the account the endpoint service is in, or delegated to the account.\nthe vpcendpointservicedomainname will handle the aws side of domain verification, the process for which can be found\n[here](https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html)\n\n### client vpn endpoint\n\naws client vpn is a managed client-based vpn service that enables you to securely access your aws\nresources and resources in your on-premises network. with client vpn, you can access your resources\nfrom any location using an openvpn-based vpn client.\n\nuse the `addclientvpnendpoint()` method to add a client vpn endpoint to a vpc:\n\n```python\nvpc.add_client_vpn_endpoint(\"endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    # mutual authentication\n    client_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\",\n    # user-based authentication\n    user_based_authentication=ec2.clientvpnuserbasedauthentication.federated(saml_provider)\n)\n```\n\nthe endpoint must use at least one [authentication method](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html):\n\n* mutual authentication with a client certificate\n* user-based authentication (directory or federated)\n\nif user-based authentication is used, the [self-service portal url](https://docs.aws.amazon.com/vpn/latest/clientvpn-user/self-service-portal.html)\nis made available via a cloudformation output.\n\nby default, a new security group is created, and logging is enabled. moreover, a rule to\nauthorize all users to the vpc cidr is created.\n\nto customize authorization rules, set the `authorizealluserstovpccidr` prop to `false`\nand use `addauthorizationrule()`:\n\n```python\nendpoint = vpc.add_client_vpn_endpoint(\"endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.clientvpnuserbasedauthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=false\n)\n\nendpoint.add_authorization_rule(\"rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)\n```\n\nuse `addroute()` to configure network routes:\n\n```python\nendpoint = vpc.add_client_vpn_endpoint(\"endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.clientvpnuserbasedauthentication.federated(saml_provider)\n)\n\n# client-to-client access\nendpoint.add_route(\"route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.clientvpnroutetarget.local()\n)\n```\n\nuse the `connections` object of the endpoint to allow traffic to other security groups.\n\n## instances\n\nyou can use the `instance` class to start up a single ec2 instance. for production setups, we recommend\nyou use an `autoscalinggroup` from the `aws-autoscaling` module instead, as autoscalinggroups will take\ncare of restarting your instance if it ever fails.\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n\n\n# aws linux\nec2.instance(self, \"instance1\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.amazonlinuximage()\n)\n\n# aws linux 2\nec2.instance(self, \"instance2\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.amazonlinuximage(\n        generation=ec2.amazonlinuxgeneration.amazon_linux_2\n    )\n)\n\n# aws linux 2 with kernel 5.x\nec2.instance(self, \"instance3\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.amazonlinuximage(\n        generation=ec2.amazonlinuxgeneration.amazon_linux_2,\n        kernel=ec2.amazonlinuxkernel.kernel5_x\n    )\n)\n\n# aws linux 2022\nec2.instance(self, \"instance4\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.amazonlinuximage(\n        generation=ec2.amazonlinuxgeneration.amazon_linux_2022\n    )\n)\n```\n\n### configuring instances using cloudformation init (cfn-init)\n\ncloudformation init allows you to configure your instances by writing files to them, installing software\npackages, starting services and running arbitrary commands. by default, if any of the instance setup\ncommands throw an error; the deployment will fail and roll back to the previously known good state.\nthe following documentation also applies to `autoscalinggroup`s.\n\nfor the full set of capabilities of this system, see the documentation for\n[`aws::cloudformation::init`](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-resource-init.html).\nhere is an example of applying some configuration to an instance:\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n# machine_image: ec2.imachineimage\n\n\nec2.instance(self, \"instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # showing the most complex setup, if you have simpler requirements\n    # you can use `cloudformationinit.fromelements()`.\n    init=ec2.cloudformationinit.from_config_sets(\n        config_sets={\n            # applies the configs below in this order\n            \"default\": [\"yumpreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.initconfig([\n                # install an amazon linux package using yum\n                ec2.initpackage.yum(\"git\")\n            ]),\n            \"config\": ec2.initconfig([\n                # create a json file from tokens (can also create other files)\n                ec2.initfile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": stack.of(self).stack_id,\n                    \"stack_name\": stack.of(self).stack_name,\n                    \"region\": stack.of(self).region\n                }),\n\n                # create a group and user\n                ec2.initgroup.from_name(\"my-group\"),\n                ec2.inituser.from_name(\"my-user\"),\n\n                # install an rpm from the internet\n                ec2.initpackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/everything/x86_64/packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.applycloudformationinitoptions(\n        # optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # optional, how long the installation is expected to take (5 minutes by default)\n        timeout=duration.minutes(30),\n\n        # optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=true,\n\n        # optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=true\n    )\n)\n```\n\nyou can have services restarted after the init process has made changes to the system.\nto do that, instantiate an `initservicerestarthandle` and pass it to the config elements\nthat need to trigger the restart and the service itself. for example, the following\nconfig writes a config file for nginx, extracts an archive to the root directory, and then\nrestarts nginx so that it picks up the new config and files:\n\n```python\n# my_bucket: s3.bucket\n\n\nhandle = ec2.initservicerestarthandle()\n\nec2.cloudformationinit.from_elements(\n    ec2.initfile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.initsource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.initservice.enable(\"nginx\",\n        service_restart_handle=handle\n    ))\n```\n\n### bastion hosts\n\na bastion host functions as an instance used to access servers and resources in a vpc without open up the complete vpc on a network level.\nyou can use bastion hosts using a standard ssh connection targeting port 22 on the host. as an alternative, you can connect the ssh connection\nfeature of aws systems manager session manager, which does not need an opened security group. (https://aws.amazon.com/about-aws/whats-new/2019/07/session-manager-launches-tunneling-support-for-ssh-and-scp/)\n\na default bastion host for use via ssm can be configured like:\n\n```python\nhost = ec2.bastionhostlinux(self, \"bastionhost\", vpc=vpc)\n```\n\nif you want to connect from the internet using ssh, you need to place the host into a public subnet. you can then configure allowed source hosts.\n\n```python\nhost = ec2.bastionhostlinux(self, \"bastionhost\",\n    vpc=vpc,\n    subnet_selection=ec2.subnetselection(subnet_type=ec2.subnettype.public)\n)\nhost.allow_ssh_access_from(ec2.peer.ipv4(\"1.2.3.4/32\"))\n```\n\nas there are no ssh public keys deployed on this machine, you need to use [ec2 instance connect](https://aws.amazon.com/de/blogs/compute/new-using-amazon-ec2-instance-connect-for-ssh-access-to-your-ec2-instances/)\nwith the command `aws ec2-instance-connect send-ssh-public-key` to provide your ssh public key.\n\nebs volume for the bastion host can be encrypted like:\n\n```python\nhost = ec2.bastionhostlinux(self, \"bastionhost\",\n    vpc=vpc,\n    block_devices=[ec2.blockdevice(\n        device_name=\"ebsbastionhost\",\n        volume=ec2.blockdevicevolume.ebs(10,\n            encrypted=true\n        )\n    )]\n)\n```\n\n### block devices\n\nto add ebs block device mappings, specify the `blockdevices` property. the following example sets the ebs-backed\nroot device (`/dev/sda1`) size to 50 gib, and adds another ebs-backed device mapped to `/dev/sdm` that is 100 gib in\nsize:\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n# machine_image: ec2.imachineimage\n\n\nec2.instance(self, \"instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.blockdevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.blockdevicevolume.ebs(50)\n    ), ec2.blockdevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.blockdevicevolume.ebs(100)\n    )\n    ]\n)\n```\n\nit is also possible to encrypt the block devices. in this example we will create an customer managed key encrypted ebs-backed root device:\n\n```python\nfrom aws_cdk.aws_kms import key\n\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n# machine_image: ec2.imachineimage\n\n\nkms_key = key(self, \"kmskey\")\n\nec2.instance(self, \"instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.blockdevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.blockdevicevolume.ebs(50,\n            encrypted=true,\n            kms_key=kms_key\n        )\n    )\n    ]\n)\n```\n\n### volumes\n\nwhereas a `blockdevicevolume` is an ebs volume that is created and destroyed as part of the creation and destruction of a specific instance. a `volume` is for when you want an ebs volume separate from any particular instance. a `volume` is an ebs block device that can be attached to, or detached from, any instance at any time. some types of `volume`s can also be attached to multiple instances at the same time to allow you to have shared storage between those instances.\n\na notable restriction is that a volume can only be attached to instances in the same availability zone as the volume itself.\n\nthe following demonstrates how to create a 500 gib encrypted volume in the `us-west-2a` availability zone, and give a role the ability to attach that volume to a specific instance:\n\n```python\n# instance: ec2.instance\n# role: iam.role\n\n\nvolume = ec2.volume(self, \"volume\",\n    availability_zone=\"us-west-2a\",\n    size=size.gibibytes(500),\n    encrypted=true\n)\n\nvolume.grant_attach_volume(role, [instance])\n```\n\n#### instances attaching volumes to themselves\n\nif you need to grant an instance the ability to attach/detach an ebs volume to/from itself, then using `grantattachvolume` and `grantdetachvolume` as outlined above\nwill lead to an unresolvable circular reference between the instance role and the instance. in this case, use `grantattachvolumebyresourcetag` and `grantdetachvolumebyresourcetag` as follows:\n\n```python\n# instance: ec2.instance\n# volume: ec2.volume\n\n\nattach_grant = volume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ndetach_grant = volume.grant_detach_volume_by_resource_tag(instance.grant_principal, [instance])\n```\n\n#### attaching volumes\n\nthe amazon ec2 documentation for\n[linux instances](https://docs.aws.amazon.com/awsec2/latest/userguide/amazonebs.html) and\n[windows instances](https://docs.aws.amazon.com/awsec2/latest/windowsguide/ebs-volumes.html) contains information on how\nto attach and detach your volumes to/from instances, and how to format them for use.\n\nthe following is a sample skeleton of ec2 userdata that can be used to attach a volume to the linux instance that it is running on:\n\n```python\n# instance: ec2.instance\n# volume: ec2.volume\n\n\nvolume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ntarget_device = \"/dev/xvdz\"\ninstance.user_data.add_commands(\"token=$(curl -ssfx put \\\"http://169.254.169.254/latest/api/token\\\" -h \\\"x-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"instance_id=$(curl -ssfh \\\"x-aws-ec2-metadata-token: $token\\\" http://169.254.169.254/latest/meta-data/instance-id)\", f\"aws --region {stack.of(this).region} ec2 attach-volume --volume-id {volume.volumeid} --instance-id $instance_id --device {targetdevice}\", f\"while ! test -e {targetdevice}; do sleep 1; done\")\n```\n\n#### tagging volumes\n\nyou can configure [tag propagation on volume creation](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-properties-ec2-instance.html#cfn-ec2-instance-propagatetagstovolumeoncreation).\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n# machine_image: ec2.imachineimage\n\n\nec2.instance(self, \"instance\",\n    vpc=vpc,\n    machine_image=machine_image,\n    instance_type=instance_type,\n    propagate_tags_to_volume_on_creation=true\n)\n```\n\n### configuring instance metadata service (imds)\n\n#### toggling imdsv1\n\nyou can configure [ec2 instance metadata service](https://docs.aws.amazon.com/awsec2/latest/userguide/ec2-instance-metadata.html) options to either\nallow both imdsv1 and imdsv2 or enforce imdsv2 when interacting with the imds.\n\nto do this for a single `instance`, you can use the `requireimdsv2` property.\nthe example below demonstrates imdsv2 being required on a single `instance`:\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n# machine_image: ec2.imachineimage\n\n\nec2.instance(self, \"instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    require_imdsv2=true\n)\n```\n\nyou can also use the either the `instancerequireimdsv2aspect` for ec2 instances or the `launchtemplaterequireimdsv2aspect` for ec2 launch templates\nto apply the operation to multiple instances or launch templates, respectively.\n\nthe following example demonstrates how to use the `instancerequireimdsv2aspect` to require imdsv2 for all ec2 instances in a stack:\n\n```python\naspect = ec2.instancerequireimdsv2aspect()\naspects.of(self).add(aspect)\n```\n\n## vpc flow logs\n\nvpc flow logs is a feature that enables you to capture information about the ip traffic going to and from network interfaces in your vpc. flow log data can be published to amazon cloudwatch logs and amazon s3. after you've created a flow log, you can retrieve and view its data in the chosen destination. ([https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html](https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html)).\n\nby default, a flow log will be created with cloudwatch logs as the destination.\n\nyou can create a flow log like this:\n\n```python\n# vpc: ec2.vpc\n\n\nec2.flowlog(self, \"flowlog\",\n    resource_type=ec2.flowlogresourcetype.from_vpc(vpc)\n)\n```\n\nor you can add a flow log to a vpc by using the addflowlog method like this:\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\n\nvpc.add_flow_log(\"flowlog\")\n```\n\nyou can also add multiple flow logs with different destinations.\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\n\nvpc.add_flow_log(\"flowlogs3\",\n    destination=ec2.flowlogdestination.to_s3()\n)\n\nvpc.add_flow_log(\"flowlogcloudwatch\",\n    traffic_type=ec2.flowlogtraffictype.reject\n)\n```\n\nby default, the cdk will create the necessary resources for the destination. for the cloudwatch logs destination\nit will create a cloudwatch logs log group as well as the iam role with the necessary permissions to publish to\nthe log group. in the case of an s3 destination, it will create the s3 bucket.\n\nif you want to customize any of the destination resources you can provide your own as part of the `destination`.\n\n*cloudwatch logs*\n\n```python\n# vpc: ec2.vpc\n\n\nlog_group = logs.loggroup(self, \"mycustomloggroup\")\n\nrole = iam.role(self, \"mycustomrole\",\n    assumed_by=iam.serviceprincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.flowlog(self, \"flowlog\",\n    resource_type=ec2.flowlogresourcetype.from_vpc(vpc),\n    destination=ec2.flowlogdestination.to_cloud_watch_logs(log_group, role)\n)\n```\n\n*s3*\n\n```python\n# vpc: ec2.vpc\n\n\nbucket = s3.bucket(self, \"mycustombucket\")\n\nec2.flowlog(self, \"flowlog\",\n    resource_type=ec2.flowlogresourcetype.from_vpc(vpc),\n    destination=ec2.flowlogdestination.to_s3(bucket)\n)\n\nec2.flowlog(self, \"flowlogwithkeyprefix\",\n    resource_type=ec2.flowlogresourcetype.from_vpc(vpc),\n    destination=ec2.flowlogdestination.to_s3(bucket, \"prefix/\")\n)\n```\n\n## user data\n\nuser data enables you to run a script when your instances start up.  in order to configure these scripts you can add commands directly to the script\nor you can use the userdata's convenience functions to aid in the creation of your script.\n\na user data could be configured to run a script found in an asset through the following:\n\n```python\nfrom aws_cdk.aws_s3_assets import asset\n\n# instance: ec2.instance\n\n\nasset = asset(self, \"asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)\n```\n\n### multipart user data\n\nin addition, to above the `multipartuserdata` can be used to change instance startup behavior. multipart user data are composed\nfrom separate parts forming archive. the most common parts are scripts executed during instance set-up. however, there are other\nkinds, too.\n\nthe advantage of multipart archive is in flexibility when it's needed to add additional parts or to use specialized parts to\nfine tune instance startup. some services (like aws batch) support only `multipartuserdata`.\n\nthe parts can be executed at different moment of instance start-up and can serve a different purpose. this is controlled by `contenttype` property.\nfor common scripts, `text/x-shellscript; charset=\"utf-8\"` can be used as content type.\n\nin order to create archive the `multipartuserdata` has to be instantiated. than, user can add parts to multipart archive using `addpart`. the `multipartbody` contains methods supporting creation of body parts.\n\nif the very custom part is required, it can be created using `multipartuserdata.fromrawbody`, in this case full control over content type,\ntransfer encoding, and body properties is given to the user.\n\nbelow is an example for creating multipart user data with single body part responsible for installing `awscli` and configuring maximum size\nof storage used by docker containers:\n\n```python\nboot_hook_conf = ec2.userdata.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'options=\\\"${options} --storage-opt dm.basesize=40g\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.userdata.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo packages installed \u3089\u3068 > /var/tmp/setup\")\n\nmultipart_user_data = ec2.multipartuserdata()\n# the docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.multipartbody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# execute the rest of setup\nmultipart_user_data.add_part(ec2.multipartbody.from_user_data(setup_commands))\n\nec2.launchtemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)\n```\n\nfor more information see\n[specifying multiple user data blocks using a mime multi part archive](https://docs.aws.amazon.com/amazonecs/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data)\n\n#### using add*command on multipartuserdata\n\nto use the `add*command` methods, that are inherited from the `userdata` interface, on `multipartuserdata` you must add a part\nto the `multipartuserdata` and designate it as the reciever for these methods. this is accomplished by using the `adduserdatapart()`\nmethod on `multipartuserdata` with the `makedefault` argument set to `true`:\n\n```python\nmultipart_user_data = ec2.multipartuserdata()\ncommands_user_data = ec2.userdata.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.multipartbody.shell_script, true)\n\n# adding commands to the multipartuserdata adds them to commandsuserdata, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")\n```\n\nwhen used on an ec2 instance, the above `multipartuserdata` will create both `multi.txt` and `userdata.txt` in `/root`.\n\n## importing existing subnet\n\nto import an existing subnet, call `subnet.fromsubnetattributes()` or\n`subnet.fromsubnetid()`. only if you supply the subnet's availability zone\nand route table ids when calling `subnet.fromsubnetattributes()` will you be\nable to use the cdk features that use these values (such as selecting one\nsubnet per az).\n\nimporting an existing subnet looks like this:\n\n```python\n# supply all properties\nsubnet1 = ec2.subnet.from_subnet_attributes(self, \"subnetfromattributes\",\n    subnet_id=\"s-1234\",\n    availability_zone=\"pub-az-4465\",\n    route_table_id=\"rt-145\"\n)\n\n# supply only subnet id\nsubnet2 = ec2.subnet.from_subnet_id(self, \"subnetfromid\", \"s-1234\")\n```\n\n## launch templates\n\na launch template is a standardized template that contains the configuration information to launch an instance.\nthey can be used when launching instances on their own, through amazon ec2 auto scaling, ec2 fleet, and spot fleet.\nlaunch templates enable you to store launch parameters so that you do not have to specify them every time you launch\nan instance. for information on launch templates please see the\n[official documentation](https://docs.aws.amazon.com/awsec2/latest/userguide/ec2-launch-templates.html).\n\nthe following demonstrates how to create a launch template with an amazon machine image, and security group.\n\n```python\n# vpc: ec2.vpc\n\n\ntemplate = ec2.launchtemplate(self, \"launchtemplate\",\n    machine_image=ec2.machineimage.latest_amazon_linux(),\n    security_group=ec2.securitygroup(self, \"launchtemplatesg\",\n        vpc=vpc\n    )\n)\n```\n\n## detailed monitoring\n\nthe following demonstrates how to enable [detailed monitoring](https://docs.aws.amazon.com/awsec2/latest/userguide/using-cloudwatch-new.html) for an ec2 instance. keep in mind that detailed monitoring results in [additional charges](http://aws.amazon.com/cloudwatch/pricing/).\n\n```python\n# vpc: ec2.vpc\n# instance_type: ec2.instancetype\n\n\nec2.instance(self, \"instance1\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=ec2.amazonlinuximage(),\n    detailed_monitoring=true\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-ec2",
  "package_url": "https://pypi.org/project/aws-cdk.aws-ec2/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-ec2/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-ec2/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-s3-assets (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-ssm (==1.204.0)",
    "aws-cdk.cloud-assembly-schema (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "aws-cdk.region-info (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::ec2",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_ec2 aws_kms ec2 amazon_linux_2",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_ec2",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_s3_assets",
    "pypi_aws_cdk.aws_ssm",
    "pypi_aws_cdk.cloud_assembly_schema",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_aws_cdk.region_info",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text provides detailed information about the `aws-cdk.aws-ec2` package version 1.204.0, released on June 19, 2023. This package is part of the AWS Cloud Development Kit (CDK) and focuses on Amazon EC2 (Elastic Compute Cloud), offering constructs for setting up networking and instances within AWS. It includes features for creating Virtual Private Clouds (VPCs), specifying subnet types, and managing instances. The package is no longer being updated as AWS CDK v1 reached End-of-Support on June 1, 2023, and users are advised to migrate to AWS CDK v2. The package requires Python version 3.7 or later and is licensed under the Apache-2.0 license. It is designed for developers and supports various Python versions from 3.7 to 3.11. The document also covers advanced configurations like subnet settings, NAT instances, and VPC endpoints, along with security group management and instance metadata service options.",
  "embedding": [
    -0.004888270050287247,
    0.01979903131723404,
    -0.0013578528305515647,
    -0.01798172853887081,
    0.005967720411717892,
    0.03257480263710022,
    -0.021015120670199394,
    -0.01390304695814848,
    -7.178899249993265e-05,
    -0.019115835428237915,
    0.008539955131709576,
    0.01169632188975811,
    0.004888270050287247,
    0.010616871528327465,
    -0.025483224540948868,
    0.005407499615103006,
    0.015494894236326218,
    -0.027765100821852684,
    -0.014292468316853046,
    0.010323096998035908,
    -0.0022562560625374317,
    -0.009147999808192253,
    0.0016208834713324904,
    -0.01174414623528719,
    0.013575112447142601,
    0.011252244934439659,
    -0.006251247134059668,
    -0.030525214970111847,
    0.013370153494179249,
    -0.0007732929079793394,
    0.04208489879965782,
    -0.0008672323892824352,
    -0.02439011074602604,
    -0.019006524235010147,
    -0.033257998526096344,
    -0.01300805900245905,
    -0.0038600596599280834,
    0.004304137080907822,
    0.03394119814038277,
    0.003188819158822298,
    0.01025477796792984,
    0.011785137467086315,
    -0.0034672217443585396,
    0.0039762030355632305,
    -0.009482765570282936,
    0.011272740550339222,
    -0.002143528778105974,
    -0.022162890061736107,
    -0.026248404756188393,
    0.013937206007540226,
    0.0009897807613015175,
    0.03241083770990372,
    -0.012830427847802639,
    -0.023501954972743988,
    -0.01174414623528719,
    -0.012447838671505451,
    -0.02419881522655487,
    0.0207828339189291,
    0.03798571974039078,
    -0.018569277599453926,
    0.017940737307071686,
    0.012215550988912582,
    -0.012803100049495697,
    -0.023638594895601273,
    -0.014606738463044167,
    -0.015153296291828156,
    -0.01934812217950821,
    0.03219221532344818,
    -0.00890888087451458,
    -0.009660396724939346,
    0.042959388345479965,
    0.03353127837181091,
    -0.0005691879778169096,
    -0.024267135187983513,
    0.02437644638121128,
    -0.0024065591860562563,
    -0.04910815507173538,
    0.006391302216798067,
    -0.0061624315567314625,
    0.0024441350251436234,
    -0.01056904811412096,
    -0.007016426883637905,
    0.014114837162196636,
    0.031536344438791275,
    0.007337529212236404,
    0.013090042397379875,
    -0.008041221648454666,
    0.0011153181549161673,
    -0.0038600596599280834,
    0.014921009540557861,
    0.0010888442629948258,
    -0.010719351470470428,
    0.00609752768650651,
    0.03394119814038277,
    -0.0003085058706346899,
    0.01672464795410633,
    -0.013301833532750607,
    0.024335455149412155,
    0.013035386800765991,
    -0.02850295417010784,
    -0.006483533885329962,
    0.017134565860033035,
    -0.03191893547773361,
    -0.007720119319856167,
    -0.03727519512176514,
    -0.02050955593585968,
    -0.007713287137448788,
    0.01421048492193222,
    0.03257480263710022,
    0.021302063018083572,
    -0.01138205174356699,
    0.0046013277024030685,
    -0.0040718503296375275,
    -0.011183924973011017,
    0.02115176059305668,
    -0.021288398653268814,
    0.007576648145914078,
    0.003631188767030835,
    -0.011716818436980247,
    -0.00546557130292058,
    -0.011211252771317959,
    0.03743916377425194,
    0.018582941964268684,
    0.0013843267224729061,
    -0.006965187378227711,
    -0.02348829247057438,
    -0.04200291261076927,
    -0.02869424782693386,
    0.024499421939253807,
    -0.035225607454776764,
    -0.00427680928260088,
    -0.00528794014826417,
    0.0029070007149130106,
    -0.04000798240303993,
    -0.014647730626165867,
    -0.008669761940836906,
    -0.01250932551920414,
    0.006227334961295128,
    -0.01953941583633423,
    -0.009838027879595757,
    0.009284638799726963,
    0.01628740131855011,
    -0.006411798298358917,
    -0.006422046106308699,
    -0.011464035138487816,
    0.012796268798410892,
    0.017134565860033035,
    0.01746249943971634,
    0.015576877631247044,
    -0.0027891492936760187,
    0.014483763836324215,
    0.008806401863694191,
    -0.028120363131165504,
    -0.020031318068504333,
    0.004837030544877052,
    0.03410516306757927,
    -0.002044465159997344,
    -0.00031640531960874796,
    -0.016943270340561867,
    -0.012461502104997635,
    0.005219620186835527,
    0.03391386941075325,
    -0.0028420970775187016,
    -0.007515160366892815,
    0.035580869764089584,
    0.03331265598535538,
    0.018514622002840042,
    -0.0367286391556263,
    -0.004796038847416639,
    0.0053220996633172035,
    0.018022721633315086,
    -0.0030555957928299904,
    -0.034323785454034805,
    0.006989099085330963,
    -0.008881553076207638,
    0.027819756418466568,
    0.006261494942009449,
    0.033695247024297714,
    -0.014552082866430283,
    -0.02581115998327732,
    0.02294173464179039,
    0.017489828169345856,
    -0.003894219407811761,
    0.017298532649874687,
    -0.006087279878556728,
    -0.010739847086369991,
    0.01039824914187193,
    0.017066245898604393,
    0.015412910841405392,
    0.022723112255334854,
    0.007815767079591751,
    0.049354106187820435,
    -0.0055236429907381535,
    -0.01736685261130333,
    -0.611269474029541,
    -0.017968064174056053,
    -0.013213017955422401,
    -0.045200273394584656,
    -0.009906347841024399,
    0.0024253472220152617,
    0.018569277599453926,
    0.04121040552854538,
    -0.03385921195149422,
    0.03257480263710022,
    -0.015330927446484566,
    0.03186427801847458,
    -0.008307668380439281,
    -0.002891628770157695,
    -0.008123205043375492,
    -0.009059184230864048,
    -0.02169831655919552,
    -0.009018192067742348,
    0.00152950594201684,
    0.001244271406903863,
    -0.018200350925326347,
    0.025592537596821785,
    -0.025155290961265564,
    0.007071082480251789,
    0.013964533805847168,
    0.020987793803215027,
    -0.0008168466738425195,
    -0.02439011074602604,
    0.011511859484016895,
    0.00774061493575573,
    -0.018500957638025284,
    0.03776709735393524,
    0.013445304706692696,
    -0.015699852257966995,
    0.03456973657011986,
    0.0002602551248855889,
    -0.028639592230319977,
    0.020454900339245796,
    0.005223036278039217,
    0.036018114537000656,
    -0.0224771611392498,
    -0.010733014903962612,
    -0.014415443874895573,
    0.005431411322206259,
    0.010814999230206013,
    0.015139631927013397,
    0.028639592230319977,
    0.013670760206878185,
    -0.012242879718542099,
    -0.02924080565571785,
    0.01863759756088257,
    -0.025428568944334984,
    0.0169159434735775,
    -0.01093114260584116,
    -0.00010589544399408624,
    -0.016314730048179626,
    0.02104244939982891,
    -0.01799539290368557,
    0.014265140518546104,
    0.01534459087997675,
    -0.0010367505019530654,
    0.010405081324279308,
    -0.008997696451842785,
    -0.019471097737550735,
    -0.00513080507516861,
    -0.008471635170280933,
    0.0016977430786937475,
    -0.01425147708505392,
    -0.007009595166891813,
    -0.023324323818087578,
    -0.005926728714257479,
    0.01556321419775486,
    -0.0068968674167990685,
    -0.01701159030199051,
    0.02951408363878727,
    0.02097412943840027,
    0.03033391945064068,
    -0.01979903131723404,
    -0.010295769199728966,
    0.01516695972532034,
    0.03014262393116951,
    -0.012140399776399136,
    0.002956532407552004,
    -0.022436169907450676,
    0.020031318068504333,
    -0.013868886977434158,
    -0.011101941578090191,
    -0.024718046188354492,
    -0.0223951768130064,
    -0.010268441401422024,
    -0.00030679788324050605,
    0.010692023672163486,
    -0.00431438535451889,
    -0.04293205961585045,
    -0.00810270942747593,
    0.016410376876592636,
    0.00726237753406167,
    0.009025024250149727,
    -0.030388575047254562,
    -0.014005525968968868,
    0.005035157315433025,
    -0.00778160709887743,
    0.003983034752309322,
    -0.013971365988254547,
    0.04019927605986595,
    0.005492899101227522,
    -0.0138962147757411,
    0.009072847664356232,
    0.0414017029106617,
    -0.02023627795279026,
    -0.02490933984518051,
    -0.021930603310465813,
    -0.0014628942590206861,
    -0.012618637643754482,
    0.00627857493236661,
    -0.020195284858345985,
    -0.0002843804832082242,
    0.007597143761813641,
    0.009373454377055168,
    0.008758577518165112,
    0.013704919256269932,
    -0.00135614478494972,
    0.013069546781480312,
    -0.012953403405845165,
    0.011689490638673306,
    -0.0010572464670985937,
    0.000684050377458334,
    -0.033585935831069946,
    -0.006568933371454477,
    0.013800567016005516,
    0.0017267789226025343,
    0.01791340857744217,
    0.03886020928621292,
    0.005615874193608761,
    0.032547477632761,
    0.003791739931330085,
    0.04279542341828346,
    0.006056535989046097,
    -0.012891915626823902,
    -0.025127964094281197,
    -0.006958355195820332,
    0.0012861172435805202,
    0.007679127622395754,
    -0.023324323818087578,
    0.005144468974322081,
    -0.006261494942009449,
    -0.010548552498221397,
    0.00016941135982051492,
    -3.536075018928386e-05,
    0.005007829517126083,
    -0.009523757733404636,
    0.004092346411198378,
    -0.0072282180190086365,
    0.02924080565571785,
    -0.003048763843253255,
    -0.023433636873960495,
    0.0024577989242970943,
    -0.01664266362786293,
    -0.009783372282981873,
    0.012748444452881813,
    0.022654792293906212,
    0.0207828339189291,
    -0.017435172572731972,
    0.004734551068395376,
    -0.02780609391629696,
    0.026057111099362373,
    -0.023679586127400398,
    0.020659858360886574,
    -0.015467566438019276,
    -0.037220537662506104,
    -0.004878022242337465,
    0.012222383171319962,
    -0.010685191489756107,
    0.0036277729086577892,
    0.03167298436164856,
    0.014415443874895573,
    -0.004888270050287247,
    0.0010563924442976713,
    0.006736316252499819,
    0.01070568710565567,
    0.01074667926877737,
    0.020372916013002396,
    0.0047721266746521,
    -0.005315267946571112,
    0.031809624284505844,
    0.01854195073246956,
    0.023283332586288452,
    0.0037336682435125113,
    -0.02734152041375637,
    -0.00694810738787055,
    -0.018323326483368874,
    0.010323096998035908,
    0.0027430334594100714,
    0.03571750596165657,
    -0.011265908367931843,
    -0.0067465645261108875,
    0.006285406649112701,
    0.012324863113462925,
    0.01665632799267769,
    0.03661932796239853,
    0.006220503244549036,
    0.023679586127400398,
    -0.0004124798288103193,
    0.001333086984232068,
    -0.014729714021086693,
    -0.02033192478120327,
    0.007310201413929462,
    -0.010733014903962612,
    0.01673831231892109,
    0.015617869794368744,
    0.024813693016767502,
    -0.014292468316853046,
    -0.012837260030210018,
    -0.029486756771802902,
    0.028284329921007156,
    0.015180624090135098,
    -0.008307668380439281,
    0.005663698073476553,
    -0.015699852257966995,
    0.0035047975834459066,
    0.02652168460190296,
    -0.006548437289893627,
    0.01952575333416462,
    -0.009182159788906574,
    -0.01574084535241127,
    0.009161663241684437,
    0.013438472524285316,
    0.011730481870472431,
    -0.00979703664779663,
    -0.02421247959136963,
    -0.012324863113462925,
    0.014934672974050045,
    0.0023980194237083197,
    -0.015959467738866806,
    0.0010939681669697165,
    -0.006548437289893627,
    0.029486756771802902,
    -0.020222613587975502,
    0.0341598205268383,
    -0.008000229485332966,
    0.0214250385761261,
    0.00304705579765141,
    0.03006064146757126,
    -0.018104704096913338,
    0.012318030931055546,
    0.024759037420153618,
    0.006411798298358917,
    0.011436707340180874,
    0.00873124971985817,
    -0.014716050587594509,
    0.00230407970957458,
    -0.0005516810924746096,
    -0.0013373569818213582,
    0.013821062631905079,
    0.016396712511777878,
    0.006377638317644596,
    0.004252897575497627,
    0.006179511547088623,
    0.040253929793834686,
    0.016232745721936226,
    0.007276041433215141,
    -0.0036995084956288338,
    0.035772163420915604,
    0.02904951013624668,
    0.04041789844632149,
    -0.022504489868879318,
    -0.020113302394747734,
    -0.03104444406926632,
    -0.025783831253647804,
    -0.013588775880634785,
    -0.007849926128983498,
    -0.012379518710076809,
    0.00744684087112546,
    -0.03312136232852936,
    0.025387577712535858,
    0.010152298025786877,
    0.01789974607527256,
    0.0026542178820818663,
    0.015043984167277813,
    0.020372916013002396,
    -0.013568280264735222,
    -0.04577415809035301,
    0.033421967178583145,
    0.015604205429553986,
    -0.003839563811197877,
    -0.016314730048179626,
    -0.024977659806609154,
    0.01933445781469345,
    -0.027286862954497337,
    0.04536424204707146,
    -0.0008514334913343191,
    0.015877483412623405,
    0.00372342043556273,
    0.007651799358427525,
    -0.029186150059103966,
    -0.005796921439468861,
    0.024226143956184387,
    -0.010227450169622898,
    -0.002157192677259445,
    -0.0029155404772609472,
    0.007139402441680431,
    -0.0067465645261108875,
    0.0095852455124259,
    0.0306071974337101,
    0.05022859945893288,
    0.0230373814702034,
    -0.012844092212617397,
    -0.019020186737179756,
    -0.0037029243540018797,
    -0.013376985676586628,
    -0.019840022549033165,
    -0.0015448778867721558,
    0.008075381629168987,
    -0.009913180023431778,
    -0.00011251390242250636,
    -0.0012374394573271275,
    -0.006138519383966923,
    -0.03317601606249809,
    0.03320334479212761,
    -0.007720119319856167,
    0.006483533885329962,
    -0.02932278998196125,
    -0.0012493954272940755,
    0.010835494846105576,
    0.013793734833598137,
    0.009277806617319584,
    0.010411912575364113,
    0.0306071974337101,
    -0.006032624281942844,
    -0.03112642839550972,
    -0.04919014126062393,
    -0.004198241978883743,
    0.010487064719200134,
    0.004591079894453287,
    -0.02257280796766281,
    0.0023604435846209526,
    0.02186228521168232,
    -0.008574115112423897,
    0.017558148130774498,
    0.01470238622277975,
    0.00026239012368023396,
    0.004488600417971611,
    -0.013001227751374245,
    -0.027956396341323853,
    0.0012143815401941538,
    0.01728486828505993,
    0.030169952660799026,
    0.024963995441794395,
    0.011853457428514957,
    0.022504489868879318,
    -0.0018412142526358366,
    0.0033220425248146057,
    0.0018600021721795201,
    -0.02788807637989521,
    0.0021144929341971874,
    -0.012946571223437786,
    0.003426229814067483,
    0.03137237951159477,
    -0.02358393929898739,
    0.03853227570652962,
    -0.0003524866478983313,
    0.019990326836705208,
    -0.002189644379541278,
    -0.0009411030332557857,
    0.015262607485055923,
    -0.0031597833149135113,
    0.011464035138487816,
    -0.001834382303059101,
    -0.0014757042517885566,
    -0.023447299376130104,
    0.0040308586321771145,
    0.029377445578575134,
    -0.0004743945028167218,
    -0.0012844091979786754,
    0.010855990462005138,
    0.01654701679944992,
    -0.029814690351486206,
    -0.02598879113793373,
    0.001621737377718091,
    -0.01075351145118475,
    0.027286862954497337,
    0.006818300113081932,
    0.00011294090654700994,
    -0.04842495918273926,
    -0.020277269184589386,
    -0.025701848790049553,
    -0.02797006070613861,
    -0.012946571223437786,
    -0.008929376490414143,
    -0.0021640246268361807,
    0.005861824844032526,
    0.02546956203877926,
    -0.011839793063700199,
    -0.034405771642923355,
    -0.01744883507490158,
    -0.02951408363878727,
    -0.02411683276295662,
    0.03634604811668396,
    0.021261071786284447,
    0.0009667229023762047,
    0.013431641273200512,
    0.003528709290549159,
    -0.00975604448467493,
    -0.013800567016005516,
    0.0022084324155002832,
    -0.018036384135484695,
    -0.00497025391086936,
    -0.056623317301273346,
    -0.0008702214108780026,
    -0.009052352048456669,
    0.0033305822871625423,
    0.013288170099258423,
    0.023870881646871567,
    0.04869823902845383,
    -0.010466569103300571,
    0.010719351470470428,
    0.024704381823539734,
    -0.028366314247250557,
    0.03697459027171135,
    0.013739079236984253,
    0.005701273679733276,
    0.006316150538623333,
    -0.0009658688795752823,
    -0.01943010464310646,
    -0.01089015044271946,
    -0.015877483412623405,
    0.0277924295514822,
    -0.003579949028789997,
    0.03096245974302292,
    0.011949105188250542,
    -0.009052352048456669,
    -0.003282758640125394,
    -0.012844092212617397,
    -0.014880017377436161,
    -0.0028079370968043804,
    -0.0367286391556263,
    -0.004328049253672361,
    -0.011156597174704075,
    0.009195823222398758,
    0.019184155389666557,
    -0.0072418819181621075,
    0.0022733360528945923,
    -0.01717555709183216,
    -0.006681660655885935,
    0.01565886102616787,
    -0.028202347457408905,
    0.006879787426441908,
    0.017052581533789635,
    -0.00845797173678875,
    0.03965272009372711,
    -0.006736316252499819,
    -0.008355491794645786,
    -0.02186228521168232,
    0.01781776174902916,
    0.016861286014318466,
    -0.014278804883360863,
    0.005796921439468861,
    0.001289533218368888,
    0.005533890798687935,
    -0.010951638221740723,
    0.03653734177350998,
    0.011949105188250542,
    -0.009469102136790752,
    -0.029432101175189018,
    -0.019361786544322968,
    -0.0044305287301540375,
    -0.028366314247250557,
    -0.0016149054281413555,
    -0.012823596596717834,
    -0.017202885821461678,
    -0.029760034754872322,
    0.03006064146757126,
    0.02661733143031597,
    0.018022721633315086,
    -0.001783142564818263,
    0.02050955593585968,
    -0.012639133259654045,
    0.005346011836081743,
    0.0026456781197339296,
    -0.02331066131591797,
    0.015494894236326218,
    -0.0051239728927612305,
    0.020755507051944733,
    0.04968203976750374,
    0.044025175273418427,
    0.0031051274854689837,
    0.02978736348450184,
    0.00877224188297987,
    0.00940761435776949,
    -0.022723112255334854,
    -0.011074613779783249,
    0.01944376900792122,
    -0.010022491216659546,
    -0.020728178322315216,
    0.018145695328712463,
    0.010698855854570866,
    0.010022491216659546,
    0.0017421507509425282,
    0.021438702940940857,
    0.0057798414491117,
    -0.003151243319734931,
    -0.011648498475551605,
    -0.026248404756188393,
    -0.019402777776122093,
    -0.008656098507344723,
    -0.0052401162683963776,
    -0.012953403405845165,
    0.027737773954868317,
    -0.04249481484293938,
    -0.025032315403223038,
    0.014770706184208393,
    0.01690227910876274,
    0.010480232536792755,
    -0.0075493198819458485,
    0.041073765605688095,
    0.0074946642853319645,
    -0.010172794573009014,
    0.007945573888719082,
    0.0232013501226902,
    0.0031290394254028797,
    0.005544138606637716,
    -0.022777767851948738,
    -0.004905350040644407,
    0.026043446734547615,
    0.014921009540557861,
    0.026480691507458687,
    0.0005884029087610543,
    0.02158900536596775,
    0.016055114567279816,
    0.026876945048570633,
    0.0005311851855367422,
    -0.006227334961295128,
    0.036209408193826675,
    -0.03265678882598877,
    -0.010582712478935719,
    -0.0201406292617321,
    -0.03623673692345619,
    -0.024595070630311966,
    0.016710983589291573,
    -0.020167957991361618,
    0.02374790608882904,
    0.025674520060420036,
    -0.025496888905763626,
    -0.0058037531562149525,
    0.02131572738289833,
    0.007057418581098318,
    0.031235739588737488,
    0.016970599070191383,
    0.01628740131855011,
    0.017927072942256927,
    0.019935671240091324,
    -0.010780839249491692,
    -0.03148169070482254,
    -0.02070085145533085,
    -0.003489425638690591,
    0.02123374305665493,
    0.02546956203877926,
    0.004379288759082556,
    -0.015699852257966995,
    0.00795923825353384,
    0.0015790376346558332,
    -0.009694556705653667,
    -0.021807629615068436,
    0.017038917168974876,
    -0.004939510021358728,
    -0.005738849751651287,
    -0.02877623215317726,
    0.0007967777783051133,
    0.005328931845724583,
    0.005899400915950537,
    -0.011211252771317959,
    -0.015781836584210396,
    0.020386580377817154,
    -0.003397193970158696,
    -0.002748157363384962,
    0.005677361972630024,
    -0.007405848708003759,
    0.023693250492215157,
    0.01173731405287981,
    -0.02419881522655487,
    -0.01602778770029545,
    -0.00890888087451458,
    -0.013985030353069305,
    -0.006445957813411951,
    -0.008970368653535843,
    0.024403775110840797,
    -0.016178090125322342,
    -0.006527941673994064,
    0.038914866745471954,
    0.0005077003152109683,
    -0.01170315407216549,
    -3.888348146574572e-05,
    -0.0025705264415591955,
    0.03637337684631348,
    -0.006647500675171614,
    -0.010917478241026402,
    -0.01941644214093685,
    -0.011149764992296696,
    0.013841559179127216,
    -0.017503490671515465,
    0.0046423193998634815,
    -0.0162737388163805,
    -0.00841014739125967,
    -0.02187594771385193,
    6.648488124483265e-06,
    -0.025756504386663437,
    -0.004181161988526583,
    -0.033695247024297714,
    0.007931910455226898,
    -0.014456436038017273,
    -0.01781776174902916,
    -0.007685959339141846,
    0.006893451791256666,
    -0.012475166469812393,
    -0.012837260030210018,
    -0.007945573888719082,
    -0.02743716724216938,
    0.011764641851186752,
    0.011224917136132717,
    0.008861057460308075,
    0.0015474398387596011,
    0.04216688126325607,
    -0.015084976330399513,
    0.009872187860310078,
    -0.009769707918167114,
    -0.01367759145796299,
    -0.016328394412994385,
    0.005964304320514202,
    -0.00744684087112546,
    0.0008253866108134389,
    0.012400014325976372,
    -0.01084915827959776,
    -0.04714054986834526,
    -0.05309802293777466,
    0.004741382785141468,
    0.017571810632944107,
    -0.01205841638147831,
    -0.016068778932094574,
    0.00609752768650651,
    0.025264602154493332,
    0.004813118372112513,
    -0.020304596051573753,
    -0.025838486850261688,
    0.036564670503139496,
    -0.0038976354990154505,
    -0.02403484843671322,
    0.024963995441794395,
    -0.003328874474391341,
    0.018104704096913338,
    -0.02896752767264843,
    -0.004150418099015951,
    0.0003691395395435393,
    -0.01863759756088257,
    -0.005995048210024834,
    -0.002942868508398533,
    0.011402547359466553,
    -0.0014483763370662928,
    0.0072965375147759914,
    -0.013568280264735222,
    -0.03303937613964081,
    -0.01817302405834198,
    0.02268212102353573,
    0.02833898551762104,
    -0.0035560373216867447,
    0.03918814659118652,
    0.02104244939982891,
    0.0026508020237088203,
    0.004662815481424332,
    -0.017571810632944107,
    -0.03022460825741291,
    -0.033257998526096344,
    -0.025346586480736732,
    -0.04599278047680855,
    -0.007679127622395754,
    -0.01692960597574711,
    0.03968004509806633,
    0.008034389466047287,
    -0.010664695873856544,
    -0.01880156435072422,
    -0.010275273583829403,
    -0.03470637649297714,
    -0.017243877053260803,
    -0.03596345707774162,
    0.04599278047680855,
    0.02041390724480152,
    0.014511091634631157,
    0.02292807027697563,
    0.0169159434735775,
    -0.011791969649493694,
    0.03301205113530159,
    -0.02672664262354374,
    0.006934443488717079,
    0.014374451711773872,
    -0.00027520005824044347,
    0.007706455420702696,
    -0.01826867088675499,
    -0.029350116848945618,
    -0.0022186802234500647,
    0.02853028103709221,
    0.03156367316842079,
    0.00805488508194685,
    0.02096046507358551,
    -0.013616103678941727,
    -0.008471635170280933,
    -0.004925846122205257,
    -0.013766407035291195,
    -0.0161917544901371,
    0.018391646444797516,
    0.004170914180576801,
    -0.041866276413202286,
    -0.0068695396184921265,
    0.0019676056690514088,
    -0.00876540970057249,
    -0.01399186160415411,
    -0.0030795077327638865,
    0.015850156545639038,
    -0.029541412368416786,
    0.00827350839972496,
    -0.0001726138434605673,
    -0.02024994045495987,
    -0.003096587723121047,
    -0.0062170871533453465,
    -0.011313731782138348,
    0.02005864679813385,
    0.02031826041638851,
    0.03697459027171135,
    0.005591962486505508,
    -0.020222613587975502,
    -0.02672664262354374,
    0.008560450747609138,
    -0.04990066587924957,
    0.007897750474512577,
    0.0029087085276842117,
    -0.003175155259668827,
    -0.007187225855886936,
    0.006486949510872364,
    0.008697089739143848,
    -0.012987563386559486,
    -0.035662852227687836,
    0.012078911997377872,
    0.014866353012621403,
    -0.03552621230483055,
    0.005400667432695627,
    -0.006743148434907198,
    -0.008013893850147724,
    0.0075493198819458485,
    0.008013893850147724,
    0.007938741706311703,
    -0.004806286655366421,
    -0.008963536471128464,
    -0.005844745319336653,
    -0.016683656722307205,
    0.020400244742631912,
    -0.011279572732746601,
    -0.026945265009999275,
    -0.022436169907450676,
    0.007788438815623522,
    -0.005260612349957228,
    -0.0020632531959563494,
    0.022627463564276695,
    0.16691854596138,
    0.03033391945064068,
    -5.2474019867077e-06,
    0.022258538752794266,
    0.004761878866702318,
    -0.014196820557117462,
    0.0068695396184921265,
    0.0214250385761261,
    -0.0161917544901371,
    0.03014262393116951,
    -0.020372916013002396,
    0.013602440245449543,
    -0.02581115998327732,
    0.008130037225782871,
    0.013213017955422401,
    -0.017161892727017403,
    -0.03380455821752548,
    -0.022080907598137856,
    -0.025688184425234795,
    0.01170315407216549,
    0.029104165732860565,
    -0.010323096998035908,
    0.0010410204995423555,
    -0.037111226469278336,
    0.012481997720897198,
    -0.025045979768037796,
    -0.010083978995680809,
    0.013561448082327843,
    0.013062714599072933,
    0.0215070229023695,
    -0.023542948067188263,
    0.026248404756188393,
    0.00828034058213234,
    -0.02213556319475174,
    -0.036127425730228424,
    -0.017612803727388382,
    0.009475934319198132,
    0.0012963651679456234,
    0.02041390724480152,
    0.030279263854026794,
    -0.025155290961265564,
    -0.041702307760715485,
    -0.015317263081669807,
    -0.02825700305402279,
    -0.010159130208194256,
    -0.014675058424472809,
    -0.0191704910248518,
    -0.004177745897322893,
    -0.011894449591636658,
    0.016519688069820404,
    -0.01620541885495186,
    -0.0032195630483329296,
    0.009291470982134342,
    0.009776540100574493,
    0.01600045897066593,
    0.006825131829828024,
    0.030470559373497963,
    0.01799539290368557,
    -0.0019846854265779257,
    0.0185282863676548,
    -0.016437705606222153,
    0.0294047724455595,
    -0.014278804883360863,
    0.011313731782138348,
    -0.012611805461347103,
    0.010008826851844788,
    -0.016519688069820404,
    -0.0016601672396063805,
    0.005571466404944658,
    0.01636938564479351,
    -0.014101173728704453,
    -0.032793425023555756,
    -0.006302486639469862,
    -0.00944860652089119,
    -0.008861057460308075,
    -0.017052581533789635,
    0.03623673692345619,
    0.015194287523627281,
    -0.009352958761155605,
    0.030197279527783394,
    -0.003914715256541967,
    0.01372541580349207,
    -0.006066783796995878,
    -0.00643571000546217,
    0.020277269184589386,
    -0.029432101175189018,
    0.027095569297671318,
    -0.01764013059437275,
    -0.0035457892809063196,
    -0.0038258996792137623,
    -0.015194287523627281,
    -0.02221754752099514,
    -0.007043754681944847,
    -0.014060181565582752,
    0.025428568944334984,
    0.04121040552854538,
    0.0007493810262531042,
    -0.007597143761813641,
    -0.010350425727665424,
    0.023624930530786514,
    -0.024157823994755745,
    0.07318399846553802,
    0.017148230224847794,
    0.014019190333783627,
    0.004577415995299816,
    0.006582597270607948,
    -0.0138552226126194,
    0.02033192478120327,
    -0.003240058897063136,
    -0.007016426883637905,
    -0.012113071978092194,
    -0.017612803727388382,
    -0.009947339072823524,
    0.0008108686888590455,
    -0.0068012201227247715,
    0.022900743409991264,
    -0.025770168751478195,
    -0.0069276113063097,
    -0.004802870564162731,
    -0.009824364446103573,
    -0.027587469667196274,
    -0.03418714553117752,
    0.0010888442629948258,
    0.011101941578090191,
    -0.011054117232561111,
    -0.02285975031554699,
    -0.013254010118544102,
    0.004280225373804569,
    -0.014593075029551983,
    -0.03694726154208183,
    0.010145466774702072,
    0.00858777854591608,
    0.02382989041507244,
    -0.007166730239987373,
    -0.0031307474710047245,
    -0.0007481000502593815,
    -0.0012946571223437786,
    -0.011983264237642288,
    -0.004826782271265984,
    0.05181361362338066,
    -0.0028865046333521605,
    0.013233514502644539,
    0.0016610212624073029,
    -0.004266561474651098,
    0.022285865619778633,
    -0.002003473462536931,
    0.020468564704060555,
    -0.0044305287301540375,
    -0.018787899985909462,
    -0.01503032073378563,
    -0.015262607485055923,
    -0.012044752016663551,
    0.02527826651930809,
    0.0028882126789540052,
    0.020003991201519966,
    -0.016232745721936226,
    -0.01403285376727581,
    -0.02339264377951622,
    0.002044465159997344,
    -0.009025024250149727,
    -0.04973669722676277,
    -0.013882550410926342,
    0.009052352048456669,
    0.00710524246096611,
    -0.03282075375318527,
    0.006439126096665859,
    -0.1730399876832962,
    0.004263145383447409,
    0.011006293818354607,
    -0.028011051937937737,
    -0.007016426883637905,
    0.0044032009318470955,
    -0.01138205174356699,
    0.016765639185905457,
    -0.014237812720239162,
    -0.009236815385520458,
    0.018473630771040916,
    0.019020186737179756,
    -0.018104704096913338,
    -0.004280225373804569,
    -0.0031802791636437178,
    0.013691255822777748,
    -0.012072079814970493,
    0.008171028457581997,
    0.02482735738158226,
    0.007378520909696817,
    0.03629139065742493,
    -0.01647869683802128,
    0.003658516565337777,
    0.0033818220254033804,
    -0.006531357299536467,
    0.002577358391135931,
    -0.006596261169761419,
    -0.007214553654193878,
    0.013841559179127216,
    -0.006534773390740156,
    -0.017202885821461678,
    0.009523757733404636,
    0.027560142800211906,
    -0.0025483225472271442,
    0.00660992506891489,
    0.0016994510078802705,
    0.013417976908385754,
    -0.014880017377436161,
    -0.015863820910453796,
    0.022463496774435043,
    0.038204342126846313,
    0.02122008055448532,
    0.02005864679813385,
    -0.019006524235010147,
    -0.005530474707484245,
    0.0040308586321771145,
    -0.005793505348265171,
    -0.012256543152034283,
    -0.004796038847416639,
    -0.027109233662486076,
    0.041866276413202286,
    -0.009879020042717457,
    -0.009598908945918083,
    -0.0013441889313980937,
    0.0037814921233803034,
    0.013657095842063427,
    0.014265140518546104,
    0.009346126578748226,
    -0.0072555458173155785,
    -0.032356180250644684,
    -0.01871958188712597,
    -0.03257480263710022,
    0.004990749526768923,
    -0.004604743793606758,
    -0.013698088005185127,
    0.005991632118821144,
    -0.00907967984676361,
    0.010726183652877808,
    -0.0161917544901371,
    0.007576648145914078,
    0.030169952660799026,
    -0.015440238639712334,
    -0.0006204277160577476,
    -0.013131034560501575,
    0.006111191585659981,
    0.008539955131709576,
    -0.05369923636317253,
    0.029076838865876198,
    0.016492361202836037,
    -0.016519688069820404,
    -0.016874950379133224,
    0.02482735738158226,
    -0.0012007176410406828,
    0.015781836584210396,
    -0.0011008002329617739,
    -0.005632954183965921,
    0.006367390509694815,
    -0.02052322030067444,
    -0.002240884117782116,
    0.009961003437638283,
    0.014374451711773872,
    -0.03831365332007408,
    0.019758040085434914,
    -0.013438472524285316,
    0.0073990169912576675,
    -0.0008873012848198414,
    -0.0004910473944619298,
    -0.005223036278039217,
    -0.00102991855237633,
    -0.009667228907346725,
    0.007276041433215141,
    -0.009551085531711578,
    -0.014511091634631157,
    -0.024308128282427788,
    0.046293389052152634,
    0.011505027301609516,
    -0.013650263659656048,
    0.02275043912231922,
    0.04847961664199829,
    -0.009018192067742348,
    -0.00961940549314022,
    0.016342056915163994,
    0.039270129054784775,
    -0.006517693400382996,
    0.004741382785141468,
    0.01717555709183216,
    -0.0012553733540698886,
    -0.0050693172961473465,
    0.008888385258615017,
    0.0073853530921041965,
    0.018869884312152863,
    0.024786364287137985,
    0.0015585417859256268,
    -0.0057627614587545395,
    -0.02131572738289833,
    -0.03104444406926632,
    -0.08837828785181046,
    -0.023174021393060684,
    0.0011178801069036126,
    0.01300805900245905,
    -0.031071770936250687,
    -0.02321501262485981,
    -0.042057570070028305,
    -0.0011281280312687159,
    -0.0009855107637122273,
    -0.013704919256269932,
    -0.0035218773409724236,
    0.037111226469278336,
    -0.005062485113739967,
    0.01645136997103691,
    0.006599677260965109,
    -0.019744375720620155,
    -0.027778765186667442,
    0.0029360365588217974,
    -0.017503490671515465,
    0.003258846700191498,
    0.007542488165199757,
    0.006357142236083746,
    -0.007576648145914078,
    -0.006469869986176491,
    -0.004830198362469673,
    0.004051354713737965,
    -0.011593842878937721,
    0.015289935283362865,
    0.041538339108228683,
    0.015467566438019276,
    -0.00858777854591608,
    -0.017148230224847794,
    0.00625466275960207,
    0.010165962390601635,
    -0.020837489515542984,
    -0.026125429198145866,
    -0.02411683276295662,
    -0.03112642839550972,
    0.05875489115715027,
    -0.013055883347988129,
    -0.010733014903962612,
    -0.012379518710076809,
    0.021083440631628036,
    -0.014811697416007519,
    -0.01986735127866268,
    0.012563982047140598,
    -0.0201406292617321,
    0.028202347457408905,
    -0.0010128386784344912,
    -0.037384506314992905,
    -0.02231319434940815,
    -0.021452367305755615,
    -0.021629998460412025,
    0.005868657026439905,
    0.007405848708003759,
    -0.004758462775498629,
    -0.002539782552048564,
    0.020359251648187637,
    -0.013458969071507454,
    -0.0021537765860557556,
    -0.015467566438019276,
    -0.005609042476862669,
    -0.006978851277381182,
    0.005984800402075052,
    -0.00213840464130044,
    0.0006883203750476241,
    0.025537880137562752,
    -0.0015696437330916524,
    0.02023627795279026,
    -0.02825700305402279,
    -0.012563982047140598,
    0.025510553270578384,
    -0.014155829325318336,
    0.020987793803215027,
    -0.023515619337558746,
    -0.001372370752505958,
    0.0012408554321154952,
    -0.00198980956338346,
    0.00890888087451458,
    -0.0201406292617321,
    -0.012577645480632782,
    0.002119616838172078,
    -0.00989951565861702,
    -0.006445957813411951,
    0.01647869683802128,
    0.020359251648187637,
    0.015809165313839912,
    -0.01770845055580139,
    0.023051045835018158,
    -0.029842019081115723,
    0.025141626596450806,
    -0.011996928602457047,
    0.04487233981490135,
    -0.0006404966115951538,
    -0.0035731170792132616,
    -0.014866353012621403,
    -0.007774774916470051,
    -0.018009057268500328,
    -0.02877623215317726,
    -0.003924963064491749,
    -0.06345528364181519,
    -0.001419340493157506,
    -0.08471634984016418,
    0.027464494109153748,
    -0.027054576203227043,
    -0.017489828169345856,
    0.017954401671886444,
    -0.013486296869814396,
    0.0010546843986958265,
    -0.015153296291828156,
    0.0059198965318500996,
    0.01889721304178238,
    -0.040253929793834686,
    -0.0031341633293777704,
    -0.005417747423052788,
    0.03159100189805031,
    -0.009694556705653667,
    0.00595747260376811,
    0.016260074451565742,
    -0.002006889320909977,
    0.0520322360098362,
    -0.01241367869079113,
    -0.012468334287405014,
    -0.027286862954497337,
    0.038450293242931366,
    0.003815651871263981,
    -0.03148169070482254,
    -0.0019812695682048798,
    -0.01483902521431446,
    -0.002954824361950159,
    0.0052947718650102615,
    -0.011675826273858547,
    0.01725754141807556,
    -0.013028555549681187,
    -0.004027442540973425,
    0.03932478278875351,
    -0.003245182801038027,
    0.004649151582270861,
    0.007788438815623522,
    0.02725953608751297,
    0.021711980924010277,
    -0.0013083211379125714,
    0.0005568050546571612,
    -0.016123434528708458,
    0.006582597270607948,
    0.007030090782791376,
    -0.009817532263696194,
    -0.011771474033594131,
    0.002614934230223298,
    0.008840560913085938,
    0.02402118593454361,
    0.020359251648187637,
    0.029186150059103966,
    0.009824364446103573,
    -0.017339523881673813,
    -0.02853028103709221,
    -0.002119616838172078,
    -0.007474168669432402,
    0.025770168751478195,
    -0.002003473462536931,
    -0.02745083160698414,
    0.0201406292617321,
    0.03093513287603855,
    0.004553503822535276,
    0.03120841085910797,
    -0.001836090348660946,
    0.004645735491067171,
    -0.01173731405287981,
    -0.04047255590558052,
    -0.012775772251188755,
    0.003397193970158696,
    -0.01710723713040352,
    -0.013199354521930218,
    -0.04006263613700867,
    0.00660992506891489,
    0.0072965375147759914,
    0.016506025567650795,
    -0.04227619245648384,
    -0.005554386880248785,
    -0.0026610498316586018,
    -0.006394718308001757,
    0.0253739133477211,
    0.01825500838458538,
    0.011689490638673306,
    -0.018200350925326347,
    0.010794502682983875,
    0.010049819014966488,
    -0.012318030931055546,
    -0.010179625824093819,
    -0.0056261224672198296,
    0.008854225277900696,
    0.0037849079817533493,
    0.0006878933636471629,
    -0.00020442517416086048,
    0.01120442058891058,
    0.016710983589291573,
    0.0046696471981704235,
    0.0023262836039066315,
    0.004010363016277552,
    -0.011983264237642288,
    0.007317033130675554,
    0.016355721279978752,
    0.003983034752309322,
    -0.0017899745143949986,
    0.002862592926248908,
    -0.003163199173286557,
    -0.0009812407661229372,
    -0.004997581709176302,
    0.00961940549314022,
    -0.03752114623785019,
    -0.0011469159508123994,
    0.0009590369299985468,
    0.0010837202426046133,
    -0.02574284002184868,
    -0.004047938622534275,
    0.0031204994302242994,
    -0.025346586480736732,
    0.012379518710076809,
    -0.005841329228132963,
    0.010808167047798634,
    -0.029131494462490082,
    0.011320563964545727,
    -0.014688722789287567,
    0.0050556533969938755,
    0.03446042537689209,
    -0.0025073308497667313,
    0.011716818436980247,
    -0.001386034651659429,
    0.022340521216392517,
    0.00051709427498281,
    0.016710983589291573,
    -0.011812465265393257,
    -8.966952736955136e-05,
    -0.010548552498221397,
    -0.018664926290512085,
    -0.008601442910730839,
    -0.007016426883637905,
    0.004741382785141468,
    0.011860289610922337,
    0.004908766131848097,
    -0.015289935283362865,
    0.08345927298069,
    0.0034074420109391212,
    -0.02672664262354374,
    0.0062444149516522884,
    -0.014046518132090569,
    0.025250937789678574,
    0.01600045897066593,
    -0.006336646620184183,
    0.01897919550538063,
    -0.013711751438677311,
    0.005660281982272863,
    0.003029976040124893,
    -0.02052322030067444,
    0.025032315403223038,
    -0.024444766342639923,
    0.01371858362108469,
    -0.02132939174771309,
    0.0307711660861969,
    -0.005950640421360731,
    0.010596375912427902,
    0.02410316839814186,
    0.01989467814564705,
    0.028557609766721725,
    -0.0014535003574565053,
    -0.0617062970995903,
    -0.007679127622395754,
    0.0428500771522522,
    0.020741842687129974,
    -0.011949105188250542,
    -0.05446441471576691,
    0.007132570259273052,
    -0.002184520475566387,
    -0.026029782369732857,
    -0.021889612078666687,
    -0.0015303599648177624,
    0.0073990169912576675,
    -0.01951208896934986,
    -0.019840022549033165,
    0.001185345696285367,
    -0.025264602154493332,
    0.004556919913738966,
    0.005974552594125271,
    -0.02896752767264843,
    -0.03208290413022041,
    0.028830887749791145,
    -0.005977968219667673,
    0.010978966020047665,
    -0.013028555549681187,
    -0.01889721304178238
  ]
}
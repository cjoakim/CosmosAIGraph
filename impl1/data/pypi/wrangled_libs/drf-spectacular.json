{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.2",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation",
    "topic :: internet :: www/http",
    "topic :: software development :: code generators"
  ],
  "description": "===============\ndrf-spectacular\n===============\n\n|build-status| |codecov| |docs| |pypi-version| |pypi-dl|\n\nsane and flexible `openapi`_ (`3.0.3`_ & `3.1`_) schema generation for `django rest framework`_.\n\nthis project has 3 goals:\n    1. extract as much schema information from drf as possible.\n    2. provide flexibility to make the schema usable in the real world (not only toy examples).\n    3. generate a schema that works well with the most popular client generators.\n\nthe code is a heavily modified fork of the\n`drf openapi generator <https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py/>`_,\nwhich is/was lacking all of the below listed features.\n\nfeatures\n    - serializers modelled as components. (arbitrary nesting and recursion supported)\n    - `@extend_schema <https://drf-spectacular.readthedocs.io/en/latest/drf_spectacular.html#drf_spectacular.utils.extend_schema>`_ decorator for customization of apiview, viewsets, function-based views, and ``@action``\n        - additional parameters\n        - request/response serializer override (with status codes)\n        - polymorphic responses either manually with ``polymorphicproxyserializer`` helper or via ``rest_polymorphic``'s polymorphicserializer)\n        - ... and more customization options\n    - authentication support (drf natives included, easily extendable)\n    - custom serializer class support (easily extendable)\n    - ``serializermethodfield()`` type via type hinting or ``@extend_schema_field``\n    - i18n support\n    - tags extraction\n    - request/response/parameter examples\n    - description extraction from ``docstrings``\n    - vendor specification extensions (``x-*``) in info, operations, parameters, components, and security schemes\n    - sane fallbacks\n    - sane ``operation_id`` naming (based on path)\n    - schema serving with ``spectacularapiview`` (redoc and swagger-ui views are also available)\n    - optional input/output serializer component split\n    - callback operations\n    - openapi 3.1 support (via setting ``oas_version``)\n    - included support for:\n        - `django-polymorphic <https://github.com/django-polymorphic/django-polymorphic>`_ / `django-rest-polymorphic <https://github.com/apirobot/django-rest-polymorphic>`_\n        - `simplejwt <https://github.com/jazzband/djangorestframework-simplejwt>`_\n        - `djangooauthtoolkit <https://github.com/jazzband/django-oauth-toolkit>`_\n        - `djangorestframework-jwt <https://github.com/jpadilla/django-rest-framework-jwt>`_ (tested fork `drf-jwt <https://github.com/styria-digital/django-rest-framework-jwt>`_)\n        - `dj-rest-auth <https://github.com/imerica/dj-rest-auth>`_ (maintained fork of `django-rest-auth <https://github.com/tivix/django-rest-auth>`_)\n        - `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_ (via postprocessing hook ``camelize_serializer_fields``)\n        - `django-filter <https://github.com/carltongibson/django-filter>`_\n        - `drf-nested-routers <https://github.com/alanjds/drf-nested-routers>`_\n        - `djangorestframework-recursive <https://github.com/heywbj/django-rest-framework-recursive>`_\n        - `djangorestframework-dataclasses <https://github.com/oxan/djangorestframework-dataclasses>`_\n        - `django-rest-framework-gis <https://github.com/openwisp/django-rest-framework-gis>`_\n        - `pydantic (>=2.0) <https://github.com/pydantic/pydantic>`_\n\n\nfor more information visit the `documentation <https://drf-spectacular.readthedocs.io/>`_.\n\nlicense\n-------\n\nprovided by `t. franzel <https://github.com/tfranzel>`_. `licensed under 3-clause bsd <https://github.com/tfranzel/drf-spectacular/blob/master/license>`_.\n\nrequirements\n------------\n\n-  python >= 3.6\n-  django (2.2, 3.2, 4.0, 4.1, 4.2, 5.0)\n-  django rest framework (3.10.3, 3.11, 3.12, 3.13, 3.14)\n\ninstallation\n------------\n\ninstall using ``pip``\\ ...\n\n.. code:: bash\n\n    $ pip install drf-spectacular\n\nthen add drf-spectacular to installed apps in ``settings.py``\n\n.. code:: python\n\n    installed_apps = [\n        # all your apps\n        'drf_spectacular',\n    ]\n\n\nand finally register our spectacular autoschema with drf.\n\n.. code:: python\n\n    rest_framework = {\n        # your settings\n        'default_schema_class': 'drf_spectacular.openapi.autoschema',\n    }\n\ndrf-spectacular ships with sane `default settings <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_\nthat should work reasonably well out of the box. it is not necessary to\nspecify any settings, but we recommend to specify at least some metadata.\n\n.. code:: python\n\n    spectacular_settings = {\n        'title': 'your project api',\n        'description': 'your project description',\n        'version': '1.0.0',\n        'serve_include_schema': false,\n        # other settings\n    }\n\n.. _self-contained-ui-installation:\n\nself-contained ui installation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ncertain environments have no direct access to the internet and as such are unable\nto retrieve swagger ui or redoc from cdns. `drf-spectacular-sidecar`_ provides\nthese static files as a separate optional package. usage is as follows:\n\n.. code:: bash\n\n    $ pip install drf-spectacular[sidecar]\n\n.. code:: python\n\n    installed_apps = [\n        # all your apps\n        'drf_spectacular',\n        'drf_spectacular_sidecar',  # required for django collectstatic discovery\n    ]\n    spectacular_settings = {\n        'swagger_ui_dist': 'sidecar',  # shorthand to use the sidecar instead\n        'swagger_ui_favicon_href': 'sidecar',\n        'redoc_dist': 'sidecar',\n        # other settings\n    }\n\n\nrelease management\n^^^^^^^^^^^^^^^^^^\n\n*drf-spectacular* deliberately stays below version *1.x.x* to signal that every\nnew version may potentially break you. for production we strongly recommend pinning the\nversion and inspecting a schema diff on update.\n\nwith that said, we aim to be extremely defensive w.r.t. breaking api changes. however,\nwe also acknowledge the fact that even slight schema changes may break your toolchain,\nas any existing bug may somehow also be used as a feature.\n\nwe define version increments with the following semantics. *y-stream* increments may contain\npotentially breaking changes to both api and schema. *z-stream* increments will never break the\napi and may only contain schema changes that should have a low chance of breaking you.\n\n\ntake it for a spin\n------------------\n\ngenerate your schema with the cli:\n\n.. code:: bash\n\n    $ ./manage.py spectacular --color --file schema.yml\n    $ docker run -p 80:8080 -e swagger_json=/schema.yml -v ${pwd}/schema.yml:/schema.yml swaggerapi/swagger-ui\n\nif you also want to validate your schema add the ``--validate`` flag. or serve your schema directly\nfrom your api. we also provide convenience wrappers for ``swagger-ui`` or ``redoc``.\n\n.. code:: python\n\n    from drf_spectacular.views import spectacularapiview, spectacularredocview, spectacularswaggerview\n    urlpatterns = [\n        # your patterns\n        path('api/schema/', spectacularapiview.as_view(), name='schema'),\n        # optional ui:\n        path('api/schema/swagger-ui/', spectacularswaggerview.as_view(url_name='schema'), name='swagger-ui'),\n        path('api/schema/redoc/', spectacularredocview.as_view(url_name='schema'), name='redoc'),\n    ]\n\nusage\n-----\n\n*drf-spectacular* works pretty well out of the box. you might also want to set some metadata for your api.\njust create a ``spectacular_settings`` dictionary in your ``settings.py`` and override the defaults.\nhave a look at the `available settings <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_.\n\nthe toy examples do not cover your cases? no problem, you can heavily customize how your schema will be rendered.\n\ncustomization by using ``@extend_schema``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nmost customization cases should be covered by the ``extend_schema`` decorator. we usually get\npretty far with specifying ``openapiparameter`` and splitting request/response serializers, but\nthe sky is the limit.\n\n.. code:: python\n\n    from drf_spectacular.utils import extend_schema, openapiparameter, openapiexample\n    from drf_spectacular.types import openapitypes\n\n    class albumviewset(viewset.modelviewset):\n        serializer_class = albumserializer\n\n        @extend_schema(\n            request=albumcreationserializer,\n            responses={201: albumserializer},\n        )\n        def create(self, request):\n            # your non-standard behaviour\n            return super().create(request)\n\n        @extend_schema(\n            # extra parameters added to the schema\n            parameters=[\n                openapiparameter(name='artist', description='filter by artist', required=false, type=str),\n                openapiparameter(\n                    name='release',\n                    type=openapitypes.date,\n                    location=openapiparameter.query,\n                    description='filter by release date',\n                    examples=[\n                        openapiexample(\n                            'example 1',\n                            summary='short optional summary',\n                            description='longer description',\n                            value='1993-08-23'\n                        ),\n                        ...\n                    ],\n                ),\n            ],\n            # override default docstring extraction\n            description='more descriptive text',\n            # provide authentication class that deviates from the views default\n            auth=none,\n            # change the auto-generated operation name\n            operation_id=none,\n            # or even completely override what autoschema would generate. provide raw open api spec as dict.\n            operation=none,\n            # attach request/response examples to the operation.\n            examples=[\n                openapiexample(\n                    'example 1',\n                    description='longer description',\n                    value=...\n                ),\n                ...\n            ],\n        )\n        def list(self, request):\n            # your non-standard behaviour\n            return super().list(request)\n\n        @extend_schema(\n            request=albumlikeserializer,\n            responses={204: none},\n            methods=[\"post\"]\n        )\n        @extend_schema(description='override a specific method', methods=[\"get\"])\n        @action(detail=true, methods=['post', 'get'])\n        def set_password(self, request, pk=none):\n            # your action behaviour\n            ...\n\nmore customization\n^^^^^^^^^^^^^^^^^^\n\nstill not satisfied? you want more! we still got you covered.\nvisit `customization <https://drf-spectacular.readthedocs.io/en/latest/customization.html>`_ for more information.\n\n\ntesting\n-------\n\ninstall testing requirements.\n\n.. code:: bash\n\n    $ pip install -r requirements.txt\n\nrun with runtests.\n\n.. code:: bash\n\n    $ ./runtests.py\n\nyou can also use the excellent `tox`_ testing tool to run the tests\nagainst all supported versions of python and django. install tox\nglobally, and then simply run:\n\n.. code:: bash\n\n    $ tox\n\n.. _django rest framework: https://www.django-rest-framework.org/\n.. _openapi: https://swagger.io/\n.. _3.0.3: https://spec.openapis.org/oas/v3.0.3\n.. _3.1: https://spec.openapis.org/oas/v3.1.0\n.. _tox: https://tox.wiki/\n.. _drf-spectacular-sidecar: https://github.com/tfranzel/drf-spectacular-sidecar\n\n.. |build-status| image:: https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml\n.. |pypi-version| image:: https://img.shields.io/pypi/v/drf-spectacular.svg\n   :target: https://pypi.org/project/drf-spectacular/\n.. |codecov| image:: https://codecov.io/gh/tfranzel/drf-spectacular/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tfranzel/drf-spectacular\n.. |docs| image:: https://readthedocs.org/projects/drf-spectacular/badge/\n   :target: https://drf-spectacular.readthedocs.io/\n.. |pypi-dl| image:: https://img.shields.io/pypi/dm/drf-spectacular\n   :target: https://pypi.org/project/drf-spectacular/\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "drf-spectacular",
  "package_url": "https://pypi.org/project/drf-spectacular/",
  "project_url": "https://pypi.org/project/drf-spectacular/",
  "project_urls": {
    "Documentation": "https://drf-spectacular.readthedocs.io",
    "Homepage": "https://github.com/tfranzel/drf-spectacular",
    "Source": "https://github.com/tfranzel/drf-spectacular"
  },
  "release_url": "https://pypi.org/project/drf-spectacular/0.27.0/",
  "requires_dist": [
    "Django >=2.2",
    "djangorestframework >=3.10.3",
    "uritemplate >=2.0.0",
    "PyYAML >=5.1",
    "jsonschema >=2.6.0",
    "inflection >=0.3.1",
    "typing-extensions ; python_version < \"3.10\"",
    "drf-spectacular-sidecar ; extra == 'offline'",
    "drf-spectacular-sidecar ; extra == 'sidecar'"
  ],
  "requires_python": ">=3.6",
  "summary": "sane and flexible openapi 3 schema generation for django rest framework",
  "version": "0.27.0",
  "releases": [],
  "developers": [
    "tfranzel@gmail.com"
  ],
  "kwds": "rest_framework djangorestframework rest_polymorphic schemas serve_include_schema",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_drf_spectacular",
  "homepage": "https://github.com/tfranzel/drf-spectacular",
  "release_count": 62,
  "dependency_ids": [
    "pypi_django",
    "pypi_djangorestframework",
    "pypi_drf_spectacular_sidecar",
    "pypi_inflection",
    "pypi_jsonschema",
    "pypi_pyyaml",
    "pypi_typing_extensions",
    "pypi_uritemplate"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "\n.. contents::\n\npymonad implements data structures typically available in pure\nfunctional or functional first programming languages like haskell and\nf#. included are monad and monoid data types with several common\nmonads included - such as maybe and state - as well as some useful\ntools such as the @curry decorator for defining curried\nfunctions. pymonad 2.0.x represents and almost complete re-write of\nthe library with a simpler, more consistent interface as well as type\nannotations to help ensure correct usage.\n\n1 getting started\n-----------------\n\nthese instructions will get you a copy of the project up and running\non your local machine for development and testing purposes.\n\n1.1 prerequisites\n~~~~~~~~~~~~~~~~~\n\npymonad requires python 3.7+. if installing via ``pip`` then you\nwill also need `pip <https://pypi.org/project/pip/>`_ and `wheel <https://pypi.org/project/wheel/>`_ installed. see those projects for\nmore information on installing them if necessary.\n\npotential contributors should additionally install `pylint <https://pypi.org/project/pylint/>`_ and\n`pytype <https://pypi.org/project/pytype/>`_ to ensure their code adheres to common style conventions.\n\n1.2 installing\n~~~~~~~~~~~~~~\n\n1.2.1 from the python package index (pypi) with pip\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nfrom a command line run:\n\n.. code:: bash\n\n    pip install pymonad\n\n1.2.2 manual build from pypi\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndownload the project files from\n`https://pypi.org/project/pymonad/#files <https://pypi.org/project/pymonad/#files>`_ and from the project\ndirectory run:\n\n.. code:: bash\n\n    python setup.py install\n\nif that doesn't work you may need to run the following instead.\n\n.. code:: bash\n\n    python3 setup.py install\n\n1.2.3 from github\n^^^^^^^^^^^^^^^^^\n\nclone the project repository:\n\n.. code:: bash\n\n    git clone https://github.com/jasondelaat/pymonad.git\n\nthen from the project directory run ``setup.py`` as for the manual\nbuild instructions above.\n\n1.2.4 example usage\n^^^^^^^^^^^^^^^^^^^\n\nthe following example imports the ``tools`` module and uses the\n``curry`` function to define a curried addition function.\n\n.. code:: python\n\n    import pymonad.tools\n\n    @pymonad.tools.curry(2) # pass the expected number of arguments to the curry function.\n    def add(x, y):\n        return x + y\n\n    # we can call add with all of it's arguments...\n    print(add(2, 3)) # prints '5'\n\n    # ...or only some of them.\n    add2 = add(2)  # creates a new function expecting a single arguments\n    print(add2(3)) # also prints '5'\n\n1.2.5 next steps\n^^^^^^^^^^^^^^^^\n\nthe pymonad documentation is a work in progress. for tutorials,\nhow-to, and more head over to the `pymonad documentation project <https://jasondelaat.github.io/pymonad_docs/>`_.\nif you'd like to contribute visit the documentation repository\n`here <https://github.com/jasondelaat/pymonad_docs>`_.\n\n1.3 upgrading from pymonad 1.3\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nif you've used the 1.x versions of pymonad you'll notice that\nthere are a few differences:\n\n1.3.1 curried functions\n^^^^^^^^^^^^^^^^^^^^^^^\n\ncurrying functions in pymonad version 1.x wrapped a function in\nan instance of the reader monad. this is no longer the case and\ncurrying simply produces a new function as one might expect. \n\nthe signature of ``curry`` has changed slightly. the new ``curry``\ntakes two arguments: the number of arguments which need to be\ncurried and the function.\n\n.. code:: python\n\n    from pymonad.tools import curry\n\n    def add(x, y):\n        return x + y\n\n    curried_add = curry(2, add)\n    # add = curry(2, add) # if you don't need access to the uncurried version.\n\n``curry`` is itself a curried function so it can be used more\nconcisely as a decorator.\n\n.. code:: python\n\n    from pymonad.tools import curry\n\n    @curry(2)\n    def add(x, y):\n        return x + y\n\n1.3.2 operators\n^^^^^^^^^^^^^^^\n\nversion 2 of pymonad discourages the use of operators (>>, \\\\\\*, and\n&) used in version 1 so old code which uses them will\nbreak. operators have been removed from the default monad\nimplementation but are still available for users that still wish\nto use them in the ``operators`` package. to use operators:\n\n.. code:: python\n\n    # instead of this:\n    # import pymonad.maybe\n\n    # do this:\n    import pymonad.operators.maybe\n\nwhile it's unlikely operators will be removed entirely, it is\nstrongly suggested that users write code that doesn't require\nthem.\n\n1.3.3 renamed methods\n^^^^^^^^^^^^^^^^^^^^^\n\nthe ``fmap`` method has been renamed to simply ``map`` and ``unit`` is now called ``insert``.\n\n.. code:: python\n\n    from pymonad.maybe import maybe\n\n    def add2(x):\n        return x + 2\n\n    m = (maybe.insert(1)\n         .map(add2)\n    )\n\n    print(m) # just 3\n\n1.3.4 applicative syntax\n^^^^^^^^^^^^^^^^^^^^^^^^\n\npreviously applicative syntax used the ``&`` operator or the ``amap``\nmethod. ``amap`` still exists but there's now another way to use\napplicatives: ``apply().to_arguments()``\n\n.. code:: python\n\n    from pymonad.tools import curry\n    from pymonad.maybe import maybe, just\n\n    @curry(2)\n    def add(x, y):\n        return x + y\n\n    a = just(1)\n    b = just(2)\n\n    c  = maybe.apply(add).to_arguments(a, b)\n    print(c) # just 3\n\nif the function passed to ``apply`` accepts multiple arguments then\nit *must* be a curried function.\n\n1.3.5 new ``then`` method\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthe ``then`` method combines the functionality of both ``map`` and\n``bind``. it first tries to ``bind`` the function passed to it and,\nif that doesn't work, tries ``map`` instead. it will be slightly\nless efficient than using ``map`` and ``bind`` directly but frees\nusers from having to worry about specifically which functions are\nbeing used where.\n\n.. code:: python\n\n    from pymonad.tools import curry\n    from pymonad.maybe import maybe, just, nothing\n\n    @curry(2)\n    def add(x, y):\n        return x + y\n\n    @curry(2)\n    def div(y, x):\n        if y == 0:\n    \treturn nothing\n        else:\n    \treturn just(x / y)\n\n    m = (maybe.insert(2)\n         .then(add(2)) # uses map\n         .then(div(4)) # uses bind\n    )\n\n    print(m) # just 1.0\n\n1.3.6 getting values out of ``maybe`` and ``either``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\npreviously, if you need to get a value out of a ``maybe`` or an\n``either`` after a series of calculations you would have to access\nthe ``.value`` property directly. by the very nature of these two\nmonads, ``.value`` may not contain valid data and checking whether\nthe data is valid or not is the problem these monads are supposed\nto solve. as of pymonad 2.3.0 there are methods -- ``maybe`` and\n``either`` -- for properly extracting values from these\nmonads.\n\ngiven a ``maybe`` value ``m``, the ``maybe`` method takes a default\nvalue, which will be returned if ``m`` is ``nothing``, and a function\nwhich will be applied to the value inside of a ``just``.\n\n.. code:: python\n\n    from pymonad.maybe import just, nothing\n\n    a = just(2)\n    b = nothing\n\n    print(a.maybe(0, lambda x: x)) # 2\n    print(b.maybe(0, lambda x: x)) # 0\n\nthe ``either`` method works essentially the same way but takes two\nfunctions as arguments. the first is applied if the value is a\n``left`` value and the second if it's a ``right``.\n\n.. code:: python\n\n    from pymonad.either import left, right\n\n    a = right(2)\n    b = left('invalid')\n\n    print(a.either(lambda x: f'sorry, {x}', lambda x: x)) # 2\n    print(b.either(lambda x: f'sorry, {x}', lambda x: x)) # sorry, invalid\n\n1.4 note on efficiency in versions <2.3.5\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nin pymonad versions 2.3.4 and earlier, an error in the\nimplementation of ``then`` meant that some monad\ntypes executed ``then`` with exponential complexity. as of version\n2.3.5 this has been corrected. all monad types now execute ``then``\nin linear time. a similar problem occured with the ``map`` and\n``bind`` methods for the state monad which have also been fixed in\n2.3.5\n\nif you're using an earlier version of pymonad upgrading to 2.3.5\nis highly recommended.\n\n2 running the tests\n-------------------\n\n2.1 unit tests\n~~~~~~~~~~~~~~\n\nthese tests primarily ensure that the defined monads and monoids\nobey the required mathematical laws.\n\non most \\*nix systems you should be able to run the automated tests\nby typing the following at the command line.\n\n.. code:: bash\n\n    ./run_tests.sh\n\nhowever, ``run_tests.sh`` is just a convenience. if the above doesn't\nwork the following should:\n\n.. code:: bash\n\n    python3 -m unittest discover test/\n\n2.2 style tests\n~~~~~~~~~~~~~~~\n\ncontributors only need to run ``pylint`` and ``pytype`` over their\ncode and ensure that there are no glaring style or type\nerrors. pymonad (mostly) attempts to adhere to the `google python style guide <https://google.github.io/styleguide/pyguide.html>`_ \nand includes type hinting according to `pep 484 <https://www.python.org/dev/peps/pep-0484/>`_.\n\nin general, don't disable ``pylint`` or ``pytype`` errors for the\nwhole project, instead disable them via comments in the code. see\nthe existing code for examples of errors which can be disabled.\n\n3 authors\n---------\n\n**jason delaat** - *primary author/maintainer* - `https://github.com/jasondelaat/pymonad <https://github.com/jasondelaat/pymonad>`_\n\n4 license\n---------\n\nthis project is licensed under the 3-clause bsd license. see\n`license.rst <./license.rst>`_ for details.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "pymonad",
  "package_url": "https://pypi.org/project/PyMonad/",
  "project_url": "https://pypi.org/project/PyMonad/",
  "project_urls": {
    "Homepage": "https://github.com/jasondelaat/pymonad"
  },
  "release_url": "https://pypi.org/project/PyMonad/2.4.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "data structures and utilities for monadic style functional programming.",
  "version": "2.4.0",
  "releases": [],
  "developers": [
    "jason.develops@gmail.com",
    "jason_delaat"
  ],
  "kwds": "pymonad_docs pymonad pyguide python3 pylint",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_pymonad",
  "homepage": "https://github.com/jasondelaat/pymonad",
  "release_count": 14,
  "dependency_ids": []
}
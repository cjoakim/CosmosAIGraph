{
  "classifiers": [
    "license :: other/proprietary license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "\npython in maya done right\n=========================\n\npymel makes python scripting with maya work the way it should.\n\nmaya's command module is a direct translation of mel commands into python commands. the result is a very awkward and unpythonic syntax which does not take advantage of python's strengths -- particulary, a flexible, object-oriented design. pymel builds on the `maya.cmds` module by organizing its commands into a class hierarchy, and by customizing them to operate in a more succinct and intuitive way.\n\nproject goals\n-------------\n\n- create an open-source python module for maya that is intuitive to mel users and python users alike\n- fix bugs and design limitations in maya's python modues, maya.cmds and maya.mel\n- keep code concise and readable\n- add organization through class hierarchy and sub-modules\n- provide documentation accessible via html and the builtin `help() function\n- make it \"just work\"\n\nsupported maya versions\n-----------------------\n\npymel supports four major versions of maya:\n\n- 2020\n- 2022\n- 2023\n- 2024\n\nsee the full [changelog](https://github.com/lumapictures/pymel/blob/master/changelog.rst).\n\nproduction proven\n-----------------\n\nsince its release in 2008, pymel has accumulated an impressive resume in both feature films and games, and is now bundled with every release of maya.\n\nhere's what seth gibson of bungie studios, makers of *halo*, has to say:\n\n> having done production python code myself for many years, wrapping my head around maya's native implementation took a little bit of time. with pymel, i can think and write the python code and syntax i'm already used to, which speeds up my development time considerably. it's also going to help our other technical artists with their python learning curve, since pymel's syntax is consistent with most other python packages. kudos to the pymel team for such a well thought out project!\n\nbsd license\n-----------\n\npymel is released under the bsd license, which is as open as open source gets. your studio can freely use, contribute to, and modify this module with no strings attached.\n\nfeatures\n--------\n\n### api hybridization\n\npymel harnesses the api to create a name-independent representation of your object. this means that the annoying inconsistencies of string comparisons are over: no more worrying about short names versus long names, dag paths, unique paths, instance paths... it's all handled intelligently for you. and what's more, if anything causes the name of your object to change it will automatically be reflected in your python object.\n\npymel node classes now include hundreds of new methods derived from the api, but with the same intuitive and unified design as before. with pymel you get the benefits of api speed and versatility without the advanced learning curve.\n\n### improved batch / standalone support\n\never wonder why python scripts that work in the maya ui or in maya batch don't work in maya's python interpreter?  here's a possible explanation: in both gui and batch modes maya sources all of its lowest-level mel scripts, like those that load user plugins, whereas mayapy and `maya.initialize` does not.\n\npymel ensures that maya is properly initialized when used from maya's python interpreter, which makes runtime environments more consistent and your scripts more portable, which adds up to fewer bugs.\n\n### tighter mel integration\n\nexecuting a mel script with arguments can be an unsightly mess when done the default way:\n\n**default**\n```python\nvalues = ['one', 'two', 'three', 'four']\nmaya.mel.eval('stringarrayremoveduplicates({\"'+'\",\"'.join(values)+'\"})')\n```\n\nso pymel provides a handy interface which makes calling mel procedures just like calling a python function:\n\n**pymel**\n```python\nvalues = ['one', 'two', 'three', 'four']\npm.mel.stringarrayremoveduplicates(values)\n```\n\nalso, unlike `maya.mel.eval`, pymel will give you the specific mel error message in a python traceback, along with line numbers:\n\n```python\n>>> mel.myscript('foo', [])\ntraceback (most recent call last):\n    ...\nmelconversionerror: error occurred during execution of mel script: line 2: cannot convert data of type string[] to type float.\n```\n\nalso, getting and setting mel global variables is as easy as working with a dictionary:\n\n```python\nprint(pm.melglobals['gmainfilemenu'])\npm.melglobals['ggriddisplaygridlinesdefault'] = 2\n```\n\n### powerful classes\n\n#### nodes\n\n```python\ncamtrans, cam = pm.camera()  # create a new camera\ncam.setfocallength(100)\nfov = cam.gethorizontalfieldofview()\ncam.dolly(-3)\ncam.track(left=10)\ncam.addbookmark('new')\n```\n\n#### attributes\n\n```python\ns = pm.polysphere()[0]\nif s.visibility.iskeyable() and not s.visibility.islocked():\n    s.visibility.set(true)\n    s.visibility.lock()\n    print(s.visibility.type())\n```\n\n#### file paths\n\nbackup all mb files in the current scene's directory\n\n```python\nbasedir = pm.scenename().parent\nbackupdir = basedir / \"backup\" #slash op joins paths\nif not backupdir.exists:\n    backupdir.mkdir()\nfor path in basedir.files('*.mb'):\n    print(\"backing up: \", path.name)\n    path.copy(backupdir / (path.namebase + \".old\"))\n```\n\n#### shape components and vectors/matrices\n\nselect all faces that point up in world space\n\n```python\ns = pm.polysphere()[0]\nfor face in s.faces:\n    if face.getnormal('world').y > 0.0:\n       pm.select(face, add=1)\n```\n\n#### optionvars dictionary\n\n```python\nif 'numbers' not in pm.optionvar:\n    pm.optionvar['numbers'] = [1, 24, 47]\npm.optionvar['numbers'].append(9)\nnumarray = pm.optionvar.pop('numbers')\n```\n\nwho is pymel for?\n-----------------\n\n### for the novice\n\nobject-oriented programming, like that provided by pymel, is more intuitive to learn because the functionality of an object is directly associated with the object itself.\n\nfor an artist starting to program in maya, the first question you might ask is \"what can i do with this node?\" using a procedural approach, like that offered by mel or maya.cmds, you'll have to dig through the thousands of mel commands looking for the one that you want. for a camera node, the `camera` mel command is easy to find, but did you find `orbit`, `track`, `dolly`, and `tumble`, which also work on cameras?  what about the api methods?\n\nin pymel, all you have to do is type `help(nt.camera)` in the python script editor to find out all the things a camera node can do, or just look up the camera class in the pymel docs.\n\n### for the mel scripter\n\nwhen we say pymel is concise and easy to read, we mean it.\n\n***mel***\n\n```mel\nstring $sel[] = `ls -sl`;\nstring $shapes[] = `listrelatives -s $sel[0]`;\nstring $conn[] = `listconnections -s 1 -d 0 $shapes[0]`;\nsetattr ( $conn[0] + \".radius\") 3;\n```\n\n***pymel***\n\n```python\npm.selected()[0].getshape().inputs()[0].radius.set(3)\n```\n\n### for the technical director\n\nfor those looking to master python in a production environment, pymel is more than a module for maya scripting, it is a repository of example python code -- a self-contained pipeline demonstrating advanced python concepts like function factories, metaclasses, and decorators, as well as essential production practices such as parsing, pickling, logging, and unit testing.\n\nfor those who are already masters of python and who naturally expect more out of a python package, pymel is for you, too. it was written for use in production by experienced programmers with a vision for how to add object-oriented design to maya.\n\ncode comparison\n---------------\n\n**with mel**\n\n```mel\nstring $objs[] = `ls -type transform`;\nfor ($x in $objs) {\n    print (longnameof($x)); print \"\\n\";\n\n    // make and break some connections\n    connectattr( $x + \".sx\") ($x + \".sy\");\n    connectattr( $x + \".sx\") ($x + \".sz\");\n\n    // disconnect all connections to .sx\n    string $conn[] = `listconnections -s 0 -d 1 -p 1 ($x + \".sx\")`;\n    for ($inputplug in $conn)\n        disconnectattr ($x + \".sx\") $inputplug;\n\n    // add and set a string array attribute with the history of this transform's shape\n    if ( !`attributeexists \"newat\" $x`)\n        addattr -ln newat -datatype stringarray $x;\n    string $shape[] = `listrelatives -s $x`;\n    string $history[] = `listhistory $shape[0]`;\n    string $elements = \"\";\n    for ($elem in $history)\n        $elements += \"\"\" + $elem + \"\" \";\n    eval (\"setattr -type stringarray \" + $x + \".newat \" + `size $history` + $elements);\n    print `getattr ( $x + \".newat\" )`;\n\n    // get and set some attributes\n    setattr ($x + \".rotate\") 1 1 1;\n    float $trans[] = `getattr ($x + \".translate\")`;\n    float $scale[] = `getattr ($x + \".scale\")`;\n    $trans[0] *= $scale[0];\n    $trans[1] *= $scale[1];\n    $trans[2] *= $scale[2];\n    setattr ($x + \".scale\") $trans[0] $trans[1] $trans[2];\n\n    // call a mel procedure\n    mymelscript( `nodetype $x`, $trans );\n}\n```\n\n**with default python**\n\n```python\nimport maya.cmds as cmds\nobjs = cmds.ls(type='transform')\n# returns none when it finds no matches\nif objs is not none:\n    for x in objs:\n        print(mm.eval('longnameof(\"%s\")' % x))\n\n        # make and break some connections\n        cmds.connectattr('%s.sx' % x,  '%s.sy' % x)\n        cmds.connectattr('%s.sx' % x,  '%s.sz' % x)\n\n        # disconnect all connections to .sx\n        conn = cmds.listconnections(x + \".sx\", s=0, d=1, p=1)\n        # returns none when it finds no match:\n        if conn is not none:\n            for inputplug in conn:\n                cmds.disconnectattr(x + \".sx\", inputplug)\n\n        # add and set a string array attribute with the history of this transform's shape\n        if not mm.eval('attributeexists \"newat\" \"%s\"' % x):\n            cmds.addattr(x, ln='newat', datatype='stringarray')\n        shape = cmds.listrelatives(x, s=1 )\n        if shape is not none:\n            history = cmds.listhistory( shape[0] )\n        else:\n            history = []\n        args = tuple(['%s.newat' % x, len(history)] + history)\n        cmds.setattr(*args,  type='stringarray' )\n\n        # get and set some attributes\n        cmds.setattr('%s.rotate' % x, 1, 1, 1)\n        scale = cmds.getattr('%s.scale' % x)\n        # maya packs the previous result in a list for no apparent reason:\n        scale = scale[0]\n        # the tuple must be converted to a list for item assignment:\n        trans = list(cmds.getattr('%s.translate' % x )[0])  \n        trans[0] *= scale[0]\n        trans[1] *= scale[1]\n        trans[2] *= scale[2]\n        cmds.setattr('%s.scale' % x, trans[0], trans[1], trans[2])\n        # call a mel procedure\n        mm.eval('mymelscript(\"%s\",{%s,%s,%s})' % (cmds.nodetype(x), trans[0], trans[1], trans[2]))\n```\n\n**with pymel**\n\n```python\n# safe to import into main namespace (but only recommended when scripting interactively)\nfrom pymel import *\nfor x in ls(type='transform'):\n    # object oriented design\n    print(x.longname())\n\n    # make and break some connections\n    x.sx.connect(x.sy)\n    x.sx.connect(x.sz)\n    # disconnect all connections to .sx\n    x.sx.disconnect()\n\n    # add and set a string array attribute with the history of this transform's shape\n    x.setattr('newat', x.getshape().history(), force=1)\n\n    # get and set some attributes\n    x.rotate.set([1, 1, 1])\n    trans = x.translate.get()\n    # vector math:\n    trans *= x.scale.get()\n    # ability to pass list/vector args\n    x.translate.set(trans)\n    # call a mel procedure\n    mel.mymelscript(x.type(), trans)\n```\n\nwith pymel, python and maya play well together.\n\ninstallation\n------------\n\nto install, use `pip` with the `mayapy` interpreter.\n\n### installing into maya's site-packages directory\n\nthe following commands will install pymel into the site-packages of the maya application directory:\n\n#### on macos:\n\n```\n/applications/autodesk/maya<version>/maya.app/contents/bin/mayapy -m pip install pymel\n```\n\n#### on linux:\n```\nsudo /usr/autodesk/maya<version>/bin/mayapy -m pip install pymel\n```\n\n#### on windows:\n\n(from a command window running as administrator)\n\n```\n/applications/autodesk/maya<version>/maya.app/contents/bin/mayapy -m pip install pymel\n```\n\n### installing into your user's site-packages directory\n\nif you do not have permissions to install into maya's site-packages, you can\ninstall into your user site-packages by adding the `--user` flag, e.g.\n\n```\n/usr/autodesk/maya<version>/bin/mayapy -m pip install pymel --user\n```\n\nto see where `pymel` was installed you can run:\n\n```\nmayapy -c \"import pymel;print(pymel.__file__)\"\n```\n\n### caveats\n\nolder versions of maya (2021 and earlier) may require installing `pip` before running `pip install`:\n\non linux and mac:\n```\ncurl https://bootstrap.pypa.io/get-pip.py | /usr/autodesk/maya2021/bin/mayapy\n```\n\n---\n\npymel is developed and maintained by [luma pictures](http://www.lumapictures.com).\n",
  "docs_url": null,
  "keywords": "maya,mel,3d,graphics,games,vfx,cg,animation",
  "license": "bsd",
  "name": "pymel",
  "package_url": "https://pypi.org/project/pymel/",
  "project_url": "https://pypi.org/project/pymel/",
  "project_urls": {
    "Homepage": "https://github.com/Lumapictures/pymel",
    "Repository": "https://github.com/Lumapictures/pymel"
  },
  "release_url": "https://pypi.org/project/pymel/1.4.0/",
  "requires_dist": [
    "future (>=0.18)"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*",
  "summary": "python in maya done right",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "chad_dombrova"
  ],
  "kwds": "mayapy maya maya2021 python programming",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pymel",
  "homepage": "https://github.com/lumapictures/pymel",
  "release_count": 10,
  "dependency_ids": [
    "pypi_future"
  ]
}
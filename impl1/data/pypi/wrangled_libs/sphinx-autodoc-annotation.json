{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3.3",
    "topic :: documentation"
  ],
  "description": "sphinx-autodoc-annotation\n=========================\n\n*use python 3 annotations in sphinx-enabled docstrings*\n\nif you're on python 3 and writing sphinx-enabled docstrings, you might feel like doing\nneedless work when typing ``:type arg:`` or ``:rtype:`` directives. after all, why not use\nannotations for this?\n\nsure, ``:param str arg: description`` is not a lot of work, but when you want to document your\nargument as a specific class for which you have a ``:class:`` link, then you need to use ``:type:``\nand it's cumbersome. by using this sphinx extension, you can turn this::\n\n    def f(a):\n        \"\"\"do something.\n        \n        :param a: description for a\n        :type a: :class:`classfora`\n        :rtype: str\n        \"\"\"\n\ninto::\n\n    def f(a: classfora) -> str:\n        \"\"\"do something.\n        \n        :param a: description for a\n        \"\"\"\n\ninstallation\n------------\n\nfirst, you need python 3.3+ and a sphinx documentation (with ``autodoc`` enabled).\n\nyou can install ``sphinx-autodoc-annotation`` with::\n\n    $ pip install sphinx-autodoc-annotation\n\nthen, you need to enable it in your ``conf.py`` file::\n\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinx_autodoc_annotation',\n    ]\n\nyou're done!\n\nusage\n-----\n\nall you need to do to use this extension is to properly annotate your functions and methods with\nexpected types for your arguments and return value. ``:type:`` and ``:rtype:`` directives will\nautomatically be added to your docstring.\n\nthese directives behave like if you added them manually, that is, your argument is not going to\nshow up only with ``:type arg:`` you *need* ``:param arg:`` to be there (with a description of what\nit does) for your type to show up.\n\nwhen there are no annotations, argument types are deduced from default values. if your default value\nis a ``bool``, ``str``, ``int`` or ``float``, the argument is going to be considered of that type.\nthat feature is there mainly because ``f(flag: bool = false)`` feels a bit redundant.\n\nin all cases, ``:type:`` and ``:rtype:`` directives in the docstring will always have precedence\nover annotations and defaults.",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "sphinx-autodoc-annotation",
  "package_url": "https://pypi.org/project/sphinx-autodoc-annotation/",
  "project_url": "https://pypi.org/project/sphinx-autodoc-annotation/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/hsoft/sphinx-autodoc-annotation"
  },
  "release_url": "https://pypi.org/project/sphinx-autodoc-annotation/1.0-1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "use python 3 annotations in sphinx-enabled docstrings",
  "version": "1.0-1",
  "releases": [],
  "developers": [
    "nh.techn@gmail.com",
    "virgil_dupras"
  ],
  "kwds": "sphinx_autodoc_annotation sphinx docstrings annotations docstring",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_sphinx_autodoc_annotation",
  "homepage": "https://github.com/hsoft/sphinx-autodoc-annotation",
  "release_count": 2,
  "dependency_ids": []
}
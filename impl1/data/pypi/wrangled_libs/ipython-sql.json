{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: database",
    "topic :: database :: front-ends"
  ],
  "description": "===========\nipython-sql\n===========\n\n:author: catherine devlin, http://catherinedevlin.blogspot.com\n\nintroduces a %sql (or %%sql) magic.\n\nconnect to a database, using `sqlalchemy url`_ connect strings, then issue sql\ncommands within ipython or ipython notebook.\n\n.. image:: https://raw.github.com/catherinedevlin/ipython-sql/master/examples/writers.png\n   :width: 600px\n   :alt: screenshot of ipython-sql in the notebook\n\nexamples\n--------\n\n.. code-block:: python\n\n    in [1]: %load_ext sql\n\n    in [2]: %%sql postgresql://will:longliveliz@localhost/shakes\n       ...: select * from character\n       ...: where abbrev = 'alice'\n       ...:\n    out[2]: [(u'alice', u'alice', u'alice', u'a lady attending on princess katherine', 22)]\n\n    in [3]: result = _\n\n    in [4]: print(result)\n    charid   charname   abbrev                description                 speechcount\n    =================================================================================\n    alice    alice      alice    a lady attending on princess katherine   22\n\n    in [4]: result.keys\n    out[5]: [u'charid', u'charname', u'abbrev', u'description', u'speechcount']\n\n    in [6]: result[0][0]\n    out[6]: u'alice'\n\n    in [7]: result[0].description\n    out[7]: u'a lady attending on princess katherine'\n\nafter the first connection, connect info can be omitted::\n\n    in [8]: %sql select count(*) from work\n    out[8]: [(43l,)]\n\nconnections to multiple databases can be maintained.  you can refer to\nan existing connection by username@database\n\n.. code-block:: python\n\n    in [9]: %%sql will@shakes\n       ...: select charname, speechcount from character\n       ...: where  speechcount = (select max(speechcount)\n       ...:                       from character);\n       ...:\n    out[9]: [(u'poet', 733)]\n\n    in [10]: print(_)\n    charname   speechcount\n    ======================\n    poet       733\n\nif no connect string is supplied, ``%sql`` will provide a list of existing connections;\nhowever, if no connections have yet been made and the environment variable ``database_url``\nis available, that will be used.\n\nfor secure access, you may dynamically access your credentials (e.g. from your system environment or `getpass.getpass`) to avoid storing your password in the notebook itself. use the `$` before any variable to access it in your `%sql` command.\n\n.. code-block:: python\n\n    in [11]: user = os.getenv('some_user')\n       ....: password = os.getenv('some_password')\n       ....: connection_string = \"postgresql://{user}:{password}@localhost/some_database\".format(user=user, password=password)\n       ....: %sql $connection_string\n    out[11]: u'connected: some_user@some_database'\n\nyou may use multiple sql statements inside a single cell, but you will\nonly see any query results from the last of them, so this really only\nmakes sense for statements with no output\n\n.. code-block:: python\n\n    in [11]: %%sql sqlite://\n       ....: create table writer (first_name, last_name, year_of_death);\n       ....: insert into writer values ('william', 'shakespeare', 1616);\n       ....: insert into writer values ('bertold', 'brecht', 1956);\n       ....:\n    out[11]: []\n\n\nas a convenience, dict-style access for result sets is supported, with the\nleftmost column serving as key, for unique values.\n\n.. code-block:: python\n\n    in [12]: result = %sql select * from work\n    43 rows affected.\n\n    in [13]: result['richard2']\n    out[14]: (u'richard2', u'richard ii', u'history of richard ii', 1595, u'h', none, u'moby', 22411, 628)\n\nresults can also be retrieved as an iterator of dictionaries (``result.dicts()``)\nor a single dictionary with a tuple of scalar values per key (``result.dict()``)\n\nvariable substitution \n---------------------\n\nbind variables (bind parameters) can be used in the \"named\" (:x) style.\nthe variable names used should be defined in the local namespace.\n\n.. code-block:: python\n\n    in [15]: name = 'countess'\n\n    in [16]: %sql select description from character where charname = :name\n    out[16]: [(u'mother to bertram',)]\n\nalternately, ``$variable_name`` or ``{variable_name}`` can be \nused to inject variables from the local namespace into the sql \nstatement before it is formed and passed to the sql engine.\n(using ``$`` and ``{}`` together, as in ``${variable_name}``, \nis not supported.)\n\n\n    in [17]: %sql select description from character where charname = '{name}' \n    out[17]: [(u'mother to bertram',)]\n\nbind variables are passed through to the sql engine and can only \nbe used to replace strings passed to sql.  ``$`` and ``{}`` are \nsubstituted before passing to sql and can be used to form sql \nstatements dynamically.\n\nassignment\n----------\n\nordinary ipython assignment works for single-line `%sql` queries:\n\n.. code-block:: python\n\n    in [18]: works = %sql select title, year from work\n    43 rows affected.\n\nthe `<<` operator captures query results in a local variable, and\ncan be used in multi-line ``%%sql``:\n\n.. code-block:: python\n\n    in [19]: %%sql works << select title, year\n        ...: from work\n        ...:\n    43 rows affected.\n    returning data to local variable works\n\nconnecting\n----------\n\nconnection strings are `sqlalchemy url`_ standard.\n\nsome example connection strings::\n\n    mysql+pymysql://scott:tiger@localhost/foo\n    oracle://scott:tiger@127.0.0.1:1521/sidname\n    sqlite://\n    sqlite:///foo.db\n    mssql+pyodbc://username:password@host/database?driver=sql+server+native+client+11.0\n\n.. _`sqlalchemy url`: http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls\n\nnote that ``mysql`` and ``mysql+pymysql`` connections (and perhaps others)\ndon't read your client character set information from .my.cnf.  you need\nto specify it in the connection string::\n\n    mysql+pymysql://scott:tiger@localhost/foo?charset=utf8\n\nnote that an ``impala`` connection with `impyla`_  for hiveserver2 requires disabling autocommit::\n\n    %config sqlmagic.autocommit=false\n    %sql impala://hserverhost:port/default?kerberos_service_name=hive&auth_mechanism=gssapi\n\n.. _impyla: https://github.com/cloudera/impyla\n\nconnection arguments not whitelisted by sqlalchemy can be provided as\na flag with (-a|--connection_arguments)the connection string as a json string.\nsee `sqlalchemy args`_.\n\n    | %sql --connection_arguments {\"timeout\":10,\"mode\":\"ro\"} sqlite:// select * from work;\n    | %sql -a '{\"timeout\":10, \"mode\":\"ro\"}' sqlite:// select * from work;\n\n.. _`sqlalchemy args`: https://docs.sqlalchemy.org/en/13/core/engines.html#custom-dbapi-args\n\ndsn connections\n~~~~~~~~~~~~~~~\n\nalternately, you can store connection info in a \nconfiguration file, under a section name chosen to \nrefer to your database.\n\nfor example, if dsn.ini contains \n\n    | [db_config_1] \n    | drivername=postgres \n    | host=my.remote.host \n    | port=5433 \n    | database=mydatabase \n    | username=myuser \n    | password=1234\n\nthen you can  \n\n    | %config sqlmagic.dsn_filename='./dsn.ini'\n    | %sql --section db_config_1 \n\nconfiguration\n-------------\n\nquery results are loaded as lists, so very large result sets may use up\nyour system's memory and/or hang your browser.  there is no autolimit\nby default.  however, `autolimit` (if set) limits the size of the result\nset (usually with a `limit` clause in the sql).  `displaylimit` is similar,\nbut the entire result set is still pulled into memory (for later analysis);\nonly the screen display is truncated.\n\n.. code-block:: python\n\n   in [2]: %config sqlmagic\n   sqlmagic options\n   --------------\n   sqlmagic.autocommit=<bool>\n       current: true\n       set autocommit mode\n   sqlmagic.autolimit=<int>\n       current: 0\n       automatically limit the size of the returned result sets\n   sqlmagic.autopandas=<bool>\n       current: false\n       return pandas dataframes instead of regular result sets\n   sqlmagic.column_local_vars=<bool>\n       current: false\n       return data into local variables from column names\n   sqlmagic.displaycon=<bool>\n       current: false\n       show connection string after execute\n   sqlmagic.displaylimit=<int>\n       current: none\n       automatically limit the number of rows displayed (full result set is still\n       stored)\n   sqlmagic.dsn_filename=<unicode>\n       current: 'odbc.ini'\n       path to dsn file. when the first argument is of the form [section], a\n       sqlalchemy connection string is formed from the matching section in the dsn\n       file.\n   sqlmagic.feedback=<bool>\n       current: false\n       print number of rows affected by dml\n   sqlmagic.short_errors=<bool>\n       current: true\n       don't display the full traceback on sql programming error\n   sqlmagic.style=<unicode>\n       current: 'default'\n       set the table printing style to any of prettytable's defined styles\n       (currently default, msword_friendly, plain_columns, random)\n\n   in[3]: %config sqlmagic.feedback = false\n\nplease note: if you have autopandas set to true, the displaylimit option will not apply. you can set the pandas display limit by using the pandas ``max_rows`` option as described in the `pandas documentation <http://pandas.pydata.org/pandas-docs/version/0.18.1/options.html#frequently-used-options>`_.\n\npandas\n------\n\nif you have installed ``pandas``, you can use a result set's\n``.dataframe()`` method\n\n.. code-block:: python\n\n    in [3]: result = %sql select * from character where speechcount > 25\n\n    in [4]: dataframe = result.dataframe()\n\n\nthe ``--persist`` argument, with the name of a \ndataframe object in memory, \nwill create a table name\nin the database from the named dataframe.  \nor use ``--append`` to add rows to an existing \ntable by that name.\n\n.. code-block:: python\n\n    in [5]: %sql --persist dataframe\n\n    in [6]: %sql select * from dataframe;\n\n.. _pandas: http://pandas.pydata.org/\n\ngraphing\n--------\n\nif you have installed ``matplotlib``, you can use a result set's\n``.plot()``, ``.pie()``, and ``.bar()`` methods for quick plotting\n\n.. code-block:: python\n\n    in[5]: result = %sql select title, totalwords from work where genretype = 'c'\n\n    in[6]: %matplotlib inline\n\n    in[7]: result.pie()\n\n.. image:: https://raw.github.com/catherinedevlin/ipython-sql/master/examples/wordcount.png\n   :alt: pie chart of word count of shakespeare's comedies\n\ndumping\n-------\n\nresult sets come with a ``.csv(filename=none)`` method.  this generates\ncomma-separated text either as a return value (if ``filename`` is not\nspecified) or in a file of the given name.\n\n.. code-block:: python\n\n    in[8]: result = %sql select title, totalwords from work where genretype = 'c'\n\n    in[9]: result.csv(filename='work.csv')\n\npostgresql features\n-------------------\n\n``psql``-style \"backslash\" `meta-commands`_ commands (``\\d``, ``\\dt``, etc.)\nare provided by `pgspecial`_.  example:\n\n.. code-block:: python\n\n    in[9]: %sql \\d\n\n.. _pgspecial: https://pypi.python.org/pypi/pgspecial\n\n.. _meta-commands: https://www.postgresql.org/docs/9.6/static/app-psql.html#app-psql-meta-commands\n\n\noptions\n-------\n\n``-l`` / ``--connections``\n    list all active connections\n\n``-x`` / ``--close <session-name>`` \n    close named connection \n\n``-c`` / ``--creator <creator-function>``\n    specify creator function for new connection\n\n``-s`` / ``--section <section-name>``\n    section of dsn_file to be used for generating a connection string\n\n``-p`` / ``--persist``\n    create a table name in the database from the named dataframe\n\n``--append``\n    like ``--persist``, but appends to the table if it already exists \n\n``-a`` / ``--connection_arguments <\"{connection arguments}\">``\n    specify dictionary of connection arguments to pass to sql driver\n\n``-f`` / ``--file <path>``\n    run sql from file at this path\n\ncaution \n-------\n\ncomments\n~~~~~~~~\n\nbecause ipyton-sql accepts ``--``-delimited options like ``--persist``, but ``--`` \nis also the syntax to denote a sql comment, the parser needs to make some assumptions.\n\n- if you try to pass an unsupported argument, like ``--lutefisk``, it will \n  be interpreted as a sql comment and will not throw an unsupported argument \n  exception.\n- if the sql statement begins with a first-line comment that looks like one \n  of the accepted arguments - like ``%sql --persist is great!`` - it will be \n  parsed like an argument, not a comment.  moving the comment to the second \n  line or later will avoid this.\n\ninstalling\n----------\n\ninstall the latest release with::\n\n    pip install ipython-sql\n\nor download from https://github.com/catherinedevlin/ipython-sql and::\n\n    cd ipython-sql\n    sudo python setup.py install\n\ndevelopment\n-----------\n\nhttps://github.com/catherinedevlin/ipython-sql\n\ncredits\n-------\n\n- matthias bussonnier for help with configuration\n- olivier le thanh duong for ``%config`` fixes and improvements\n- distribute_\n- buildout_\n- modern-package-template_\n- mike wilson for bind variable code\n- thomas kluyver and steve holden for debugging help\n- berton earnshaw for dsn connection syntax\n- bruno harbulot for dsn example \n- andr\u00e9s celis for sql server bugfix\n- michael erasmus for dataframe truth bugfix\n- noam finkelstein for readme clarification\n- xiaochuan yu for `<<` operator, syntax colorization\n- amjith ramanujam for pgspecial and incorporating it here\n- alexander maznev for better arg parsing, connections accepting specified creator\n- jonathan larkin for configurable displaycon \n- jared moore for ``connection-arguments`` support\n- gilbert brault for ``--append`` \n- lucas zeer for multi-line bugfixes for var substitution, ``<<`` \n- vkk800 for ``--file``\n- jens albrecht for mysql databaseerror bugfix\n- meihkv for connection-closing bugfix\n- abhinav c for sqlalchemy 2.0 compatibility\n\n.. _distribute: http://pypi.python.org/pypi/distribute\n.. _buildout: http://www.buildout.org/\n.. _modern-package-template: http://pypi.python.org/pypi/modern-package-template\n\n\nnews\n----\n\n0.1\n~~~\n\n*release date: 21-mar-2013*\n\n* initial release\n\n0.1.1\n~~~~~\n\n*release date: 29-mar-2013*\n\n* release to pypi\n\n* results returned as lists\n\n* print(_) to get table form in text console\n\n* set autolimit and text wrap in configuration\n\n\n0.1.2\n~~~~~\n\n*release date: 29-mar-2013*\n\n* python 3 compatibility\n\n* use prettyprint package\n\n* allow multiple sql per cell\n\n0.2.0\n~~~~~\n\n*release date: 30-may-2013*\n\n* accept bind variables (thanks mike wilson!)\n\n0.2.1\n~~~~~\n\n*release date: 15-june-2013*\n\n* recognize socket connection strings\n\n* bugfix - issue 4 (remember existing connections by case)\n\n0.2.2\n~~~~~\n\n*release date: 30-july-2013*\n\nconverted from an ipython plugin to an extension for 1.0 compatibility\n\n0.2.2.1\n~~~~~~~\n\n*release date: 01-aug-2013*\n\ndeleted plugin import left behind in 0.2.2\n\n0.2.3\n~~~~~\n\n*release date: 20-sep-2013*\n\n* contributions from olivier le thanh duong:\n\n  - sql errors reported without internal ipython error stack\n\n  - proper handling of configuration\n\n* added .dataframe(), .pie(), .plot(), and .bar() methods to\n  result sets\n\n0.3.0\n~~~~~\n\n*release date: 13-oct-2013*\n\n* displaylimit config parameter\n\n* reports number of rows affected by each query\n\n* test suite working again\n\n* dict-style access for result sets by primary key\n\n0.3.1\n~~~~~\n\n* reporting of number of rows affected configurable with ``feedback``\n\n* local variables usable as sql bind variables\n\n0.3.2\n~~~~~\n\n* ``.csv(filename=none)`` method added to result sets\n\n0.3.3\n~~~~~\n\n* python 3 compatibility restored\n* dsn access supported (thanks berton earnshaw)\n\n0.3.4\n~~~~~\n\n* persist pseudo-sql command added\n\n0.3.5\n~~~~~\n\n* indentations visible in html cells\n* commit each sql statement immediately - prevent locks\n\n0.3.6\n~~~~~\n\n* fixed issue #30, commit failures for sqlite (thanks stonebig, jandot)\n\n0.3.7\n~~~~~\n\n* new `column_local_vars` config option submitted by darikg\n* avoid contaminating user namespace from locals (thanks alope107)\n\n0.3.7.1\n~~~~~~~\n\n* avoid \"connection busy\" error for sql server (thanks andr\u00e9s celis)\n\n0.3.8\n~~~~~\n\n* stop warnings for deprecated use of ipython 3 traitlets in ipython 4 (thanks graphaelli; also stonebig, aebrahim, mccahill)\n* readme update for keeping connection info private, from eshilts\n\n0.3.9\n~~~~~\n\n* fix truth value of dataframe error (thanks michael-erasmus)\n* `<<` operator (thanks xiaochuanyu)\n* added readme example (thanks tanhuil)\n* bugfix in executing column_local_vars (thanks tebeka)\n* pgspecial installation optional (thanks jstoebel and arjoe)\n* conceal passwords in connection strings (thanks jstoebel)\n\n0.3.9\n~~~~~\n\n* restored python 2 compatibility (thanks tokenmathguy)\n\n0.4.0\n~~~~~\n\n* changed most non-sql commands to argparse arguments (thanks pik)\n* user can specify a creator for connections (thanks pik)\n* bogus pseudo-sql command `persist` removed, replaced with `--persist` arg\n* turn off echo of connection information with `displaycon` in config\n* consistent support for {} variables (thanks lucas)\n\n0.4.1\n~~~~~\n\n* fixed .rst file location in manifest.in \n* parse sql comments in first line\n* bugfixes for dsn, `--close`, others\n\n0.5.0 \n~~~~~\n\n* use sqlalchemy 2.0 \n* drop undocumented support for dict-style access to raw row instances\n",
  "docs_url": null,
  "keywords": "database ipython postgresql mysql",
  "license": "mit",
  "name": "ipython-sql",
  "package_url": "https://pypi.org/project/ipython-sql/",
  "project_url": "https://pypi.org/project/ipython-sql/",
  "project_urls": {
    "Homepage": "https://github.com/catherinedevlin/ipython-sql",
    "Source": "https://github.com/catherinedevlin/ipython-sql"
  },
  "release_url": "https://pypi.org/project/ipython-sql/0.5.0/",
  "requires_dist": [
    "prettytable",
    "ipython",
    "sqlalchemy (>=2.0)",
    "sqlparse",
    "six",
    "ipython-genutils"
  ],
  "requires_python": "",
  "summary": "rdbms access via ipython",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "catherine.devlin@gmail.com",
    "catherine_devlin"
  ],
  "kwds": "sqlalchemy pymysql ipython sqlmagic some_database",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ipython_sql",
  "homepage": "https://github.com/catherinedevlin/ipython-sql",
  "release_count": 19,
  "dependency_ids": [
    "pypi_ipython",
    "pypi_ipython_genutils",
    "pypi_prettytable",
    "pypi_six",
    "pypi_sqlalchemy",
    "pypi_sqlparse"
  ]
}
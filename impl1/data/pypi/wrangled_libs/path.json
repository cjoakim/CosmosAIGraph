{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/path.svg\n   :target: https://pypi.org/project/path\n\n.. image:: https://img.shields.io/pypi/pyversions/path.svg\n\n.. image:: https://github.com/jaraco/path/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/path/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/path/badge/?version=latest\n   :target: https://path.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/path\n   :target: https://tidelift.com/subscription/pkg/pypi-path?utm_source=pypi-path&utm_medium=readme\n\n\n``path`` (aka path pie, formerly ``path.py``) implements path\nobjects as first-class entities, allowing common operations on\nfiles to be invoked on those path objects directly. for example:\n\n.. code-block:: python\n\n    from path import path\n\n    d = path(\"/home/guido/bin\")\n    for f in d.files(\"*.py\"):\n        f.chmod(0o755)\n\n    # globbing\n    for f in d.files(\"*.py\"):\n        f.chmod(\"u+rwx\")\n\n    # changing the working directory:\n    with path(\"somewhere\"):\n        # cwd in now `somewhere`\n        ...\n\n    # concatenate paths with /\n    foo_txt = path(\"bar\") / \"foo.txt\"\n\npath pie is `hosted at github <https://github.com/jaraco/path>`_.\n\nfind `the documentation here <https://path.readthedocs.io>`_.\n\nguides and testimonials\n=======================\n\nyasoob wrote the python 101 `writing a cleanup script\n<http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/>`_\nbased on ``path``.\n\nadvantages\n==========\n\npath pie provides a superior experience to similar offerings.\n\npython 3.4 introduced\n`pathlib <https://docs.python.org/3/library/pathlib.html>`_,\nwhich shares many characteristics with ``path``. in particular,\nit provides an object encapsulation for representing filesystem paths.\none may have imagined ``pathlib`` would supersede ``path``.\n\nbut the implementation and the usage quickly diverge, and ``path``\nhas several advantages over ``pathlib``:\n\n- ``path`` implements ``path`` objects as a subclass of ``str``, and as a\n  result these ``path`` objects may be passed directly to other apis that\n  expect simple text representations of paths, whereas with ``pathlib``, one\n  must first cast values to strings before passing them to apis that do\n  not honor `pep 519 <https://www.python.org/dev/peps/pep-0519/>`_\n  ``pathlike`` interface.\n- ``path`` give quality of life features beyond exposing basic functionality\n  of a path. ``path`` provides methods like ``rmtree`` (from shlib) and\n  ``remove_p`` (remove a file if it exists), properties like ``.permissions``,\n  and sophisticated ``walk``, ``tempdir``, and ``chmod`` behaviors.\n- as a pypi-hosted package, ``path`` is free to iterate\n  faster than a stdlib package. contributions are welcome\n  and encouraged.\n- ``path`` provides superior portability using a uniform abstraction\n  over its single path object,\n  freeing the implementer to subclass it readily. one cannot\n  subclass a ``pathlib.path`` to add functionality, but must\n  subclass ``path``, ``posixpath``, and ``windowspath``, even\n  to do something as simple as to add a ``__dict__`` to the subclass\n  instances.  ``path`` instead allows the ``path.module``\n  object to be overridden by subclasses, defaulting to the\n  ``os.path``. even advanced uses of ``path.path`` that\n  subclass the model do not need to be concerned with\n  os-specific nuances. ``path.path`` objects are inherently \"pure\",\n  not requiring the author to distinguish between pure and non-pure\n  variants.\n\nthis path project has the explicit aim to provide compatibility\nwith ``pathlib`` objects where possible, such that a ``path.path``\nobject is a drop-in replacement for ``pathlib.path*`` objects.\nthis project welcomes contributions to improve that compatibility\nwhere it's lacking.\n\n\norigins\n=======\n\nthe ``path.py`` project was initially released in 2003 by jason orendorff\nand has been continuously developed and supported by several maintainers\nover the years.\n\n\nfor enterprise\n==============\n\navailable as part of the tidelift subscription.\n\nthis project and the maintainers of thousands of other packages are working with tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`learn more <https://tidelift.com/subscription/pkg/pypi-path?utm_source=pypi-path&utm_medium=referral&utm_campaign=github>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "path",
  "package_url": "https://pypi.org/project/path/",
  "project_url": "https://pypi.org/project/path/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/path"
  },
  "release_url": "https://pypi.org/project/path/16.9.0/",
  "requires_dist": [
    "sphinx >=3.5 ; extra == 'docs'",
    "sphinx <7.2.5 ; extra == 'docs'",
    "jaraco.packaging >=9.3 ; extra == 'docs'",
    "rst.linker >=1.9 ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "jaraco.tidelift >=1.4 ; extra == 'docs'",
    "pytest >=6 ; extra == 'testing'",
    "pytest-checkdocs >=2.4 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler >=2.2 ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "appdirs ; extra == 'testing'",
    "packaging ; extra == 'testing'",
    "more-itertools ; extra == 'testing'",
    "pygments ; extra == 'testing'",
    "pytest-black >=0.3.7 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy >=0.9.1 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pywin32 ; (platform_system == \"Windows\" and python_version < \"3.12\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "a module wrapper for os.path",
  "version": "16.9.0",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason.orendorff@gmail.com",
    "jason_orendorff",
    "jason_r"
  ],
  "kwds": "badge pathlib ruff badges image",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_path",
  "homepage": "https://github.com/jaraco/path",
  "release_count": 22,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_furo",
    "pypi_jaraco.packaging",
    "pypi_jaraco.tidelift",
    "pypi_more_itertools",
    "pypi_packaging",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_pywin32",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint"
  ]
}
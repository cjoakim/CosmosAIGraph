{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\r\n# more math!  \r\n\r\nbasic math functions that have been stabilized to act well over `null`/`none`/`nan`\r\n\r\n\r\n|branch      |status   |\r\n|------------|---------|\r\n|master      | [![build status](https://app.travis-ci.com/klahnakoski/mo-math.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-math) |\r\n|dev         | [![build status](https://app.travis-ci.com/klahnakoski/mo-math.svg?branch=dev)](https://travis-ci.com/github/klahnakoski/mo-math)    |\r\n\r\n\r\n\r\n## overview\r\n\r\nmany of the basic math functions you know and love, with the additional benefit \r\nthat they do not throw exceptions and do not return `nan`. \r\n\r\nthese functions are all module methods. be sure you call the functions \r\nwith `mo_math.` prefix, like \r\n\r\n    import mo_math\r\n\tmo_math.abs(-42)\r\n\r\nor rename the functions\r\n\r\n    from mo_math import abs as mo_abs\r\n    mo_abs(-42)\r\n\r\nthis prevents confusion with the `__builtin__` functions by the same name   \r\n\r\n\r\n## functions\r\n\r\nfunctions are generally [conservative](https://github.com/mozilla/activedata/blob/dev/docs/jx_decisive_operators.md#definitions) in the face of nulls: specifically, they return `null` if any of their operands are not a number.\r\n\r\nmost functions need no introduction, but some are interesting:\r\n\r\n- `round(value, decimal=7, digits=none)` - rounds to 7 decimal points, unless specified differently.  rounding to `decimal=0` will return an `int`. the useful parameter here is `digits`, which rounds to a specified number of significant digits.\r\n- `floor(value, mod=1)` - the `mod`ulo parameter is used to specify the granularity of the floor function.\r\n- `ceiling(value, mod=1)` - return the smallest value, that's equal or larger than `value`, with suitable granularity.\r\n- `mod(value, mod=1)` - works on floats\r\n- `approx_str(value)` - round values, and return `text` (`unicode` in py2, `str` in py3) \r\n- `sign(v)` - missing from the python library \r\n\r\n\r\nthe all-caps aggregate functions accept only one parameter; an iterable. they are [decisive](https://github.com/mozilla/activedata/blob/dev/docs/jx_decisive_operators.md#definitions) operators: non-numbers are ignored, if no values are numbers then the aggregate will return `null`.\r\n\r\n- `count(values)`\r\n- `sum(values)` \r\n- `product(values)` \r\n- `min(values)` \r\n- `max(values)` \r\n\r\n## crypto\r\n\r\nthe aes and rsa crypto functions provide structured input/output on top of `cryptography` library. the intent is to reveal the signed/encrypted structures so third parties can decode the data.\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "mo-math",
  "package_url": "https://pypi.org/project/mo-math/",
  "project_url": "https://pypi.org/project/mo-math/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/mo-math"
  },
  "release_url": "https://pypi.org/project/mo-math/7.455.23316/",
  "requires_dist": [
    "mo-dots ==9.455.23316",
    "mo-future ==7.449.23304",
    "mo-json ; extra == 'tests'",
    "mo-testing ; extra == 'tests'",
    "pyLibrary ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "more math! many of the aggregates you are familiar with, but null-safe",
  "version": "7.455.23316",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "mo_math mo_abs python functions nan",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_mo_math",
  "homepage": "https://github.com/klahnakoski/mo-math",
  "release_count": 82,
  "dependency_ids": [
    "pypi_mo_dots",
    "pypi_mo_future",
    "pypi_mo_json",
    "pypi_mo_testing",
    "pypi_pylibrary"
  ]
}
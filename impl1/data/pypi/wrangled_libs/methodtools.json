{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "methodtools\n===========\n\nexpand functools features to methods, classmethods, staticmethods and even for\n(unofficial) hybrid methods.\n\nfor now, methodtools only provides `methodtools.lru_cache`.\n\nuse `methodtools` module instead of `functools` module. than it will work as\nyou expected.\n\n.. code:: python\n\n    from methodtools import lru_cache\n\n    class a(object):\n\n        # cached method. the storage lifetime follows `self` object\n        @lru_cache()\n        def cached_method(self, args):\n            ...\n\n        # cached classmethod. the storage lifetime follows `a` class\n        @lru_cache()  # the order is important!\n        @classmethod  # always lru_cache on top of classmethod\n        def cached_classmethod(self, args):\n            ...\n\n        # cached staticmethod. the storage lifetime follows `a` class\n        @lru_cache()  # the order is important!\n        @staticmethod  # always lru_cache on top of staticmethod\n        def cached_staticmethod(self, args):\n            ...\n\n    @lru_cache()  # just same as functools.lru_cache\n    def cached_function():\n        ...\n\n\ninstallation\n------------\n\npypi is the recommended way.\n\n.. sourcecode:: shell\n\n    $ pip install methodtools\n\nto browse versions and tarballs, visit:\n    `<https://pypi.python.org/pypi/methodtools/>`_\n\n.. note::\n    if you are working on python 2, install also `functools32`.\n\n\nsee also\n--------\n\n- [documentation](https://methodtools.readthedocs.io/en/latest/)\n- this project is derived from `ring <https://github.com/youknowone/ring/>`_,\n  a rich cache interface using the same method handling technique.\n- to learn more about bound method dispatching, see also\n  [wirerope](https://github.com/youknowone/wirerope).\n",
  "docs_url": null,
  "keywords": "ring,functools,lru_cache,method",
  "license": "bsd 2-clause license",
  "name": "methodtools",
  "package_url": "https://pypi.org/project/methodtools/",
  "project_url": "https://pypi.org/project/methodtools/",
  "project_urls": {
    "Homepage": "https://github.com/youknowone/methodtools"
  },
  "release_url": "https://pypi.org/project/methodtools/0.4.7/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "expand standard functools to methods",
  "version": "0.4.7",
  "releases": [],
  "developers": [
    "jeong_yunwon",
    "methodtools@youknowone.org"
  ],
  "kwds": "cached_classmethod cached_method lru_cache cached_staticmethod cached_function",
  "license_kwds": "bsd 2-clause license",
  "libtype": "pypi",
  "id": "pypi_methodtools",
  "homepage": "https://github.com/youknowone/methodtools",
  "release_count": 10,
  "dependency_ids": []
}
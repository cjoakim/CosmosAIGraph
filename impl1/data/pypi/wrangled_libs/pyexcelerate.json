{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "pyexcelerate\n============\n\naccelerated excel xlsx writing library for python\n\nmaster: |build-status-master| dev: |build-status-dev| test coverage:\n|coverage-status|\n\n-  authors: `kevin wang <https://github.com/kevmo314>`__ and `kevin\n   zhang <https://github.com/kz26>`__\n-  copyright 2015 kevin wang, kevin zhang. portions copyright google,\n   inc.\n-  license: simplified bsd license\n-  `source repository <https://github.com/kz26/pyexcelerate>`__\n-  `pypi page <https://pypi.python.org/pypi/pyexcelerate>`__\n\ndescription\n-----------\n\npyexcelerate is a python for writing excel-compatible xlsx spreadsheet\nfiles, with an emphasis on speed.\n\nbenchmarks\n~~~~~~~~~~\n\n| benchmark code located in pyexcelerate/tests/benchmark.py\n| ubuntu 12.04 lts, core i5-3450, 8gb ddr3, python 2.7.3\n\n::\n\n\n   |          test_name          | num_rows | num_cols | time_in_seconds |\n   |-----------------------------|----------|----------|-----------------|\n   | pyexcelerate value fastest  |     1000 |      100 |            0.47 |\n   | pyexcelerate value faster   |     1000 |      100 |            0.51 |\n   | pyexcelerate value fast     |     1000 |      100 |            1.53 |\n   | xlsxwriter value            |     1000 |      100 |            0.84 |\n   | openpyxl                    |     1000 |      100 |            2.74 |\n   | pyexcelerate style cheating |     1000 |      100 |            1.23 |\n   | pyexcelerate style fastest  |     1000 |      100 |            2.40 |\n   | pyexcelerate style faster   |     1000 |      100 |            2.75 |\n   | pyexcelerate style fast     |     1000 |      100 |            6.15 |\n   | xlsxwriter style cheating   |     1000 |      100 |            1.21 |\n   | xlsxwriter style            |     1000 |      100 |            4.85 |\n   | openpyxl                    |     1000 |      100 |            6.32 |\n\n    * cheating refers to pregeneration of styles\n\ninstallation\n------------\n\npyexcelerate is supported on python 2.6, 2.7, 3.3, 3,4, and 3.5.\n\n::\n\n    pip install pyexcelerate\n\nusage\n-----\n\nwriting bulk data\n~~~~~~~~~~~~~~~~~\n\nfastest\n^^^^^^^\n\n::\n\n    from pyexcelerate import workbook\n\n    data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # data is a 2d array\n\n    wb = workbook()\n    wb.new_sheet(\"sheet name\", data=data)\n    wb.save(\"output.xlsx\")\n\nwriting bulk data to a range\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npyexcelerate also permits you to write data to ranges directly, which is\nfaster than writing cell-by-cell.\n\nfastest\n^^^^^^^\n\n::\n\n    from pyexcelerate import workbook\n\n    wb = workbook()\n    ws = wb.new_sheet(\"test\")\n    ws.range(\"b2\", \"c3\").value = [[1, 2], [3, 4]]\n    wb.save(\"output.xlsx\")\n\nwriting cell data\n~~~~~~~~~~~~~~~~~\n\nfaster\n^^^^^^\n\n::\n\n    from datetime import datetime\n    from pyexcelerate import workbook\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_cell_value(1, 1, 15) # a number\n    ws.set_cell_value(1, 2, 20)\n    ws.set_cell_value(1, 3, \"=sum(a1,b1)\") # a formula\n    ws.set_cell_value(1, 4, datetime.now()) # a date\n    wb.save(\"output.xlsx\")\n\nfast\n^^^^\n\n::\n\n    from datetime import datetime\n    from pyexcelerate import workbook\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws[1][1].value = 15 # a number\n    ws[1][2].value = 20\n    ws[1][3].value = \"=sum(a1,b1)\" # a formula\n    ws[1][4].value = datetime.now() # a date\n    wb.save(\"output.xlsx\")\n\nselecting cells by name\n~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    from pyexcelerate import workbook\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.cell(\"a1\").value = 12\n    wb.save(\"output.xlsx\")\n\nmerging cells\n~~~~~~~~~~~~~\n\n::\n\n    from pyexcelerate import workbook\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws[1][1].value = 15\n    ws.range(\"a1\", \"b1\").merge()\n    wb.save(\"output.xlsx\")\n\nstyling cells\n~~~~~~~~~~~~~\n\nstyling cells causes **non-negligible** overhead. it **will** increase\nyour execution time (up to 10x longer if done improperly!). only style\ncells if absolutely necessary.\n\nfastest\n^^^^^^^\n\n::\n\n    from pyexcelerate import workbook, color, style, font, fill, format\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_cell_value(1, 1, 1)\n    ws.set_cell_style(1, 1, style(font=font(bold=true)))\n    ws.set_cell_style(1, 1, style(font=font(italic=true)))\n    ws.set_cell_style(1, 1, style(font=font(underline=true)))\n    ws.set_cell_style(1, 1, style(font=font(strikethrough=true)))\n    ws.set_cell_style(1, 1, style(fill=fill(background=color(255,0,0,0))))\n    ws.set_cell_value(1, 2, datetime.now())\n    ws.set_cell_style(1, 1, style(format=format('mm/dd/yy')))\n    wb.save(\"output.xlsx\")\n\nfaster\n^^^^^^\n\n::\n\n    from pyexcelerate import workbook, color\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_cell_value(1, 1, 1)\n    ws.get_cell_style(1, 1).font.bold = true\n    ws.get_cell_style(1, 1).font.italic = true\n    ws.get_cell_style(1, 1).font.underline = true\n    ws.get_cell_style(1, 1).font.strikethrough = true\n    ws.get_cell_style(1, 1).fill.background = color(0, 255, 0, 0)\n    ws.set_cell_value(1, 2, datetime.now())\n    ws.get_cell_style(1, 1).format.format = 'mm/dd/yy'\n    wb.save(\"output.xlsx\")\n\nfast\n^^^^\n\n::\n\n    from pyexcelerate import workbook, color\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws[1][1].value = 1\n    ws[1][1].style.font.bold = true\n    ws[1][1].style.font.italic = true\n    ws[1][1].style.font.underline = true\n    ws[1][1].style.font.strikethrough = true\n    ws[1][1].style.fill.background = color(0, 255, 0, 0)\n    ws[1][2].value = datetime.now()\n    ws[1][2].style.format.format = 'mm/dd/yy'\n    wb.save(\"output.xlsx\")\n\n**note** that ``.style.format.format``'s repetition is due to planned\nsupport for conditional formatting and other related features. the\nformatting syntax may be improved in the future.\n\nstyling ranges\n~~~~~~~~~~~~~~\n\n::\n\n    from pyexcelerate import workbook, color\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"test\")\n    ws.range(\"a1\",\"c3\").value = 1\n    ws.range(\"a1\",\"c1\").style.font.bold = true\n    ws.range(\"a2\",\"c3\").style.font.italic = true\n    ws.range(\"a3\",\"c3\").style.fill.background = color(255, 0, 0, 0)\n    ws.range(\"c1\",\"c3\").style.font.strikethrough = true\n\nstyling rows\n~~~~~~~~~~~~\n\na simpler (and faster) way to style an entire row.\n\nfastest\n^^^^^^^\n\n::\n\n    from pyexcelerate import workbook, color, style, fill\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_row_style(1, style(fill=fill(background=color(255,0,0,0))))\n    wb.save(\"output.xlsx\")\n\nfaster\n^^^^^^\n\n::\n\n    from pyexcelerate import workbook, color\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.get_row_style(1).fill.background = color(255, 0, 0)\n    wb.save(\"output.xlsx\")\n\nfast\n^^^^\n\n::\n\n    from pyexcelerate import workbook, color\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws[1].style.fill.background = color(255, 0, 0)\n    wb.save(\"output.xlsx\")\n\nstyling columns\n~~~~~~~~~~~~~~~\n\nfastest\n^^^^^^^\n\n::\n\n    from pyexcelerate import workbook, color, style, fill\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_col_style(1, style(fill=fill(background=color(255,0,0,0))))\n    wb.save(\"output.xlsx\")\n\navailable style attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nconsistent with the implementation patterns above, the following style\nparameters are available:\n\n::\n\n    ws[1][1].style.font.bold = true\n    ws[1][1].style.font.italic = true\n    ws[1][1].style.font.underline = true\n    ws[1][1].style.font.strikethrough = true\n    ws[1][1].style.font.color = color(255, 0, 255)\n    ws[1][1].style.fill.background = color(0, 255, 0)\n    ws[1][1].style.alignment.vertical = 'top'\n    ws[1][1].style.alignment.horizontal = 'right'\n    ws[1][1].style.alignment.rotation = 90\n    ws[1][1].style.alignment.wrap_text = true\n    ws[1][1].style.borders.top.color = color(255, 0, 0)\n    ws[1][1].style.borders.right.style = '-.'\n\neach attribute also has constructors for implementing via\n``set_cell_style()``.\n\nthe following border styles are available: ``.-``, ``..-``, ``--``,\n``..``, ``=``, ``.``, ``medium -.``, ``medium -..``, ``medium --``,\n``/-.``, ``_``\n\nsetting row heights and column widths\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nrow heights and column widths are set using the ``size`` attribute in\n``style``. appropriate values are: \\* ``-1`` for auto-fit \\* ``0`` for\nhidden \\* any other value for the appropriate size.\n\nfor example, to hide column b:\n\n::\n\n    from pyexcelerate import workbook, color, style, fill\n    from datetime import datetime\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws.set_col_style(2, style(size=0))\n    wb.save(\"output.xlsx\")\n\nlinked styles\n~~~~~~~~~~~~~\n\npyexcelerate supports using style objects instead manually setting each\nattribute as well. this permits you to modify the style at a later time.\n\n::\n\n    from pyexcelerate import workbook, font\n\n    wb = workbook()\n    ws = wb.new_sheet(\"sheet name\")\n    ws[1][1].value = 1\n    font = font(bold=true, italic=true, underline=true, strikethrough=true)\n    ws[1][1].style.font = font\n    wb.save(\"output.xlsx\")\n\npackaging with pyinstaller\n--------------------------\n\npyinstaller is the only packager officially supported by pyexcelerate.\ncopy hook-pyexcelerate.writer.py to your pyinstaller hooks directory.\n\nsupport\n-------\n\nplease use the github issue tracker and pull request system to report\nbugs/issues and submit improvements/changes, respectively. **pull\nrequests *must* be based against the dev branch - if not, we will reject the pr\nand ask you to rebase against the correct branch.** all nontrivial\nchanges to code should be accompanied by a test when appropriate. we use\nthe nose testing framework.\n\n.. |build-status-master| image:: https://travis-ci.org/kz26/pyexcelerate.png?branch=master\n   :target: https://travis-ci.org/kz26/pyexcelerate\n.. |build-status-dev| image:: https://travis-ci.org/kz26/pyexcelerate.png?branch=dev\n   :target: https://travis-ci.org/kz26/pyexcelerate\n.. |coverage-status| image:: https://coveralls.io/repos/kz26/pyexcelerate/badge.png\n   :target: https://coveralls.io/r/kz26/pyexcelerate\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pyexcelerate",
  "package_url": "https://pypi.org/project/PyExcelerate/",
  "project_url": "https://pypi.org/project/PyExcelerate/",
  "project_urls": {
    "Homepage": "https://github.com/kz26/PyExcelerate"
  },
  "release_url": "https://pypi.org/project/PyExcelerate/0.10.0/",
  "requires_dist": [
    "Jinja2",
    "six (>=1.4.0)"
  ],
  "requires_python": "",
  "summary": "accelerated excel xlsx writing library for python 2/3",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "kevin+pyexcelerate@kevinzhang.me",
    "kevin_wang",
    "kevin_zhang"
  ],
  "kwds": "xlsxwriter xlsx excel benchmarks spreadsheet",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyexcelerate",
  "homepage": "https://github.com/kz26/pyexcelerate",
  "release_count": 8,
  "dependency_ids": [
    "pypi_jinja2",
    "pypi_six"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: testing"
  ],
  "description": "pretend\n=======\n\n.. image:: https://secure.travis-ci.org/alex/pretend.png\n    :target: https://travis-ci.org/alex/pretend\n\npretend is a library to make stubbing with python easier.\n\nwhat is stubbing?\n-----------------\n\nstubbing is a technique for writing tests. you may hear the term mixed up with\nmocks, fakes, or doubles. basically a stub is an object that returns pre-canned\nresponses, rather than doing any computation.\n\nmartin fowler does a good job explaining the terms in his `mocks aren't stubs`_\narticle.\n\n.. _`mocks aren't stubs`: http://martinfowler.com/articles/mocksarentstubs.html\n\nhow do i install ``pretend``?\n-----------------------------\n\nit's easy with ``pip``!\n\n.. code:: bash\n\n    $ pip install pretend\n\nhow do i use ``pretend``?\n-------------------------\n\nit's easy, the ``stub`` function makes it easy to create a stub:\n\n.. code:: pycon\n\n    >>> from pretend import stub\n    >>> x = stub(country_code=\"us\")\n    >>> some_function(x)\n\nhere ``x`` will be an object with a single attribute ``country_code`` which has\nthe value ``\"us\"``. unlike mocks, ``x`` will not respond to any other attribute\nor methods, nor does it have any methods for making assertions about what you\naccessed.\n\nif you want to add a method to the stub, simply provide a function to it:\n\n.. code:: pycon\n\n    >>> from pretend import stub\n    >>> x = stub(country_code=lambda: \"us\")\n    >>> x.country_code()\n    'us'\n\nit's important to note that functions on stubs *do not* take a ``self``\nargument, this is because stubs should be returning pre-canned values, not\ndoing computations.\n\nexceptions with ``pretend``\n---------------------------\n\nsometimes a method you want to stub doesn't return a value, but instead raises\nan exception. to make this easy, ``pretend`` provides a helper function,\n``raiser``, it can be used like so:\n\n.. code:: pycon\n\n    >>> from pretend import stub, raiser\n    >>> x = stub(func=raiser(valueerror))\n    >>> x.func()\n    traceback (most recent call last):\n      file \"<stdin>\", line 1, in <module>\n      file \"pretend.py\", line 74, in inner\n        raise exc\n    valueerror\n\nwhy is stubbing better?\n-----------------------\n\nideally stubbing tests how your system responds to a particular input, rather\nthan which api is used. stubbing still requires you to write tests that check\nthe results of a computation, rather than looking for side effects. this\ndoesn't always work though, so you do sometimes still need mocking (e.g.\nsometimes you really want to check for a side effect.)\n\nhow do i get my stub into place?\n--------------------------------\n\nif you come from other mocking libraries you're probably used to a ``patch``\nmethod to put a mock in place. ``pretend`` doesn't include anything like this,\na) we believe it's better, where possible, to pass stubs as arguments rather\nthan monkey patch them into place, b) we believe that when you do need to\nmonkey patch something into place you should use something provided by your\ntesting tool. ``py.test`` includes `such a tool`_.\n\n.. _`such a tool`: http://pytest.org/latest/monkeypatch.html\n\nwhat if i really need to record the calls?\n------------------------------------------\n\nif you really really need to, ``pretend`` includes a ``call_recorder`` utility:\n\n.. code:: pycon\n\n    >>> from pretend import call_recorder, call\n    >>> f = call_recorder(lambda a: a + 2)\n    >>> f(3)\n    5\n    >>> assert f.calls == [call(3)]\n\nwho wrote this?\n---------------\n\n``pretend`` is by alex gaynor, who was just tired of not having a good stubbing\ntool for python. the name is from idan gazit.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pretend",
  "package_url": "https://pypi.org/project/pretend/",
  "project_url": "https://pypi.org/project/pretend/",
  "project_urls": {
    "Homepage": "https://github.com/alex/pretend"
  },
  "release_url": "https://pypi.org/project/pretend/1.0.9/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a library for stubbing in python",
  "version": "1.0.9",
  "releases": [],
  "developers": [
    "alex.gaynor@gmail.com",
    "alex_gaynor"
  ],
  "kwds": "stubbing stub mocks stubs mock",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pretend",
  "homepage": "https://github.com/alex/pretend",
  "release_count": 13,
  "dependency_ids": []
}
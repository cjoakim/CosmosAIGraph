{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: compilers",
    "topic :: software development :: interpreters",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "![](https://raw.githubusercontent.com/textx/textx/master/art/textx-logo.png)\n\n[![pypi version](https://img.shields.io/pypi/v/textx.svg)](https://pypi.python.org/pypi/textx)\n![](https://img.shields.io/pypi/l/textx.svg)\n[![build status](https://github.com/textx/textx/actions/workflows/ci-linux-ubuntu.yml/badge.svg)](https://github.com/textx/textx/actions)\n[![code test coverage](https://coveralls.io/repos/github/textx/textx/badge.svg?branch=master)](https://coveralls.io/github/textx/textx?branch=master)\n[![documentation status](https://img.shields.io/badge/docs-latest-green.svg)](http://textx.github.io/textx/latest/)\n\n\ntextx is a meta-language for building domain-specific languages (dsls) in\npython. it is inspired by [xtext].\n\nin a nutshell, textx will help you build your textual language in an easy way.\nyou can invent your own language or build a support for already existing textual\nlanguage or file format.\n\nfrom a single language description (grammar), textx will build a parser and a\nmeta-model (a.k.a. abstract syntax) for the language. see the docs for the\ndetails.\n\ntextx follows the syntax and semantics of xtext but [differs in some\nplaces](http://textx.github.io/textx/latest/about/comparison/) and is\nimplemented 100% in python using [arpeggio] peg parser - no grammar ambiguities,\nunlimited lookahead, interpreter style of work.\n\n\n## quick intro\n\nhere is a complete example that shows the definition of a simple dsl for\ndrawing. we also show how to define a custom class, interpret models and search\nfor instances of a particular type.\n\n```python\nfrom textx import metamodel_from_str, get_children_of_type\n\ngrammar = \"\"\"\nmodel: commands*=drawcommand;\ndrawcommand: movecommand | shapecommand;\nshapecommand: lineto | circle;\nmovecommand: moveto | moveby;\nmoveto: 'move' 'to' position=point;\nmoveby: 'move' 'by' vector=point;\ncircle: 'circle' radius=int;\nlineto: 'line' 'to' point=point;\npoint: x=int ',' y=int;\n\"\"\"\n\n# we will provide our class for point.\n# classes for other rules will be dynamically generated.\nclass point:\n    def __init__(self, parent, x, y):\n        self.parent = parent\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"{},{}\".format(self.x, self.y)\n\n    def __add__(self, other):\n        return point(self.parent, self.x + other.x, self.y + other.y)\n\n# create meta-model from the grammar. provide `point` class to be used for\n# the rule `point` from the grammar.\nmm = metamodel_from_str(grammar, classes=[point])\n\nmodel_str = \"\"\"\n    move to 5, 10\n    line to 10, 10\n    line to 20, 20\n    move by 5, -7\n    circle 10\n    line to 10, 10\n\"\"\"\n\n# meta-model knows how to parse and instantiate models.\nmodel = mm.model_from_str(model_str)\n\n# at this point model is a plain python object graph with instances of\n# dynamically created classes and attributes following the grammar.\n\ndef cname(o):\n    return o.__class__.__name__\n\n# let's interpret the model\nposition = point(none, 0, 0)\nfor command in model.commands:\n    if cname(command) == 'moveto':\n        print('moving to position', command.position)\n        position = command.position\n    elif cname(command) == 'moveby':\n        position = position + command.vector\n        print('moving by', command.vector, 'to a new position', position)\n    elif cname(command) == 'circle':\n        print('drawing circle at', position, 'with radius', command.radius)\n    else:\n        print('drawing line from', position, 'to', command.point)\n        position = command.point\nprint('end position is', position)\n\n# output:\n# moving to position 5,10\n# drawing line from 5,10 to 10,10\n# drawing line from 10,10 to 20,20\n# moving by 5,-7 to a new position 25,13\n# drawing circle at 25,13 with radius 10\n# drawing line from 25,13 to 10,10\n\n# collect all points starting from the root of the model\npoints = get_children_of_type(\"point\", model)\nfor point in points:\n    print('point: {}'.format(point))\n\n# output:\n# point: 5,10\n# point: 10,10\n# point: 20,20\n# point: 5,-7\n# point: 10,10\n```\n\n\n## video tutorials\n\n\n### introduction to textx\n\n\n[![introduction to\ntextx](https://img.youtube.com/vi/cn2ivtinapo/0.jpg)](https://www.youtube.com/watch?v=cn2ivtinapo)\n\n\n### implementing martin fowler's state machine dsl in textx\n\n[![implementing state machine\ndsl](https://img.youtube.com/vi/hi14jk0jir0/0.jpg)](https://www.youtube.com/watch?v=hi14jk0jir0)\n\n\n## docs and tutorials\n\nthe full documentation with tutorials is available at\nhttp://textx.github.io/textx/stable/\n\n\n# support in ide/editors\n\nprojects that are currently in progress are:\n\n- [textx-ls](https://github.com/textx/textx-ls) - support for language server\n  protocol and vs code for any textx based language. this project is about to\n  supersede the following projects:\n  - [textx-languageserver](https://github.com/textx/textx-languageserver) -\n    language server protocol support for textx languages\n  - [textx-extensions](https://github.com/textx/textx-extensions) - syntax\n    highlighting, code outline\n- [viewx](https://github.com/danielkupco/viewx-vscode) - creating visualizers\n  for textx languages\n  \nif you are a vim editor user check\nout [support for vim](https://github.com/textx/textx.vim/).\n\nfor emacs there is [textx-mode](https://github.com/textx/textx-mode) which is\nalso available in [melpa](https://melpa.org/#/textx-mode).\n\nyou can also check\nout [textx-ninja project](https://github.com/textx/textx-ninja). it is\ncurrently unmaintained.\n\n\n## discussion and help\n\nfor general questions, suggestions, and feature requests please use [github\ndiscussions](https://github.com/textx/textx/discussions).\n\n\nfor issues please use [github issue\ntracker](https://github.com/textx/textx/issues).\n\n\n## citing textx\n\nif you are using textx in your research project we would be very grateful if you\ncite our paper:\n\ndejanovi\u0107 i., vaderna r., milosavljevi\u0107 g., vukovi\u0107 \u017e. (2017). [textx: a python\ntool for domain-specific languages\nimplementation](https://www.doi.org/10.1016/j.knosys.2016.10.023).\nknowledge-based systems, 115, 1-4.\n\n\n## license\n\nmit\n\n## python versions\n\ntested for 3.8+\n\n\n[arpeggio]: https://github.com/textx/arpeggio\n[xtext]: http://www.eclipse.org/xtext/\n",
  "docs_url": null,
  "keywords": "parser,meta-language,meta-model,language,dsl",
  "license": "",
  "name": "textx",
  "package_url": "https://pypi.org/project/textX/",
  "project_url": "https://pypi.org/project/textX/",
  "project_urls": {
    "Changelog": "https://github.com/textX/textX/blob/master/CHANGELOG.md",
    "Homepage": "https://textx.github.io/textX/",
    "Repository": "https://github.com/textX/textX/"
  },
  "release_url": "https://pypi.org/project/textX/4.0.1/",
  "requires_dist": [
    "Arpeggio >= 2.0.0",
    "importlib-metadata; python_version < '3.10'",
    "click >=7.0, <9.0 ; extra == \"cli\"",
    "textX-dev ; extra == \"dev\"",
    "click >=7.0, <9.0 ; extra == \"dev\"",
    "ruff ; extra == \"dev\"",
    "flit ; extra == \"dev\"",
    "mkdocs ; extra == \"dev\"",
    "mike ; extra == \"dev\"",
    "click >=7.0, <9.0 ; extra == \"test\"",
    "ruff ; extra == \"test\"",
    "attrs ; extra == \"test\"",
    "jinja2 ; extra == \"test\"",
    "coverage ; extra == \"test\"",
    "coveralls ; extra == \"test\"",
    "pytest ; extra == \"test\"",
    "html5lib ; extra == \"test\""
  ],
  "requires_python": ">=3.8, <3.13",
  "summary": "meta-language for dsl implementation inspired by xtext",
  "version": "4.0.1",
  "releases": [],
  "developers": [
    "igor.dejanovic@gmail.com",
    "noemail@nowhere.com"
  ],
  "kwds": "textx svg documentation viewx code",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_textx",
  "homepage": "",
  "release_count": 33,
  "dependency_ids": [
    "pypi_arpeggio",
    "pypi_attrs",
    "pypi_click",
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_flit",
    "pypi_html5lib",
    "pypi_importlib_metadata",
    "pypi_jinja2",
    "pypi_mike",
    "pypi_mkdocs",
    "pypi_pytest",
    "pypi_ruff",
    "pypi_textx_dev"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "topic :: scientific/engineering"
  ],
  "description": "=============\nunicodeitplus\n=============\n\n.. image:: https://img.shields.io/pypi/v/unicodeitplus.svg\n        :target: https://pypi.python.org/pypi/unicodeitplus\n\nconvert simple latex into an unicode approximation and paste it anywhere.\n\nthis package provides a more complete latex to unicode converter than `unicodeit <https://github.com/svenkreiss/unicodeit/>`_. ``unicodeitplus`` uses a better parser (generated from ebnf with the fantastic `lark library <https://github.com/lark-parser/lark>`_) than ``unicodeit``, which handles some code on which ``unicodeit`` fails, and allows one to parse a mix of text and math code, like::\n\n    $p_t$ / gev $c^{-1}$\n\ni want to eventually merge this project into ``unicodeit``, discussions with the maintainer of ``unicodeit`` are ongoing.\n\nlatex to unicode: how does this even work?\n------------------------------------------\nunicode contains many subscript and superscript characters. it also contains font variations of characters of both latin and greek characters, including italic, boldface, bold italic, and more. it contains a lot of special mathematical characters and diacritical marks, which we use to approximate latex renderings using just unicode characters.\n\nlike ``unicodeit``, ``unicodeitplus`` is largely based on ``unimathsymbols.txt`` from g\u00fcnter milde, which provides the mapping between latex macros and unicode symbols.\n\ncaveats\n-------\n- only a subset of all latex code can be converted to unicode. some unicode characters simply don't exist. for example, subscript characters exist only for a subset of all lowercase latin characters, there are no subscript characters for uppercase latin characters, and all subscript or superscript characters are in roman font (upright).\n- some code is rendered the best best approximation, for example, ``p_t`` as ``\ud835\udc5d\u209c``, assuming that a reasonable approximation is preferred over a failed conversion.\n- your font needs to contain glyphs for the unicode characters, otherwise you will typically see a little box with the unicode character index.\n- the visually best results seem to be obtained with monospace fonts.\n\nexamples\n--------\n\n=======================================================  =================\nlatex                                                    unicode\n=======================================================  =================\n``\\alpha \\beta \\gamma \\gamma \\im \\re \\hbar``             ``\ud835\udefc \ud835\udefd \ud835\udefe \ud835\udee4 \u2111 \u211c \u210f``\n``e^+ \\mu^- \\slash{\\partial}``                           ``\ud835\udc52\u207a \ud835\udf07\u207b \u2202\u0338``\n``\\exists \\in \\int \\sum \\partial \\infty``                ``\u2203 \u2208 \u222b \u2211 \u2202 \u221e``\n``\\perp \\parallel \\therefore \\because \\subset \\supset``  ``\u27c2 \u2225 \u2234 \u2235 \u2282 \u2283``\n``\\to \\longrightarrow``                                  ``\u2192 \u27f6``\n``p\\bar{p} \\mathrm{t}\\bar{\\mathrm{t}}``                  ``\ud835\udc5d\ud835\udc5d\u0304 tt\u0304``\n``\\mathcal{h} \\mathbb{r}``                               ``\u210b \u211d``\n``\\phone \\checkmark``                                    ``\u260e \u2713``\n``\\underline{x} \\dot{x} \\ddot{x} \\vec{x}``               ``\ud835\udc65\u0332 \ud835\udc65\u0307 \ud835\udc65\u0308 \ud835\udc65\u20d7``\n``a^6 m_0``                                              ``\ud835\udc34\u2076 \ud835\udc5a\u2080``\n``1.2 \\times 10^{23}``                                   ``1.2 \u00d7 10\u00b2\u00b3``\n``p_t / \\mathrm{gev} c^{-1}``                            ``\ud835\udc5d\u209c/gev\ud835\udc50\u207b\u00b9``\n``k^0_s``                                                ``\ud835\udc3e\u2070\u209b``\n``d^{\\ast\\ast} \\to hhee``                                ``\ud835\udc37**\u2192\u210e\u210e\ud835\udc52\ud835\udc52``\n``a \\cdot \\mathbf{x} \\simeq \\mathbf{b}``                 ``\ud835\udc34\u22c5\ud835\udc31\u2243\ud835\udc1b``\n=======================================================  =================\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause license",
  "name": "unicodeitplus",
  "package_url": "https://pypi.org/project/unicodeitplus/",
  "project_url": "https://pypi.org/project/unicodeitplus/",
  "project_urls": {
    "repository": "https://github.com/HDembinski/unicodeitplus"
  },
  "release_url": "https://pypi.org/project/unicodeitplus/0.3.1/",
  "requires_dist": [
    "lark",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "converts simple latex to an unicode approximation",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "hans.dembinski@gmail.com",
    "hans_dembinski"
  ],
  "kwds": "unicodeit unicodeitplus unicode glyphs parser",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_unicodeitplus",
  "homepage": "",
  "release_count": 5,
  "dependency_ids": [
    "pypi_lark",
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/pip-run.svg\n   :target: https://pypi.org/project/pip-run\n\n.. image:: https://img.shields.io/pypi/pyversions/pip-run.svg\n\n.. image:: https://github.com/jaraco/pip-run/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/pip-run/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/pip-run/badge/?version=latest\n   :target: https://pip-run.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/pip-run\n   :target: https://tidelift.com/subscription/pkg/pypi-pip-run?utm_source=pypi-pip-run&utm_medium=readme\n\n``pip-run`` provides on-demand temporary package installation\nfor a single execution run.\n\nit replaces this series of commands (or their windows equivalent)::\n\n    $ virtualenv --python pythonx.x --system-site-packages $temp/env\n    $ $temp/env/bin/pip install pkg1 pkg2 -r reqs.txt\n    $ $temp/env/bin/python ...\n    $ rm -rf $temp/env\n\nwith this single-line command::\n\n    $ py -x.x -m pip-run pkg1 pkg2 -r reqs.txt -- ...\n\nfeatures include\n\n- downloads missing dependencies and makes their packages available for import.\n- installs packages to a special staging location such that they're not installed after the process exits.\n- relies on pip to cache downloads of such packages for reuse.\n- leaves no trace of its invocation (except files in pip's cache).\n- supersedes installed packages when required.\n- relies on packages already satisfied [1]_.\n- re-uses the pip tool chain for package installation.\n\n``pip-run`` is not intended to solve production dependency management, but does aim to address the other, one-off scenarios around dependency management:\n\n- trials and experiments\n- build setup\n- test runners\n- just in time script running\n- interactive development\n- bug triage\n\n``pip-run`` is a compliment to pip and virtualenv, intended to more\nreadily address the on-demand needs.\n\n.. [1] except when a requirements file is used.\n\ninstallation\n============\n\n``pip-run`` is meant to be installed in the system site packages\nalongside pip, though it can also be installed in a virtualenv.\n\nusage\n=====\n\n- as script launcher\n- as runtime dependency context manager\n- as interactive interpreter in dependency context\n- as module launcher (akin to `python -m`)\n- as a shell shebang (``#!/usr/bin/env pip-run``), to create single-file python tools\n\ninvoke ``pip-run`` from the command-line using the console entry\nscript (simply ``pip-run``) or using the module executable (\n``python -m pip-run``). this latter usage is particularly convenient\nfor testing a command across various python versions.\n\nparameters following pip-run are passed directly to ``pip install``,\nso ``pip-run numpy`` will install ``numpy`` (reporting any work done\nduring the install) and ``pip-run -v -r requirements.txt`` will verbosely\ninstall all the requirements listed in a file called requirements.txt\n(quiet is the default).\nany `environment variables honored by pip\n<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_\nare also honored.\n\nfollowing the parameters to ``pip install``, one may optionally\ninclude a ``--`` after which any parameters will be executed\nby a python interpreter in the context or directly if prefixed by\n``!``.\n\nsee ``pip-run --help`` for more details.\n\nexamples\n========\n\nthe `examples folder in this project\n<https://github.com/jaraco/pip-run/tree/master/examples>`_\nincludes some examples demonstrating\nthe power and usefulness of the project. read the docs on those examples\nfor instructions.\n\nmodule script runner\n--------------------\n\nperhaps the most powerful usage of ``pip-run`` is its ability to invoke\nexecutable modules and packages via\n`runpy <https://docs.python.org/3/library/runpy.html>`_ (aka\n``python -m``)::\n\n    $ pip-run cowsay -- -m cowsay \"moove over, pip-run\"\n\n      -------------------\n    < moove over, pip-run >\n      -------------------\n       \\   ^__^\n        \\  (oo)\\_______\n           (__)\\       )\\/\\\n               ||----w |\n               ||     ||\n\n.. image:: docs/cowsay.svg\n   :alt: cowsay example animation\n\nmodule executable runner\n------------------------\n\nsome package tools, like `ranger <https://github.com/ranger/ranger>`_, are\ninvoked with a unique executable instead of a module. ``pip-run`` can\nrun an executable from a package if it is prependend by a ``!``::\n\n    $ pip-run ranger-fm -- '!ranger'\n\ncommand runner\n--------------\n\nnote that everything after the -- is passed to the python invocation,\nso it's possible to have a one-liner that runs under a dependency\ncontext::\n\n    $ python -m pip-run requests -- -c \"import requests; print(requests.get('https://pypi.org/project/pip-run').status_code)\"\n    200\n\nas long as ``pip-run`` is installed in each of python environments\non the system, this command can be readily repeated on the other\npython environments by specifying the relevant interpreter::\n\n    $ python3.7 -m pip-run ...\n\nor on windows or unix with [pylauncher](https://python-launcher.app/)::\n\n    $ py -3.7 -m pip-run ...\n\nscript runner\n-------------\n\n``pip-run`` can run a python file with indicated dependencies. because\narguments after ``--`` are passed directly to the python interpreter\nand because the python interpreter will run any script, invoking a script\nwith dependencies is easy. consider this script \"myscript.py\":\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n\n    import requests\n\n    req = requests.get('https://pypi.org/project/pip-run')\n    print(req.status_code)\n\nto invoke it while making sure requests is present:\n\n    $ pip-run requests -- myscript.py\n\n``pip-run`` will make sure that requests is installed then invoke\nthe script in a python interpreter configured with requests and its\ndependencies.\n\nfor added convenience when running scripts, ``pip-run`` will infer\nthe beginning of python parameters if it encounters a filename\nof a python script that exists, allowing for omission of the ``--``\nfor script invocation:\n\n    $ pip-run requests myscript.py\n\nscript-declared dependencies\n----------------------------\n\nbuilding on script runner above, ``pip-run`` also allows\ndependencies to be declared in the script itself so that\nthe user need not specify them at each invocation.\n\nto declare dependencies in a script, add a ``__requires__``\nvariable or ``# requirements:`` section to the script:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n\n    __requires__ = ['requests']\n\n    # or\n\n    # requirements:\n    # requests\n\n    import requests\n\n    req = requests.get('https://pypi.org/project/pip-run')\n    print(req.status_code)\n\nwith that declaration in place, one can now invoke ``pip-run`` without\ndeclaring any parameters to pip::\n\n    $ pip-run myscript.py\n    200\n\nthe format for requirements must follow `pep 508 <https://www.python.org/dev/peps/pep-0508/>`_.\n\nsingle-script tools and shebang support\n---------------------------------------\n\ncombined with in-script dependencies, ``pip-run`` can be used as a shebang to\ncreate fully self-contained scripts that install and run their own\ndependencies, as long as ``pip-run`` is installed on the system ``path``.\nconsider, for example, the ``pydragon`` script:\n\n.. code-block:: shell\n\n    #!/usr/bin/env pip-run\n    __requires__ = ['requests', 'beautifulsoup4', 'cowsay']\n    import requests\n    from bs4 import beautifulsoup as bs\n    import cowsay\n    res = requests.get('https://python.org')\n    b = bs(res.text, 'html.parser')\n    cowsay.dragon(b.find(\"div\", class_=\"introduction\").get_text())\n\nthis executable script is available in the repo as ``examples/pydragon`` (for\nunix) and ``examples/pydragon.py`` (for windows [2]_). executing this script is\nequivalent to executing ``pip-run pydragon``.\n\nby default, the script will assemble the dependencies on each invocation,\nwhich may be inconvenient for a script. see `environment persistence\n<#environment-persistence>`_ for a technique to persist the assembled\ndependencies across invocations. one may inject ``pip_run_mode=persist``\nin the shebang, but be aware that doing so breaks windows portability.\n\n.. [2] ``.py`` must exist in the pathext for python scripts to be executable. see `this documentation <https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.3#path-information>`_ for more background.\n\nother script directives\n-----------------------\n\n``pip-run`` also recognizes a global ``__index_url__`` attribute. if present,\nthis value will supply ``--index-url`` to pip with the attribute value,\nallowing a script to specify a custom package index:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n\n    __requires__ = ['my_private_package']\n    __index_url__ = 'https://my.private.index/'\n\n    import my_private_package\n    ...\n\nextracting requirements\n-----------------------\n\nafter having used ``pip-run`` to run scripts, it may be desirable to extract the requirements from the ``__requires__`` variable or ``# requirements:`` section of a\nscript to install those more permanently. pip-run provides a routine to facilitate\nthis case::\n\n    $ py -m pip_run.read-deps examples/pydragon\n    requests beautifulsoup4 cowsay\n\non unix, it is possible to pipe this result directly to pip::\n\n    $ pip install $(py -m pip_run.read-deps examples/pydragon)\n\nto generate a requirements.txt file, specify a newline separator::\n\n    $ py -m pip_run.read-deps --separator newline examples/pydragon > requirements.txt\n\nand since `pipenv <https://docs.pipenv.org/>`_ uses the same syntax,\nthe same technique works for pipenv::\n\n    $ pipenv install $(python -m pip_run.read-deps script.py)\n\ninteractive interpreter\n-----------------------\n\n``pip-run`` also offers a painless way to run a python interactive\ninterpreter in the context of certain dependencies::\n\n    $ /clean-install/python -m pip-run boto\n    >>> import boto\n    >>>\n\nexperiments and testing\n-----------------------\n\nbecause ``pip-run`` provides a single-command invocation, it\nis great for experiments and rapid testing of various package\nspecifications.\n\nconsider a scenario in which one wishes to create an environment\nwhere two different versions of the same package are installed,\nsuch as to replicate a broken real-world environment. stack two\ninvocations of pip-run to get two different versions installed::\n\n    $ pip-run keyring==21.8.0 -- -m pip-run keyring==22.0.0 -- -c \"import importlib.metadata, pprint; pprint.pprint([dist._path for dist in importlib.metadata.distributions() if dist.metadata['name'] == 'keyring'])\"\n    [posixpath('/var/folders/03/7l0ffypn50b83bp0bt07xcch00n8zm/t/pip-run-a3xvd267/keyring-22.0.0.dist-info'),\n    posixpath('/var/folders/03/7l0ffypn50b83bp0bt07xcch00n8zm/t/pip-run-1fdjsgfs/keyring-21.8.0.dist-info')]\n\n.. todo: illustrate example here\n\nipython inference\n-----------------\n\nif ipython is specified as one of the dependencies, the python\ninterpreter will be launched via ipython (using ``-m ipython``)\nfor interactive mode. this behaviour may be toggled off by\nsetting the environment variable ``pip_run_ipython_mode=ignore``.\n\nhow does it work\n================\n\n``pip-run`` effectively does the following:\n\n- ``pip install -t $tmpdir``\n- ``pythonpath=$tmpdir python``\n- cleanup\n\nfor specifics, see `pip_run.run()\n<https://github.com/jaraco/pip-run/blob/master/pip_run/__init__.py#l9-l16>`_.\n\n\nenvironment persistence\n=======================\n\n``pip-run`` honors the ``pip_run_retention_strategy`` variable. if unset or\nset to ``destroy``, dependencies are installed to a temporary directory on\neach invocation (and deleted after). setting this variable to ``persist`` will\ninstead create or re-use a directory in the user's cache, only installing the\ndependencies if the directory doesn't already exist. a separate cache is\nmaintained for each combination of requirements specified.\n\n``persist`` strategy can greatly improve startup performance at the expense of\nstaleness and accumulated cruft.\n\nwithout ``pip_run_retention_strategy=persist`` (or with ``=destroy``),\n``pip-run`` will re-install dependencies every time a script runs, silently\nadding to the startup time while dependencies are installed into an ephemeral\nenvironment, depending on how many dependencies there are and whether the\ndependencies have been previously downloaded to the local pip cache. use\n``pip-run -v ...`` to see the installation activity.\n\nthe location of the cache can be revealed with this command::\n\n    py -c 'import importlib; print(importlib.import_module(\"pip_run.retention.persist\").paths.user_cache_path)'\n\n\nlimitations\n===========\n\n- due to limitations with ``pip``, ``pip-run`` cannot run with \"editable\"\n  (``-e``) requirements.\n\n- ``pip-run`` uses a ``sitecustomize`` module to ensure that ``.pth`` files\n  in the requirements are installed. as a result, any environment\n  that has a ``sitecustomize`` module will find that module masked\n  when running under ``pip-run``.\n\ncomparison with pipx\n====================\n\nthe `pipx project <https://pypi.org/project/pipx/>`_ is another mature\nproject with similar goals. both projects expose a project and its\ndependencies in ephemeral environments. the main difference is pipx\nprimarily exposes python binaries (console scripts) from those\nenvironments whereas pip-run exposes a python context (including\nrunpy scripts).\n\n.. list-table::\n   :widths: 30 10 10\n   :header-rows: 1\n\n   * - feature\n     - pip-run\n     - pipx\n   * - user-mode operation\n     - \u2713\n     - \u2713\n   * - invoke console scripts\n     - \u2713\n     - \u2713\n   * - invoke runpy modules\n     - \u2713\n     -\n   * - run standalone scripts\n     - \u2713\n     -\n   * - interactive interpreter with deps\n     - \u2713\n     -\n   * - re-use existing environment\n     - \u2713\n     -\n   * - ephemeral environments\n     - \u2713\n     - \u2713\n   * - persistent environments\n     - \u2713\n     - \u2713\n   * - pep 582 support\n     -\n     - \u2713\n   * - specify optional dependencies\n     - \u2713\n     -\n   * - python 2 support\n     - \u2713\n     -\n\ncomparison with virtualenvwrapper mktmpenv\n==========================================\n\nthe `virtualenvwrapper project <https://pypi.org/project/virtualenvwrapper/>`_\nattempts to address some of the use-cases that pip-run solves,\nespecially with the ``mktmpenv`` command, which destroys the\nvirtualenv after deactivation. the main difference is that ``pip-run``\nis transient only for the invocation of a single command, while\n``mktmpenv`` lasts for a session.\n\n.. list-table::\n   :widths: 40 10 10\n   :header-rows: 1\n\n   * - feature\n     - pip-run\n     - mktmpenv\n   * - create temporary package environment\n     - \u2713\n     - \u2713\n   * - re-usable across python invocations\n     - \u2713\n     - \u2713\n   * - portable\n     - \u2713\n     -\n   * - one-line invocation\n     - \u2713\n     -\n   * - multiple interpreters in session\n     - \u2713\n     -\n   * - run standalone scripts\n     - \u2713\n     - \u2713\n   * - interactive interpreter with deps\n     - \u2713\n     - \u2713\n   * - re-use existing environment\n     - \u2713\n     -\n   * - ephemeral environments\n     - \u2713\n     - \u2713\n   * - persistent environments\n     - \u2713\n     - \u2713\n\nintegration\n===========\n\nthe author created this package with the intention of demonstrating\nthe capability before integrating it directly with pip in a command\nsuch as ``pip run``. after proposing the change, the idea was largely\nrejected in `pip 3971 <https://github.com/pypa/pip/issues/3971>`_.\n\nif you would like to see this functionality made available in pip,\nplease upvote or comment in that ticket.\n\nversioning\n==========\n\n``pip-run`` uses semver, so you can use this library with\nconfidence about the stability of the interface, even\nduring periods of great flux.\n\ntesting\n=======\n\ninvoke tests with ``tox``.\n\nfor enterprise\n==============\n\navailable as part of the tidelift subscription.\n\nthis project and the maintainers of thousands of other packages are working with tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`learn more <https://tidelift.com/subscription/pkg/pypi-pip-run?utm_source=pypi-pip-run&utm_medium=referral&utm_campaign=github>`_.\n\nsecurity contact\n================\n\nto report a security vulnerability, please use the\n`tidelift security contact <https://tidelift.com/security>`_.\ntidelift will coordinate the fix and disclosure.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pip-run",
  "package_url": "https://pypi.org/project/pip-run/",
  "project_url": "https://pypi.org/project/pip-run/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/pip-run"
  },
  "release_url": "https://pypi.org/project/pip-run/12.4.0/",
  "requires_dist": [
    "pip >=19.3",
    "autocommand",
    "path >=15.1",
    "packaging",
    "more-itertools >=8.3",
    "jaraco.context",
    "jaraco.text",
    "platformdirs",
    "jaraco.functools >=3.7",
    "jaraco.env",
    "importlib-resources ; python_version < \"3.9\"",
    "sphinx >=3.5 ; extra == 'docs'",
    "sphinx <7.2.5 ; extra == 'docs'",
    "jaraco.packaging >=9.3 ; extra == 'docs'",
    "rst.linker >=1.9 ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "jaraco.tidelift >=1.4 ; extra == 'docs'",
    "pytest >=6 ; extra == 'testing'",
    "pytest-checkdocs >=2.4 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler >=2.2 ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "nbformat ; extra == 'testing'",
    "pygments ; extra == 'testing'",
    "jaraco.path ; extra == 'testing'",
    "jaraco.test >=5.3 ; extra == 'testing'",
    "flit-core ; extra == 'testing'",
    "pytest-black >=0.3.7 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy >=0.9.1 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "install packages and run python with them",
  "version": "12.4.0",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason_r"
  ],
  "kwds": "pip_run pipx pip pip_run_mode pip_run_retention_strategy",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pip_run",
  "homepage": "https://github.com/jaraco/pip-run",
  "release_count": 59,
  "dependency_ids": [
    "pypi_autocommand",
    "pypi_flit_core",
    "pypi_furo",
    "pypi_importlib_resources",
    "pypi_jaraco.context",
    "pypi_jaraco.env",
    "pypi_jaraco.functools",
    "pypi_jaraco.packaging",
    "pypi_jaraco.path",
    "pypi_jaraco.test",
    "pypi_jaraco.text",
    "pypi_jaraco.tidelift",
    "pypi_more_itertools",
    "pypi_nbformat",
    "pypi_packaging",
    "pypi_path",
    "pypi_pip",
    "pypi_platformdirs",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: other/proprietary license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "bencode.py\r\n==========\r\n\r\n.. image:: https://img.shields.io/pypi/v/bencode.py.svg?style=flat-square\r\n   :target: https://pypi.python.org/pypi/bencode.py\r\n\r\n.. image:: https://img.shields.io/travis/fuzeman/bencode.py.svg?style=flat-square\r\n   :target: https://travis-ci.org/fuzeman/bencode.py\r\n\r\n.. image:: https://img.shields.io/coveralls/fuzeman/bencode.py/master.svg?style=flat-square\r\n   :target: https://coveralls.io/github/fuzeman/bencode.py\r\n\r\nsimple bencode parser (for python 2, python 3 and pypy), forked from the bencode__ package by thomas rampelberg.\r\n\r\n__ https://pypi.python.org/pypi/bencode\r\n\r\n\r\nusage\r\n-----\r\n\r\n**encode:**\r\n\r\n.. code-block:: python\r\n\r\n    >>> import bencodepy\r\n\r\n    >>> bencodepy.encode({'title': 'example'})\r\n    b'd5:title7:examplee'\r\n\r\n    >>> bencodepy.encode(12)\r\n    b'i12e'\r\n\r\n**decode:**\r\n\r\n.. code-block:: python\r\n\r\n    >>> import bencodepy\r\n\r\n    >>> bencodepy.decode('d5:title7:examplee')\r\n    {b'title': b'example'}\r\n\r\n    >>> bencodepy.decode('i12e')\r\n    12\r\n\r\n**decode to utf-8:**\r\n\r\n.. code-block:: python\r\n\r\n    >>> import bencodepy\r\n\r\n    >>> bc = bencodepy.bencode(\r\n        encoding='utf-8'\r\n    )\r\n\r\n    >>> bc.decode('d5:title7:examplee')\r\n    {'title': 'example'}\r\n\r\n:code:`bencode`\r\n************************************************\r\n*(legacy, backwards-compatible package)*\r\n\r\nthis package will continue to be provided for backwards-compatibility, but upgrading to ``bencodepy`` is recommended for more reliable decoding results.\r\n\r\nunder-the-hood this just provides proxies to a ``bencode`` instance created with:\r\n\r\n.. code-block:: python\r\n\r\n    bencode(\r\n        encoding='utf-8',\r\n        encoding_fallback='value',\r\n        dict_ordered=true,\r\n        dict_ordered_sort=true\r\n    )\r\n\r\n**encode:**\r\n\r\n.. code-block:: python\r\n\r\n    >>> import bencode\r\n\r\n    >>> bencode.encode({'title': 'example'})\r\n    'd5:title7:examplee'\r\n\r\n    >>> bencode.encode(12)\r\n    'i12e'\r\n\r\n**decode:**\r\n\r\n.. code-block:: python\r\n\r\n    >>> import bencode\r\n\r\n    >>> bencode.decode('d5:title7:examplee')\r\n    ordereddict([(u'title', u'example')])\r\n\r\n    >>> bencode.decode('i12e')\r\n    12\r\n\r\n\r\napi\r\n---\r\n\r\n``bencodepy.bencode(encoding=none, encoding_fallback=none, dict_ordered=false, dict_ordered_sort=false)``\r\n\r\n    create instance\r\n\r\n    - encoding\r\n       encoding to decode strings with (or ``none`` for binary)\r\n    - encoding_fallback\r\n       fallback to binary when decoding fails on the specified string types.\r\n\r\n       - ``key`` - dictionary keys\r\n       - ``value`` - values\r\n       - ``all`` - always fallback to binary\r\n       - ``none`` - always raise decoding errors\r\n    - dict_ordered\r\n       use ``ordereddict``\r\n    - dict_ordered_sort\r\n       ensure ``ordereddict`` is sorted\r\n\r\n    methods:\r\n\r\n    - ``decode(value)``\r\n        decode bencode string ``value``.\r\n\r\n    - ``encode(value)``\r\n        encode ``value`` into a bencode string.\r\n\r\n    - ``read(fd)``\r\n        decode bencode from file or path ``fd``.\r\n\r\n    - ``write(data, fd)``\r\n        encode ``data`` to file or path ``fd``.\r\n\r\n``bencodepy.bencodedecoder(encoding=none, encoding_fallback=none, dict_ordered=false, dict_ordered_sort=false)``\r\n\r\n    create decoder\r\n\r\n    - encoding\r\n       encoding to decode strings with (or ``none`` for binary)\r\n    - encoding_fallback\r\n       fallback to binary when decoding fails on the specified string types.\r\n\r\n       - ``key`` - dictionary keys\r\n       - ``value`` - values\r\n       - ``all`` - always fallback to binary\r\n       - ``none`` - always raise decoding errors\r\n    - dict_ordered\r\n       use ``ordereddict``\r\n    - dict_ordered_sort\r\n       ensure ``ordereddict`` is sorted\r\n\r\n    methods:\r\n\r\n    - ``decode(value)``\r\n        decode bencode string ``value``.\r\n\r\n``bencodepy.bencodeencoder()``\r\n\r\n    create encoder\r\n\r\n    methods:\r\n\r\n    - ``encode(value)``\r\n        encode ``value`` into a bencode string.\r\n\r\n``bencodepy.bencode(value)``\r\n\r\n``bencodepy.encode(value)``\r\n\r\n    encode ``value`` into a bencode string with the default encoder.\r\n\r\n``bencodepy.bdecode(value)``\r\n\r\n``bencodepy.decode(value)``\r\n\r\n    decode bencode string ``value`` with the default decoder.\r\n\r\n``bencodepy.bread(fd)``\r\n\r\n    decode bencode from file or path ``fd`` with the default decoder.\r\n\r\n``bencodepy.bwrite(data, fd)``\r\n\r\n    encode ``data`` to file or path ``fd`` with the default encoder.\r\n\r\n:code:`bencode`\r\n************************************************\r\n\r\n``bencode.bencode(value)``\r\n\r\n``bencode.encode(value)``\r\n\r\n    encode ``value`` into the bencode format.\r\n\r\n``bencode.bdecode(value)``\r\n\r\n``bencode.decode(value)``\r\n\r\n    decode bencode formatted string ``value``.\r\n\r\n``bencode.bread(fd)``\r\n\r\n    read bencode formatted string from file or path ``fd``.\r\n\r\n``bencode.bwrite(data, fd)``\r\n\r\n    write ``data`` as a bencode formatted string to file or path ``fd``.\r\n\r\n\r\n\r\n",
  "docs_url": null,
  "keywords": "bittorrent,bencode,bdecode",
  "license": "bittorrent open source license",
  "name": "bencode.py",
  "package_url": "https://pypi.org/project/bencode.py/",
  "project_url": "https://pypi.org/project/bencode.py/",
  "project_urls": {
    "Homepage": "https://github.com/fuzeman/bencode.py"
  },
  "release_url": "https://pypi.org/project/bencode.py/4.0.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "simple bencode parser (for python 2, python 3 and pypy)",
  "version": "4.0.0",
  "releases": [],
  "developers": [
    "dean_gardiner",
    "me@dgardiner.net"
  ],
  "kwds": "bencodedecoder bencodepy bencodeencoder bencode bencode__",
  "license_kwds": "bittorrent open source license",
  "libtype": "pypi",
  "id": "pypi_bencode.py",
  "homepage": "https://github.com/fuzeman/bencode.py",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: rust"
  ],
  "description": "# rustworkx\r\n\r\n[![license](https://img.shields.io/github/license/qiskit/rustworkx.svg?style=popout-square)](https://opensource.org/licenses/apache-2.0)\r\n![build status](https://github.com/qiskit/rustworkx/actions/workflows/main.yml/badge.svg?branch=main)\r\n[![build status](https://img.shields.io/travis/com/qiskit/rustworkx/main.svg?style=popout-square)](https://travis-ci.com/qiskit/rustworkx)\r\n[![](https://img.shields.io/github/release/qiskit/rustworkx.svg?style=popout-square)](https://github.com/qiskit/rustworkx/releases)\r\n[![](https://img.shields.io/pypi/dm/rustworkx.svg?style=popout-square)](https://pypi.org/project/rustworkx/)\r\n[![coverage status](https://coveralls.io/repos/github/qiskit/rustworkx/badge.svg?branch=main)](https://coveralls.io/github/qiskit/rustworkx?branch=main)\r\n[![minimum rustc 1.56.1](https://img.shields.io/badge/rustc-1.56.1+-blue.svg)](https://rust-lang.github.io/rfcs/2495-min-rust-version.html)\r\n[![doi](https://joss.theoj.org/papers/10.21105/joss.03968/status.svg)](https://doi.org/10.21105/joss.03968)\r\n[![arxiv](https://img.shields.io/badge/arxiv-2110.15221-b31b1b.svg)](https://arxiv.org/abs/2110.15221)\r\n[![zenodo](https://img.shields.io/badge/zenodo-10.5281%2fzenodo.5879859-blue)](https://doi.org/10.5281/zenodo.5879859)\r\n\r\n  - you can see the full rendered docs at:\r\n    <https://qiskit.org/ecosystem/rustworkx/dev>\r\n\r\n|:warning:| the retworkx project has been renamed to **rustworkx**. the use of the\r\nretworkx package will still work for the time being but starting in the 1.0.0\r\nrelease retworkx will no longer be supported\r\n\r\nrustworkx is a general purpose graph library for python written in rust to\r\ntake advantage of the performance and safety that rust provides. it is\r\ndesigned to provide a high performance general purpose graph library for\r\nany python application.\r\n\r\n## project history\r\n\r\nrustworkx was originally called retworkx and was was created initially to be\r\na replacement for [qiskit](https://qiskit.org/)'s previous (and current)\r\nnetworkx usage (hence the original name).  the project was originally started\r\nto build a faster directed graph to use as the underlying data structure for\r\nthe dag at the center of\r\n[qiskit-terra](https://github.com/qiskit/qiskit-terra/)'s transpiler. however,\r\nsince it's initial introduction the project has grown substantially and now\r\ncovers all applications that need to work with graphs which includes\r\nqiskit.\r\n\r\n## installing rustworkx\r\n\r\nrustworkx is published on pypi so on x86\\_64, i686, ppc64le, s390x, and\r\naarch64 linux systems, x86\\_64 on mac osx, and 32 and 64 bit windows\r\ninstalling is as simple as running:\r\n\r\n```bash\r\npip install rustworkx\r\n```\r\n\r\nthis will install a precompiled version of rustworkx into your python\r\nenvironment.\r\n\r\n### installing on a platform without precompiled binaries\r\n\r\nif there are no precompiled binaries published for your system you'll have to\r\nbuild the package from source. however, to be able able to build the package\r\nfrom the published source package you need to have rust >= 1.56.1 installed (and\r\nalso [cargo](https://doc.rust-lang.org/cargo/) which is normally included with\r\nrust) you can use [rustup](https://rustup.rs/) (a cross platform installer for\r\nrust) to make this simpler, or rely on\r\n[other installation methods](https://forge.rust-lang.org/infra/other-installation-methods.html).\r\na source package is also published on pypi, so you still can also run the above\r\n`pip` command to install it. once you have rust properly installed, running:\r\n\r\n```bash\r\npip install rustworkx\r\n```\r\n\r\nwill build rustworkx for your local system from the source package and install\r\nit just as it would if there was a prebuilt binary available.\r\n\r\nnote: to build from source you will need to ensure you have pip >=19.0.0\r\ninstalled, which supports pep-517, or that you have manually installed\r\n`setuptools-rust` prior to running `pip install rustworkx`. if you recieve an\r\nerror about `setuptools-rust` not being found you should upgrade pip with\r\n`pip install -u pip` or manually install `setuptools-rust` with\r\n`pip install setuptools-rust` and try again.\r\n\r\n### optional dependencies\r\n\r\nif you're planning to use the `rustworkx.visualization` module you will need to\r\ninstall optional dependencies to use the functions. the matplotlib based drawer\r\nfunction `rustworkx.visualization.mpl_draw` requires that the\r\n[matplotlib](https://matplotlib.org/) library is installed. this can be\r\ninstalled with `pip install matplotlib` or when you're installing rustworkx with\r\n`pip install 'rustworkx[mpl]'`. if you're going to use the graphviz based drawer\r\nfunction `rustworkx.visualization.graphviz_drawer` first you will need to install\r\ngraphviz, instructions for this can be found here:\r\nhttps://graphviz.org/download/#executable-packages. then you\r\nwill need to install the [pillow](https://python-pillow.org/) python library.\r\nthis can be done either with `pip install pillow` or when installing rustworkx\r\nwith `pip install 'rustworkx[graphviz]'`.\r\n\r\nif you would like to install all the optional python dependencies when you\r\ninstall rustworkx you can use `pip install 'rustworkx[all]'` to do this.\r\n\r\n## using rustworkx\r\n\r\nonce you have rustworkx installed you can use it by importing rustworkx.\r\nall the functions and graph classes are off the root of the package.\r\nfor example, calculating the shortest path between a and c would be:\r\n\r\n```python3\r\nimport rustworkx\r\n\r\ngraph = rustworkx.pygraph()\r\n\r\n# each time add node is called, it returns a new node index\r\na = graph.add_node(\"a\")\r\nb = graph.add_node(\"b\")\r\nc = graph.add_node(\"c\")\r\n\r\n# add_edges_from takes tuples of node indices and weights,\r\n# and returns edge indices\r\ngraph.add_edges_from([(a, b, 1.5), (a, c, 5.0), (b, c, 2.5)])\r\n\r\n# returns the path a -> b -> c\r\nrustworkx.dijkstra_shortest_paths(graph, a, c, weight_fn=float)\r\n```\r\n\r\n## building from source\r\n\r\nthe first step for building rustworkx from source is to clone it locally\r\nwith:\r\n\r\n```bash\r\ngit clone https://github.com/qiskit/rustworkx.git\r\n```\r\n\r\nrustworkx uses [pyo3](https://github.com/pyo3/pyo3) and\r\n[setuptools-rust](https://github.com/pyo3/setuptools-rust) to build the\r\npython interface, which enables using standard python tooling to work. so,\r\nassuming you have rust installed, you can easily install rustworkx into your\r\npython environment using `pip`. once you have a local clone of the repo, change\r\nyour current working directory to the root of the repo. then, you can install\r\nrustworkx into your python env with:\r\n\r\n```bash\r\npip install .\r\n```\r\n\r\nassuming your current working directory is still the root of the repo.\r\notherwise you can run:\r\n\r\n```bash\r\npip install $path_to_repo_root\r\n```\r\n\r\nwhich will install it the same way. then rustworkx is installed in your\r\nlocal python environment. there are 2 things to note when doing this\r\nthough, first if you try to run python from the repo root using this\r\nmethod it will not work as you expect. there is a name conflict in the\r\nrepo root because of the local python package shim used in building the\r\npackage. simply run your python scripts or programs using rustworkx\r\noutside of the repo root. the second issue is that any local changes you\r\nmake to the rust code will not be reflected live in your python environment,\r\nyou'll need to recompile rustworkx by rerunning `pip install` to have any\r\nchanges reflected in your python environment.\r\n\r\n### develop mode\r\n\r\nif you'd like to build rustworkx in debug mode and use an interactive debugger\r\nwhile working on a change you can use `python setup.py develop` to build\r\nand install rustworkx in develop mode. this will build rustworkx without\r\noptimizations and include debuginfo which can be handy for debugging. do note\r\nthat installing rustworkx this way will be significantly slower then using\r\n`pip install` and should only be used for debugging/development.\r\n\r\nit's worth noting that `pip install -e` does not work, as it will link the python\r\npackaging shim to your python environment but not build the rustworkx binary. if\r\nyou want to build rustworkx in debug mode you have to use\r\n`python setup.py develop`.\r\n\r\n## authors and citation\r\n\r\nrustworkx is the work of [many people](https://github.com/qiskit/rustworkx/graphs/contributors) who contribute\r\nto the project at different levels. if you use rustworkx in your research, please cite our\r\n[paper](https://doi.org/10.21105/joss.03968) as per the included [bibtex file](citation.bib).\r\n\r\n## community\r\n\r\nbesides github interactions (such as opening issues) there are two locations\r\navailable to talk to other rustworkx users and developers. the first is a\r\npublic slack channel in the qiskit workspace,\r\n[#rustworkx](https://qiskit.slack.com/messages/rustworkx/). you can join the\r\nqiskit slack workspace [here](http://ibm.co/joinqiskitslack). additionally,\r\nthere is an irc channel `#rustworkx` on the [oftc irc network](https://www.oftc.net/)\r\n",
  "docs_url": null,
  "keywords": "networks network graph graph theory dag",
  "license": "apache 2.0",
  "name": "rustworkx",
  "package_url": "https://pypi.org/project/rustworkx/",
  "project_url": "https://pypi.org/project/rustworkx/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Qiskit/rustworkx/issues",
    "Documentation": "https://qiskit.org/ecosystem/rustworkx/",
    "Homepage": "https://github.com/Qiskit/rustworkx",
    "Source Code": "https://github.com/Qiskit/rustworkx"
  },
  "release_url": "https://pypi.org/project/rustworkx/0.13.2/",
  "requires_dist": [
    "numpy >=1.16.0",
    "matplotlib >=3.0 ; extra == 'all'",
    "pillow >=5.4 ; extra == 'all'",
    "pillow >=5.4 ; extra == 'graphviz'",
    "matplotlib >=3.0 ; extra == 'mpl'"
  ],
  "requires_python": ">=3.7",
  "summary": "a python graph library implemented in rust",
  "version": "0.13.2",
  "releases": [],
  "developers": [
    "matthew_treinish",
    "mtreinish@kortar.org"
  ],
  "kwds": "rustworkx graphviz networkx graphs pygraph",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_rustworkx",
  "homepage": "https://github.com/qiskit/rustworkx",
  "release_count": 5,
  "dependency_ids": [
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pillow"
  ]
}
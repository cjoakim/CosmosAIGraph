{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: scientific/engineering :: gis",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<!-- markdownlint-disable -->\n<h1 align=\"center\" style=\"margin:1em\">\n  <a href=\"https://geocoder.readthedocs.org/\">\n    <img src=\"https://github.com/deniscarriere/geocoder/raw/master/docs/_static/geocoder.png\"\n         alt=\"markdownify\"\n         width=\"200\"></a>\n  <br />\n  python geocoder\n</h1>\n\n<h4 align=\"center\">\n  simple and consistent geocoding library written in python.\n</h4>\n\n<p align=\"center\">\n  <a href=\"http://geocoder.readthedocs.io/?badge=master\">\n    <img src=\"https://readthedocs.org/projects/geocoder/badge/?version=master\"\n         alt=\"rdt\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/geocoder\">\n    <img src=\"https://img.shields.io/pypi/v/geocoder.svg\"\n         alt=\"pypi\">\n  </a>\n  <a href=\"https://build.snapcraft.io/user/deniscarriere/geocoder\">\n    <img src=\"https://build.snapcraft.io/badge/deniscarriere/geocoder.svg\"\n         alt=\"snap\">\n  </a>\n  <a href=\"https://travis-ci.org/deniscarriere/geocoder\">\n    <img src=\"https://travis-ci.org/deniscarriere/geocoder.svg?branch=master\"\n         alt=\"travis\">\n  </a>\n  <a href=\"https://codecov.io/gh/deniscarriere/geocoder\">\n    <img src=\"https://codecov.io/gh/deniscarriere/geocoder/branch/master/graph/badge.svg\"\n         alt=\"codecov\" />\n  </a>\n</p>\n<br>\n\ntable of content\n----------------\n\n<!-- toc -->\n\n- [overview](#overview)\n- [a glimpse at the api](#a-glimpse-at-the-api)\n    - [forward](#forward)\n    - [multiple results](#multiple-results)\n    - [reverse](#reverse)\n    - [house addresses](#house-addresses)\n    - [ip addresses](#ip-addresses)\n    - [bounding box](#bounding-box)\n- [command line interface](#command-line-interface)\n- [providers](#providers)\n- [installation](#installation)\n    - [pypi install](#pypi-install)\n    - [github install](#github-install)\n    - [snap install](#snap-install)\n- [feedback](#feedback)\n- [contribution](#contribution)\n    - [documenting](#documenting)\n    - [coding](#coding)\n- [changelog](#changelog)\n\n<!-- /toc -->\n\n## overview\n\nmany online providers such as google & bing have geocoding services,\nthese providers do not include python libraries and have different\njson responses between each other.\n\nit can be very difficult sometimes to parse a particular geocoding provider\nsince each one of them have their own json schema.\n\nhere is a typical example of retrieving a lat & lng from google using python,\nthings shouldn't be this hard.\n\n```python\n>>> import requests\n>>> url = 'https://maps.googleapis.com/maps/api/geocode/json'\n>>> params = {'sensor': 'false', 'address': 'mountain view, ca'}\n>>> r = requests.get(url, params=params)\n>>> results = r.json()['results']\n>>> location = results[0]['geometry']['location']\n>>> location['lat'], location['lng']\n(37.3860517, -122.0838511)\n```\n\nnow lets use geocoder to do the same task\n\n```python\n>>> import geocoder\n>>> g = geocoder.google('mountain view, ca')\n>>> g.latlng\n(37.3860517, -122.0838511)\n```\n\n## a glimpse at the api\n\nmany properties are available once the geocoder object is created.\n\n### forward\n\n```python\n>>> import geocoder\n>>> g = geocoder.google('mountain view, ca')\n>>> g.geojson\n>>> g.json\n>>> g.wkt\n>>> g.osm\n```\n\n### multiple queries ('batch' geocoding)\n\n```python\n>>> import geocoder\n>>> g = geocoder.mapquest(['mountain view, ca', 'boulder, co'], method='batch')\n>>> for result in g:\n...   print(result.address, result.latlng)\n...\n('mountain view', [37.39008, -122.08139])\n('boulder', [40.015831, -105.27927])\n```\n\n### multiple results\n\n```python\n>>> import geocoder\n>>> g = geocoder.geonames('mountain view, ca', maxrows=5)\n>>> print(len(g))\n5\n>>> for result in g:\n...   print(result.address, result.latlng)\n...\nmountain view ['37.38605', '-122.08385']\nmountain view elementary school ['34.0271', '-117.59116']\nbest western plus mountainview inn and suites ['51.79516', '-114.62793']\nbest western mountainview inn ['49.3338', '-123.1446']\nmountain view post office ['37.393', '-122.07774']\n```\n\n\n> the providers currently supporting multiple results are listed in the table [below](#providers).\n\n### reverse\n\n```python\n>>> g = geocoder.google([45.15, -75.14], method='reverse')\n>>> g.city\n>>> g.state\n>>> g.state_long\n>>> g.country\n>>> g.country_long\n```\n\n### house addresses\n\n```python\n>>> g = geocoder.google(\"453 booth street, ottawa on\")\n>>> g.housenumber\n>>> g.postal\n>>> g.street\n>>> g.street_long\n```\n\n### ip addresses\n\n```python\n>>> g = geocoder.ip('199.7.157.0')\n>>> g = geocoder.ip('me')\n>>> g.latlng\n>>> g.city\n```\n\n### bounding box\n\naccessing the json & geojson attributes will be different\n\n```python\n>>> g = geocoder.google(\"ottawa\")\n>>> g.bbox\n{\"northeast\": [45.53453, -75.2465979], \"southwest\": [44.962733, -76.3539158]}\n\n>>> g.geojson['bbox']\n[-76.3539158, 44.962733, -75.2465979, 45.53453]\n\n>>> g.southwest\n[44.962733, -76.3539158]\n```\n\n## command line interface\n\n```bash\n$ geocode \"ottawa, on\"  >> ottawa.geojson\n$ geocode \"ottawa, on\" \\\n    --provide google \\\n    --out geojson \\\n    --method geocode\n```\n\n## providers\n\n| provider                       | optimal   | usage policy                    | multiple results | reverse | proximity | batch |\n|:-------------------------------|:----------|:--------------------------------|:-----------------|:--------|:----------|:------|\n| [arcgis][arcgis]               | world     |                                 | yes              | yes     |           |       |\n| [baidu][baidu]                 | china     | api key                         |                  | yes     |           |       |\n| [bing][bing]                   | world     | api key                         | yes              | yes     |           | yes   |\n| [canadapost][canadapost]       | canada    | api key                         | yes              |         |           |       |\n| [freegeoip][freegeoip]         | world     |                                 |                  |         |           |       |\n| [gaode][gaode]                 | china     | api key                         |                  | yes     |           |       |\n| [geocoder.ca][geocoder.ca] (geolytica) | ca & us | rate limit                |                  |         |           |       |\n| [geocodefarm][geocodefarm]     | world     | [policy][geocodefarm-policy]    | yes              | yes     |           |       |\n| [geonames][geonames]           | world     | username                        | yes              |         | yes       |       |\n| [geoottawa][geoottawa]         | ottawa    |                                 | yes              |         |           |       |\n| [gisgraphy][gisgraphy]         | world     | api key                         | yes              | yes     | yes       |       |\n| [google][google]               | world     | rate limit, [policy][g-policy]  | yes              | yes     | yes       |       |\n| [here][here]                   | world     | api key                         | yes              | yes     |           |       |\n| [ipinfo][ipinfo]               | world     | rate limit, [plans][ip-plans]   |                  |         |           |       |\n| [komoot][komoot] (osm powered) | world     |                                 | yes              | yes     |           |       |\n| [locationiq][locationiq]       | world     | api key                         | yes              | yes     |           |       |\n| [mapbox][mapbox]               | world     | api key                         | yes              | yes     | yes       |       |\n| [mapquest][mapquest]           | world     | api key                         | yes              | yes     |           | yes   |\n| [~~mapzen~~][mapzen]           | shutdown  | api key                         | yes              | yes     |           |       |\n| [maxmind][maxmind]             | world     |                                 |                  |         |           |       |\n| [opencage][opencage]           | world     | api key                         | yes              | yes     |           |       |\n| [openstreetmap][openstreetmap] | world     | [policy][openstreetmap-policy]  | yes              | yes     |           |       |\n| [tamu][tamu]                   | us        | api key                         |                  |         |           |       |\n| [tgos][tgos]                   | taiwan    |                                 |                  |         |           |       |\n| [tomtom][tomtom]               | world     | api key                         | yes              |         |           |       |\n| [uscensus][uscensus]           | us        |                                 |                  | yes     |           | yes   |\n| [what3words][what3words]       | world     | api key                         |                  | yes     |           |       |\n| [yahoo][yahoo]                 | world     |                                 |                  |         |           |       |\n| [yandex][yandex]               | russia    |                                 | yes              | yes     |           |       |\n\n## installation\n\n### pypi install\n\nto install geocoder, simply:\n\n```bash\n$ pip install geocoder\n...\n```\n\n### github install\n\ninstalling the latest version from github:\n\n```bash\n$ git clone https://github.com/deniscarriere/geocoder\n...\n$ cd geocoder\n$ python setup.py install\n...\n```\n\n### snap install\n\nto install the stable geocoder [snap](https://snapcraft.io) in any of the [supported linux distros](https://snapcraft.io/docs/core/install):\n\n```bash\n$ sudo snap install geocoder\n...\n```\n\nif you want to help testing the latest changes from the master branch, you can install it from the edge channel:\n\n```bash\n$ sudo snap install geocoder --edge\n...\n```\n\nthe installed snap will be updated automatically every time a new version is pushed to the store.\n\n\n## feedback\n\nplease feel free to give any feedback on this module.\n\nspeak up on twitter [@deniscarriere](https://twitter.com/deniscarriere) and tell me how you use this python geocoder. new updates will be pushed to twitter hashtags [#python](https://twitter.com/search?q=%23python).\n\n## contribution\n\nif you find any bugs or any enhancements to recommend please send some of your comments/suggestions to the [github issues page](https://github.com/deniscarriere/geocoder/issues).\n\nsome way to contribute, from the most generic to the most detailed:\n\n### documenting\n\nif you are not comfortable with development, you can still contibute with the documentation.\n\n- review the documentation of a specific provider. most of the time they are lacking details...\n- review the parameters for a specific method, compared to what is supported by the provider\n- review documentation for command line\n\nif you miss any feature, just create an issue accordingly. be sure to describe clearly your use case, and to provide links to the correct sources.\n\n### coding\n\n- add support for a new provider. _documentation tbd_, starting point possible with [wip_guide](https://geocoder.readthedocs.io/wip_guide.html).\n- extend methods for an existing support, i.e support an additionnal api). _documentation tbd_\n- extend support of an existing api, i.e, support more (json) fields from the response, or more parameters. _documentation tbd_\n\n\n## changelog\n\nsee [changelog.md](./changelog.md)\n\n\n[tgos]: http://geocoder.readthedocs.org/providers/tgos.html\n[mapbox]: http://geocoder.readthedocs.org/providers/mapbox.html\n[google]: http://geocoder.readthedocs.org/providers/google.html\n[g-policy]: https://developers.google.com/maps/documentation/geocoding/usage-limits\n[bing]: http://geocoder.readthedocs.org/providers/bing.html\n[locationiq]: http://geocoder.readthedocs.org/providers/locationiq.html\n[openstreetmap]: http://geocoder.readthedocs.org/providers/openstreetmap.html\n[openstreetmap-policy]: https://operations.osmfoundation.org/policies/nominatim/\n[here]: http://geocoder.readthedocs.org/providers/here.html\n[tomtom]: http://geocoder.readthedocs.org/providers/tomtom.html\n[mapquest]: http://geocoder.readthedocs.org/providers/mapquest.html\n[opencage]: http://geocoder.readthedocs.org/providers/opencage.html\n[yahoo]: http://geocoder.readthedocs.org/providers/yahoo.html\n[arcgis]: http://geocoder.readthedocs.org/providers/arcgis.html\n[yandex]: http://geocoder.readthedocs.org/providers/yandex.html\n[geocoder.ca]: http://geocoder.readthedocs.org/providers/geocoder-ca.html\n[baidu]: http://geocoder.readthedocs.org/providers/baidu.html\n[geoottawa]: http://geocoder.readthedocs.org/providers/geoottawa.html\n[freegeoip]: http://geocoder.readthedocs.org/providers/freegeoip.html\n[maxmind]: http://geocoder.readthedocs.org/providers/maxmind.html\n[mapzen]: https://mapzen.com/blog/shutdown\n[what3words]: http://geocoder.readthedocs.org/providers/what3words.html\n[canadapost]: http://geocoder.readthedocs.org/providers/canadapost.html\n[geonames]: http://geocoder.readthedocs.org/providers/geonames.html\n[ipinfo]: http://geocoder.readthedocs.org/providers/ipinfo.html\n[tamu]: http://geoservices.tamu.edu/services/geocode/webservice/\n[geocodefarm]: https://geocode.farm/\n[geocodefarm-policy]: https://geocode.farm/geocoding/free-api-documentation/\n[gaode]: http://geocoder.readthedocs.org/providers/.html\n[ip-plans]: http://ipinfo.io/pricing\n[komoot]: http://photon.komoot.de\n[uscensus]: https://geocoding.geo.census.gov/geocoder/geocoding_services_api.html\n[gisgraphy]: https://premium.gisgraphy.com/\n",
  "docs_url": null,
  "keywords": "geocoder arcgis tomtom opencage google bing here",
  "license": "the mit license",
  "name": "geocoder",
  "package_url": "https://pypi.org/project/geocoder/",
  "project_url": "https://pypi.org/project/geocoder/",
  "project_urls": {
    "Download": "https://github.com/DenisCarriere/geocoder",
    "Homepage": "https://github.com/DenisCarriere/geocoder"
  },
  "release_url": "https://pypi.org/project/geocoder/1.38.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "geocoder is a simple and consistent geocoding library.",
  "version": "1.38.1",
  "releases": [],
  "developers": [
    "carriere.denis@gmail.com",
    "denis_carriere"
  ],
  "kwds": "geocoder geocode geocodefarm geocoding codecov",
  "license_kwds": "the mit license",
  "libtype": "pypi",
  "id": "pypi_geocoder",
  "homepage": "https://github.com/deniscarriere/geocoder",
  "release_count": 109,
  "dependency_ids": []
}
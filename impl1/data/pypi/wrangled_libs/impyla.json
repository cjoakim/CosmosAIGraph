{
  "classifiers": [
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# impyla\n\npython client for hiveserver2 implementations (e.g., impala, hive) for\ndistributed query engines.\n\nfor higher-level impala functionality, including a pandas-like interface over\ndistributed data sets, see the [ibis project][ibis].\n\n### features\n\n* hiveserver2 compliant; works with impala and hive, including nested data\n\n* fully [db api 2.0 (pep 249)][pep249]-compliant python client (similar to\nsqlite or mysql clients) supporting python 2.6+ and python 3.3+.\n\n* works with kerberos, ldap, ssl\n\n* [sqlalchemy][sqlalchemy] connector\n\n* converter to [pandas][pandas] `dataframe`, allowing easy integration into the\npython data stack (including [scikit-learn][sklearn] and\n[matplotlib][matplotlib]); but see the [ibis project][ibis] for a richer\nexperience\n\n### dependencies\n\nrequired:\n\n* python 2.7+ or 3.5+\n\n* `six`, `bitarray`\n\n* `thrift==0.16.0`\n\n* `thrift_sasl==0.4.3`\n\noptional:\n\n* `kerberos>=1.3.0` for kerberos over http support. this also requires kerberos libraries\n   to be installed on your system - see [system kerberos](#system-kerberos)\n\n* `pandas` for conversion to `dataframe` objects; but see the [ibis project][ibis] instead\n\n* `sqlalchemy` for the sqlalchemy engine\n\n* `pytest` for running tests; `unittest2` for testing on python 2.6\n\n\n#### system kerberos\n\ndifferent systems require different packages to be installed to enable kerberos support in\nimpyla. some examples of how to install the packages on different distributions follow.\n\nubuntu:\n```bash\napt-get install libkrb5-dev krb5-user\n```\n\nrhel/centos:\n```bash\nyum install krb5-libs krb5-devel krb5-server krb5-workstation\n```\n\n### installation\n\ninstall the latest release with `pip`:\n\n```bash\npip install impyla\n```\n\nfor the latest (dev) version, install directly from the repo:\n\n```bash\npip install git+https://github.com/cloudera/impyla.git\n```\n\nor clone the repo:\n\n```bash\ngit clone https://github.com/cloudera/impyla.git\ncd impyla\npython setup.py install\n```\n\n#### running the tests\n\nimpyla uses the [pytest][pytest] toolchain, and depends on the following\nenvironment variables:\n\n```bash\nexport impyla_test_host=your.impalad.com\nexport impyla_test_port=21050\nexport impyla_test_auth_mech=nosasl\n```\n\nto run the maximal set of tests, run\n\n```bash\ncd path/to/impyla\npy.test --connect impala\n```\n\nleave out the `--connect` option to skip tests for db api compliance.\n\n\n### usage\n\nimpyla implements the [python db api v2.0 (pep 249)][pep249] database interface\n(refer to it for api details):\n\n```python\nfrom impala.dbapi import connect\nconn = connect(host='my.host.com', port=21050)\ncursor = conn.cursor()\ncursor.execute('select * from mytable limit 100')\nprint cursor.description  # prints the result set's schema\nresults = cursor.fetchall()\n```\n\nthe `cursor` object also exposes the iterator interface, which is buffered\n(controlled by `cursor.arraysize`):\n\n```python\ncursor.execute('select * from mytable limit 100')\nfor row in cursor:\n    print(row)\n```\n\nfurthermore the `cursor` object returns you information about the columns\nreturned in the query. this is useful to export your data as a csv file.\n\n```python\nimport csv\n\ncursor.execute('select * from mytable limit 100')\ncolumns = [datum[0] for datum in cursor.description]\ntargetfile = '/tmp/foo.csv'\n\nwith open(targetfile, 'w', newline='') as outcsv:\n    writer = csv.writer(outcsv, delimiter=',', quotechar='\"', quoting=csv.quote_all, lineterminator='\\n')\n    writer.writerow(columns)\n    for row in cursor:\n        writer.writerow(row)\n```\n\nyou can also get back a pandas dataframe object\n\n```python\nfrom impala.util import as_pandas\ndf = as_pandas(cur)\n# carry df through scikit-learn, for example\n```\n\n\n[pep249]: http://legacy.python.org/dev/peps/pep-0249/\n[pandas]: http://pandas.pydata.org/\n[sklearn]: http://scikit-learn.org/\n[matplotlib]: http://matplotlib.org/\n[pytest]: http://pytest.org/latest/\n[sqlalchemy]: http://www.sqlalchemy.org/\n[ibis]: http://www.ibis-project.org/\n\n# how do i contribute code?\nyou need to first sign and return an\n[icla](https://github.com/cloudera/native-toolchain/blob/icla/cloudera%20icla_25apr2018.pdf)\nand\n[ccla](https://github.com/cloudera/native-toolchain/blob/icla/cloudera%20ccla_25apr2018.pdf)\nbefore we can accept and redistribute your contribution. once these are submitted you are\nfree to start contributing to impyla. submit these to cla@cloudera.com.\n\n## find\nwe use github issues to track bugs for this project. find an issue that you would like to\nwork on (or file one if you have discovered a new issue!). if no-one is working on it,\nassign it to yourself only if you intend to work on it shortly.\n\nit's a good idea to discuss your intended approach on the issue. you are much more\nlikely to have your patch reviewed and committed if you've already got buy-in from the\nimpyla community before you start.\n\n## fix\nnow start coding! as you are writing your patch, please keep the following things in mind:\n\nfirst, please include tests with your patch. if your patch adds a feature or fixes a bug\nand does not include tests, it will generally not be accepted. if you are unsure how to\nwrite tests for a particular component, please ask on the issue for guidance.\n\nsecond, please keep your patch narrowly targeted to the problem described by the issue.\nit's better for everyone if we maintain discipline about the scope of each patch. in\ngeneral, if you find a bug while working on a specific feature, file a issue for the bug,\ncheck if you can assign it to yourself and fix it independently of the feature. this helps\nus to differentiate between bug fixes and features and allows us to build stable\nmaintenance releases.\n\nfinally, please write a good, clear commit message, with a short, descriptive title and\na message that is exactly long enough to explain what the problem was, and how it was\nfixed.\n\nplease create a pull request on github with your patch.\n",
  "docs_url": null,
  "keywords": "cloudera impala python hadoop sql hdfs mpp spark pydata pandas distributed db api pep 249 hive hiveserver2 hs2",
  "license": "apache license, version 2.0",
  "name": "impyla",
  "package_url": "https://pypi.org/project/impyla/",
  "project_url": "https://pypi.org/project/impyla/",
  "project_urls": {
    "Homepage": "https://github.com/cloudera/impyla"
  },
  "release_url": "https://pypi.org/project/impyla/0.19.0/",
  "requires_dist": [
    "six",
    "bitarray",
    "thrift (==0.16.0)",
    "thrift-sasl (==0.4.3)",
    "kerberos (>=1.3.0) ; extra == 'kerberos'"
  ],
  "requires_python": "",
  "summary": "python client for the impala distributed query engine",
  "version": "0.19.0",
  "releases": [],
  "developers": [
    "laserson@cloudera.com",
    "uri_laserson",
    "wes.mckinney@twosigma.com",
    "wes_mckinney"
  ],
  "kwds": "hadoop pandas hiveserver2 cloudera hdfs",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_impyla",
  "homepage": "https://github.com/cloudera/impyla",
  "release_count": 51,
  "dependency_ids": [
    "pypi_bitarray",
    "pypi_kerberos",
    "pypi_six",
    "pypi_thrift",
    "pypi_thrift_sasl"
  ]
}
{
  "classifiers": [],
  "description": "[![build status](https://travis-ci.org/pr4bh4sh/delayed-assert.svg?branch=master)](https://travis-ci.org/pr4bh4sh/delayed-assert)\n[![pypi version](https://badge.fury.io/py/delayed-assert.svg)](https://badge.fury.io/py/delayed-assert)\n[![downloads](https://pepy.tech/badge/delayed-assert)](https://pepy.tech/project/delayed-assert)\n[![downloads](https://pepy.tech/badge/delayed-assert/month)](https://pepy.tech/project/delayed-assert)\n\n# python-delayed-assert\n\ndelayed aka. soft asserts for python\n\nfew features:\n\n    - no dependenices on any other framework/library.\n    - should work with any testing framework.\n    - can be use as decorator or context manager.\n\n![sample](https://raw.githubusercontent.com/pr4bh4sh/delayed-assert/master/sample.jpg)\n\n## installation\n\n### install via pip\n\n```bash\n    pip install delayed-assert\n```\n\n### install from master\n\n```bash\n    pip install git+https://github.com/pr4bh4sh/delayed-assert\n```\n\n## uses\n\nsee `example_unittest.py` for usage.\n\n### using assertion library with lambda\n\npass the assertion call as\n\n```python\n    expect(lambda: self.assertlistequal([4,5,6,2,5],[7,8]))\n```\n\nwhile i've tested only with unittest asserttion,it should be able to use any assertion library.\n\nkeep in mind that, python does not support statement inside lambda, so\n\n```python\n    expect(lambda: assert 1 == 1)\n```\n\nwon't work as it is not a valid lambda expression in python\n\n### current possible uses\n\n```python\n    def testsomething(self):\n        delayed_assert.expect(1 == 1) # will succeed\n        delayed_assert.expect(1 == 2) # will fail but won't stop execution\n        delayed_assert.expect(3 == 2, \"value don't match\") # will fail but won't stop execution\n        delayed_assert.expect(3 == 3) # will succeed\n        # will stop execution and show the stack trace of 2nd assertion\n        delayed_assert.assert_expectations()\n\n    def testlambdas(self):\n        expect(lambda: self.assertequal(3,4)) # will fail but won't stop execution\n        expect(lambda: self.assertlistequal([4,5,6,2,5],[7,8])) # will fail but won't stop execution\n        assert_expectations()\n\n    @delayed_assert.assert_all()\n    def testdecorator(self):\n        expect('five' == 'six', 'string do not match')\n        expect([5,2] == [3,4], 'list item do not match')\n        expect([3,4] == [3,4], 'this message wont be printed')\n        # no need to call delayed_assert.assert_expectations() when decorator is used\n\n    def testcontextmaneger(self):\n        with delayed_assert.assert_all():\n            expect('four' == 'six', 'string do not match')\n            expect([5,2] == [3,4], 'list item do not match')\n            expect([3,4] == [3,4], 'this message wont be printed')\n            # no need to call delayed_assert.assert_expectations() when using context maneger is used\n\n```\n\n---------------\n\ncredit : <http://pythontesting.net/strategy/delayed-assert/>\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "delayed-assert",
  "package_url": "https://pypi.org/project/delayed-assert/",
  "project_url": "https://pypi.org/project/delayed-assert/",
  "project_urls": {
    "Homepage": "https://github.com/pr4bh4sh/python-delayed-assert"
  },
  "release_url": "https://pypi.org/project/delayed-assert/0.3.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "delayed/soft assertions for python",
  "version": "0.3.6",
  "releases": [],
  "developers": [
    "pr4bh4sh"
  ],
  "kwds": "delayed_assert assert_all assert pythontesting asserttion",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_delayed_assert",
  "homepage": "https://github.com/pr4bh4sh/python-delayed-assert",
  "release_count": 11,
  "dependency_ids": []
}
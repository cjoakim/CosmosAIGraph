{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database :: front-ends",
    "topic :: system :: distributed computing",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "# pottery: redis for humans \ud83c\udf0e\ud83c\udf0d\ud83c\udf0f\n\n[redis](http://redis.io/) is awesome, but [redis\ncommands](http://redis.io/commands) are not always intuitive.  pottery is a\npythonic way to access redis.  if you know how to use python dicts, then you\nalready know how to use pottery.  pottery is useful for accessing redis more\neasily, and also for implementing microservice resilience patterns; and it has\nbeen battle tested in production at scale.\n\n[![build status](https://img.shields.io/github/workflow/status/brainix/pottery/python%20package/master)](https://github.com/brainix/pottery/actions?query=branch%3amaster)\n[![security status](https://img.shields.io/badge/security-bandit-dark.svg)](https://github.com/pycqa/bandit)\n[![latest released version](https://badge.fury.io/py/pottery.svg)](https://badge.fury.io/py/pottery)\n\n![supported python versions](https://img.shields.io/pypi/pyversions/pottery)\n![number of lines of code](https://img.shields.io/tokei/lines/github/brainix/pottery)\n\n[![total number of downloads](https://pepy.tech/badge/pottery)](https://pepy.tech/project/pottery)\n[![downloads per month](https://pepy.tech/badge/pottery/month)](https://pepy.tech/project/pottery)\n[![downloads per week](https://pepy.tech/badge/pottery/week)](https://pepy.tech/project/pottery)\n\n\n\n## table of contents\n- [dicts \ud83d\udcd6](#dicts)\n- [sets \ud83d\udecd\ufe0f](#sets)\n- [lists \u26d3](#lists)\n- [counters \ud83e\uddee](#counters)\n- [deques \ud83d\udd87\ufe0f](#deques)\n- [queues \ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udeb6\u200d\u2640\ufe0f\ud83d\udeb6\u200d\u2642\ufe0f](#queues)\n- [redlock \ud83d\udd12](#redlock)\n    - [synchronize() \ud83d\udc6f\u200d\u2640\ufe0f](#synchronize)\n- [nextid \ud83d\udd22](#nextid)\n- [redis_cache()](#redis_cache)\n- [cachedordereddict](#cachedordereddict)\n- [bloom filters \ud83c\udf38](#bloom-filters)\n- [hyperloglogs \ud83e\udeb5](#hyperloglogs)\n- [contexttimer \u23f1\ufe0f](#contexttimer)\n\n\n\n## installation\n\n```shell\n$ pip3 install pottery\n```\n\n## usage\n\nfirst, set up your redis client:\n\n```python\n>>> from redis import redis\n>>> redis = redis.from_url('redis://localhost:6379/1')\n>>>\n```\n\n\n\n## <a name=\"dicts\"></a>dicts \ud83d\udcd6\n\n`redisdict` is a redis-backed container compatible with python&rsquo;s\n[`dict`](https://docs.python.org/3/tutorial/datastructures.html#dictionaries).\n\nhere is a small example using a `redisdict`:\n\n```python\n>>> from pottery import redisdict\n>>> tel = redisdict({'jack': 4098, 'sape': 4139}, redis=redis, key='tel')\n>>> tel['guido'] = 4127\n>>> tel\nredisdict{'jack': 4098, 'sape': 4139, 'guido': 4127}\n>>> tel['jack']\n4098\n>>> del tel['sape']\n>>> tel['irv'] = 4127\n>>> tel\nredisdict{'jack': 4098, 'guido': 4127, 'irv': 4127}\n>>> list(tel)\n['jack', 'guido', 'irv']\n>>> sorted(tel)\n['guido', 'irv', 'jack']\n>>> 'guido' in tel\ntrue\n>>> 'jack' not in tel\nfalse\n>>>\n```\n\nnotice the first two keyword arguments to `redisdict()`:  the first is your\nredis client.  the second is the redis key name for your dict.  other than\nthat, you can use your `redisdict` the same way that you use any other python\n`dict`.\n\n*limitations:*\n\n1. keys and values must be json serializable.\n\n\n\n## <a name=\"sets\"></a>sets \ud83d\udecd\ufe0f\n\n`redisset` is a redis-backed container compatible with python&rsquo;s\n[`set`](https://docs.python.org/3/tutorial/datastructures.html#sets).\n\nhere is a brief demonstration:\n\n```python\n>>> from pottery import redisset\n>>> basket = redisset({'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}, redis=redis, key='basket')\n>>> sorted(basket)\n['apple', 'banana', 'orange', 'pear']\n>>> 'orange' in basket\ntrue\n>>> 'crabgrass' in basket\nfalse\n\n>>> a = redisset('abracadabra', redis=redis, key='magic')\n>>> b = set('alacazam')\n>>> sorted(a)\n['a', 'b', 'c', 'd', 'r']\n>>> sorted(a - b)\n['b', 'd', 'r']\n>>> sorted(a | b)\n['a', 'b', 'c', 'd', 'l', 'm', 'r', 'z']\n>>> sorted(a & b)\n['a', 'c']\n>>> sorted(a ^ b)\n['b', 'd', 'l', 'm', 'r', 'z']\n>>>\n```\n\nnotice the two keyword arguments to `redisset()`:  the first is your redis\nclient.  the second is the redis key name for your set.  other than that, you\ncan use your `redisset` the same way that you use any other python `set`.\n\ndo more efficient membership testing for multiple elements using\n`.contains_many()`:\n\n```python\n>>> nirvana = redisset({'kurt', 'krist', 'dave'}, redis=redis, key='nirvana')\n>>> tuple(nirvana.contains_many('kurt', 'krist', 'chat', 'dave'))\n(true, true, false, true)\n>>>\n```\n\n*limitations:*\n\n1. elements must be json serializable.\n\n\n\n## <a name=\"lists\"></a>lists \u26d3\n\n`redislist` is a redis-backed container compatible with python&rsquo;s\n[`list`](https://docs.python.org/3/tutorial/introduction.html#lists).\n\n```python\n>>> from pottery import redislist\n>>> squares = redislist([1, 4, 9, 16, 25], redis=redis, key='squares')\n>>> squares\nredislist[1, 4, 9, 16, 25]\n>>> squares[0]\n1\n>>> squares[-1]\n25\n>>> squares[-3:]\n[9, 16, 25]\n>>> squares[:]\n[1, 4, 9, 16, 25]\n>>> squares + [36, 49, 64, 81, 100]\nredislist[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n>>>\n```\n\nnotice the two keyword arguments to `redislist()`:  the first is your redis\nclient.  the second is the redis key name for your list.  other than that, you\ncan use your `redislist` the same way that you use any other python `list`.\n\n*limitations:*\n\n1. elements must be json serializable.\n2. under the hood, python implements `list` using an array.  redis implements\n   list using a\n   [doubly linked list](https://redis.io/topics/data-types-intro#redis-lists).\n   as such, inserting elements at the head or tail of a `redislist` is fast,\n   o(1).  however, accessing `redislist` elements by index is slow, o(n).  so\n   in terms of performance and ideal use cases, `redislist` is more similar to\n   python&rsquo;s `deque` than python&rsquo;s `list`.  instead of `redislist`,\n   consider using [`redisdeque`](#deques).\n\n\n\n## <a name=\"counters\"></a>counters \ud83e\uddee\n\n`rediscounter` is a redis-backed container compatible with python&rsquo;s\n[`collections.counter`](https://docs.python.org/3/library/collections.html#collections.counter).\n\n```python\n>>> from pottery import rediscounter\n>>> c = rediscounter(redis=redis, key='my-counter')\n>>> c = rediscounter('gallahad', redis=redis, key='my-counter')\n>>> c.clear()\n>>> c = rediscounter({'red': 4, 'blue': 2}, redis=redis, key='my-counter')\n>>> c.clear()\n>>> c = rediscounter(redis=redis, key='my-counter', cats=4, dogs=8)\n>>> c.clear()\n\n>>> c = rediscounter(['eggs', 'ham'], redis=redis, key='my-counter')\n>>> c['bacon']\n0\n>>> c['sausage'] = 0\n>>> del c['sausage']\n>>> c.clear()\n\n>>> c = rediscounter(redis=redis, key='my-counter', a=4, b=2, c=0, d=-2)\n>>> sorted(c.elements())\n['a', 'a', 'a', 'a', 'b', 'b']\n>>> c.clear()\n\n>>> rediscounter('abracadabra', redis=redis, key='my-counter').most_common(3)\n[('a', 5), ('b', 2), ('r', 2)]\n>>> c.clear()\n\n>>> c = rediscounter(redis=redis, key='my-counter', a=4, b=2, c=0, d=-2)\n>>> from collections import counter\n>>> d = counter(a=1, b=2, c=3, d=4)\n>>> c.subtract(d)\n>>> c\nrediscounter{'a': 3, 'b': 0, 'c': -3, 'd': -6}\n>>>\n```\n\nnotice the first two keyword arguments to `rediscounter()`:  the first is your\nredis client.  the second is the redis key name for your counter.  other than\nthat, you can use your `rediscounter` the same way that you use any other\npython `counter`.\n\n*limitations:*\n\n1. keys must be json serializable.\n\n\n\n## <a name=\"deques\"></a>deques \ud83d\udd87\ufe0f\n\n`redisdeque` is a redis-backed container compatible with python&rsquo;s\n[`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque).\n\nexample:\n\n```python\n>>> from pottery import redisdeque\n>>> d = redisdeque('ghi', redis=redis, key='letters')\n>>> for elem in d:\n...     print(elem.upper())\ng\nh\ni\n\n>>> d.append('j')\n>>> d.appendleft('f')\n>>> d\nredisdeque(['f', 'g', 'h', 'i', 'j'])\n\n>>> d.pop()\n'j'\n>>> d.popleft()\n'f'\n>>> list(d)\n['g', 'h', 'i']\n>>> d[0]\n'g'\n>>> d[-1]\n'i'\n\n>>> list(reversed(d))\n['i', 'h', 'g']\n>>> 'h' in d\ntrue\n>>> d.extend('jkl')\n>>> d\nredisdeque(['g', 'h', 'i', 'j', 'k', 'l'])\n>>> d.rotate(1)\n>>> d\nredisdeque(['l', 'g', 'h', 'i', 'j', 'k'])\n>>> d.rotate(-1)\n>>> d\nredisdeque(['g', 'h', 'i', 'j', 'k', 'l'])\n\n>>> redisdeque(reversed(d), redis=redis)\nredisdeque(['l', 'k', 'j', 'i', 'h', 'g'])\n>>> d.clear()\n\n>>> d.extendleft('abc')\n>>> d\nredisdeque(['c', 'b', 'a'])\n>>>\n```\n\nnotice the two keyword arguments to `redisdeque()`:  the first is your redis\nclient.  the second is the redis key name for your deque.  other than that, you\ncan use your `redisdeque` the same way that you use any other python `deque`.\n\n*limitations:*\n\n1. elements must be json serializable.\n\n\n\n## <a name=\"queues\"></a>queues \ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udeb6\u200d\u2640\ufe0f\ud83d\udeb6\u200d\u2642\ufe0f\n\n`redissimplequeue` is a redis-backed multi-producer, multi-consumer fifo queue\ncompatible with python&rsquo;s\n[`queue.simplequeue`](https://docs.python.org/3/library/queue.html#simplequeue-objects).\nin general, use a python `queue.queue` if you&rsquo;re using it in one or more\nthreads, use `multiprocessing.queue` if you&rsquo;re using it between processes,\nand use `redissimplequeue` if you&rsquo;re sharing it across machines or if you\nneed for your queue to persist across application crashes or restarts.\n\ninstantiate a `redissimplequeue`:\n\n```python\n>>> from pottery import redissimplequeue\n>>> cars = redissimplequeue(redis=redis, key='cars')\n>>>\n```\n\nnotice the two keyword arguments to `redissimplequeue()`:  the first is your\nredis client.  the second is the redis key name for your queue.  other than\nthat, you can use your `redissimplequeue` the same way that you use any other\npython `queue.simplequeue`.\n\ncheck the queue state, put some items in the queue, and get those items back\nout:\n\n```python\n>>> cars.empty()\ntrue\n>>> cars.qsize()\n0\n>>> cars.put('jeep')\n>>> cars.put('honda')\n>>> cars.put('audi')\n>>> cars.empty()\nfalse\n>>> cars.qsize()\n3\n>>> cars.get()\n'jeep'\n>>> cars.get()\n'honda'\n>>> cars.get()\n'audi'\n>>> cars.empty()\ntrue\n>>> cars.qsize()\n0\n>>>\n```\n\n*limitations:*\n\n1. items must be json serializable.\n\n\n\n## <a name=\"redlock\"></a>redlock \ud83d\udd12\n\n`redlock` is a safe and reliable lock to coordinate access to a resource shared\nacross threads, processes, and even machines, without a single point of\nfailure.  [rationale and algorithm\ndescription.](http://redis.io/topics/distlock)\n\n`redlock` implements python&rsquo;s excellent\n[`threading.lock`](https://docs.python.org/3/library/threading.html#lock-objects)\napi as closely as is feasible.  in other words, you can use `redlock` the same\nway that you use `threading.lock`.  the main reason to use `redlock` over\n`threading.lock` is that `redlock` can coordinate access to a resource shared\nacross different machines; `threading.lock` can&rsquo;t.\n\ninstantiate a `redlock`:\n\n```python\n>>> from pottery import redlock\n>>> printer_lock = redlock(key='printer', masters={redis})\n>>>\n```\n\nthe `key` argument represents the resource, and the `masters` argument\nspecifies your redis masters across which to distribute the lock.  in\nproduction, you should have 5 redis masters.  this is to eliminate a single\npoint of failure &mdash; you can lose up to 2 out of the 5 redis masters and\nyour `redlock` will remain available and performant.  now you can protect\naccess to your resource:\n\n```python\n>>> if printer_lock.acquire():\n...     print('printer_lock is locked')\n...     # critical section - print stuff here.\n...     printer_lock.release()\nprinter_lock is locked\n>>> bool(printer_lock.locked())\nfalse\n>>>\n```\n\nor you can protect access to your resource inside a context manager:\n\n```python\n>>> with printer_lock:\n...     print('printer_lock is locked')\n...     # critical section - print stuff here.\nprinter_lock is locked\n>>> bool(printer_lock.locked())\nfalse\n>>>\n```\n\nit&rsquo;s safest to instantiate a new `redlock` object every time you need to\nprotect your resource and to not share `redlock` instances across different\nparts of code.  in other words, think of the `key` as identifying the resource;\ndon&rsquo;t think of any particular `redlock` as identifying the resource.\ninstantiating a new `redlock` every time you need a lock sidesteps bugs by\ndecoupling how you use `redlock` from the forking/threading model of your\napplication/service.\n\n`redlock`s are automatically released (by default, after 10 seconds).  you\nshould take care to ensure that your critical section completes well within\nthat timeout.  the reasons that `redlock`s are automatically released are to\npreserve\n[&ldquo;liveness&rdquo;](http://redis.io/topics/distlock#liveness-arguments)\nand to avoid deadlocks (in the event that a process dies inside a critical\nsection before it releases its lock).\n\n```python\n>>> import time\n>>> if printer_lock.acquire():\n...     # critical section - print stuff here.\n...     time.sleep(10)\n>>> bool(printer_lock.locked())\nfalse\n>>>\n```\n\nif 10 seconds isn&rsquo;t enough to complete executing your critical section,\nthen you can specify your own auto release time (in seconds):\n\n```python\n>>> printer_lock = redlock(key='printer', masters={redis}, auto_release_time=15)\n>>> if printer_lock.acquire():\n...     # critical section - print stuff here.\n...     time.sleep(10)\n>>> bool(printer_lock.locked())\ntrue\n>>> time.sleep(5)\n>>> bool(printer_lock.locked())\nfalse\n>>>\n```\n\nby default, `.acquire()` blocks indefinitely until the lock is acquired.  you\ncan make `.acquire()` return immediately with the `blocking` argument.\n`.acquire()` returns `true` if the lock was acquired; `false` if not.\n\n```python\n>>> printer_lock_1 = redlock(key='printer', masters={redis})\n>>> printer_lock_2 = redlock(key='printer', masters={redis})\n>>> printer_lock_1.acquire(blocking=false)\ntrue\n>>> printer_lock_2.acquire(blocking=false)  # returns immediately.\nfalse\n>>> printer_lock_1.release()\n>>>\n```\n\nyou can make `.acquire()` block but not indefinitely by specifying the\n`timeout` argument (in seconds):\n\n```python\n>>> printer_lock_1.acquire(timeout=1)\ntrue\n>>> printer_lock_2.acquire(timeout=1)  # waits 1 second.\nfalse\n>>> printer_lock_1.release()\n>>>\n```\n\nyou can similarly configure the redlock context manager&rsquo;s\nblocking/timeout behavior during redlock initialization.  if the context\nmanager fails to acquire the lock, it raises the `quorumnotachieved` exception.\n\n```python\n>>> import contextlib\n>>> from pottery import quorumnotachieved\n>>> printer_lock_1 = redlock(key='printer', masters={redis}, context_manager_blocking=true, context_manager_timeout=0.2)\n>>> printer_lock_2 = redlock(key='printer', masters={redis}, context_manager_blocking=true, context_manager_timeout=0.2)\n>>> with printer_lock_1:\n...     with contextlib.suppress(quorumnotachieved):\n...         with printer_lock_2:  # waits 0.2 seconds; raises quorumnotachieved.\n...             pass\n...     print(f\"printer_lock_1 is {'locked' if printer_lock_1.locked() else 'unlocked'}\")\n...     print(f\"printer_lock_2 is {'locked' if printer_lock_2.locked() else 'unlocked'}\")\nprinter_lock_1 is locked\nprinter_lock_2 is unlocked\n>>>\n```\n\n\n\n### <a name=\"synchronize\"></a>synchronize() \ud83d\udc6f\u200d\u2640\ufe0f\n\n`synchronize()` is a decorator that allows only one thread to execute a\nfunction at a time.  under the hood, `synchronize()` uses a redlock, so refer\nto the [redlock documentation](#redlock) for more details.\n\nhere&rsquo;s how to use `synchronize()`:\n\n```python\n>>> from pottery import synchronize\n>>> @synchronize(key='synchronized-func', masters={redis}, auto_release_time=.5, blocking=true, timeout=-1)\n... def func():\n...   # only one thread can execute this function at a time.\n...   return true\n...\n>>>\n```\n\n\n## <a name=\"nextid\"></a>nextid \ud83d\udd22\n\n`nextid` safely and reliably produces increasing ids across threads, processes,\nand even machines, without a single point of failure.  [rationale and algorithm\ndescription.](http://antirez.com/news/102)\n\ninstantiate an id generator:\n\n```python\n>>> from pottery import nextid\n>>> tweet_ids = nextid(key='tweet-ids', masters={redis})\n>>>\n```\n\nthe `key` argument represents the sequence (so that you can have different\nsequences for user ids, comment ids, etc.), and the `masters` argument\nspecifies your redis masters across which to distribute id generation (in\nproduction, you should have 5 redis masters).  now, whenever you need a user\nid, call `next()` on the id generator:\n\n```python\n>>> next(tweet_ids)\n1\n>>> next(tweet_ids)\n2\n>>> next(tweet_ids)\n3\n>>>\n```\n\ntwo caveats:\n\n1. if many clients are generating ids concurrently, then there may be\n   &ldquo;holes&rdquo; in the sequence of ids (e.g.: 1, 2, 6, 10, 11, 21,\n   &hellip;).\n2. this algorithm scales to about 5,000 ids per second (with 5 redis masters).\n   if you need ids faster than that, then you may want to consider other\n   techniques.\n\n\n\n## redis_cache()\n\n`redis_cache()` is a simple lightweight unbounded function return value cache,\nsometimes called\n[&ldquo;memoize&rdquo;](https://en.wikipedia.org/wiki/memoization).\n`redis_cache()` implements python&rsquo;s excellent\n[`functools.cache()`](https://docs.python.org/3/library/functools.html#functools.cache)\napi as closely as is feasible.  in other words, you can use `redis_cache()` the\nsame way that you use `functools.cache()`.\n\n*limitations:*\n\n1. arguments to the function must be hashable.\n2. return values from the function must be json serializable.\n3. just like `functools.cache()`, `redis_cache()` does not allow for a maximum\n   size, and does not evict old values, and grows unbounded.  only use\n   `redis_cache()` in one of these cases:\n    1. your function&rsquo;s argument space has a known small cardinality.\n    2. you specify a `timeout` when calling `redis_cache()` to decorate your\n       function, to dump your _entire_ return value cache `timeout` seconds\n       after the last cache access (hit or miss).\n    3. you periodically call `.cache_clear()` to dump your _entire_ return\n       value cache.\n    4. you&rsquo;re ok with your return value cache growing unbounded, and you\n       [understand the implications](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/)\n       of this for your underlying redis instance.\n\nin general, you should only use `redis_cache()` when you want to reuse\npreviously computed values.  accordingly, it doesn&rsquo;t make sense to cache\nfunctions with side-effects or impure functions such as `time()` or `random()`.\n\ndecorate a function:\n\n```python\n>>> import time\n>>> from pottery import redis_cache\n>>> @redis_cache(redis=redis, key='expensive-function-cache')\n... def expensive_function(n):\n...     time.sleep(1)  # simulate an expensive computation or database lookup.\n...     return n\n...\n>>>\n```\n\nnotice the two keyword arguments to `redis_cache()`: the first is your redis\nclient.  the second is the redis key name for your function&rsquo;s return\nvalue cache.\n\ncall your function and observe the cache hit/miss rates:\n\n```python\n>>> expensive_function(5)\n5\n>>> expensive_function.cache_info()\ncacheinfo(hits=0, misses=1, maxsize=none, currsize=1)\n>>> expensive_function(5)\n5\n>>> expensive_function.cache_info()\ncacheinfo(hits=1, misses=1, maxsize=none, currsize=1)\n>>> expensive_function(6)\n6\n>>> expensive_function.cache_info()\ncacheinfo(hits=1, misses=2, maxsize=none, currsize=2)\n>>>\n```\n\nnotice that the first call to `expensive_function()` takes 1 second and results\nin a cache miss; but the second call returns almost immediately and results in\na cache hit.  this is because after the first call, `redis_cache()` cached the\nreturn value for the call when `n == 5`.\n\nyou can access your original undecorated underlying `expensive_function()` as\n`expensive_function.__wrapped__`.  this is useful for introspection, for\nbypassing the cache, or for rewrapping the original function with a different\ncache.\n\nyou can force a cache reset for a particular combination of `args`/`kwargs`\nwith `expensive_function.__bypass__`.  a call to\n`expensive_function.__bypass__(*args, **kwargs)` bypasses the cache lookup,\ncalls the original underlying function, then caches the results for future\ncalls to `expensive_function(*args, **kwargs)`.  note that a call to\n`expensive_function.__bypass__(*args, **kwargs)` results in neither a cache hit\nnor a cache miss.\n\nfinally, clear/invalidate your function&rsquo;s entire return value cache with\n`expensive_function.cache_clear()`:\n\n```python\n>>> expensive_function.cache_info()\ncacheinfo(hits=1, misses=2, maxsize=none, currsize=2)\n>>> expensive_function.cache_clear()\n>>> expensive_function.cache_info()\ncacheinfo(hits=0, misses=0, maxsize=none, currsize=0)\n>>>\n```\n\n\n\n## cachedordereddict\n\nthe best way that i can explain `cachedordereddict` is through an example\nuse-case.  imagine that your search engine returns document ids, which then you\nhave to hydrate into full documents via the database to return to the client.\nthe data structure used to represent such search results must have the\nfollowing properties:\n\n1. it must preserve the order of the document ids returned by the search engine.\n2. it must map document ids to hydrated documents.\n3. it must cache previously hydrated documents.\n\nproperties 1 and 2 are satisfied by python&rsquo;s\n[`collections.ordereddict`](https://docs.python.org/3/library/collections.html#collections.ordereddict).\nhowever, `cachedordereddict` extends python&rsquo;s `ordereddict` to also\nsatisfy property 3.\n\nthe most common usage pattern for `cachedordereddict` is as follows:\n\n1. instantiate `cachedordereddict` with the ids that you must look up or\n   compute passed in as the `dict_keys` argument to the initializer.\n2. compute and store the cache misses for future lookups.\n3. return some representation of your `cachedordereddict` to the client.\n\ninstantiate a `cachedordereddict`:\n\n```python\n>>> from pottery import cachedordereddict\n>>> search_results_1 = cachedordereddict(\n...     redis_client=redis,\n...     redis_key='search-results',\n...     dict_keys=(1, 2, 3, 4, 5),\n... )\n>>>\n```\n\nthe `redis_client` argument to the initializer is your redis client, and the\n`redis_key` argument is the redis key for the redis hash backing your cache.\nthe `dict_keys` argument represents an ordered iterable of keys to be looked up\nand automatically populated in your `cachedordereddict` (on cache hits), or\nthat you&rsquo;ll have to compute and populate for future lookups (on cache\nmisses).  regardless of whether keys are cache hits or misses,\n`cachedordereddict` preserves the order of `dict_keys` (like a list), maps\nthose keys to values (like a dict), and maintains an underlying cache for\nfuture key lookups.\n\nin the beginning, the cache is empty, so let&rsquo;s populate it:\n\n```python\n>>> sorted(search_results_1.misses())\n[1, 2, 3, 4, 5]\n>>> search_results_1[1] = 'one'\n>>> search_results_1[2] = 'two'\n>>> search_results_1[3] = 'three'\n>>> search_results_1[4] = 'four'\n>>> search_results_1[5] = 'five'\n>>> sorted(search_results_1.misses())\n[]\n>>>\n```\n\nnote that `cachedordereddict` preserves the order of `dict_keys`:\n\n```python\n>>> for key, value in search_results_1.items():\n...     print(f'{key}: {value}')\n1: one\n2: two\n3: three\n4: four\n5: five\n>>>\n```\n\nnow, let&rsquo;s look at a combination of cache hits and misses:\n\n```python\n>>> search_results_2 = cachedordereddict(\n...     redis_client=redis,\n...     redis_key='search-results',\n...     dict_keys=(2, 4, 6, 8, 10),\n... )\n>>> sorted(search_results_2.misses())\n[6, 8, 10]\n>>> search_results_2[2]\n'two'\n>>> search_results_2[6] = 'six'\n>>> search_results_2[8] = 'eight'\n>>> search_results_2[10] = 'ten'\n>>> sorted(search_results_2.misses())\n[]\n>>> for key, value in search_results_2.items():\n...     print(f'{key}: {value}')\n2: two\n4: four\n6: six\n8: eight\n10: ten\n>>>\n```\n\n*limitations:*\n\n1. keys and values must be json serializable.\n\n\n\n## <a name=\"bloom-filters\"></a>bloom filters \ud83c\udf38\n\nbloom filters are a powerful data structure that help you to answer the\nquestions, _&ldquo;have i seen this element before?&rdquo;_ and _&ldquo;how\nmany distinct elements have i seen?&rdquo;_; but not the question, _&ldquo;what\nare all of the elements that i&rsquo;ve seen before?&rdquo;_  so think of bloom\nfilters as python sets that you can add elements to, use to test element\nmembership, and get the length of; but that you can&rsquo;t iterate through or\nget elements back out of.\n\nbloom filters are probabilistic, which means that they can sometimes generate\nfalse positives (as in, they may report that you&rsquo;ve seen a particular\nelement before even though you haven&rsquo;t).  but they will never generate\nfalse negatives (so every time that they report that you haven&rsquo;t seen a\nparticular element before, you really must never have seen it).  you can tune\nyour acceptable false positive probability, though at the expense of the\nstorage size and the element insertion/lookup time of your bloom filter.\n\ncreate a `bloomfilter`:\n\n```python\n>>> from pottery import bloomfilter\n>>> dilberts = bloomfilter(\n...     num_elements=100,\n...     false_positives=0.01,\n...     redis=redis,\n...     key='dilberts',\n... )\n>>>\n```\n\nhere, `num_elements` represents the number of elements that you expect to\ninsert into your `bloomfilter`, and `false_positives` represents your\nacceptable false positive probability.  using these two parameters,\n`bloomfilter` automatically computes its own storage size and number of times\nto run its hash functions on element insertion/lookup such that it can\nguarantee a false positive rate at or below what you can tolerate, given that\nyou&rsquo;re going to insert your specified number of elements.\n\ninsert an element into the `bloomfilter`:\n\n```python\n>>> dilberts.add('rajiv')\n>>>\n```\n\ntest for membership in the `bloomfilter`:\n\n```python\n>>> 'rajiv' in dilberts\ntrue\n>>> 'raj' in dilberts\nfalse\n>>> 'dan' in dilberts\nfalse\n>>>\n```\n\nsee how many elements we&rsquo;ve inserted into the `bloomfilter`:\n\n```python\n>>> len(dilberts)\n1\n>>>\n```\n\nnote that `bloomfilter.__len__()` is an approximation, not an exact value,\nthough it&rsquo;s quite accurate.\n\ninsert multiple elements into the `bloomfilter`:\n\n```python\n>>> dilberts.update({'raj', 'dan'})\n>>>\n```\n\ndo more efficient membership testing for multiple elements using\n`.contains_many()`:\n\n```python\n>>> tuple(dilberts.contains_many('rajiv', 'raj', 'dan', 'luis'))\n(true, true, true, false)\n>>>\n```\n\nremove all of the elements from the `bloomfilter`:\n\n```python\n>>> dilberts.clear()\n>>> len(dilberts)\n0\n>>>\n```\n\n*limitations:*\n\n1. elements must be json serializable.\n2. `len(bf)` is probabilistic in that it&rsquo;s an accurate approximation.  you\n   can tune how accurate you want it to be with the `num_elements` and\n   `false_positives` arguments to `.__init__()`, at the expense of storage space\n   and insertion/lookup time.\n3. membership testing against a bloom filter is probabilistic in that it *may*\n   return false positives, but *never* returns false negatives.  this means that\n   if `element in bf` evaluates to `true`, then you *may* have inserted the\n   element into the bloom filter.  but if `element in bf` evaluates to `false`,\n   then you *must not* have inserted it.  again, you can tune accuracy with the\n   `num_elements` and `false_positives` arguments to `.__init__()`, at the\n   expense of storage space and insertion/lookup time.\n\n\n\n## <a name=\"hyperloglogs\"></a>hyperloglogs \ud83e\udeb5\n\nhyperloglogs are an interesting data structure designed to answer the question,\n_&ldquo;how many distinct elements have i seen?&rdquo;_; but not the questions,\n_&ldquo;have i seen this element before?&rdquo;_ or _&ldquo;what are all of the\nelements that i&rsquo;ve seen before?&rdquo;_  so think of hyperloglogs as\npython sets that you can add elements to and get the length of; but that you\ncan&rsquo;t use to test element membership, iterate through, or get elements\nout of.\n\nhyperloglogs are probabilistic, which means that they&rsquo;re accurate within\na margin of error up to 2%.  however, they can reasonably accurately estimate\nthe cardinality (size) of vast datasets (like the number of unique google\nsearches issued in a day) with a tiny amount of storage (1.5 kb).\n\ncreate a `hyperloglog`:\n\n```python\n>>> from pottery import hyperloglog\n>>> google_searches = hyperloglog(redis=redis, key='google-searches')\n>>>\n```\n\ninsert an element into the `hyperloglog`:\n\n```python\n>>> google_searches.add('sonic the hedgehog video game')\n>>>\n```\n\nsee how many elements we&rsquo;ve inserted into the `hyperloglog`:\n\n```python\n>>> len(google_searches)\n1\n>>>\n```\n\ninsert multiple elements into the `hyperloglog`:\n\n```python\n>>> google_searches.update({\n...     'google in 1998',\n...     'minesweeper',\n...     'joey tribbiani',\n...     'wizard of oz',\n...     'rgb to hex',\n...     'pac-man',\n...     'breathing exercise',\n...     'do a barrel roll',\n...     'snake',\n... })\n>>> len(google_searches)\n10\n>>>\n```\n\nthrough a clever hack, we can do membership testing against a `hyperloglog`,\neven though it was never designed for this purpose.  the way that the hack works\nis that it creates a temporary copy of the `hyperloglog`, then inserts the\nelement that you&rsquo;re running the membership test for into the temporary\ncopy.  if the insertion changes the temporary `hyperloglog`&rsquo;s cardinality,\nthen the element must not have been inserted into the original `hyperloglog`.\n\n```python\n>>> 'joey tribbiani' in google_searches\ntrue\n>>> 'jennifer aniston' in google_searches\nfalse\n>>>\n```\n\ndo more efficient membership testing for multiple elements using\n`.contains_many()`:\n\n```python\n>>> tuple(google_searches.contains_many('joey tribbiani', 'jennifer aniston'))\n(true, false)\n>>>\n```\n\nremove all of the elements from the `hyperloglog`:\n\n```python\n>>> google_searches.clear()\n>>> len(google_searches)\n0\n>>>\n```\n\n*limitations:*\n\n1. elements must be json serializable.\n2. `len(hll)` is probabilistic in that it&rsquo;s an accurate approximation.\n3. membership testing against a hyperloglog is probabilistic in that it *may*\n   return false positives, but *never* returns false negatives.  this means that\n   if `element in hll` evaluates to `true`, then you *may* have inserted the\n   element into the hyperloglog.  but if `element in hll` evaluates to `false`,\n   then you *must not* have inserted it.\n\n\n\n## <a name=\"contexttimer\"></a>contexttimer \u23f1\ufe0f\n\n`contexttimer` helps you easily and accurately measure elapsed time.  note that\n`contexttimer` measures wall (real-world) time, not cpu time; and that\n`elapsed()` returns time in milliseconds.\n\nyou can use `contexttimer` stand-alone&hellip;\n\n```python\n>>> import time\n>>> from pottery import contexttimer\n>>> timer = contexttimer()\n>>> timer.start()\n>>> time.sleep(0.1)\n>>> 100 <= timer.elapsed() < 200\ntrue\n>>> timer.stop()\n>>> time.sleep(0.1)\n>>> 100 <= timer.elapsed() < 200\ntrue\n>>>\n```\n\n&hellip;or as a context manager:\n\n```python\n>>> tests = []\n>>> with contexttimer() as timer:\n...     time.sleep(0.1)\n...     tests.append(100 <= timer.elapsed() < 200)\n>>> time.sleep(0.1)\n>>> tests.append(100 <= timer.elapsed() < 200)\n>>> tests\n[true, true]\n>>>\n```\n\n\n\n## contributing\n\n### obtain source code\n\n1. clone the git repo:\n    1. `$ git clone git@github.com:brainix/pottery.git`\n    2. `$ cd pottery/`\n2. install project-level dependencies:\n    1. `$ make install`\n\n### run tests\n\n1. in one terminal session:\n    1. `$ cd pottery/`\n    2. `$ redis-server`\n2. in a second terminal session:\n    1. `$ cd pottery/`\n    2. `$ make test`\n    3. `$ make test-readme`\n\n`make test` runs all of the unit tests as well as the coverage test.  however,\nsometimes, when debugging, it can be useful to run an individual test module,\nclass, or method:\n\n1. in one terminal session:\n    1. `$ cd pottery/`\n    2. `$ redis-server`\n2. in a second terminal session:\n    1. run a test module with `$ make test tests=tests.test_dict`\n    2. run a test class with: `$ make test tests=tests.test_dict.dicttests`\n    3. run a test method with: `$ make test tests=tests.test_dict.dicttests.test_keyexistserror`\n\n`make test-readme` doctests the python code examples in this readme to ensure\nthat they&rsquo;re correct.\n\n\n",
  "docs_url": null,
  "keywords": "redis client persistent storage",
  "license": "apache 2.0",
  "name": "pottery",
  "package_url": "https://pypi.org/project/pottery/",
  "project_url": "https://pypi.org/project/pottery/",
  "project_urls": {
    "Homepage": "https://github.com/brainix/pottery"
  },
  "release_url": "https://pypi.org/project/pottery/3.0.0/",
  "requires_dist": [
    "redis (<5,>=4)",
    "mmh3",
    "typing-extensions"
  ],
  "requires_python": ">=3.7, <4",
  "summary": "redis for humans.",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "brainix@gmail.com",
    "rajiv_bakulesh_shah"
  ],
  "kwds": "redis redis_client redis_cache redislabs redislist",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_pottery",
  "homepage": "https://github.com/brainix/pottery",
  "release_count": 134,
  "dependency_ids": [
    "pypi_mmh3",
    "pypi_redis",
    "pypi_typing_extensions"
  ]
}
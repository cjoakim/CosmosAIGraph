{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: bio-informatics",
    "topic :: software development :: libraries"
  ],
  "description": "python synapse client\n=====================\n\nbranch  | build status\n--------|-------------\ndevelop | [![build status develop branch](https://github.com/sage-bionetworks/synapsepythonclient/workflows/build/badge.svg?branch=develop)](https://github.com/sage-bionetworks/synapsepythonclient/actions?query=branch%3adevelop)\nmaster  | [![build status master branch](https://github.com/sage-bionetworks/synapsepythonclient/workflows/build/badge.svg?branch=master)](https://github.com/sage-bionetworks/synapsepythonclient/actions?query=branch%3amaster)\n\n[![get the synapseclient from pypi](https://img.shields.io/pypi/v/synapseclient.svg)](https://pypi.python.org/pypi/synapseclient/) [![supported python versions](https://img.shields.io/pypi/pyversions/synapseclient.svg)](https://pypi.python.org/pypi/synapseclient/)\n\na python client for [sage bionetworks'](https://www.sagebase.org) [synapse](https://www.synapse.org/), a collaborative, open-source research platform that allows teams to share data, track analyses, and collaborate. the python client can be used as a library for development of software that communicates with synapse or as a command-line utility.\n\nthere is also a [synapse client for r](https://github.com/sage-bionetworks/synapser/).\n\ndocumentation\n-------------\n\nfor more information about the python client, see:\n\n * [python client api docs](https://python-docs.synapse.org)\n\nfor more information about interacting with synapse, see:\n\n * [synapse api docs](https://rest-docs.synapse.org/rest/)\n * [user cases](https://help.synapse.org/docs/use-cases.1985151645.html)\n * [getting started guide to synapse](https://help.synapse.org/docs/getting-started.2055471150.html)\n\nfor release information, see:\n\n * [release notes](https://python-docs.synapse.org/build/html/news.html)\n\n<!-- subscribe to release and other announcements [here](https://groups.google.com/a/sagebase.org/forum/#!forum/python-announce)\nor by sending an email to [python-announce+subscribe@sagebase.org](mailto:python-announce+subscribe@sagebase.org) -->\n\n\ninstallation\n------------\n\nthe python synapse client has been tested on 3.8, 3.9, 3.10 and 3.11 on mac os x, ubuntu linux and windows.\n\n**starting from synapse python client version 3.0, synapse python client requires python >= 3.8**\n\n### install using pip\n\nthe [python synapse client is on pypi](https://pypi.python.org/pypi/synapseclient) and can be installed with pip:\n\n    (sudo) pip install synapseclient[pandas,pysftp]\n\n...or to upgrade an existing installation of the synapse client:\n\n    (sudo) pip install --upgrade synapseclient\n\nthe dependencies on `pandas` and `pysftp` are optional. synapse [tables](http://python-docs.synapse.org/build/html/#tables) integrate\nwith [pandas](http://pandas.pydata.org/). the library `pysftp` is required for users of\n[sftp](http://python-docs.synapse.org/build/html/sftp.html) file storage. both libraries require native code\nto be compiled or installed separately from prebuilt binaries.\n\n### install from source\n\nclone the [source code repository](https://github.com/sage-bionetworks/synapsepythonclient).\n\n    git clone git://github.com/sage-bionetworks/synapsepythonclient.git\n    cd synapsepythonclient\n    pip install .\n\n\ncommand line usage\n------------------\n\nthe synapse client can be used from the shell command prompt. valid commands\ninclude: query, get, cat, add, update, delete, and onweb. a few examples are\nshown.\n\n### downloading test data from synapse\n\n    synapse -p auth_token get syn1528299\n\n### getting help\n\n    synapse -h\n\nnote that a [synapse account](https://www.synapse.org/#registeraccount:0) is required.\n\n\nusage as a library\n------------------\n\nthe synapse client can be used to write software that interacts with the sage bionetworks synapse repository. more examples can be found in the tutorial section found [here](https://python-docs.synapse.org/build/html/getting_started/basics.html)\n\n### examples\n\n#### log-in and create a synapse object\n```\nimport synapseclient\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n```\n\n#### sync a local directory to synapse\nthis is the recommended way of synchronizing more than one file or directory to a synapse project through the use of `synapseutils`. using this library allows us to handle scheduling everything required to sync an entire directory tree. read more about the manifest file format in [`synapseutils.synctosynapse`](https://python-docs.synapse.org/build/html/articles/synapseutils.html#synapseutils.sync.synctosynapse)\n```\nimport synapseclient\nimport synapseutils\nimport os\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n\npath = os.path.expanduser(\"~/synapse_project\")\nmanifest_path = f\"{path}/my_project_manifest.tsv\"\nproject_id = \"syn1234\"\n\n# create the manifest file on disk\nwith open(manifest_path, \"w\", encoding=\"utf-8\") as f:\n    pass\n\n# walk the specified directory tree and create a tsv manifest file\nsynapseutils.generate_sync_manifest(\n    syn,\n    directory_path=path,\n    parent_id=project_id,\n    manifest_path=manifest_path,\n)\n\n# using the generated manifest file, sync the files to synapse\nsynapseutils.synctosynapse(\n    syn,\n    manifestfile=manifest_path,\n    sendmessages=false,\n)\n```\n\n#### store a project to synapse\n```\nimport synapseclient\nfrom synapseclient.entity import project\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n\nproject = project('my uniquely named project')\nproject = syn.store(project)\n\nprint(project.id)\nprint(project)\n```\n\n#### store a folder to synapse (does not upload files within the folder)\n```\nimport synapseclient\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n\nfolder = folder(name='my_folder', parent=\"syn123\")\nfolder = syn.store(folder)\n\nprint(folder.id)\nprint(folder)\n\n```\n\n#### store a file to synapse\n```\nimport synapseclient\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n\nfile = file(\n    path=filepath,\n    parent=\"syn123\",\n)\nfile = syn.store(file)\n\nprint(file.id)\nprint(file)\n```\n\n#### get a data matrix\n```\nimport synapseclient\n\nsyn = synapseclient.synapse()\n\n## log in using auth token\nsyn.login(authtoken='auth_token')\n\n## retrieve a 100 by 4 matrix\nmatrix = syn.get('syn1901033')\n\n## inspect its properties\nprint(matrix.name)\nprint(matrix.description)\nprint(matrix.path)\n\n## load the data matrix into a dictionary with an entry for each column\nwith open(matrix.path, 'r') as f:\n    labels = f.readline().strip().split('\\t')\n    data = {label: [] for label in labels}\n    for line in f:\n        values = [float(x) for x in line.strip().split('\\t')]\n        for i in range(len(labels)):\n            data[labels[i]].append(values[i])\n\n## load the data matrix into a numpy array\nimport numpy as np\nnp.loadtxt(fname=matrix.path, skiprows=1)\n```\n\n\nauthentication\n--------------\nauthentication toward [synapse](https://www.synapse.org/#registeraccount:0) can be accomplished with the clients using personal access tokens. learn more about [synapse personal access tokens](https://help.synapse.org/docs/managing-your-account.2055405596.html#managingyouraccount-personalaccesstokens)\n\nauthentication via passwords and api keys will be deprecated early 2024.\n\nlearn about the multiple ways one can login to synapse [here](https://python-docs.synapse.org/build/html/getting_started/credentials.html).\n\n\nsynapse utilities (synapseutils)\n--------------------------------\n\nthe purpose of synapseutils is to create a space filled with convenience functions that includes traversing through large projects, copying entities, recursively downloading files and many more.\n\n### example\n\n    import synapseutils\n    import synapseclient\n    syn = synapseclient.login()\n\n    # copies all synapse entities to a destination location\n    synapseutils.copy(syn, \"syn1234\", destinationid = \"syn2345\")\n\n    # copies the wiki from the entity to a destination entity. only a project can have sub wiki pages.\n    synapseutils.copywiki(syn, \"syn1234\", destinationid = \"syn2345\")\n\n\n    # traverses through synapse directories, behaves exactly like os.walk()\n    walkedpath = synapseutils.walk(syn, \"syn1234\")\n\n    for dirpath, dirname, filename in walkedpath:\n        print(dirpath)\n        print(dirname)\n        print(filename)\n\nopentelemetry (otel)\n--------------------------------\n[opentelemetry](https://opentelemetry.io/) helps support the analysis of traces and spans which can provide insights into latency, errors, and other performance metrics. the synapseclient is ready to provide traces should you want them. the synapse python client supports otlp exports and can be configured via environment variables as defined [here](https://opentelemetry-python.readthedocs.io/en/stable/exporter/otlp/otlp.html).\n\nread more about opentelemetry in python [here](https://opentelemetry.io/docs/instrumentation/python/)\n\n### quick-start\nthe following shows an example of setting up [jaegertracing](https://www.jaegertracing.io/docs/1.50/deployment/#all-in-one) via docker and executing a simple python script that implements the synapse python client.\n\n#### running the jaeger docker container\nstart a docker container with the following options:\n```\ndocker run --name jaeger \\\n  -e collector_otlp_enabled=true \\\n  -p 16686:16686 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\nexplanation of ports:\n* `4318` http\n* `16686` jaeger ui\n\nonce the docker container is running you can access the jaeger ui via: `http://localhost:16686`\n\n#### example\nby default the otel exporter sends trace data to `http://localhost:4318/v1/traces`, however you may override this by setting the `otel_exporter_otlp_traces_endpoint` environment variable.\n\n```\nimport synapseclient\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import tracerprovider\nfrom opentelemetry.sdk.trace.export import batchspanprocessor\nfrom opentelemetry.sdk.resources import service_name, resource\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import otlpspanexporter\n\ntrace.set_tracer_provider(\n    tracerprovider(\n        resource=resource(attributes={service_name: \"my_own_code_above_synapse_client\"})\n    )\n)\ntrace.get_tracer_provider().add_span_processor(batchspanprocessor(otlpspanexporter()))\ntracer = trace.get_tracer(\"my_tracer\")\n\n@tracer.start_as_current_span(\"my_span_name\")\ndef main():\n    syn = synapseclient.synapse()\n    syn.login()\n    my_entity = syn.get(\"syn52569429\")\n    print(my_entity)\n\nmain()\n```\n\n\n\n\nlicense and copyright\n---------------------\n\n&copy; copyright 2013-23 sage bionetworks\n\nthis software is licensed under the [apache license, version 2.0](http://www.apache.org/licenses/license-2.0).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "synapseclient",
  "package_url": "https://pypi.org/project/synapseclient/",
  "project_url": "https://pypi.org/project/synapseclient/",
  "project_urls": {
    "Changelog": "https://python-docs.synapse.org/build/html/index.html#release-notes",
    "Documentation": "https://python-docs.synapse.org",
    "Homepage": "https://www.synapse.org",
    "Source": "https://github.com/Sage-Bionetworks/synapsePythonClient",
    "Tracker": "https://github.com/Sage-Bionetworks/synapsePythonClient/issues"
  },
  "release_url": "https://pypi.org/project/synapseclient/3.2.0/",
  "requires_dist": [
    "requests <3.0,>=2.22.0",
    "urllib3 <2,>=1.26.18",
    "keyring <23.5,>=15",
    "deprecated <2.0,>=1.2.4",
    "opentelemetry-api ~=1.21.0",
    "opentelemetry-sdk ~=1.21.0",
    "opentelemetry-exporter-otlp-proto-http ~=1.21.0",
    "keyrings.alt ==3.1 ; sys_platform == \"linux\"",
    "boto3 <2.0,>=1.7.0 ; extra == 'boto3'",
    "pytest <7.0,>=6.0.0 ; extra == 'dev'",
    "pytest-mock <4.0,>=3.0 ; extra == 'dev'",
    "flake8 <4.0,>=3.7.0 ; extra == 'dev'",
    "pytest-xdist[psutil] <3.0.0,>=2.2 ; extra == 'dev'",
    "pytest-rerunfailures ~=12.0 ; extra == 'dev'",
    "func-timeout ~=4.3 ; extra == 'dev'",
    "black ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "sphinx <5.0,>=4.0 ; extra == 'docs'",
    "sphinx-argparse <0.3,>=0.2 ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "pandas <2.1,>=1.5 ; extra == 'pandas'",
    "pysftp <0.3,>=0.2.8 ; extra == 'pysftp'",
    "pytest <7.0,>=6.0.0 ; extra == 'tests'",
    "pytest-mock <4.0,>=3.0 ; extra == 'tests'",
    "flake8 <4.0,>=3.7.0 ; extra == 'tests'",
    "pytest-xdist[psutil] <3.0.0,>=2.2 ; extra == 'tests'",
    "pytest-rerunfailures ~=12.0 ; extra == 'tests'",
    "func-timeout ~=4.3 ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "a client for synapse, a collaborative, open-source research platform that allows teams to share data, track analyses, and collaborate.",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "platform@sagebase.org",
    "the_synapse_engineering_team"
  ],
  "kwds": "synapsepythonclient synapse_project synapseclient synapseutils synapse",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_synapseclient",
  "homepage": "https://www.synapse.org",
  "release_count": 50,
  "dependency_ids": [
    "pypi_black",
    "pypi_boto3",
    "pypi_deprecated",
    "pypi_flake8",
    "pypi_func_timeout",
    "pypi_keyring",
    "pypi_keyrings.alt",
    "pypi_opentelemetry_api",
    "pypi_opentelemetry_exporter_otlp_proto_http",
    "pypi_opentelemetry_sdk",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pysftp",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_pytest_rerunfailures",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_argparse",
    "pypi_sphinx_rtd_theme",
    "pypi_urllib3"
  ]
}
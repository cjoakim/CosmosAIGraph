{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. -*- coding: utf-8 -*-\n.. :project:   python-rapidjson -- introduction\n.. :author:    ken robbins <ken@kenrobbins.com>\n.. :license:   mit license\n.. :copyright: \u00a9 2015 ken robbins\n.. :copyright: \u00a9 2016, 2017, 2018, 2020, 2022 lele gaifax\n..\n\n==================\n python-rapidjson\n==================\n\npython wrapper around rapidjson\n===============================\n\n:authors: ken robbins <ken@kenrobbins.com>; lele gaifax <lele@metapensiero.it>\n:license: `mit license`__\n:status: |build| |doc|\n\n__ https://raw.githubusercontent.com/python-rapidjson/python-rapidjson/master/license\n.. |build| image:: https://travis-ci.org/python-rapidjson/python-rapidjson.svg?branch=master\n   :target: https://travis-ci.org/python-rapidjson/python-rapidjson\n   :alt: build status\n.. |doc| image:: https://readthedocs.org/projects/python-rapidjson/badge/?version=latest\n   :target: https://readthedocs.org/projects/python-rapidjson/builds/\n   :alt: documentation status\n\nrapidjson_ is an extremely fast c++ json parser and serialization library: this module\nwraps it into a python 3 extension, exposing its serialization/deserialization (to/from\neither ``bytes``, ``str`` or *file-like* instances) and `json schema`__ validation\ncapabilities.\n\nlatest version documentation is automatically rendered by `read the docs`__.\n\n__ http://json-schema.org/documentation.html\n__ https://python-rapidjson.readthedocs.io/en/latest/\n\n\ngetting started\n---------------\n\nfirst install ``python-rapidjson``:\n\n.. code-block:: bash\n\n    $ pip install python-rapidjson\n\nor, if you prefer `conda`__:\n\n.. code-block:: bash\n\n    $ conda install -c conda-forge python-rapidjson\n\n__ https://conda.io/docs/\n\nbasic usage looks like this:\n\n.. code-block:: python\n\n    >>> import rapidjson\n    >>> data = {'foo': 100, 'bar': 'baz'}\n    >>> rapidjson.dumps(data)\n    '{\"foo\":100,\"bar\":\"baz\"}'\n    >>> rapidjson.loads('{\"bar\":\"baz\",\"foo\":100}')\n    {'bar': 'baz', 'foo': 100}\n    >>>\n    >>> class stream:\n    ...   def write(self, data):\n    ...      print(\"chunk:\", data)\n    ...\n    >>> rapidjson.dump(data, stream(), chunk_size=5)\n    chunk: b'{\"foo'\n    chunk: b'\":100'\n    chunk: b',\"bar'\n    chunk: b'\":\"ba'\n    chunk: b'z\"}'\n\n\ndevelopment\n-----------\n\nif you want to install the development version (maybe to contribute fixes or\nenhancements) you may clone the repository:\n\n.. code-block:: bash\n\n    $ git clone --recursive https://github.com/python-rapidjson/python-rapidjson.git\n\n.. note:: the ``--recursive`` option is needed because we use a *submodule* to\n          include rapidjson_ sources. alternatively you can do a plain\n          ``clone`` immediately followed by a ``git submodule update --init``.\n\n          alternatively, if you already have (a *compatible* version of)\n          rapidjson includes around, you can compile the module specifying\n          their location with the option ``--rj-include-dir``, for example:\n\n          .. code-block:: shell\n\n             $ python3 setup.py build --rj-include-dir=/usr/include/rapidjson\n\na set of makefiles implement most common operations, such as *build*, *check*\nand *release*; see ``make help`` output for a list of available targets.\n\n\nperformance\n-----------\n\n``python-rapidjson`` tries to be as performant as possible while staying\ncompatible with the ``json`` module.\n\nsee the `this section`__ in the documentation for a comparison with other json libraries.\n\n__ https://python-rapidjson.readthedocs.io/en/latest/benchmarks.html\n\n\nincompatibility\n---------------\n\nalthough we tried to implement an api similar to the standard library ``json``, being a\nstrict *drop-in* replacement in not our goal and we have decided to depart from there in\nsome aspects. see `this section`__ in the documentation for further details.\n\n__ https://python-rapidjson.readthedocs.io/en/latest/quickstart.html#incompatibilities\n\n.. _rapidjson: http://rapidjson.org/\n\n\nchanges\n-------\n\n1.14 (2023-12-14)\n~~~~~~~~~~~~~~~~~\n\n* produce binary wheels for macos/arm64, thanks to timothyjlaurent (`pr #195`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/170\n\n\n1.13 (2023-10-29)\n~~~~~~~~~~~~~~~~~\n\n* fix handling of write_mode in dump functions (problem emerged discussing `issue #191`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/191\n\n\n1.12 (2023-10-07)\n~~~~~~~~~~~~~~~~~\n\n* generate wheels on pypi using final python 3.12 release, thanks to cibuildwheel `2.16.2`__\n\n  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v2162\n\n\n1.11 (2023-09-11)\n~~~~~~~~~~~~~~~~~\n\n* use `current master`__ version of rapidjson\n\n  __ https://github.com/tencent/rapidjson/compare/083f359f5c36198accc2b9360ce1e32a333231d9...5e17dbed34eef33af8f3e734820b5dc547a2a3aa9\n\n* use cibuildwheel `2.15.0`__\n\n  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v2150\n\n\n1.10 (2023-03-15)\n~~~~~~~~~~~~~~~~~\n\n* use `current master`__ version of rapidjson\n\n  __ https://github.com/tencent/rapidjson/commit/083f359f5c36198accc2b9360ce1e32a333231d9\n\n* produce ppc64le wheels, thanks to mgiessing (`pr #170`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/170\n\n* use cibuildwheel `2.12.1`__\n\n  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v2121\n\n\n1.9 (2022-10-17)\n~~~~~~~~~~~~~~~~\n\n* produce python 3.11 wheels, thanks to ``cibuildwheel`` `2.11.1`__\n\n  __ https://cibuildwheel.readthedocs.io/en/stable/changelog/#v2111\n\n\n1.8 (2022-07-07)\n~~~~~~~~~~~~~~~~\n\n* fix `problem on macos`__ explicitly requiring c++11, thanks to agate-pris (`issue\n  #166`__)\n\n  __ https://github.com/tencent/rapidjson/commit/9965ab37f6cfae3d58a0a6e34c76112866ace0b1#commitcomment-77875054\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/166\n\n\n1.7 (2022-07-06)\n~~~~~~~~~~~~~~~~\n\n* use `current master`__ version of rapidjson\n\n  __ https://github.com/tencent/rapidjson/commit/232389d4f1012dddec4ef84861face2d2ba85709\n\n* update the test suite to work on pyston, thanks to kevin modzelewski (`pr #161`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/161\n\n\n1.6 (2022-02-19)\n~~~~~~~~~~~~~~~~\n\n* fix memory leak when using ``end_array`` (`issue #160`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/160\n\n\n1.5 (2021-10-16)\n~~~~~~~~~~~~~~~~\n\n* fix serialization bug when using dm_unix_time in a non-c locale context\n\n\n1.4 (2021-06-25)\n~~~~~~~~~~~~~~~~\n\n* build binary wheel for aarch64, thanks to odidev (`pr #156`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/156\n\n\n1.3 (2021-06-25)\n~~~~~~~~~~~~~~~~\n\n* yet another attempt to fix automatic wheels upload\n\n\n1.2 (2021-06-25)\n~~~~~~~~~~~~~~~~\n\n* fix automatic wheels upload from gh actions to pypi\n\n\n1.1 (2021-06-25)\n~~~~~~~~~~~~~~~~\n\n* reduce decoder memory consumption by uniquifiying keys in the loaded dictionaries\n\n* implement an alternative way of transmogrify json objects, similar to ``json``\\ 's\n  ``object_pairs_hook`` load option (`issue #154`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/154\n\n\n1.0 (2020-12-13)\n~~~~~~~~~~~~~~~~\n\n* require python 3.6 or greater\n\n* new serialization options, ``iterable_mode`` and ``mapping_mode``, to give some control\n  on how generic iterables and mappings get encoded (fix `issue #149`__ and\n  `issue #150`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/149\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/150\n\n* internal refactorings, folding \"skipkeys\" and \"sort_keys\" arguments into the\n  mapping_mode options, respectively as mm_skip_non_string_keys and mm_sort_keys: \"old\"\n  arguments kept for backward compatibility\n\n* bump major version to 1, tag as \"production/stable\" and switch to a simpler x.y\n  versioning schema\n\n\n0.9.4 (2020-11-16)\n~~~~~~~~~~~~~~~~~~\n\n* fix memory leak loading an invalid json (`issue #148`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/148\n\n\n0.9.3 (2020-10-24)\n~~~~~~~~~~~~~~~~~~\n\n* fix access to ``encoder`` instance attributes (`issue #147`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/147\n\n\n0.9.2 (2020-10-24)\n~~~~~~~~~~~~~~~~~~\n\n* use `current master`__ version of rapidjson\n\n  __ https://github.com/tencent/rapidjson/commit/0ccdbf364c577803e2a751f5aededce935314313\n\n* enable gh actions-based test workflow, thanks to martin thoma (`pr #143`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/143\n\n* produce python 3.9 wheels, disable testing under python < 3.6\n\n* make the character used for indentation in pretty mode a parameter (`issue #135`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/135\n\n* handle wider precision range in timestamps fractional seconds (`pr 133`__), thanks to\n  karl seguin\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/133\n\n* add comparison benchmarks against orjson and hyperjson (`issue #130`__ and `pr #131`__,\n  thanks to sebastian pipping)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/130\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/131\n\n\n0.9.1 (2019-11-13)\n~~~~~~~~~~~~~~~~~~\n\n* fix memory leak in case of failed validation (`issue #126`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/126\n\n\n0.9.0 (2019-11-13)\n~~~~~~~~~~~~~~~~~~\n\n* produce python 3.8 wheels\n\n* compatibility fix for python 3.8 (`issue #125`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/125\n\n* new dump option ``write_mode``, supporting rapidjson's ``kformatsinglelinearray`` option\n  (`issue #123`__), thanks to nguy\u1ec5n h\u1ed3ng qu\u00e2n for the initial implementation (`pr #124`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/123\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/124\n\n\n0.8.0 (2019-08-09)\n~~~~~~~~~~~~~~~~~~\n\n* new serialization option ``bytes_mode`` to control how bytes instances get encoded\n  (`issue #122`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/122\n\n\n0.7.2 (2019-06-09)\n~~~~~~~~~~~~~~~~~~\n\n* hopefully fix the memory leak when loading from a stream (`issue #117`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/117\n\n\n0.7.1 (2019-05-11)\n~~~~~~~~~~~~~~~~~~\n\n* raise a more specific exception on loading errors, ``jsondecodeerror``, instead of\n  generic ``valueerror`` (`issue #118`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/118\n\n* fix optimization path when using ``ordereddict``\\ s (`issue #119`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/119\n\n* fix serialization of ``intenum``\\ s (`issue #121`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/121\n\n* i spent *quite a lot* of time investigating on the memory leak when loading from a\n  stream (`issue #117`__): as i was not able to fully replicate the problem, i cannot be\n  sure i solved the problem... sorry!\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/117\n\n\n0.7.0 (2019-02-11)\n~~~~~~~~~~~~~~~~~~\n\n* raise correct exception in code samples (`pr #109`__), thanks to thomas d\u00e4hling\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/109\n\n* fix compilation with system-wide install of rapidjson (`issue #110`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/110\n\n* use current master version of rapidjson, that includes a `fix`__ for its `issue #1368`__\n  and `issue #1336`__, and cures several compilation warnings as well (`issue #112`__ and\n  `issue #107`__)\n\n  __ https://github.com/tencent/rapidjson/commit/f5e5d47fac0f654749c4d6267015005b74643dff\n  __ https://github.com/tencent/rapidjson/issues/1368\n  __ https://github.com/tencent/rapidjson/issues/1336\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/112\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/107\n\n* fix memory leak when using ``object_hook`` (`issue #115`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/115\n\n\n0.6.3 (2018-07-11)\n~~~~~~~~~~~~~~~~~~\n\n* no visible changes, but now pypi carries binary wheels for python 3.7.\n\n\n0.6.2 (2018-06-08)\n~~~~~~~~~~~~~~~~~~\n\n* use a more specific validationerror, to differentiate from invalid json\n\n\n0.6.1 (2018-06-06)\n~~~~~~~~~~~~~~~~~~\n\n* nothing new, attempt to build python 3.6 binary wheels on travis ci\n\n\n0.6.0 (2018-06-06)\n~~~~~~~~~~~~~~~~~~\n\n* add a new comparison table involving ``ensure_ascii`` (`issue #98`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/98\n\n* use python's ``repr()`` to emit float values instead of rapidjson's ``dtoa()`` (`issue\n  #101`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/101\n\n* use a newer (although unreleased) version of rapidjson to fix an `issue`__ with\n  jsonschema validation (`pr #103`__), thanks to anthony miyaguchi\n\n  __ https://github.com/tencent/rapidjson/issues/825\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/103\n\n\n0.5.2 (2018-03-31)\n~~~~~~~~~~~~~~~~~~\n\n* tiny tweak to restore macos build on travis ci\n\n\n0.5.1 (2018-03-31)\n~~~~~~~~~~~~~~~~~~\n\n* minor tweaks to ci and pypi deploy configuration\n\n\n0.5.0 (2018-03-31)\n~~~~~~~~~~~~~~~~~~\n\n* new ``rawjson`` class, allowing inclusion of *pre-serialized* content (`pr #95`__ and\n  `pr #96`__), thanks to silvio tomatis\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/95\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/96\n\n\n0.4.3 (2018-01-14)\n~~~~~~~~~~~~~~~~~~\n\n* deserialize from ``bytes`` and ``bytearray`` instances, ensuring they\n  contain valid utf-8 data\n\n* speed up parsing of floating point numbers, avoiding intermediary conversion\n  to a python string (`pr #94`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/94\n\n\n0.4.2 (2018-01-09)\n~~~~~~~~~~~~~~~~~~\n\n* fix precision handling of dm_unix_time timestamps\n\n\n0.4.1 (2018-01-08)\n~~~~~~~~~~~~~~~~~~\n\n* fix memory leaks in ``decoder()`` and ``encoder()`` classes, related to\n  bad handling of ``pyobject_getattr()`` result value\n\n* fix compatibility with python 3.7a\n\n\n0.4.0 (2018-01-05)\n~~~~~~~~~~~~~~~~~~\n\n* implemented the streaming interface, see `load()`__ and `dump()`__ (`issue #80`__)\n\n  __ https://python-rapidjson.readthedocs.io/en/latest/load.html\n  __ https://python-rapidjson.readthedocs.io/en/latest/dump.html\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/80\n\n  **backward incompatibility**: now the *flags* arguments on all the functions are\n  *keyword only*, to mimic stdlib's ``json`` style\n\n\n0.3.2 (2017-12-21)\n~~~~~~~~~~~~~~~~~~\n\n* reduce compiler warnings (`issue #87`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/87\n\n\n0.3.1 (2017-12-20)\n~~~~~~~~~~~~~~~~~~\n\n* fix travis ci recipe to accomodate macos\n\n\n0.3.0 (2017-12-20)\n~~~~~~~~~~~~~~~~~~\n\n* fix compilation on macos (`issue #78`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/78\n\n* handle generic iterables (`pr #89`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/89\n\n  **backward incompatibility**: the ``dumps()`` function and the ``encoder()``\n  constructor used to accept a ``max_recursion_depth`` argument, to control\n  the maximum allowed nesting of python structures; since the underlying\n  function is now effectively recursive, it has been replaced by the generic\n  `sys.setrecursionlimit()`__ mechanism\n\n  __ https://docs.python.org/3.6/library/sys.html#sys.setrecursionlimit\n\n\n0.2.7 (2017-12-08)\n~~~~~~~~~~~~~~~~~~\n\n* restore compatibility with python < 3.6\n\n\n0.2.6 (2017-12-08)\n~~~~~~~~~~~~~~~~~~\n\n* fix memory leaks when using object_hook/start_object/end_object\n\n\n0.2.5 (2017-09-30)\n~~~~~~~~~~~~~~~~~~\n\n* fix bug where error handling code could raise an exception causing a\n  confusing exception to be returned (`pr #82`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/82\n\n* fix bug where loads's ``object_hook`` and dumps's ``default`` arguments\n  could not be passed ``none`` explicitly (`pr #83`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/83\n\n* fix crash when dealing with surrogate pairs (`issue #81`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/81\n\n\n0.2.4 (2017-09-17)\n~~~~~~~~~~~~~~~~~~\n\n* fix compatibility with macos/clang\n\n\n0.2.3 (2017-08-24)\n~~~~~~~~~~~~~~~~~~\n\n* limit the precision of dm_unix_time timestamps to six decimal digits\n\n\n0.2.2 (2017-08-24)\n~~~~~~~~~~~~~~~~~~\n\n* nothing new, attempt to fix production of python 3.6 binary wheels\n\n\n0.2.1 (2017-08-24)\n~~~~~~~~~~~~~~~~~~\n\n* nothing new, attempt to fix production of python 3.6 binary wheels\n\n\n0.2.0 (2017-08-24)\n~~~~~~~~~~~~~~~~~~\n\n* new ``parse_mode`` option, implementing relaxed json syntax (`issue #73`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/73\n\n* new ``encoder`` and ``decoder``, implementing a class-based interface\n\n* new ``validator``, exposing the underlying *json schema* validation (`issue #71`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/71\n\n\n0.1.0 (2017-08-16)\n~~~~~~~~~~~~~~~~~~\n\n* remove beta status\n\n\n0.1.0b4 (2017-08-14)\n~~~~~~~~~~~~~~~~~~~~\n\n* make execution of the test suite on appveyor actually happen\n\n\n0.1.0b3 (2017-08-12)\n~~~~~~~~~~~~~~~~~~~~\n\n* exclude ci configurations from the source distribution\n\n\n0.1.0b2 (2017-08-12)\n~~~~~~~~~~~~~~~~~~~~\n\n* fix powershell wheel upload script in appveyor configuration\n\n\n0.1.0b1 (2017-08-12)\n~~~~~~~~~~~~~~~~~~~~\n\n* compilable with somewhat old g++ (`issue #69`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/69\n\n* **backward incompatibilities**:\n\n  - all ``datetime_mode_xxx`` constants have been shortened to ``dm_xxx``\n    ``datetime_mode_iso8601_utc`` has been renamed to ``dm_shift_to_utc``\n\n  - all ``uuid_mode_xxx`` constants have been shortened to ``um_xxx``\n\n* new option ``dm_unix_time`` to serialize date, datetime and time values as\n  `unix timestamps`__ targeting `issue #61`__\n\n  __ https://en.wikipedia.org/wiki/unix_time\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/61\n\n* new option ``dm_naive_is_utc`` to treat na\u00efve datetime and time values as if\n  they were in the utc timezone (also for issue #61)\n\n* new keyword argument ``number_mode`` to use underlying c library numbers\n\n* binary wheels for gnu/linux and windows on pypi (one would hope: this is the\n  reason for the beta1 release)\n\n\n0.0.11 (2017-03-05)\n~~~~~~~~~~~~~~~~~~~\n\n* fix a couple of refcount handling glitches, hopefully targeting `issue\n  #48`__.\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/48\n\n\n0.0.10 (2017-03-02)\n~~~~~~~~~~~~~~~~~~~\n\n* fix source distribution to contain all required stuff (`pr #64`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/64\n\n\n0.0.9 (2017-03-02)\n~~~~~~~~~~~~~~~~~~\n\n* ci testing on github\n\n* allow using locally installed rapidjson library (`issue #60`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/60\n\n* bug fixes (`issue #37`__, `issue #51`__, `issue #57`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/37\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/51\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/57\n\n\n0.0.8 (2016-12-09)\n~~~~~~~~~~~~~~~~~~\n\n* use unpatched rapidjson 1.1 (`pr #46`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/46\n\n* handle serialization and deserialization of datetime, date and time\n  instances (`pr #35`__) and of uuid instances (`pr #40`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/35\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/40\n\n* sphinx based documentation (`pr #44`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/44\n\n* refresh benchmarks (`pr #45`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/45\n\n* bug fixes (`issue #25`__, `issue #38`__, `pr #43`__)\n\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/25\n  __ https://github.com/python-rapidjson/python-rapidjson/issues/38\n  __ https://github.com/python-rapidjson/python-rapidjson/pull/43\n",
  "docs_url": null,
  "keywords": "json rapidjson",
  "license": "mit license",
  "name": "python-rapidjson",
  "package_url": "https://pypi.org/project/python-rapidjson/",
  "project_url": "https://pypi.org/project/python-rapidjson/",
  "project_urls": {
    "Homepage": "https://github.com/python-rapidjson/python-rapidjson"
  },
  "release_url": "https://pypi.org/project/python-rapidjson/1.14/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "python wrapper around rapidjson",
  "version": "1.14",
  "releases": [],
  "developers": [
    "ken@kenrobbins.com",
    "ken_robbins",
    "lele@metapensiero.it",
    "lele_gaifax"
  ],
  "kwds": "rapidjson _rapidjson rapidjson_ rawjson hyperjson",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_python_rapidjson",
  "homepage": "https://github.com/python-rapidjson/python-rapidjson",
  "release_count": 57,
  "dependency_ids": []
}
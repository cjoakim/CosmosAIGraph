{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: communications"
  ],
  "description": "========================================\r\nconsistent overhead byte stuffing (cobs)\r\n========================================\r\n\r\n:author: craig mcqueen\r\n:contact: http://craig.mcqueen.id.au/\r\n:copyright: 2010 craig mcqueen\r\n\r\n\r\npython functions for encoding and decoding cobs.\r\n\r\n-----\r\nintro\r\n-----\r\n\r\nthe ``cobs`` package is provided, which contains modules containing functions\r\nfor encoding and decoding according to cobs methods.\r\n\r\n\r\nwhat is cobs?\r\n`````````````\r\n\r\ncobs is a method of encoding a packet of bytes into a form that contains no\r\nbytes with value zero (0x00). the input packet of bytes can contain bytes\r\nin the full range of 0x00 to 0xff. the cobs encoded packet is guaranteed to\r\ngenerate packets with bytes only in the range 0x01 to 0xff. thus, in a\r\ncommunication protocol, packet boundaries can be reliably delimited with 0x00\r\nbytes.\r\n\r\nthe cobs encoding does have to increase the packet size to achieve this\r\nencoding. however, compared to other byte-stuffing methods, the packet size\r\nincrease is reasonable and predictable. cobs always adds 1 byte to the\r\nmessage length. additionally, for longer packets of length *n*, it *may* add\r\nn/254 (rounded down) additional bytes to the encoded packet size.\r\n\r\nfor example, compare to the ppp protocol, which uses 0x7e bytes to delimit\r\nppp packets. the ppp protocol uses an \"escape\" style of byte stuffing,\r\nreplacing all occurences of 0x7e bytes in the packet with 0x7d 0x5e. but that\r\nbyte-stuffing method can potentially double the size of the packet in the\r\nworst case. cobs uses a different method for byte-stuffing, which has a much\r\nmore reasonable worst-case overhead.\r\n\r\nfor more details about cobs, see the references [#ieeeton]_ [#ppp]_.\r\n\r\ni have included a variant on cobs, `cobs/r`_, which slightly modifies cobs to\r\noften avoid the +1 byte overhead of cobs. so in many cases, especially for\r\nsmaller packets, the size of a cobs/r encoded packet is the same size as the\r\noriginal packet. see below for more details about `cobs/r`_.\r\n\r\n\r\nreferences\r\n``````````\r\n\r\n.. [#ieeeton]   | `consistent overhead byte stuffing`__\r\n                | stuart cheshire and mary baker\r\n                | ieee/acm transations on networking, vol. 7, no. 2, april 1999\r\n\r\n.. __:\r\n.. _consistent overhead byte stuffing (for ieee):\r\n    http://www.stuartcheshire.org/papers/cobsforton.pdf\r\n\r\n.. [#ppp]       | `ppp consistent overhead byte stuffing (cobs)`_\r\n                | ppp working group internet draft\r\n                | james carlson, ironbridge networks\r\n                | stuart cheshire and mary baker, stanford university\r\n                | november 1997\r\n\r\n.. _ppp consistent overhead byte stuffing (cobs):\r\n    http://tools.ietf.org/html/draft-ietf-pppext-cobs-00\r\n\r\n\r\n----------------\r\nmodules provided\r\n----------------\r\n\r\n==================  ==================  ===============================================================\r\nmodule              short name          long name\r\n==================  ==================  ===============================================================\r\n``cobs.cobs``       cobs                consistent overhead byte stuffing (basic method) [#ieeeton]_\r\n``cobs.cobsr``      `cobs/r`_           `consistent overhead byte stuffing--reduced`_\r\n==================  ==================  ===============================================================\r\n\r\n\"`consistent overhead byte stuffing--reduced`_\" (`cobs/r`_) is my own invention,\r\na modification of basic cobs encoding, and is described in more detail below.\r\n\r\nthe following are not implemented:\r\n\r\n==================  ======================================================================\r\nshort name          long name\r\n==================  ======================================================================\r\ncobs/zpe            consistent overhead byte stuffing--zero pair elimination [#ieeeton]_\r\ncobs/zre            consistent overhead byte stuffing--zero run elimination [#ppp]_\r\n==================  ======================================================================\r\n\r\na pure python implementation and a c extension implementation are provided. if\r\nthe c extension is not available for some reason, the pure python version will\r\nbe used.\r\n\r\n\r\n-----\r\nusage\r\n-----\r\n\r\nthe modules provide an ``encode`` and a ``decode`` function.\r\n\r\nthe input should be a byte string, not a unicode string. basic usage::\r\n\r\n    >>> from cobs import cobs\r\n    >>> encoded = cobs.encode(b'hello world\\x00this is a test')\r\n    >>> encoded\r\n    b'\\x0chello world\\x0fthis is a test'\r\n    >>> cobs.decode(encoded)\r\n    b'hello world\\x00this is a test'\r\n\r\n`cobs/r`_ usage is almost identical::\r\n\r\n    >>> from cobs import cobsr\r\n    >>> encoded = cobsr.encode(b'hello world\\x00this is a test')\r\n    >>> encoded\r\n    b'\\x0chello worldtthis is a tes'\r\n    >>> cobsr.decode(encoded)\r\n    b'hello world\\x00this is a test'\r\n\r\nany type that implements the buffer protocol, providing a single block of\r\nbytes, is also acceptable as input::\r\n\r\n    >>> from cobs import cobs\r\n    >>> encoded = cobs.encode(bytearray(b'hello world\\x00this is a test'))\r\n    >>> encoded\r\n    b'\\x0chello world\\x0fthis is a test'\r\n    >>> cobs.decode(encoded)\r\n    b'hello world\\x00this is a test'\r\n\r\nnote that the ``encode`` function does not add any framing ``0x00`` byte at\r\nthe end (or beginning) of the encoded data. similarly, the ``decode`` function\r\ndoes not strip or split on any framing ``0x00`` bytes, but treats any ``0x00``\r\nbytes as a data input error. the details of data framing is\r\napplication-specific, so it is the user's application's responsibility to\r\nimplement the framing and deframing that is suitable for the needs of the\r\napplication.\r\n\r\n\r\n-------------------------\r\nsupported python versions\r\n-------------------------\r\n\r\npython >= 3.6 are supported, and have both a c extension and a pure python\r\nimplementation.\r\n\r\npython versions < 3.6 might work, but have not been tested.\r\n\r\n\r\n------------\r\ninstallation\r\n------------\r\n\r\nthe cobs package is installed using ``distutils``.  if you have the tools\r\ninstalled to build a python extension module, run the following command::\r\n\r\n    python setup.py install\r\n\r\nif you cannot build the c extension, you may install just the pure python\r\nimplementation, using the following command::\r\n\r\n    python setup.py build_py install --skip-build\r\n\r\n\r\n------------\r\nunit testing\r\n------------\r\n\r\nbasic unit testing is in the ``test`` sub-module, e.g. ``cobs.cobs.test``. to run it::\r\n\r\n    python -m cobs.cobs.test\r\n    python -m cobs.cobsr.test\r\n\r\n\r\n-------------\r\ndocumentation\r\n-------------\r\n\r\ndocumentation is written with sphinx. source files are provided in the ``doc``\r\ndirectory. it can be built using sphinx 0.6.5. it uses the ``pngmath`` sphinx\r\nextension, which requires latex and ``dvipng`` to be installed.\r\n\r\nthe documentation is available online at: http://packages.python.org/cobs/\r\n\r\n\r\n-------\r\nlicense\r\n-------\r\n\r\nthe code is released under the mit license. see license.txt for details.\r\n\r\n\r\n..  _cobs/r:\r\n..  _consistent overhead byte stuffing--reduced:\r\n\r\n---------------------------------------------------\r\nconsistent overhead byte stuffing--reduced (cobs/r)\r\n---------------------------------------------------\r\n\r\na modification of cobs, which i'm calling \"consistent overhead byte\r\nstuffing--reduced\" (cobs/r), is provided in the ``cobs.cobsr`` module. its\r\npurpose is to save one byte from the encoded form in some cases. plain cobs\r\nencoding always has a +1 byte encoding overhead. see the references for\r\ndetails [#ieeeton]_. cobs/r can often avoid the +1 byte, which can be a useful\r\nsavings if it is mostly small messages that are being encoded.\r\n\r\nin plain cobs, the last length code byte in the message has some inherent\r\nredundancy: if it is greater than the number of remaining bytes, this is\r\ndetected as an error.\r\n\r\nin cobs/r, instead we opportunistically replace the final length code byte with\r\nthe final data byte, whenever the value of the final data byte is greater than\r\nor equal to what the final length value would normally be. this variation can be\r\nunambiguously decoded: the decoder notices that the length code is greater than\r\nthe number of remaining bytes.\r\n\r\nexamples\r\n````````\r\n\r\nthe byte values in the examples are in hex.\r\n\r\nfirst example:\r\n\r\ninput:\r\n\r\n======  ======  ======  ======  ======  ======\r\n2f      a2      00      92      73      02\r\n======  ======  ======  ======  ======  ======\r\n\r\nthis example is encoded the same in cobs and cobs/r. encoded (length code bytes\r\nare bold):\r\n\r\n======  ======  ======  ======  ======  ======  ======\r\n**03**  2f      a2      **04**  92      73      02\r\n======  ======  ======  ======  ======  ======  ======\r\n\r\nsecond example:\r\n\r\nthe second example is almost the same, except the final data byte value is\r\ngreater than what the length byte would be.\r\n\r\ninput:\r\n\r\n======  ======  ======  ======  ======  ======\r\n2f      a2      00      92      73      26\r\n======  ======  ======  ======  ======  ======\r\n\r\nencoded in plain cobs (length code bytes are bold):\r\n\r\n======  ======  ======  ======  ======  ======  ======\r\n**03**  2f      a2      **04**  92      73      26\r\n======  ======  ======  ======  ======  ======  ======\r\n\r\nencoded in cobs/r:\r\n\r\n======  ======  ======  ======  ======  ======\r\n**03**  2f      a2      **26**  92      73    \r\n======  ======  ======  ======  ======  ======\r\n\r\nbecause the last data byte (**26**) is greater than the usual length code\r\n(**04**), the last data byte can be inserted in place of the length code, and\r\nremoved from the end of the sequence. this avoids the usual +1 byte overhead of\r\nthe cobs encoding.\r\n\r\nthe decoder detects this variation on the encoding simply by detecting that the\r\nlength code is greater than the number of remaining bytes. that situation would\r\nbe a decoding error in regular cobs, but in cobs/r it is used to save one byte\r\nin the encoded message.\r\n",
  "docs_url": "https://pythonhosted.org/cobs/",
  "keywords": "byte stuffing",
  "license": "---------------------------------------------------------------------------- copyright (c) 2010 craig mcqueen  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ----------------------------------------------------------------------------  ",
  "name": "cobs",
  "package_url": "https://pypi.org/project/cobs/",
  "project_url": "https://pypi.org/project/cobs/",
  "project_urls": {
    "Bug Tracker": "https://github.com/cmcqueen/cobs-python/issues",
    "Homepage": "https://github.com/cmcqueen/cobs-python"
  },
  "release_url": "https://pypi.org/project/cobs/1.2.1/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "consistent overhead byte stuffing (cobs)",
  "version": "1.2.1",
  "releases": [],
  "developers": [
    "python@craig.mcqueen.id.au"
  ],
  "kwds": "cobs byte encoding bytes encoded",
  "license_kwds": "copyright copies permission copy software",
  "libtype": "pypi",
  "id": "pypi_cobs",
  "homepage": "",
  "release_count": 9,
  "dependency_ids": []
}
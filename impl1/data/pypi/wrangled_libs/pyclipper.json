{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: other environment",
    "intended audience :: developers",
    "license :: osi approved",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: c++",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: multimedia :: graphics",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "about\n=====\n\n.. image:: https://badge.fury.io/py/pyclipper.svg\n    :target: https://badge.fury.io/py/pyclipper\n.. image:: https://github.com/fonttools/pyclipper/workflows/build%20+%20deploy/badge.svg\n    :target: https://github.com/fonttools/pyclipper/actions?query=workflow%3a%22build+%2b+deploy%22\n\npyclipper is a cython wrapper exposing public functions and classes of\nthe c++ translation of the `angus johnson's clipper library (ver.\n6.4.2) <http://www.angusj.com/delphi/clipper.php>`__.\n\npyclipper releases were tested with python 2.7 and 3.4 on linux (ubuntu\n14.04, x64) and windows (8.1, x64).\n\nsource code is available on\n`github <https://github.com/fonttools/pyclipper>`__. the package is published on \n`pypi <https://pypi.python.org/pypi/pyclipper>`__.\n\n\nabout clipper\n-------------\n\n        clipper - an open source freeware library for clipping and\n        offsetting lines and polygons.\n\n        the clipper library performs line & polygon clipping -\n        intersection, union, difference & exclusive-or, and line &\n        polygon offsetting. the library is based on vatti's clipping\n        algorithm.\n\n        \\ `angus johnson's clipper\n        library <http://www.angusj.com/delphi/clipper.php>`__\\ \n\ninstall\n=======\n\ndependencies\n------------\n\ncython dependency is optional. cpp sources generated with cython are\navailable in releases.\n\nnote on using the ``setup.py``:\n\n``setup.py`` operates in 2 modes that are based on the presence of the\n``dev`` file in the root of the project.\n\n-  when ``dev`` is **present**, cython will be used to compile the ``.pyx``\n   sources. this is the *development mode* (as you get it in the git\n   repository).\n-  when ``dev`` is **absent**, c/c++ compiler will be used to compile the\n   ``.cpp`` sources (that were prepared in in the development mode).\n   this is the distribution mode (as you get it on pypi).\n\nthis way the package can be used without or with an incompatible version\nof cython.\n\nthe idea comes from `matt shannon's bandmat\nlibrary <https://github.com/mattshannon/bandmat>`__.\n\nfrom pypi\n---------\n\ncython not required.\n\n::\n\n        pip install pyclipper\n        \n\nfrom source\n-----------\n\ncython required.\n\nclone the repository:\n\n::\n\n        git clone git@github.com:fonttools/pyclipper.git\n        \n\ninstall:\n\n::\n\n        python setup.py install\n        \n\nafter every modification of ``.pyx`` files compile with cython:\n\n::\n\n        python setup.py build_ext --inplace\n        \n\nclippers' preprocessor directives\n---------------------------------\nclipper can be compiled with the following preprocessor directives: ``use_int32``, ``use_xyz``, ``use_lines`` and ``use_deprecated``. \namong these the ``use_int32`` and ``use_lines`` can be used with pyclipper.\n\n-  ``use_int32`` - when enabled 32bit ints are used instead of 64bit ints. this improve performance but coordinate values are limited to the range +/- 46340. in pyclipper this directive is **disabled** by default.\n\n-  ``use_lines`` - enables line clipping. adds a very minor cost to performance. in pyclipper this directive is **enabled** by default (since version 0.9.2b0).\n\nin case you would want to change these settings, clone this repository and change the ``define_macros`` collection (``setup.py``, pyclipper extension definition). add a set like ``('use_int32', 1)`` to enable the directive, or remove the set to disable it. after that you need to rebuild the package.\n\nhow to use\n==========\n\nthis wrapper library tries to follow naming conventions of the original\nlibrary.\n\n-  ``clipperlib`` namespace is represented by the ``pyclipper`` module,\n-  classes ``clipper`` and ``clipperoffset`` -> \n   ``pyclipper`` and ``pyclipperoffset``,\n-  when clipper is overloading functions with different number of\n   parameters or different types (eg. ``clipper.execute``, one function\n   fills a list of paths the other polytree) that becomes\n   ``pyclipper.execute`` and ``pyclipper.execute2``.\n\nbasic clipping example (based on `angus johnson's clipper\nlibrary <http://www.angusj.com/delphi/clipper.php>`__):\n\n.. code:: python\n\n    import pyclipper\n\n    subj = (\n        ((180, 200), (260, 200), (260, 150), (180, 150)),\n        ((215, 160), (230, 190), (200, 190))\n    )\n    clip = ((190, 210), (240, 210), (240, 130), (190, 130))\n\n    pc = pyclipper.pyclipper()\n    pc.addpath(clip, pyclipper.pt_clip, true)\n    pc.addpaths(subj, pyclipper.pt_subject, true)\n\n    solution = pc.execute(pyclipper.ct_intersection, pyclipper.pft_evenodd, pyclipper.pft_evenodd) \n    \n    # solution (a list of paths): [[[240, 200], [190, 200], [190, 150], [240, 150]], [[200, 190], [230, 190], [215, 160]]]\n    \n\nbasic offset example:\n\n.. code:: python\n\n    import pyclipper\n\n    subj = ((180, 200), (260, 200), (260, 150), (180, 150))\n\n    pco = pyclipper.pyclipperoffset()\n    pco.addpath(subj, pyclipper.jt_round, pyclipper.et_closedpolygon)\n\n    solution = pco.execute(-7.0)\n    \n    # solution (a list of paths): [[[253, 193], [187, 193], [187, 157], [253, 157]]]\n\nthe clipper library uses integers instead of floating point values to\npreserve numerical robustness. if you need to scale coordinates of your polygons, this library provides helper functions ``scale_to_clipper()`` and ``scale_from_clipper()`` to achieve that. \n\nmigrating from pyclipper ``0.9.3b0``\n------------------------------------\n\nin previous version of pyclipper (``0.9.3b0``) polygons could be automatically scaled using the ``scaling_factor`` variable. this was removed in version ``1.0.0`` due to inexact conversions related to floating point operations. this way the library now provides the original numerical robustness of the base library.\n\nthe ``scaling_factor`` removal **breaks backward compatibility**. \nfor an explanation and help with migration, see https://github.com/fonttools/pyclipper/wiki/deprecating-scaling_factor.\n\nauthors\n=======\n\n-  the clipper library is written by `angus\n   johnson <http://www.angusj.com/delphi/clipper.php>`__,\n-  this wrapper was initially written by `maxime\n   chalton <https://sites.google.com/site/maxelsbackyard/home/pyclipper>`__,\n-  adaptions to make it work with version 5 written by `lukas\n   treyer <http://www.lukastreyer.com>`__,\n-  adaptions to make it work with version 6.2.1 and pypi package written by `gregor ratajc <http://www.gregorratajc.com>`__,\n-  ``scaling_factor`` removal and additions to documentation by michael schwarz (@feuermurmel),\n-  bug fix `sympy.zero` is not a collection by jamie bull (@jamiebull1),\n-  travis ci and appveyor ci integration for continuous builds of wheel packages by cosimo lupo (@anthrotype).\n\nthe package is maintained by cosimo lupo (`@anthrotype <https://github.com/anthrotype>`__).\n\nlicense\n=======\n\n-  pyclipper is available under `mit\n   license <http://opensource.org/licenses/mit>`__.\n-  the core clipper library is available under `boost software\n   license <http://www.boost.org/license_1_0.txt>`__. freeware for both\n   open source and commercial applications.\n\nchangelog\n=========\n\n1.1.0\n-------\n\n- updated embedded clipper library to version 6.4.2.\n\n1.0.6\n-------\n-  added support for python 3.6.\n\n1.0.3\n-------\n-  added travis ci and appveyor ci to build wheel packages (thanks to @anthrotype)\n\n1.0.2\n-------\n-  bug fix: `sympy.zero` recognized as a collection (thanks to @jamiebull1)\n\n1.0.0\n-------\n- **(breaks backwards compatibility)** removes scaling_factor (thanks to @feuermurmel)\n\n0.9.3b0\n-------\n-  applied scaling_factor to the relevant function parameters and class properties\n-  refactored tests\n\n0.9.2b1\n-------\n-  bug fix: fix setting of the pypolynode.ishole property\n\n0.9.2b0\n-------\n-  enable preprocessor directive ``use_lines`` by default,\n-  bug fix: pypolynode.contour that is now one path and not a list of paths as it was previously.\n",
  "docs_url": null,
  "keywords": "polygon clipping, polygon intersection, polygon union, polygon offsetting, polygon boolean, polygon, clipping, clipper, vatti",
  "license": "mit",
  "name": "pyclipper",
  "package_url": "https://pypi.org/project/pyclipper/",
  "project_url": "https://pypi.org/project/pyclipper/",
  "project_urls": {
    "Homepage": "https://github.com/greginvm/pyclipper"
  },
  "release_url": "https://pypi.org/project/pyclipper/1.3.0.post5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "cython wrapper for the c++ translation of the angus johnson's clipper library (ver. 6.4.2)",
  "version": "1.3.0.post5",
  "releases": [],
  "developers": [
    "angus_johnson",
    "cosimo@anthrotype.com",
    "cosimo_lupo",
    "me@gregorratajc.com"
  ],
  "kwds": "pyclipper pyclipperoffset clipperlib clipperoffset clipping",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyclipper",
  "homepage": "https://github.com/greginvm/pyclipper",
  "release_count": 19,
  "dependency_ids": []
}
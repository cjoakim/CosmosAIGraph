{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "[![build status](https://github.com/hukkin/tomli/workflows/tests/badge.svg?branch=master)](https://github.com/hukkin/tomli/actions?query=workflow%3atests+branch%3amaster+event%3apush)\n[![codecov.io](https://codecov.io/gh/hukkin/tomli/branch/master/graph/badge.svg)](https://codecov.io/gh/hukkin/tomli)\n[![pypi version](https://img.shields.io/pypi/v/tomli)](https://pypi.org/project/tomli)\n\n# tomli\n\n> a lil' toml parser\n\n**table of contents**  *generated with [mdformat-toc](https://github.com/hukkin/mdformat-toc)*\n\n<!-- mdformat-toc start --slug=github --maxlevel=6 --minlevel=2 -->\n\n- [intro](#intro)\n- [installation](#installation)\n- [usage](#usage)\n  - [parse a toml string](#parse-a-toml-string)\n  - [parse a toml file](#parse-a-toml-file)\n  - [handle invalid toml](#handle-invalid-toml)\n  - [construct `decimal.decimal`s from toml floats](#construct-decimaldecimals-from-toml-floats)\n- [faq](#faq)\n  - [why this parser?](#why-this-parser)\n  - [is comment preserving round-trip parsing supported?](#is-comment-preserving-round-trip-parsing-supported)\n  - [is there a `dumps`, `write` or `encode` function?](#is-there-a-dumps-write-or-encode-function)\n  - [how do toml types map into python types?](#how-do-toml-types-map-into-python-types)\n- [performance](#performance)\n\n<!-- mdformat-toc end -->\n\n## intro<a name=\"intro\"></a>\n\ntomli is a python library for parsing [toml](https://toml.io).\ntomli is fully compatible with [toml v1.0.0](https://toml.io/en/v1.0.0).\n\n## installation<a name=\"installation\"></a>\n\n```bash\npip install tomli\n```\n\n## usage<a name=\"usage\"></a>\n\n### parse a toml string<a name=\"parse-a-toml-string\"></a>\n\n```python\nimport tomli\n\ntoml_str = \"\"\"\n           gretzky = 99\n\n           [kurri]\n           jari = 17\n           \"\"\"\n\ntoml_dict = tomli.loads(toml_str)\nassert toml_dict == {\"gretzky\": 99, \"kurri\": {\"jari\": 17}}\n```\n\n### parse a toml file<a name=\"parse-a-toml-file\"></a>\n\n```python\nimport tomli\n\nwith open(\"path_to_file/conf.toml\", \"rb\") as f:\n    toml_dict = tomli.load(f)\n```\n\nthe file must be opened in binary mode (with the `\"rb\"` flag).\nbinary mode will enforce decoding the file as utf-8 with universal newlines disabled,\nboth of which are required to correctly parse toml.\n\n### handle invalid toml<a name=\"handle-invalid-toml\"></a>\n\n```python\nimport tomli\n\ntry:\n    toml_dict = tomli.loads(\"]] this is invalid toml [[\")\nexcept tomli.tomldecodeerror:\n    print(\"yep, definitely not valid.\")\n```\n\nnote that error messages are considered informational only.\nthey should not be assumed to stay constant across tomli versions.\n\n### construct `decimal.decimal`s from toml floats<a name=\"construct-decimaldecimals-from-toml-floats\"></a>\n\n```python\nfrom decimal import decimal\nimport tomli\n\ntoml_dict = tomli.loads(\"precision-matters = 0.982492\", parse_float=decimal)\nassert toml_dict[\"precision-matters\"] == decimal(\"0.982492\")\n```\n\nnote that `decimal.decimal` can be replaced with another callable that converts a toml float from string to a python type.\nthe `decimal.decimal` is, however, a practical choice for use cases where float inaccuracies can not be tolerated.\n\nillegal types are `dict` and `list`, and their subtypes.\na `valueerror` will be raised if `parse_float` produces illegal types.\n\n## faq<a name=\"faq\"></a>\n\n### why this parser?<a name=\"why-this-parser\"></a>\n\n- it's lil'\n- pure python with zero dependencies\n- the fastest pure python parser [\\*](#performance):\n  15x as fast as [tomlkit](https://pypi.org/project/tomlkit/),\n  2.4x as fast as [toml](https://pypi.org/project/toml/)\n- outputs [basic data types](#how-do-toml-types-map-into-python-types) only\n- 100% spec compliant: passes all tests in\n  [a test set](https://github.com/toml-lang/compliance/pull/8)\n  soon to be merged to the official\n  [compliance tests for toml](https://github.com/toml-lang/compliance)\n  repository\n- thoroughly tested: 100% branch coverage\n\n### is comment preserving round-trip parsing supported?<a name=\"is-comment-preserving-round-trip-parsing-supported\"></a>\n\nno.\n\nthe `tomli.loads` function returns a plain `dict` that is populated with builtin types and types from the standard library only.\npreserving comments requires a custom type to be returned so will not be supported,\nat least not by the `tomli.loads` and `tomli.load` functions.\n\nlook into [toml kit](https://github.com/sdispater/tomlkit) if preservation of style is what you need.\n\n### is there a `dumps`, `write` or `encode` function?<a name=\"is-there-a-dumps-write-or-encode-function\"></a>\n\n[tomli-w](https://github.com/hukkin/tomli-w) is the write-only counterpart of tomli, providing `dump` and `dumps` functions.\n\nthe core library does not include write capability, as most toml use cases are read-only, and tomli intends to be minimal.\n\n### how do toml types map into python types?<a name=\"how-do-toml-types-map-into-python-types\"></a>\n\n| toml type        | python type         | details                                                      |\n| ---------------- | ------------------- | ------------------------------------------------------------ |\n| document root    | `dict`              |                                                              |\n| key              | `str`               |                                                              |\n| string           | `str`               |                                                              |\n| integer          | `int`               |                                                              |\n| float            | `float`             |                                                              |\n| boolean          | `bool`              |                                                              |\n| offset date-time | `datetime.datetime` | `tzinfo` attribute set to an instance of `datetime.timezone` |\n| local date-time  | `datetime.datetime` | `tzinfo` attribute set to `none`                             |\n| local date       | `datetime.date`     |                                                              |\n| local time       | `datetime.time`     |                                                              |\n| array            | `list`              |                                                              |\n| table            | `dict`              |                                                              |\n| inline table     | `dict`              |                                                              |\n\n## performance<a name=\"performance\"></a>\n\nthe `benchmark/` folder in this repository contains a performance benchmark for comparing the various python toml parsers.\nthe benchmark can be run with `tox -e benchmark-pypi`.\nrunning the benchmark on my personal computer output the following:\n\n```console\nfoo@bar:~/dev/tomli$ tox -e benchmark-pypi\nbenchmark-pypi installed: attrs==19.3.0,click==7.1.2,pytomlpp==1.0.2,qtoml==0.3.0,rtoml==0.7.0,toml==0.10.2,tomli==1.1.0,tomlkit==0.7.2\nbenchmark-pypi run-test-pre: pythonhashseed='2658546909'\nbenchmark-pypi run-test: commands[0] | python -c 'import datetime; print(datetime.date.today())'\n2021-07-23\nbenchmark-pypi run-test: commands[1] | python --version\npython 3.8.10\nbenchmark-pypi run-test: commands[2] | python benchmark/run.py\nparsing data.toml 5000 times:\n------------------------------------------------------\n    parser |  exec time | performance (more is better)\n-----------+------------+-----------------------------\n     rtoml |    0.901 s | baseline (100%)\n  pytomlpp |     1.08 s | 83.15%\n     tomli |     3.89 s | 23.15%\n      toml |     9.36 s | 9.63%\n     qtoml |     11.5 s | 7.82%\n   tomlkit |     56.8 s | 1.59%\n```\n\nthe parsers are ordered from fastest to slowest, using the fastest parser as baseline.\ntomli performed the best out of all pure python toml parsers,\nlosing only to pytomlpp (wraps c++) and rtoml (wraps rust).\n\n",
  "docs_url": null,
  "keywords": "toml",
  "license": "",
  "name": "tomli",
  "package_url": "https://pypi.org/project/tomli/",
  "project_url": "https://pypi.org/project/tomli/",
  "project_urls": {
    "Changelog": "https://github.com/hukkin/tomli/blob/master/CHANGELOG.md",
    "Homepage": "https://github.com/hukkin/tomli"
  },
  "release_url": "https://pypi.org/project/tomli/2.0.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a lil' toml parser",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "hukkin@users.noreply.github.com"
  ],
  "kwds": "tomli toml toml_str toml_dict tomldecodeerror",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_tomli",
  "homepage": "",
  "release_count": 23,
  "dependency_ids": []
}
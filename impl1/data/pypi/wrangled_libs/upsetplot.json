{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "upsetplot documentation\n============================\n\n|version| |licence| |py-versions|\n\n|issues| |build| |docs| |coverage|\n\nthis is another python implementation of upset plots by lex et al. [lex2014]_.\nupset plots are used to visualise set overlaps; like venn diagrams but\nmore readable. documentation is at https://upsetplot.readthedocs.io.\n\nthis ``upsetplot`` library tries to provide a simple interface backed by an\nextensible, object-oriented design.\n\nthere are many ways to represent the categorisation of data, as covered in\nour `data format guide <https://upsetplot.readthedocs.io/en/stable/formats.html>`_.\n\nour internal input format uses a `pandas.series` containing counts\ncorresponding to subset sizes, where each subset is an intersection of named\ncategories.  the index of the series indicates which rows pertain to which\ncategories, by having multiple boolean indices, like ``example`` in the\nfollowing::\n\n    >>> from upsetplot import generate_counts\n    >>> example = generate_counts()\n    >>> example\n    cat0   cat1   cat2\n    false  false  false      56\n                  true      283\n           true   false    1279\n                  true     5882\n    true   false  false      24\n                  true       90\n           true   false     429\n                  true     1957\n    name: value, dtype: int64\n\nthen::\n\n    >>> from upsetplot import plot\n    >>> plot(example)  # doctest: +skip\n    >>> from matplotlib import pyplot\n    >>> pyplot.show()  # doctest: +skip\n\nmakes:\n\n.. image:: http://upsetplot.readthedocs.io/en/latest/_images/sphx_glr_plot_generated_001.png\n   :target: ../auto_examples/plot_generated.html\n\nand you can save the image in various formats::\n\n    >>> pyplot.savefig(\"/path/to/myplot.pdf\")  # doctest: +skip\n    >>> pyplot.savefig(\"/path/to/myplot.png\")  # doctest: +skip\n\nthis plot shows the cardinality of every category combination seen in our data.\nthe leftmost column counts items absent from any category. the next three\ncolumns count items only in ``cat1``, ``cat2`` and ``cat3`` respectively, with\nfollowing columns showing cardinalities for items in each combination of\nexactly two named sets. the rightmost column counts items in all three sets.\n\nrotation\n........\n\nwe call the above plot style \"horizontal\" because the category intersections\nare presented from left to right.  `vertical plots\n<http://upsetplot.readthedocs.io/en/latest/auto_examples/plot_vertical.html>`__\nare also supported!\n\n.. image:: http://upsetplot.readthedocs.io/en/latest/_images/sphx_glr_plot_vertical_001.png\n   :target: http://upsetplot.readthedocs.io/en/latest/auto_examples/plot_vertical.html\n\ndistributions\n.............\n\nproviding a dataframe rather than a series as input allows us to expressively\n`plot the distribution of variables\n<http://upsetplot.readthedocs.io/en/latest/auto_examples/plot_boston.html>`__\nin each subset.\n\n.. image:: http://upsetplot.readthedocs.io/en/latest/_images/sphx_glr_plot_boston_001.png\n   :target: http://upsetplot.readthedocs.io/en/latest/auto_examples/plot_boston.html\n\nloading datasets\n................\n\nwhile the dataset above is randomly generated, you can prepare your own dataset\nfor input to upsetplot.  a helpful tool is `from_memberships`, which allows\nus to reconstruct the example above by indicating each data point's category\nmembership::\n\n    >>> from upsetplot import from_memberships\n    >>> example = from_memberships(\n    ...     [[],\n    ...      ['cat2'],\n    ...      ['cat1'],\n    ...      ['cat1', 'cat2'],\n    ...      ['cat0'],\n    ...      ['cat0', 'cat2'],\n    ...      ['cat0', 'cat1'],\n    ...      ['cat0', 'cat1', 'cat2'],\n    ...      ],\n    ...      data=[56, 283, 1279, 5882, 24, 90, 429, 1957]\n    ... )\n    >>> example\n    cat0   cat1   cat2\n    false  false  false      56\n                  true      283\n           true   false    1279\n                  true     5882\n    true   false  false      24\n                  true       90\n           true   false     429\n                  true     1957\n    dtype: int64\n\nsee also `from_contents`, another way to describe categorised data, and\n`from_indicators` which allows each category to be indicated by a column in\nthe data frame (or a function of the column's data such as whether it is a\nmissing value).\n\ninstallation\n------------\n\nto install the library, you can use `pip`::\n\n    $ pip install upsetplot\n\ninstallation requires:\n\n* pandas\n* matplotlib >= 2.0\n* seaborn to use `upset.add_catplot`\n\nit should then be possible to::\n\n    >>> import upsetplot\n\nin python.\n\nwhy an alternative to py-upset?\n-------------------------------\n\nprobably for petty reasons. it appeared `py-upset\n<https://github.com/imsoergodic/py-upset>`_ was not being maintained.  its\ninput format was undocumented, inefficient and, imo, inappropriate.  it did not\nfacilitate showing plots of each subset's distribution as in lex et al's work\nintroducing upset plots. nor did it include the horizontal bar plots\nillustrated there. it did not support python 2. i decided it would be easier to\nconstruct a cleaner version than to fix it.\n\nreferences\n----------\n\n.. [lex2014] alexander lex, nils gehlenborg, hendrik strobelt, romain vuillemot, hanspeter pfister,\n   *upset: visualization of intersecting sets*,\n   ieee transactions on visualization and computer graphics (infovis '14), vol. 20, no. 12, pp. 1983\u20131992, 2014.\n   doi: `doi.org/10.1109/tvcg.2014.2346248 <https://doi.org/10.1109/tvcg.2014.2346248>`_\n\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/upsetplot.svg\n    :alt: python versions supported\n\n.. |version| image:: https://badge.fury.io/py/upsetplot.svg\n    :alt: latest version on pypi\n    :target: https://badge.fury.io/py/upsetplot\n\n.. |build| image:: https://travis-ci.org/jnothman/upsetplot.svg?branch=master\n    :alt: travis ci build status\n    :scale: 100%\n    :target: https://travis-ci.org/jnothman/upsetplot\n\n.. |issues| image:: https://img.shields.io/github/issues/jnothman/upsetplot.svg\n    :alt: issue tracker\n    :target: https://github.com/jnothman/upsetplot\n\n.. |coverage| image:: https://coveralls.io/repos/github/jnothman/upsetplot/badge.svg\n    :alt: test coverage\n    :target: https://coveralls.io/github/jnothman/upsetplot\n\n.. |docs| image:: https://readthedocs.org/projects/upsetplot/badge/?version=latest\n     :alt: documentation status\n     :scale: 100%\n     :target: https://upsetplot.readthedocs.io/en/latest/?badge=latest\n\n.. |licence| image:: https://img.shields.io/badge/licence-bsd-blue.svg\n     :target: https://opensource.org/licenses/bsd-3-clause\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "upsetplot",
  "package_url": "https://pypi.org/project/UpSetPlot/",
  "project_url": "https://pypi.org/project/UpSetPlot/",
  "project_urls": {
    "Homepage": "https://upsetplot.readthedocs.io"
  },
  "release_url": "https://pypi.org/project/UpSetPlot/0.8.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "draw lex et al.'s upset plots with pandas and matplotlib",
  "version": "0.8.0",
  "releases": [],
  "developers": [
    "joel.nothman@gmail.com",
    "joel_nothman"
  ],
  "kwds": "upsetplot matplotlib plots add_catplot categories",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_upsetplot",
  "homepage": "https://upsetplot.readthedocs.io",
  "release_count": 23,
  "dependency_ids": []
}
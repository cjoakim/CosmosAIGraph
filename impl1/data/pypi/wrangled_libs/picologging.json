{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: system :: logging"
  ],
  "description": "# picologging\n\n[![pypi - python version](https://img.shields.io/pypi/pyversions/picologging)](https://pypi.org/project/picologging/)\n[![pypi](https://img.shields.io/pypi/v/picologging)](https://pypi.org/project/picologging/)\n[![anaconda-server badge](https://anaconda.org/conda-forge/picologging/badges/version.svg)](https://anaconda.org/conda-forge/picologging)\n[![codecov](https://codecov.io/gh/microsoft/picologging/branch/main/graph/badge.svg?token=khs6fpqlvw)](https://codecov.io/gh/microsoft/picologging)\n\n> **warning**\n> this project is in *beta*.\n> there are some incomplete features (see [limitations](https://microsoft.github.io/picologging/limitations.html)).\n\npicologging is a high-performance logging library for python. picologging is 4-10x faster than the `logging` module in the standard library.\n\npicologging is designed to be used as a *drop-in* replacement for applications which already use logging, and supports the same api as the `logging` module.\n\ncheck out the [documentation](https://microsoft.github.io/picologging/) for more.\n\n## installation\n\npicologging can be installed from pypi using pip:\n\n```console\npip install picologging\n```\n\nor from conda forge using conda:\n\n```console\nconda install -c conda-forge picologging\n```\n\n## usage\n\nimport `picologging as logging` to use picologging instead of the standard library logging module.\n\nthis patches all the loggers registered to use picologging loggers and formatters.\n\n```python\nimport picologging as logging\nlogging.basicconfig()\n\nlogger = logging.getlogger()\n\nlogger.info(\"a log message!\")\n\nlogger.warning(\"a log message with %s\", \"arguments\")\n```\n\n## benchmarks\n\nrun `richbench benchmarks/ --markdown` with the richbench cli to see the benchmarks, here is a sample on macos 11:\n\n|                             benchmark | min     | max     | mean    | min (+)         | max (+)         | mean (+)        |\n|---------------------------------------|---------|---------|---------|-----------------|-----------------|-----------------|\n|                         filehandler() | 0.138   | 0.151   | 0.143   | 0.055 (2.5x)    | 0.063 (2.4x)    | 0.058 (2.5x)    |\n|                  watchedfilehandler() | 0.189   | 0.197   | 0.193   | 0.097 (1.9x)    | 0.101 (1.9x)    | 0.099 (1.9x)    |\n|                 rotatingfilehandler() | 0.287   | 0.304   | 0.296   | 0.174 (1.6x)    | 0.178 (1.7x)    | 0.176 (1.7x)    |\n|                        queuehandler() | 1.109   | 1.195   | 1.130   | 0.142 (7.8x)    | 0.151 (7.9x)    | 0.147 (7.7x)    |\n|      queuelistener() + queuehandler() | 0.157   | 0.167   | 0.162   | 0.034 (4.6x)    | 0.039 (4.3x)    | 0.037 (4.3x)    |\n|                       memoryhandler() | 0.126   | 0.144   | 0.133   | 0.051 (2.5x)    | 0.059 (2.5x)    | 0.054 (2.5x)    |\n|                           logrecord() | 0.225   | 0.248   | 0.233   | 0.026 (8.7x)    | 0.029 (8.5x)    | 0.028 (8.4x)    |\n|                  formatter().format() | 0.076   | 0.086   | 0.081   | 0.004 (18.7x)   | 0.005 (18.9x)   | 0.004 (19.1x)   |\n|        formatter().format() with date | 0.298   | 0.311   | 0.304   | 0.081 (3.7x)    | 0.087 (3.6x)    | 0.084 (3.6x)    |\n|           logger(level=debug).debug() | 0.726   | 0.743   | 0.734   | 0.059 (12.3x)   | 0.061 (12.3x)   | 0.060 (12.3x)   |\n| logger(level=debug).debug() with args | 0.761   | 0.809   | 0.777   | 0.081 (9.4x)    | 0.087 (9.3x)    | 0.084 (9.2x)    |\n|            logger(level=info).debug() | 0.016   | 0.018   | 0.017   | 0.004 (4.3x)    | 0.005 (3.8x)    | 0.004 (4.1x)    |\n|  logger(level=info).debug() with args | 0.018   | 0.019   | 0.018   | 0.005 (3.8x)    | 0.005 (3.8x)    | 0.005 (3.7x)    |\n\n## limitations\n\nsee [limitations](https://microsoft.github.io/picologging/limitations.html)\n\n## contributing\n\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a\ncontributor license agreement (cla) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. for details, visit [cla.opensource.microsoft.com](https://cla.opensource.microsoft.com).\n\nwhen you submit a pull request, a cla bot will automatically determine whether you need to provide\na cla and decorate the pr appropriately (e.g., status check, comment). simply follow the instructions\nprovided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/).\nfor more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## local development\n\nthis project comes bundled with a dev container which sets up an appropriate environment. if you install the dev containers extension for vs code, then opening this project in vs code should prompt it to open it in the dev container.\n\nonce opened in the dev container, run:\n\n```console\npip install -e \".[dev]\"\npre-commit install\npython setup.py build_ext --inplace --build-type debug\n```\n\nrun the build command whenever you make changes to the files.\n\nit's also helpful to create a `.vscode/launch.json` file like this one:\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n        \"name\": \"(gdb) launch pytest\",\n        \"type\": \"cppdbg\",\n        \"request\": \"launch\",\n        \"program\": \"/usr/local/bin/python\",\n        \"args\": [\"-m\", \"pytest\", \"tests\"],\n        \"stopatentry\": false,\n        \"cwd\": \"${workspacefolder}\",\n        \"environment\": [],\n        \"externalconsole\": false,\n        \"mimode\": \"gdb\",\n        \"setupcommands\": [\n            {\n                \"description\": \"enable pretty-printing for gdb\",\n                \"text\": \"-enable-pretty-printing\",\n                \"ignorefailures\": true\n            },\n            {\n                \"description\":  \"set disassembly flavor to intel\",\n                \"text\": \"-gdb-set disassembly-flavor intel\",\n                \"ignorefailures\": true\n            },\n        ]\n    }\n}\n```\n\nnow you can press the \"run and debug\" button to run `pytest` from the `gdb` debugger\nand use breakpoint debugging in the c code.\n\nif you would like to be able to dive into the cpython code while debugging, then:\n\n1. do a git checkout of the tagged branch for the devcontainer's python version\ninto the devcontainer's `/workspaces/` directory. you may need to `sudo`.\n2. follow the instructions in the cpython readme to compile the code.\n3. add the following key to the the configuration in `launch.json`:\n\n    ```json\n    \"sourcefilemap\": { \"/usr/src/python\": \"/workspaces/cpython\" },\n    ```\n\n4. add the following command to the `setupcommands` in `launch.json`:\n\n    ```json\n    {\n        \"description\": \"find cpython source code\",\n        \"text\": \"-gdb-set auto-load safe-path /workspaces/cpython\"\n    },\n    ```\n\n## trademarks\n\nsome components of this python package are from cpython 3.11 logging library for compatibility reasons.\n\ncpython 3.11 is licensed under the psf license.\nthe logging module is copyright (c) 2001-2019 vinay sajip. all rights reserved.\n\nthis project may contain trademarks or logos for projects, products, or services. authorized use of microsoft trademarks or logos is subject to and must follow [microsoft's trademark & brand guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nuse of microsoft trademarks or logos in modified versions of this project must not cause confusion or imply microsoft sponsorship.\nany use of third-party trademarks or logos are subject to those third-party's policies.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "picologging",
  "package_url": "https://pypi.org/project/picologging/",
  "project_url": "https://pypi.org/project/picologging/",
  "project_urls": {
    "Documentation": "https://microsoft.github.io/picologging/",
    "Homepage": "https://github.com/microsoft/picologging",
    "Source": "https://github.com/microsoft/picologging"
  },
  "release_url": "https://pypi.org/project/picologging/0.9.3/",
  "requires_dist": [
    "rich ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-memray >=1.5.0 ; extra == 'dev'",
    "hypothesis ; extra == 'dev'",
    "flaky ; extra == 'dev'",
    "black ; extra == 'dev'",
    "pre-commit ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "a fast and lightweight logging library for python",
  "version": "0.9.3",
  "releases": [],
  "developers": [
    "microsoft"
  ],
  "kwds": "picologging badges badge py projects",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_picologging",
  "homepage": "https://github.com/microsoft/picologging",
  "release_count": 16,
  "dependency_ids": [
    "pypi_black",
    "pypi_flaky",
    "pypi_hypothesis",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_memray",
    "pypi_rich"
  ]
}
{
  "classifiers": [
    "environment :: console",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "operating system :: macos",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: software development :: quality assurance"
  ],
  "description": "<br />\n<p align=\"center\">\n  <a href=\"https://semgrep.dev\">\n    <picture>\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"images/semgrep-logo-light.svg\">\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"images/semgrep-logo-dark.svg\">\n      <img src=\"https://raw.githubusercontent.com/returntocorp/semgrep/develop/images/semgrep-logo-light.svg\" height=\"100\" alt=\"semgrep logo\"/>\n    </picture>\n  </a>\n</p>\n<h2 align=\"center\">\n  code scanning at ludicrous speed.\n</h2>\n<p align=\"center\">\n  <a href=\"https://formulae.brew.sh/formula/semgrep\">\n    <img src=\"https://img.shields.io/homebrew/v/semgrep?style=flat-square\" alt=\"homebrew\" />\n  </a>\n  <a href=\"https://pypi.org/project/semgrep/\">\n    <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/semgrep?style=flat-square&color=blue\">\n  </a>\n  <a href=\"https://semgrep.dev/docs/\">\n      <img src=\"https://img.shields.io/badge/docs-semgrep.dev-purple?style=flat-square\" alt=\"documentation\" />\n  </a>\n  <a href=\"https://go.semgrep.dev/slack\">\n    <img src=\"https://img.shields.io/badge/slack-2.5k%20members-green?style=flat-square\" alt=\"join semgrep community slack\" />\n  </a>\n  <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n    <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"issues welcome!\" />\n  </a>\n  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=github%20stars&style=flat-square\" alt=\"star semgrep on github\" />\n  </a>\n  <a href=\"https://hub.docker.com/r/returntocorp/semgrep\">\n    <img src=\"https://img.shields.io/docker/pulls/returntocorp/semgrep.svg?style=flat-square\" alt=\"docker pulls\" />\n  </a>\n  <a href=\"https://twitter.com/intent/follow?screen_name=semgrep\">\n    <img src=\"https://img.shields.io/twitter/follow/semgrep?label=follow%20semgrep&style=social&color=blue\" alt=\"follow @semgrep on twitter\" />\n  </a>\n</p>\n</br>\n\nsemgrep accelerates your security journey by swiftly scanning code and package dependencies for known issues, software vulnerabilities, and detected secrets with unparalleled efficiency. semgrep offers:\n\n- **code** to find bugs & vulnerabilities using custom or pre-built rules\n- **supply chain** to find dependencies with known vulnerabilities\n- **secrets** to find hard-coded credentials that shouldn't be checked into source code\n\nsemgrep analyzes code locally on your computer or in your build environment: **by default, code is never uploaded**. [get\u00a0started\u00a0\u2192.](#getting-started-)\n\n<a href=\"#option-1-getting-started-from-the-cli\">\n<img src=\"https://raw.githubusercontent.com/returntocorp/semgrep/develop/images/semgrep-scan-cli.jpg\" alt=\"semgrep cli image\"/></a>\n\n### language support\n\nsemgrep code supports 30+ languages.\n\n| category     | languages                                                                                                                                                                     |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ga           | c# \u00b7 go \u00b7 java \u00b7 javascript \u00b7 jsx \u00b7 json \u00b7 php \u00b7 python \u00b7 ruby \u00b7 scala \u00b7 terraform \u00b7 typescript \u00b7 tsx                                                                         |\n| beta         | kotlin \u00b7 rust                                                                                                                                                                 |\n| experimental | bash \u00b7 c \u00b7 c++ \u00b7 clojure \u00b7 dart \u00b7 dockerfile \u00b7 elixir \u00b7 html \u00b7 julia \u00b7 jsonnet \u00b7 lisp \u00b7 lua \u00b7 ocaml \u00b7 r \u00b7 scheme \u00b7 solidity \u00b7 swift \u00b7 yaml \u00b7 xml \u00b7 generic (erb, jinja, etc.) |\n\nsemgrep supply chain supports 8 languages across 15 package managers.\n\n| category       | languages                                                                                                                                                             |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ga             | go (go modules, `go mod`) \u00b7 javascript/typescript (npm, yarn, yarn 2, yarn 3, pnpm) \u00b7 python (pip, pip-tool, pipenv, poetry) \u00b7 ruby (rubygems) \u00b7 java (gradle, maven) |\n| beta           | c# (nuget)                                                                                                                                                            |\n| lock file-only | rust (cargo) \u00b7 php (composer)                                                                                                                                         |\n\nfor more information, visit our [supported languages](https://semgrep.dev/docs/supported-languages/) page.\n\n### getting started \ud83d\ude80\n\n1. [from the semgrep cloud platform](#option-1-getting-started-from-the-semgrep-cloud-platform-recommended)\n2. [from the cli](#option-2-getting-started-from-the-cli)\n\nfor new users, we recommend starting with the [semgrep cloud platform](#option-1-getting-started-from-the-semgrep-cloud-platform-recommended) because it provides a visual interface, a demo project, result triaging and exploration workflows, and makes setup in ci/cd fast. scans are still local and code isn't uploaded. alternatively, you can also start with the cli and navigate the terminal output to run one-off searches.\n\n### option 1: getting started from the semgrep cloud platform (recommended)\n\n<a href=\"https://go.semgrep.dev/login-ghrmgo\"  target=\"_blank\"><img src=\"https://raw.githubusercontent.com/returntocorp/semgrep/develop/images/semgrep-main-image.jpg\" alt=\"semgrep platform image\"/> </a>\n\n1.  register on <a href=\"https://go.semgrep.dev/login-ghrmgo\" target=\"_blank\">semgrep.dev</a>\n\n2.  explore the demo findings to learn how semgrep works\n\n3.  scan your project by navigating to `projects > scan new project > run scan in ci`\n\n4.  select your version control system and follow the onboarding steps to add your project. after this setup, semgrep will scan your project after every pull request.\n\n5.  [optional] if you want to run semgrep locally, follow the steps in the cli section.\n\n### notes:\n\nif there are any issues, <a href=\"https://go.semgrep.dev/slack\" target=\"_blank\">please ask for help in the semgrep slack</a>.\n\n### option 2: getting started from the cli\n\n1.  install semgrep cli\n\n```\n# for macos\n$ brew install semgrep\n\n# for ubuntu/wsl/linux/macos\n$ python3 -m pip install semgrep\n\n# to try semgrep without installation run via docker\n$ docker run -it -v \"${pwd}:/src\" returntocorp/semgrep semgrep login\n$ docker run -e semgrep_app_token=<token> --rm -v \"${pwd}:/src\" returntocorp/semgrep semgrep ci\n```\n\n2.  run `semgrep login` to create your account and login to semgrep.\n\nlogging into semgrep gets you access to:\n\n- [semgrep supply chain](https://semgrep.dev/products/semgrep-supply-chain): a dependency scanner that detects reachable vulnerabilities in third party libraries\n- [semgrep code's pro rules](https://semgrep.dev/products/semgrep-code): 600+ high confidence rules written by semgrep's security research team\n- [semgrep code's pro engine](https://semgrep.dev/products/pro-engine/): an advanced code analysis engine, designed to detect complex vulnerabilities, and reduce false positives\n\n3.  go to your app's root directory and run `semgrep ci`. this will scan your project to check for vulnerabilities in your source code and its dependencies.\n\n### semgrep ecosystem\n\nthe semgrep ecosystem includes the following products:\n\n- [semgrep code](https://semgrep.dev/products/semgrep-code) - scan your code with semgrep's proprietary rules (written by our security research team) using our cross-file and cross-function analysis. designed to find owasp top 10 vulnerabilities and protect against critical security risks. semgrep code is available on both [free and paid tiers](https://semgrep.dev/pricing).\n- [semgrep supply chain (ssc)](https://semgrep.dev/products/semgrep-supply-chain) - a high-signal dependency scanner that detects reachable vulnerabilities in open source third-party libraries and functions across the software development life cycle (sdlc). semgrep supply chain is available on both [free and paid tiers](https://semgrep.dev/pricing).\n- [semgrep secrets [new!]](https://semgrep.dev/blog/2023/introducing-semgrep-secrets/) - secrets detection that uses semantic analysis, improved entropy analysis, and validation together to accurately detect sensitive credentials in developer workflows. [book a demo](https://get.semgrep.dev/secrets-beta-request.html) to request early access to the product.\n- [semgrep cloud platform (scp)](https://semgrep.dev/login) - deploy, manage, and monitor semgrep at scale, with [free and paid tiers](https://semgrep.dev/pricing). integrates with continuous integration (ci) providers such as github, gitlab, circleci, and more.\n- [semgrep oss engine](https://semgrep.dev/docs/cli-reference/) - the open-source engine and community-contributed rules at the heart of everything (this project).\n\nto learn more about semgrep, visit:\n\n- [semgrep playground](https://semgrep.dev/editor) - an online interactive tool for writing and sharing rules.\n- [semgrep registry](https://semgrep.dev/explore) - 2,000+ community-driven rules covering security, correctness, and dependency vulnerabilities.\n\njoin hundreds of thousands of other developers and security engineers already using semgrep at companies like gitlab, dropbox, slack, figma, shopify, hashicorp, snowflake, and trail of bits.\n\nsemgrep is developed and commercially supported by [semgrep, inc., a software security company](https://semgrep.dev).\n\n### semgrep rules\n\nsemgrep rules look like the code you already write; no abstract syntax trees, regex wrestling, or painful dsls. here's a quick rule for finding python `print()` statements.\n\nrun it online in semgrep\u2019s playground by [clicking here](https://semgrep.dev/s/ievans:print-to-logger).\n\n<p align=\"center\">\n    <a href=\"https://semgrep.dev/s/ievans:print-to-logger\"  target=\"_blank\"><img src=\"https://raw.githubusercontent.com/returntocorp/semgrep/develop/images/semgrep-example-rules-editor.jpg\" width=\"582\" alt=\"semgrep rule example for finding python print() statements\" /></a>\n</p>\n\n#### examples\n\nvisit [docs > rule examples](https://semgrep.dev/docs/writing-rules/rule-ideas/) for use cases and ideas.\n\n| use case                          | semgrep rule                                                                                                                                                                                                                                                                                                                                                                                                |\n| :-------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ban dangerous apis                | [prevent use of exec](https://semgrep.dev/playground/s/lglb)                                                                                                                                                                                                                                                                                                                                                |\n| search routes and authentication  | [extract spring routes](https://semgrep.dev/playground/s/y6wd)                                                                                                                                                                                                                                                                                                                                              |\n| enforce the use secure defaults   | [securely set flask cookies](https://semgrep.dev/playground/s/6kww)                                                                                                                                                                                                                                                                                                                                         |\n| tainted data flowing into sinks   | [expressjs dataflow into sandbox.run](https://semgrep.dev/playground/s/qepr)                                                                                                                                                                                                                                                                                                                                |\n| enforce project best-practices    | [use assertequal for == checks](https://semgrep.dev/playground/s/oeox), [always check subprocess calls](https://semgrep.dev/playground/s/zenk)                                                                                                                                                                                                                                                              |\n| codify project-specific knowledge | [verify transactions before making them](https://semgrep.dev/playground/s/p8zk)                                                                                                                                                                                                                                                                                                                             |\n| audit security hotspots           | [finding xss in apache airflow](https://semgrep.dev/playground/s/kpwj), [hardcoded credentials](https://semgrep.dev/playground/s/2br8)                                                                                                                                                                                                                                                                      |\n| audit configuration files         | [find s3 arn uses](https://semgrep.dev/playground/s/jekd)                                                                                                                                                                                                                                                                                                                                                   |\n| migrate from deprecated apis      | [des is deprecated](https://semgrep.dev/playground/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated), [deprecated flask apis](https://semgrep.dev/playground/r/python.flask.maintainability.deprecated.deprecated-apis.flask-deprecated-apis), [deprecated bokeh apis](https://semgrep.dev/playground/r/python.bokeh.maintainability.deprecated.deprecated_apis.bokeh-deprecated-apis) |\n| apply automatic fixes             | [use listenandservetls](https://semgrep.dev/playground/s/1ayk)                                                                                                                                                                                                                                                                                                                                              |\n\n### extensions\n\nvisit [docs > extensions](https://semgrep.dev/docs/extensions/) to learn about using semgrep in your editor or pre-commit. when integrated into ci and configured to scan pull requests, semgrep will only report issues introduced by that pull request; this lets you start using semgrep without fixing or ignoring pre-existing issues!\n\n### documentation\n\nbrowse the full semgrep [documentation on the website](https://semgrep.dev/docs). if you\u2019re new to semgrep, check out [docs > getting started](https://semgrep.dev/docs/getting-started/) or the [interactive tutorial](https://semgrep.dev/learn).\n\n### metrics\n\nusing remote configuration from the [registry](https://semgrep.dev/r) (like `--config=p/ci`) reports pseudonymous rule metrics to semgrep.dev.\n\nusing configs from local files (like `--config=xyz.yml`) does **not** enable metrics.\n\nto disable registry rule metrics, use `--metrics=off`.\n\nthe semgrep [privacy policy](https://semgrep.dev/docs/metrics) describes the principles that guide data-collection decisions and the breakdown of the data that are and are not collected when the metrics are enabled.\n\n### more\n\n- [frequently asked questions (faqs)](https://semgrep.dev/docs/faq/)\n- [contributing](https://semgrep.dev/docs/contributing/contributing/)\n- [build instructions for developers](install.md)\n- [ask questions in the semgrep community slack](https://go.semgrep.dev/slack)\n- [cli reference and exit codes](https://semgrep.dev/docs/cli-usage)\n- [semgrep youtube channel](https://www.youtube.com/c/semgrep)\n- [license (lgpl-2.1)](license)\n\n### upgrading\n\nto upgrade, run the command below associated with how you installed semgrep:\n\n```sh\n# using homebrew\n$ brew upgrade semgrep\n\n# using pip\n$ python3 -m pip install --upgrade semgrep\n\n# using docker\n$ docker pull returntocorp/semgrep:latest\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "semgrep",
  "package_url": "https://pypi.org/project/semgrep/",
  "project_url": "https://pypi.org/project/semgrep/",
  "project_urls": {
    "Homepage": "https://github.com/returntocorp/semgrep"
  },
  "release_url": "https://pypi.org/project/semgrep/1.54.3/",
  "requires_dist": [
    "attrs >=21.3",
    "boltons ~=21.0",
    "click-option-group ~=0.5",
    "click ~=8.1",
    "colorama ~=0.4.0",
    "defusedxml ~=0.7.1",
    "exceptiongroup ~=1.2.0",
    "glom ~=22.1",
    "jsonschema ~=4.6",
    "packaging >=21.0",
    "peewee ~=3.14",
    "requests ~=2.22",
    "rich >=12.6.0",
    "ruamel.yaml <0.18,>=0.16.0",
    "tomli ~=2.0.1",
    "typing-extensions ~=4.2",
    "urllib3 ~=2.0",
    "wcmatch ~=8.3",
    "jsonnet ~=0.18 ; extra == 'experiments'"
  ],
  "requires_python": ">=3.8",
  "summary": "lightweight static analysis for many languages. find bug variants with patterns that look like source code.",
  "version": "1.54.3",
  "releases": [],
  "developers": [
    "semgrep_inc",
    "support@semgrep.com"
  ],
  "kwds": "logo tutorial semgrep svg formulae",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_semgrep",
  "homepage": "https://github.com/returntocorp/semgrep",
  "release_count": 211,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_boltons",
    "pypi_click",
    "pypi_click_option_group",
    "pypi_colorama",
    "pypi_defusedxml",
    "pypi_exceptiongroup",
    "pypi_glom",
    "pypi_jsonnet",
    "pypi_jsonschema",
    "pypi_packaging",
    "pypi_peewee",
    "pypi_requests",
    "pypi_rich",
    "pypi_ruamel.yaml",
    "pypi_tomli",
    "pypi_typing_extensions",
    "pypi_urllib3",
    "pypi_wcmatch"
  ]
}
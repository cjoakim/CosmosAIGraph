{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: universal permissive license (upl)",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "\n# oracle cloud infrastructure object storage fsspec implementation\n\n\n[![pypi](https://img.shields.io/pypi/v/ocifs.svg?style=for-the-badge&logo=pypi&logocolor=white)](https://pypi.org/project/ocifs/) [![python](https://img.shields.io/pypi/pyversions/ocifs.svg?style=for-the-badge&logo=pypi&logocolor=white)](https://pypi.org/project/ocifs/)\n\n\n\u200b\nthe [oracle cloud infrastructure object storage](https://docs.oracle.com/en-us/iaas/content/object/concepts/objectstorageoverview.htm) service is an internet-scale, high-performance storage platform that offers reliable and cost-efficient data durability. with object storage, you can safely and securely store or retrieve data directly from the internet or from within the cloud platform.\n\u200b\n`ocifs` is part of the `fsspec` [intake/filesystem_spec ecosystem](https://github.com/intake/filesystem_spec)\n\u200b\n> a template or specification for a file-system interface, that specific implementations should follow, so that applications making use of them can rely on a common interface and not have to worry about the specific internal implementation decisions with any given backend.\n\u200b\n`ocifs` joins the list of file systems supported with this package.\n\u200b\nthe `intake/filesystem_spec` project is used by [pandas](https://pandas.pydata.org/), [dask](https://dask.org/) and other data libraries in python, this package adds oracle oci object storage capabilties to these libraries.\n\u200b\n##  ocifs file system style operations example:\n```python\nfrom ocifs import ocifilesystem\n\nfs = ocifilesystem(\"~/.oci/config\")\n# 1.create empty file or truncate in oci objectstorage bucket\n fs.touch(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", truncate=true, data=b\"writing to object storage!\")\n # 2.fetch(potentially multiple paths' contents\n fs.cat(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 3.get metadata about a file from a head or list call\n fs.info(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 4.get directory listing page\n fs.ls(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/\", detail=true)\n # 5.is this entry directory-like?\n fs.isdir(\"oci://<my_bucket>@<my_namespace>\")\n # 6.is this entry file-like?\n fs.isfile(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 7.if there is a file at the given path (including broken links)\n fs.lexists(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 8.list of files for the given path\n fs.listdir(\"oci://<my_bucket>@<my_namespace>/<my_prefix>\", detail=true)\n # 9.get the first ``size`` bytes from file\n fs.head(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", size=1024)\n # 10.get the last ``size`` bytes from file\n fs.tail(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", size=1024)\n # 11.hash of file properties, to tell if it has changed\n fs.ukey(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 12.size in bytes of file\n fs.size(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 13.size in bytes of each file in a list of paths\n paths = [\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\"]\n fs.sizes(paths)\n # 14.normalise oci path string into bucket and key.\n fs.split_path(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 15.delete  a file from the  bucket\n fs.rm(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\")\n # 16.get the contents of the file as a byte\n fs.read_bytes(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", start=0, end=13)\n # 17.get the contents of the file as a string\n fs.read_text(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", encoding=none, errors=none, newline=none)\n # 18.get the contents of the file as a byte\n fs.read_block(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", 0, 13)\n # 19.open a file for writing/flushing into file in oci objectstorage bucket\n # ocifs sets the best-guessed content-type for hello.txt i.e \"text/plain\"\n with fs.open(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", 'w', autocommit=true) as f:\n        f.write(\"writing data to buffer, before manually flushing and closing.\") # data is flushed and file closed\n        f.flush()\n# ocifs uses the specified content-type passed in the open while writing to oci objectstorage bucket\n with fs.open(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", 'w',content_type='text/plain') as f:\n        f.write(\"writing data to buffer, before manually flushing and closing.\") # data is flushed and file closed\n        f.flush()\n # 20.open a file for reading a file from oci objectstorage bucket\n with fs.open(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\") as f:\n        print(f.read())\n # 21.space used by files and optionally directories within a path\n fs.du(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello10.csv\")\n # 22.find files by glob-matching.\n fs.glob(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/*.txt\")\n # 23.renames an object in a particular bucket in tenancy namespace on oci\n fs.rename(\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello.txt\", \"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello2.txt\")\n # 24.delete multiple files from the same bucket\n pathlist = [\"oci://<my_bucket>@<my_namespace>/<my_prefix>/hello2.txt\"]\n fs.bulk_delete(pathlist)\n\n```\n\n\n\n### or use with pandas\n\u200b\n```python\nimport pandas as pd\nimport ocifs\n\u200b\ndf = pd.read_csv(\n    \"oci://my_bucket@my_namespace/my_object.csv\",\n    storage_options={\"config\": \"~/.oci/config\"},\n)\n```\n\n### or use with pyarrow\n\u200b\n```python\nimport pandas as pd\nimport ocifs\n\u200b\ndf = pd.read_csv(\n    \"oci://my_bucket@my_namespace/my_object.csv\",storage_options={\"config\": \"~/.oci/config\"})\n```\n\n### or use with adsdataset\n\u200b\n```python\nimport ads\nimport pandas as pd\nfrom ads.common.auth import default_signer\nfrom ads.dataset.dataset import adsdataset\n\n\u200b\n    ads.set_auth(auth=\"api_key\", oci_config_location=\"~/.oci/config\", profile=\"<profile_name>\")\n    ds = adsdataset(\n        df=pd.read_csv(f\"oci://my_bucket@my_namespace/my_object.csv\", storage_options=default_signer()),\n        type_discovery=false\n    )\n    print(ds.df)\n```\n\n\u200b\n## getting started\n```bash\npython3 -m pip install ocifs\n```\n\n## software prerequisites\npython >= 3.6\n\n## environment variables for authentication:\n```bash\nexport ocifs_iam_type=api_key\nexport ocifs_config_location=~/.oci/config\nexport ocifs_config_profile=default\n```\n\nnote, if you are operating on oci with an alternative valid signer, such as resource principal, instead set the following:\n```bash\nexport ocifs_iam_type=resource_principal\n```\n\n## environment variables for enabling logging:\nto quickly see all messages, you can set the environment variable ocifs_logging_level=debug.\n```bash\nexport ocifs_logging_level=debug\n```\n\n## documentation\n* [![pypi](https://img.shields.io/pypi/v/ocifs.svg?style=for-the-badge&logo=pypi&logocolor=white)](https://pypi.org/project/ocifs/) [![python](https://img.shields.io/pypi/pyversions/ocifs.svg?style=for-the-badge&logo=pypi&logocolor=white)](https://pypi.org/project/ocifs/)\n* [ocifs documentation](https://ocifs.readthedocs.io/en/latest/index.html)\n* [ocifs github](https://github.com/oracle/ocifs)\n\n## support\n[the built-in filesystems in `fsspec`](https://filesystem-spec.readthedocs.io/en/latest/api.html#built-in-implementations) are maintained by the `intake` project team, where as `ocifs` is an external implementation (similar to `s3fs`, `gcsfs`, `adl/abfs`, and so on), which is maintained by oracle.\n\n## contributing\nthis project welcomes contributions from the community. before submitting a pull request, please [review our contribution guide](./contributing.md)\n\n## security\nplease consult the [security guide](./security.md) for our responsible security vulnerability disclosure process\n\n## license\ncopyright (c) 2021, 2023 oracle and/or its affiliates.\n\nreleased under the universal permissive license v1.0 as shown at\n<https://oss.oracle.com/licenses/upl/>.\n\n",
  "docs_url": null,
  "keywords": "oracle cloud infrastructure,oci,object storage",
  "license": "",
  "name": "ocifs",
  "package_url": "https://pypi.org/project/ocifs/",
  "project_url": "https://pypi.org/project/ocifs/",
  "project_urls": {
    "Documentation": "https://ocifs.readthedocs.io/en/latest/index.html",
    "Github": "https://github.com/oracle/ocifs"
  },
  "release_url": "https://pypi.org/project/ocifs/1.3.1/",
  "requires_dist": [
    "fsspec>=0.8.7",
    "oci>=2.43.1",
    "requests"
  ],
  "requires_python": ">=3.6",
  "summary": "convenient filesystem interface over oracle cloud's object storage",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "allen.hosler@oracle.com",
    "oracle_cloud_infrastructure_data_science"
  ],
  "kwds": "ocifs ocifilesystem ocifs_iam_type oci ocifs_logging_level",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ocifs",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_fsspec",
    "pypi_oci",
    "pypi_requests"
  ]
}
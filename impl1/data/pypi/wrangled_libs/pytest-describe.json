{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": ".. image:: https://badge.fury.io/py/pytest-describe.svg\n    :target: https://pypi.org/project/pytest-describe/\n    :alt: pypi version\n\n.. image:: https://github.com/pytest-dev/pytest-describe/actions/workflows/main.yml/badge.svg\n    :target: https://github.com/pytest-dev/pytest-describe/actions\n    :alt: workflow status\n\ndescribe-style plugin for pytest\n================================\n\npytest-describe is a plugin for pytest that allows tests to be written in\narbitrary nested describe-blocks, similar to rspec (ruby) and jasmine\n(javascript).\n\nthe main inspiration for this was a `video\n<https://www.youtube.com/watch?v=jjle8l8fry0>`_ by gary bernhardt.\n\ninstallation\n------------\n\nyou guessed it::\n\n    pip install pytest-describe\n\n\nexample\n-------\n\n.. code-block:: python\n\n    def describe_list():\n\n        @pytest.fixture\n        def list():\n            return []\n\n        def describe_append():\n\n            def adds_to_end_of_list(list):\n                list.append('foo')\n                list.append('bar')\n                assert list == ['foo', 'bar']\n\n        def describe_remove():\n\n            @pytest.fixture\n            def list():\n                return ['foo', 'bar']\n\n            def removes_item_from_list(list):\n                list.remove('foo')\n                assert list == ['bar']\n\n\nwhy bother?\n===========\n\ni've found that quite often my tests have one \"dimension\" more than my production\ncode. the production code is organized into packages, modules, classes\n(sometimes), and functions. i like to organize my tests in the same way, but\ntests also have different *cases* for each function. this tends to end up with\na set of tests for each module (or class), where each test has to name both a\nfunction and a *case*. for instance:\n\n.. code-block:: python\n\n    def test_my_function_with_default_arguments():\n    def test_my_function_with_some_other_arguments():\n    def test_my_function_throws_exception():\n    def test_my_function_handles_exception():\n    def test_some_other_function_returns_true():\n    def test_some_other_function_returns_false():\n\nit's much nicer to do this:\n\n.. code-block:: python\n\n    def describe_my_function():\n        def with_default_arguments():\n        def with_some_other_arguments():\n        def it_throws_exception():\n        def it_handles_exception():\n\n    def describe_some_other_function():\n        def it_returns_true():\n        def it_returns_false():\n\nit has the additional advantage that you can have marks and fixtures that apply\nlocally to each group of test function.\n\nwith pytest, it's possible to organize tests in a similar way with classes.\nhowever, i think classes are awkward. i don't think the convention of using\ncamel-case names for classes fit very well when testing functions in different\ncases. in addition, every test function must take a \"self\" argument that is\nnever used.\n\nthe pytest-describe plugin allows organizing your tests in the nicer way shown\nabove using describe-blocks. the functions inside the describe-blocks need not\nfollow any special naming convention, they are always executed as tests unless\nthey start with an underscore. the functions used for describe-blocks must\nstart with ``describe_``, but you can configure this prefix with the setting\n``describe_prefixes`` in the pytest configuration file.\n\n\nshared behaviors\n================\n\nif you've used rspec's shared examples or test class inheritance, then you may\nbe familiar with the benefit of having the same tests apply to\nmultiple \"subjects\" or \"suts\" (system under test).\n\n.. code-block:: python\n\n    from pytest import fixture\n    from pytest_describe import behaves_like\n\n    def a_duck():\n        def it_quacks(sound):\n            assert sound == \"quack\"\n\n    @behaves_like(a_duck)\n    def describe_something_that_quacks():\n        @fixture\n        def sound():\n            return \"quack\"\n\n        # the it_quacks test in this describe will pass\n\n    @behaves_like(a_duck)\n    def describe_something_that_barks():\n        @fixture\n        def sound():\n            return \"bark\"\n\n        # the it_quacks test in this describe will fail (as expected)\n\nfixtures defined in the block that includes the shared behavior take precedence\nover fixtures defined in the shared behavior. this rule only applies to\nfixtures, not to other functions (nested describe blocks and tests). instead,\nthey are all collected as separate tests.\n",
  "docs_url": null,
  "keywords": "test,unittest,plugin,describe",
  "license": "mit",
  "name": "pytest-describe",
  "package_url": "https://pypi.org/project/pytest-describe/",
  "project_url": "https://pypi.org/project/pytest-describe/",
  "project_urls": {
    "Homepage": "https://github.com/pytest-dev/pytest-describe",
    "Source": "https://github.com/pytest-dev/pytest-describe",
    "Tracker": "https://github.com/pytest-dev/pytest-describe/issues"
  },
  "release_url": "https://pypi.org/project/pytest-describe/2.1.0/",
  "requires_dist": [
    "pytest (<8,>=4.6)"
  ],
  "requires_python": ">=3.7",
  "summary": "describe-style plugin for pytest",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "christoph_zwerschke",
    "cito@online.de",
    "robin_pedersen",
    "robinpeder@gmail.com"
  ],
  "kwds": "pytest_describe pytest rspec describe_prefixes test_my_function_with_some_other_arguments",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_describe",
  "homepage": "https://github.com/pytest-dev/pytest-describe",
  "release_count": 17,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
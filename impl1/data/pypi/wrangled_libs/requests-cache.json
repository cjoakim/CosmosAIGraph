{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "[![](docs/_static/requests-cache-logo-header.png)](https://requests-cache.readthedocs.io)\n\n[![build](https://github.com/requests-cache/requests-cache/actions/workflows/build.yml/badge.svg)](https://github.com/requests-cache/requests-cache/actions/workflows/build.yml)\n[![codecov](https://codecov.io/gh/requests-cache/requests-cache/branch/main/graph/badge.svg?token=fnybzvwbt2)](https://codecov.io/gh/requests-cache/requests-cache)\n[![documentation](https://img.shields.io/readthedocs/requests-cache/stable)](https://requests-cache.readthedocs.io/en/stable/)\n[![code shelter](https://www.codeshelter.co/static/badges/badge-flat.svg)](https://www.codeshelter.co/)\n\n[![pypi](https://img.shields.io/pypi/v/requests-cache?color=blue)](https://pypi.org/project/requests-cache)\n[![conda](https://img.shields.io/conda/vn/conda-forge/requests-cache?color=blue)](https://anaconda.org/conda-forge/requests-cache)\n[![pypi - python versions](https://img.shields.io/pypi/pyversions/requests-cache)](https://pypi.org/project/requests-cache)\n[![pypi - downloads](https://img.shields.io/pypi/dm/requests-cache?color=blue)](https://pypi.org/project/requests-cache)\n\n## summary\n**requests-cache** is a persistent http cache that provides an easy way to get better\nperformance with the python [requests](https://requests.readthedocs.io/) library.\n\n<!-- rtd-ignore -->\ncomplete project documentation can be found at [requests-cache.readthedocs.io](https://requests-cache.readthedocs.io).\n<!-- end-rtd-ignore -->\n\n## features\n* \ud83c\udf70 **ease of use:** keep using the `requests` library you're already familiar with. add caching\n  with a [drop-in replacement](https://requests-cache.readthedocs.io/en/stable/user_guide/general.html#sessions)\n  for `requests.session`, or\n  [install globally](https://requests-cache.readthedocs.io/en/stable/user_guide/general.html#patching)\n  to add transparent caching to all `requests` functions.\n* \ud83d\ude80 **performance:** get sub-millisecond response times for cached responses. when they expire, you\n  still save time with\n  [conditional requests](https://requests-cache.readthedocs.io/en/stable/user_guide/headers.html#conditional-requests).\n* \ud83d\udcbe **persistence:** works with several\n  [storage backends](https://requests-cache.readthedocs.io/en/stable/user_guide/backends.html)\n  including sqlite, redis, mongodb, and dynamodb; or save responses as plain json files, yaml,\n  and more\n* \ud83d\udd57 **expiration:** use\n  [cache-control](https://requests-cache.readthedocs.io/en/stable/user_guide/headers.html#cache-control)\n  and other standard http headers, define your own expiration schedule, keep your cache clutter-free\n  with backends that natively support ttl, or any combination of strategies\n* \u2699\ufe0f **customization:** works out of the box with zero config, but with a robust set of features for\n  configuring and extending the library to suit your needs\n* \ud83e\udde9 **compatibility:** can be combined with other\n  [popular libraries based on requests](https://requests-cache.readthedocs.io/en/stable/user_guide/compatibility.html)\n\n## quickstart\nfirst, install with pip:\n```bash\npip install requests-cache\n```\n\nthen, use [requests_cache.cachedsession](https://requests-cache.readthedocs.io/en/stable/session.html)\nto make your requests. it behaves like a normal\n[requests.session](https://requests.readthedocs.io/en/latest/user/advanced/#session-objects),\nbut with caching behavior.\n\nto illustrate, we'll call an endpoint that adds a delay of 1 second, simulating a slow or\nrate-limited website.\n\n**this takes 1 minute:**\n```python\nimport requests\n\nsession = requests.session()\nfor i in range(60):\n    session.get('https://httpbin.org/delay/1')\n```\n\n**this takes 1 second:**\n```python\nimport requests_cache\n\nsession = requests_cache.cachedsession('demo_cache')\nfor i in range(60):\n    session.get('https://httpbin.org/delay/1')\n```\n\nwith caching, the response will be fetched once, saved to `demo_cache.sqlite`, and subsequent\nrequests will return the cached response near-instantly.\n\n### patching\nif you don't want to manage a session object, or just want to quickly test it out in your\napplication without modifying any code, requests-cache can also be installed globally, and all\nrequests will be transparently cached:\n```python\nimport requests\nimport requests_cache\n\nrequests_cache.install_cache('demo_cache')\nrequests.get('https://httpbin.org/delay/1')\n```\n\n### headers and expiration\nby default, requests-cache will keep cached responses indefinitely. in most cases, you will want to\nuse one of the two following strategies to balance cache freshness and performance:\n\n**define exactly how long to keep responses:**\n\nuse the `expire_after` parameter to set a fixed expiration time for all responses:\n```python\nfrom requests_cache import cachedsession\nfrom datetime import timedelta\n\n# keep responses for 360 seconds\nsession = cachedsession('demo_cache', expire_after=360)\n\n# or use timedelta objects to specify other units of time\nsession = cachedsession('demo_cache', expire_after=timedelta(hours=1))\n```\nsee [expiration](https://requests-cache.readthedocs.io/en/stable/user_guide/expiration.html) for\nmore features and settings.\n\n**use cache-control headers:**\n\nuse the `cache_control` parameter to enable automatic expiration based on `cache-control` and other\nstandard http headers sent by the server:\n```python\nfrom requests_cache import cachedsession\n\nsession = cachedsession('demo_cache', cache_control=true)\n```\nsee [cache headers](https://requests-cache.readthedocs.io/en/stable/user_guide/headers.html)\nfor more details.\n\n\n### settings\nthe default settings work well for most use cases, but there are plenty of ways to customize\ncaching behavior when needed. here is a quick example of some of the options available:\n```python\nfrom datetime import timedelta\nfrom requests_cache import cachedsession\n\nsession = cachedsession(\n    'demo_cache',\n    use_cache_dir=true,                # save files in the default user cache dir\n    cache_control=true,                # use cache-control response headers for expiration, if available\n    expire_after=timedelta(days=1),    # otherwise expire responses after one day\n    allowable_codes=[200, 400],        # cache 400 responses as a solemn reminder of your failures\n    allowable_methods=['get', 'post'], # cache whatever http methods you want\n    ignored_parameters=['api_key'],    # don't match this request param, and redact if from the cache\n    match_headers=['accept-language'], # cache a different response per language\n    stale_if_error=true,               # in case of request errors, use stale cache data if possible\n)\n```\n\n<!-- rtd-ignore -->\n## next steps\nto find out more about what you can do with requests-cache, see:\n\n* [user guide](https://requests-cache.readthedocs.io/en/stable/user_guide.html)\n* [examples](https://requests-cache.readthedocs.io/en/stable/examples.html)\n* [api reference](https://requests-cache.readthedocs.io/en/stable/reference.html)\n* [project info](https://requests-cache.readthedocs.io/en/stable/project_info.html)\n<!-- end-rtd-ignore -->\n\n",
  "docs_url": null,
  "keywords": "requests,python-requests,cache,http,http-client,web,webscraping,performance,sqlite,redis,mongodb,gridfs,dynamodb",
  "license": "bsd-2-clause",
  "name": "requests-cache",
  "package_url": "https://pypi.org/project/requests-cache/",
  "project_url": "https://pypi.org/project/requests-cache/",
  "project_urls": {
    "Changelog": "https://requests-cache.readthedocs.io/en/stable/project_info/history.html",
    "Documentation": "https://requests-cache.readthedocs.io",
    "Homepage": "https://github.com/requests-cache/requests-cache",
    "Issues": "https://github.com/requests-cache/requests-cache/issues",
    "Repository": "https://github.com/requests-cache/requests-cache"
  },
  "release_url": "https://pypi.org/project/requests-cache/1.1.1/",
  "requires_dist": [
    "attrs (>=21.2)",
    "boto3 (>=1.15) ; extra == \"dynamodb\" or extra == \"all\"",
    "botocore (>=1.18) ; extra == \"dynamodb\" or extra == \"all\"",
    "bson (>=0.5) ; extra == \"bson\"",
    "cattrs (>=22.2)",
    "furo (>=2023.3,<2024.0) ; extra == \"docs\"",
    "itsdangerous (>=2.0) ; extra == \"security\" or extra == \"all\"",
    "linkify-it-py (>=2.0,<3.0) ; extra == \"docs\"",
    "myst-parser (>=1.0,<2.0) ; extra == \"docs\"",
    "platformdirs (>=2.5)",
    "pymongo (>=3) ; extra == \"mongodb\" or extra == \"all\"",
    "pyyaml (>=5.4) ; extra == \"yaml\" or extra == \"all\"",
    "redis (>=3) ; extra == \"redis\" or extra == \"all\"",
    "requests (>=2.22)",
    "sphinx (>=5.0.2,<6.0.0) ; extra == \"docs\"",
    "sphinx-autodoc-typehints (>=1.19) ; extra == \"docs\"",
    "sphinx-automodapi (>=0.14) ; extra == \"docs\"",
    "sphinx-copybutton (>=0.5) ; extra == \"docs\"",
    "sphinx-design (>=0.2) ; extra == \"docs\"",
    "sphinx-notfound-page (>=0.8) ; extra == \"docs\"",
    "sphinxcontrib-apidoc (>=0.3) ; extra == \"docs\"",
    "sphinxext-opengraph (>=0.6) ; extra == \"docs\"",
    "ujson (>=5.4) ; extra == \"json\" or extra == \"all\"",
    "url-normalize (>=1.4)",
    "urllib3 (>=1.25.5)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "a persistent cache for python requests",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "roman_haritonov"
  ],
  "kwds": "requests_cache cache caching cache_control requests",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_requests_cache",
  "homepage": "https://github.com/requests-cache/requests-cache",
  "release_count": 55,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_boto3",
    "pypi_botocore",
    "pypi_bson",
    "pypi_cattrs",
    "pypi_furo",
    "pypi_itsdangerous",
    "pypi_linkify_it_py",
    "pypi_myst_parser",
    "pypi_platformdirs",
    "pypi_pymongo",
    "pypi_pyyaml",
    "pypi_redis",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_automodapi",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_design",
    "pypi_sphinx_notfound_page",
    "pypi_sphinxcontrib_apidoc",
    "pypi_sphinxext_opengraph",
    "pypi_ujson",
    "pypi_url_normalize",
    "pypi_urllib3"
  ]
}
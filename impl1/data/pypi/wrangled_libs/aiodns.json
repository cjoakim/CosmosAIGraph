{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "===============================\nsimple dns resolver for asyncio\n===============================\n\n.. image:: https://badge.fury.io/py/aiodns.png\n    :target: https://pypi.org/project/aiodns/\n\n.. image:: https://github.com/saghul/aiodns/workflows/ci/badge.svg\n    :target: https://github.com/saghul/aiodns/actions\n\naiodns provides a simple way for doing asynchronous dns resolutions using `pycares <https://github.com/saghul/pycares>`_.\n\n\nexample\n=======\n\n.. code:: python\n\n    import asyncio\n    import aiodns\n\n    loop = asyncio.get_event_loop()\n    resolver = aiodns.dnsresolver(loop=loop)\n\n    async def query(name, query_type):\n        return await resolver.query(name, query_type)\n\n    coro = query('google.com', 'a')\n    result = loop.run_until_complete(coro)\n\n\nthe following query types are supported: a, aaaa, any, caa, cname, mx, naptr, ns, ptr, soa, srv, txt.\n\n\napi\n===\n\nthe api is pretty simple, three functions are provided in the ``dnsresolver`` class:\n\n* ``query(host, type)``: do a dns resolution of the given type for the given hostname. it returns an\n  instance of ``asyncio.future``. the actual result of the dns query is taken directly from pycares.\n  as of version 1.0.0 of aiodns (and pycares, for that matter) results are always namedtuple-like\n  objects with different attributes. please check the `documentation \n  <http://pycares.readthedocs.org/en/latest/channel.html#pycares.channel.query>`_\n  for the result fields.\n* ``gethostbyname(host, socket_family)``: do a dns resolution for the given\n  hostname and the desired type of address family (i.e. ``socket.af_inet``).\n  while ``query()`` always performs a request to a dns server,\n  ``gethostbyname()`` first looks into ``/etc/hosts`` and thus can resolve\n  local hostnames (such as ``localhost``).  please check `the documentation\n  <http://pycares.readthedocs.io/en/latest/channel.html#pycares.channel.gethostbyname>`_\n  for the result fields. the actual result of the call is a ``asyncio.future``.\n* ``gethostbyaddr(name)``: make a reverse lookup for an address.\n* ``cancel()``: cancel all pending dns queries. all futures will get ``dnserror`` exception set, with\n  ``ares_ecancelled`` errno.\n\n\nnote for windows users\n======================\n\nthis library requires the asyncio loop to be a `selectoreventloop`, which is not the default on windows since\npython 3.8.\n\nthe default can be changed as follows (do this very early in your application):\n\n.. code:: python\n\n    asyncio.set_event_loop_policy(asyncio.windowsselectoreventlooppolicy())\n\nthis may have other implications for the rest of your codebase, so make sure to test thoroughly.\n\n\nrunning the test suite\n======================\n\nto run the test suite: ``python tests.py``\n\n\nauthor\n======\n\nsa\u00fal ibarra corretg\u00e9 <s@saghul.net>\n\n\nlicense\n=======\n\naiodns uses the mit license, check license file.\n\n\npython versions\n===============\n\npython >= 3.6 are supported.\n\n\ncontributing\n============\n\nif you'd like to contribute, fork the project, make a patch and send a pull\nrequest. have a look at the surrounding code and please, make yours look\nalike :-)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aiodns",
  "package_url": "https://pypi.org/project/aiodns/",
  "project_url": "https://pypi.org/project/aiodns/",
  "project_urls": {
    "Homepage": "https://github.com/saghul/aiodns"
  },
  "release_url": "https://pypi.org/project/aiodns/3.1.1/",
  "requires_dist": [
    "pycares >=4.0.0"
  ],
  "requires_python": "",
  "summary": "simple dns resolver for asyncio",
  "version": "3.1.1",
  "releases": [],
  "developers": [
    "s@saghul.net"
  ],
  "kwds": "resolver dnsresolver dns aiodns resolve",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiodns",
  "homepage": "https://github.com/saghul/aiodns",
  "release_count": 17,
  "dependency_ids": [
    "pypi_pycares"
  ]
}
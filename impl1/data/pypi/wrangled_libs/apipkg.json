{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries"
  ],
  "description": "welcome to apipkg !\n-------------------\n\nwith apipkg you can control the exported namespace of a python package and\ngreatly reduce the number of imports for your users.\nit is a `small pure python module`_ that works on cpython 3.7+,\njython and pypy. it cooperates well with python's ``help()`` system,\ncustom importers (pep302) and common command-line completion tools.\n\nusage is very simple: you can require 'apipkg' as a dependency or you\ncan copy paste the ~200 lines of code into your project.\n\n\ntutorial example\n-------------------\n\nhere is a simple ``mypkg`` package that specifies one namespace\nand exports two objects imported from different modules:\n\n.. code-block:: python\n\n    # mypkg/__init__.py\n    import apipkg\n    apipkg.initpkg(__name__, {\n        'path': {\n            'class1': \"_mypkg.somemodule:class1\",\n            'clsattr': \"_mypkg.othermodule:class2.attr\",\n        }\n    }\n\nthe package is initialized with a dictionary as namespace.\n\nyou need to create a ``_mypkg`` package with a ``somemodule.py``\nand ``othermodule.py`` containing the respective classes.\nthe ``_mypkg`` is not special - it's a completely\nregular python package.\n\nnamespace dictionaries contain ``name: value`` mappings\nwhere the value may be another namespace dictionary or\na string specifying an import location.  on accessing\nan namespace attribute an import will be performed:\n\n.. code-block:: pycon\n\n    >>> import mypkg\n    >>> mypkg.path\n    <apimodule 'mypkg.path'>\n    >>> mypkg.path.class1   # '_mypkg.somemodule' gets imported now\n    <class _mypkg.somemodule.class1 at 0xb7d428fc>\n    >>> mypkg.path.clsattr  # '_mypkg.othermodule' gets imported now\n    4 # the value of _mypkg.othermodule.class2.attr\n\nthe ``mypkg.path`` namespace and its two entries are\nloaded when they are accessed.   this means:\n\n* lazy loading - only what is actually needed is ever loaded\n\n* only the root \"mypkg\" ever needs to be imported to get\n  access to the complete functionality\n\n* the underlying modules are also accessible, for example:\n\n.. code-block:: python\n\n    from mypkg.sub import class1\n\n\nincluding apipkg in your package\n--------------------------------------\n\nif you don't want to add an ``apipkg`` dependency to your package you\ncan copy the `apipkg.py`_ file somewhere to your own package,\nfor example ``_mypkg/apipkg.py`` in the above example.  you\nthen import the ``initpkg`` function from that new place and\nare good to go.\n\n.. _`small pure python module`:\n.. _`apipkg.py`: https://github.com/pytest-dev/apipkg/blob/master/src/apipkg/__init__.py\n\nfeedback?\n-----------------------\n\nif you have questions you are welcome to\n\n* join the **#pytest** channel on irc.libera.chat_\n  (using an irc client, via webchat_, or via matrix_).\n* create an issue on the bugtracker_\n\n.. _irc.libera.chat: ircs://irc.libera.chat:6697/#pytest\n.. _webchat: https://web.libera.chat/#pytest\n.. _matrix: https://matrix.to/#/%23pytest:libera.chat\n.. _bugtracker: https://github.com/pytest-dev/apipkg/issues\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "apipkg",
  "package_url": "https://pypi.org/project/apipkg/",
  "project_url": "https://pypi.org/project/apipkg/",
  "project_urls": {
    "Homepage": "https://github.com/pytest-dev/apipkg"
  },
  "release_url": "https://pypi.org/project/apipkg/3.0.2/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "apipkg: namespace control and lazy-import mechanism",
  "version": "3.0.2",
  "releases": [],
  "developers": [
    "holger_krekel",
    "opensource+apipkg@ronnypfannschmidt.de"
  ],
  "kwds": "cpython apipkg apimodule pycon python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_apipkg",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": []
}
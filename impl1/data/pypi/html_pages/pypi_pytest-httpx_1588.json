{
  "libtype": "pypi",
  "libname": "pytest-httpx",
  "url": "https://colin-b.github.io/pytest_httpx/",
  "html": "<!DOCTYPE html><html lang=\"en-US\">  <head>    <meta charset=\"UTF-8\"><!-- Begin Jekyll SEO tag v2.8.0 --><title>pytest_httpx | pytest fixture to mock HTTPX</title><meta name=\"generator\" content=\"Jekyll v3.9.5\" /><meta property=\"og:title\" content=\"pytest_httpx\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"pytest fixture to mock HTTPX\" /><meta property=\"og:description\" content=\"pytest fixture to mock HTTPX\" /><link rel=\"canonical\" href=\"https://colin-b.github.io/pytest_httpx/\" /><meta property=\"og:url\" content=\"https://colin-b.github.io/pytest_httpx/\" /><meta property=\"og:site_name\" content=\"pytest_httpx\" /><meta property=\"og:type\" content=\"website\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"pytest_httpx\" /><script type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"WebSite\",\"description\":\"pytest fixture to mock HTTPX\",\"headline\":\"pytest_httpx\",\"name\":\"pytest_httpx\",\"url\":\"https://colin-b.github.io/pytest_httpx/\"}</script><!-- End Jekyll SEO tag -->    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">    <link rel=\"preload\" href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700&display=swap\" as=\"style\" type=\"text/css\" crossorigin>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"theme-color\" content=\"#157878\">    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">    <link rel=\"stylesheet\" href=\"/pytest_httpx/assets/css/style.css?v=36c50628831767fa86b7afc4f278054c2c5037ba\">    <!-- start custom head snippets, customize with your own _includes/head-custom.html file --><!-- Setup Google Analytics --><!-- You can set your favicon here --><!-- link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/pytest_httpx/favicon.ico\" --><!-- end custom head snippets -->  </head>  <body>    <a id=\"skip-to-content\" href=\"#content\">Skip to the content.</a>    <header class=\"page-header\" role=\"banner\">      <h1 class=\"project-name\">pytest_httpx</h1>      <h2 class=\"project-tagline\">pytest fixture to mock HTTPX</h2>              <a href=\"https://github.com/Colin-b/pytest_httpx\" class=\"btn\">View on GitHub</a>                </header>    <main id=\"content\" class=\"main-content\" role=\"main\">      <h2 align=\"center\">Send responses to HTTPX using pytest</h2><p align=\"center\"><a href=\"https://pypi.org/project/pytest-httpx/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/pytest_httpx\" /></a><a href=\"https://github.com/Colin-b/pytest_httpx/actions\"><img alt=\"Build status\" src=\"https://github.com/Colin-b/pytest_httpx/workflows/Release/badge.svg\" /></a><a href=\"https://github.com/Colin-b/pytest_httpx/actions\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\" /></a><a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" /></a><a href=\"https://github.com/Colin-b/pytest_httpx/actions\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-208 passed-blue\" /></a><a href=\"https://pypi.org/project/pytest-httpx/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/pytest_httpx\" /></a></p><blockquote>  <p>Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).</p>  <p>However, current state can be considered as stable.</p></blockquote><p>Once installed, <code class=\"language-plaintext highlighter-rouge\">httpx_mock</code> <a href=\"https://docs.pytest.org/en/latest/\"><code class=\"language-plaintext highlighter-rouge\">pytest</code></a> fixture will make sure every <a href=\"https://www.python-httpx.org\"><code class=\"language-plaintext highlighter-rouge\">httpx</code></a> request will be replied to with user provided responses.</p><ul>  <li><a href=\"#add-responses\">Add responses</a>    <ul>      <li><a href=\"#add-json-response\">JSON body</a></li>      <li><a href=\"#reply-with-custom-body\">Custom body</a></li>      <li><a href=\"#add-multipart-response\">Multipart body (files, \u2026)</a></li>      <li><a href=\"#add-non-200-response\">HTTP status code</a></li>      <li><a href=\"#reply-with-custom-headers\">HTTP headers</a></li>      <li><a href=\"#add-http/2.0-response\">HTTP/2.0</a></li>    </ul>  </li>  <li><a href=\"#dynamic-responses\">Add dynamic responses</a></li>  <li><a href=\"#raising-exceptions\">Raising exceptions</a></li>  <li><a href=\"#check-sent-requests\">Check requests</a></li>  <li><a href=\"#do-not-mock-some-requests\">Do not mock some requests</a></li>  <li><a href=\"#migrating-to-pytest-httpx\">Migrating</a>    <ul>      <li><a href=\"#from-responses\">responses</a></li>      <li><a href=\"#from-aioresponses\">aioresponses</a></li>    </ul>  </li></ul><h2 id=\"add-responses\">Add responses</h2><p>You can register responses for both sync and async <a href=\"https://www.python-httpx.org\"><code class=\"language-plaintext highlighter-rouge\">HTTPX</code></a> requests.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">asyncio</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_something_async</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><p>If all registered responses are not sent back during test execution, the test case will fail at teardown.</p><p>This behavior can be disabled thanks to the <code class=\"language-plaintext highlighter-rouge\">assert_all_responses_were_requested</code> fixture:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">assert_all_responses_were_requested</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"bp\">False</span></code></pre></div></div><p>Default response is a HTTP/1.1 200 (OK) without any body.</p><h3 id=\"how-response-is-selected\">How response is selected</h3><p>In case more than one response match request, the first one not yet sent (according to the registration order) will be sent.</p><p>In case all matching responses have been sent, the last one (according to the registration order) will be sent.</p><p>You can add criteria so that response will be sent only in case of a more specific matching.</p><h4 id=\"matching-on-url\">Matching on URL</h4><p><code class=\"language-plaintext highlighter-rouge\">url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\">httpx.URL</a> instance.</p><p>Matching is performed on the full URL, query parameters included.</p><p>Order of parameters in the query string does not matter, however order of values do matter if the same parameter is provided more than once.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_url</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url?a=1&amp;b=2\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response1</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url?a=1&amp;b=2\"</span><span class=\"p\">)</span>        <span class=\"n\">response2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url?b=2&amp;a=1\"</span><span class=\"p\">)</span></code></pre></div></div><h4 id=\"matching-on-http-method\">Matching on HTTP method</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">method</code> parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) to reply to.</p><p><code class=\"language-plaintext highlighter-rouge\">method</code> parameter must be a string. It will be upper-cased, so it can be provided lower cased.</p><p>Matching is performed on equality.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_post</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"POST\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">test_put</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"PUT\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">test_delete</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"DELETE\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">test_patch</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"PATCH\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">test_head</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"HEAD\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>    </code></pre></div></div><h4 id=\"matching-on-proxy-url\">Matching on proxy URL</h4><p><code class=\"language-plaintext highlighter-rouge\">proxy_url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\">httpx.URL</a> instance.</p><p>Matching is performed on the full proxy URL, query parameters included.</p><p>Order of parameters in the query string does not matter, however order of values do matter if the same parameter is provided more than once.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_proxy_url</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">proxy_url</span><span class=\"o\">=</span><span class=\"s\">\"http://test_proxy_url?b=1&amp;a=2\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"s\">\"http://test_proxy_url?a=2&amp;b=1\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><h4 id=\"matching-on-http-headers\">Matching on HTTP headers</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">match_headers</code> parameter to specify the HTTP headers to reply to.</p><p>Matching is performed on equality for each provided header.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_headers_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'User-Agent'</span><span class=\"p\">:</span> <span class=\"s\">'python-httpx/0.25.0'</span><span class=\"p\">})</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><h4 id=\"matching-on-http-body\">Matching on HTTP body</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">match_content</code> parameter to specify the full HTTP body to reply to.</p><p>Matching is performed on equality.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_content_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the body\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the body\"</span><span class=\"p\">)</span></code></pre></div></div><h5 id=\"matching-on-http-json-body\">Matching on HTTP JSON body</h5><p>Use <code class=\"language-plaintext highlighter-rouge\">match_json</code> parameter to specify the JSON decoded HTTP body to reply to.</p><p>Matching is performed on equality. You can however use <code class=\"language-plaintext highlighter-rouge\">unittest.mock.ANY</code> to do partial matching.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"kn\">from</span> <span class=\"nn\">unittest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">ANY</span><span class=\"k\">def</span> <span class=\"nf\">test_json_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"a\"</span><span class=\"p\">:</span> <span class=\"s\">\"json\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"a\"</span><span class=\"p\">:</span> <span class=\"s\">\"json\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>        <span class=\"k\">def</span> <span class=\"nf\">test_partial_json_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"a\"</span><span class=\"p\">:</span> <span class=\"s\">\"json\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">:</span> <span class=\"n\">ANY</span><span class=\"p\">})</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"a\"</span><span class=\"p\">:</span> <span class=\"s\">\"json\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span></code></pre></div></div><p>Note that <code class=\"language-plaintext highlighter-rouge\">match_content</code> cannot be provided if <code class=\"language-plaintext highlighter-rouge\">match_json</code> is also provided.</p><h3 id=\"add-json-response\">Add JSON response</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">json</code> parameter to add a JSON response using python values.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_json</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">:</span> <span class=\"s\">\"value2\"</span><span class=\"p\">}])</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"s\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">:</span> <span class=\"s\">\"value2\"</span><span class=\"p\">}]</span>    </code></pre></div></div><p>Note that the <code class=\"language-plaintext highlighter-rouge\">content-type</code> header will be set to <code class=\"language-plaintext highlighter-rouge\">application/json</code> by default in the response.</p><h3 id=\"reply-with-custom-body\">Reply with custom body</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">text</code> parameter to reply with a custom body by providing UTF-8 encoded string.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_str_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s\">\"This is my UTF-8 content\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s\">\"This is my UTF-8 content\"</span></code></pre></div></div><p>Use <code class=\"language-plaintext highlighter-rouge\">content</code> parameter to reply with a custom body by providing bytes.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_bytes_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is my bytes content\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">content</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s\">\"This is my bytes content\"</span>    </code></pre></div></div><p>Use <code class=\"language-plaintext highlighter-rouge\">html</code> parameter to reply with a custom body by providing UTF-8 encoded string.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_html_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"o\">=</span><span class=\"s\">\"&lt;body&gt;This is &lt;p&gt; HTML content&lt;/body&gt;\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s\">\"&lt;body&gt;This is &lt;p&gt; HTML content&lt;/body&gt;\"</span></code></pre></div></div><h3 id=\"reply-by-streaming-chunks\">Reply by streaming chunks</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">stream</code> parameter to stream chunks that you specify.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">,</span> <span class=\"n\">IteratorStream</span><span class=\"k\">def</span> <span class=\"nf\">test_sync_streaming</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">IteratorStream</span><span class=\"p\">([</span><span class=\"sa\">b</span><span class=\"s\">\"part 1\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s\">\"part 2\"</span><span class=\"p\">]))</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>            <span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">iter_raw</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"part 1\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s\">\"part 2\"</span><span class=\"p\">]</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">asyncio</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_async_streaming</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">IteratorStream</span><span class=\"p\">([</span><span class=\"sa\">b</span><span class=\"s\">\"part 1\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s\">\"part 2\"</span><span class=\"p\">]))</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>            <span class=\"k\">assert</span> <span class=\"p\">[</span><span class=\"n\">part</span> <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">aiter_raw</span><span class=\"p\">()]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s\">\"part 1\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s\">\"part 2\"</span><span class=\"p\">]</span>    </code></pre></div></div><h3 id=\"add-multipart-response\">Add multipart response</h3><p>Use the httpx <code class=\"language-plaintext highlighter-rouge\">MultipartStream</code> via the <code class=\"language-plaintext highlighter-rouge\">stream</code> parameter to send a multipart response.</p><p>Reach out to <code class=\"language-plaintext highlighter-rouge\">httpx</code> developers if you need this publicly exposed as <a href=\"https://github.com/encode/httpx/issues/872#issuecomment-633584819\">this is not a standard use case</a>.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">httpx._multipart</span> <span class=\"kn\">import</span> <span class=\"n\">MultipartStream</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_multipart_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">MultipartStream</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s\">\"value1\"</span><span class=\"p\">},</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"file1\"</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s\">\"content of file 1\"</span><span class=\"p\">},</span> <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"2256d3a36d2a61a1eba35a22bee5c74a\"</span><span class=\"p\">))</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s\">'''--2256d3a36d2a61a1eba35a22bee5c74a</span><span class=\"se\">\\r</span><span class=\"s\">Content-Disposition: form-data; name=\"key1\"</span><span class=\"se\">\\r</span><span class=\"s\"></span><span class=\"se\">\\r</span><span class=\"s\">value1</span><span class=\"se\">\\r</span><span class=\"s\">--2256d3a36d2a61a1eba35a22bee5c74a</span><span class=\"se\">\\r</span><span class=\"s\">Content-Disposition: form-data; name=\"file1\"; filename=\"upload\"</span><span class=\"se\">\\r</span><span class=\"s\">Content-Type: application/octet-stream</span><span class=\"se\">\\r</span><span class=\"s\"></span><span class=\"se\">\\r</span><span class=\"s\">content of file 1</span><span class=\"se\">\\r</span><span class=\"s\">--2256d3a36d2a61a1eba35a22bee5c74a--</span><span class=\"se\">\\r</span><span class=\"s\">'''</span>    </code></pre></div></div><h3 id=\"add-non-200-response\">Add non 200 response</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">status_code</code> parameter to specify the HTTP status code of the response.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_status_code</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span></code></pre></div></div><h3 id=\"reply-with-custom-headers\">Reply with custom headers</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">headers</code> parameter to specify the extra headers of the response.</p><p>Any valid httpx headers type is supported, you can submit headers as a dict (str or bytes), a list of 2-tuples (str or bytes) or a <code class=\"language-plaintext highlighter-rouge\">httpx.Header</code> instance.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_headers_as_str_dict</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"X-Header1\"</span><span class=\"p\">:</span> <span class=\"s\">\"Test value\"</span><span class=\"p\">})</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s\">\"x-header1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Test value\"</span><span class=\"k\">def</span> <span class=\"nf\">test_headers_as_str_tuple_list</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s\">\"X-Header1\"</span><span class=\"p\">,</span> <span class=\"s\">\"Test value\"</span><span class=\"p\">)])</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s\">\"x-header1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Test value\"</span><span class=\"k\">def</span> <span class=\"nf\">test_headers_as_httpx_headers</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Headers</span><span class=\"p\">({</span><span class=\"sa\">b</span><span class=\"s\">\"X-Header1\"</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s\">\"Test value\"</span><span class=\"p\">}))</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s\">\"x-header1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Test value\"</span></code></pre></div></div><h4 id=\"reply-with-cookies\">Reply with cookies</h4><p>Cookies are sent in the <code class=\"language-plaintext highlighter-rouge\">set-cookie</code> HTTP header.</p><p>You can then send cookies in the response by setting the <code class=\"language-plaintext highlighter-rouge\">set-cookie</code> header with <a href=\"(https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)\">the value following key=value format</a>.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_cookie</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"set-cookie\"</span><span class=\"p\">:</span> <span class=\"s\">\"key=value\"</span><span class=\"p\">})</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>    <span class=\"k\">assert</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">cookies</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s\">\"key\"</span><span class=\"p\">:</span> <span class=\"s\">\"value\"</span><span class=\"p\">}</span><span class=\"k\">def</span> <span class=\"nf\">test_cookies</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s\">\"set-cookie\"</span><span class=\"p\">,</span> <span class=\"s\">\"key=value\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"set-cookie\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2=value2\"</span><span class=\"p\">)])</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>    <span class=\"k\">assert</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">cookies</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s\">\"key\"</span><span class=\"p\">:</span> <span class=\"s\">\"value\"</span><span class=\"p\">,</span> <span class=\"s\">\"key2\"</span><span class=\"p\">:</span> <span class=\"s\">\"value2\"</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"add-http20-response\">Add HTTP/2.0 response</h3><p>Use <code class=\"language-plaintext highlighter-rouge\">http_version</code> parameter to specify the HTTP protocol version of the response.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_http_version</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">http_version</span><span class=\"o\">=</span><span class=\"s\">\"HTTP/2.0\"</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">).</span><span class=\"n\">http_version</span> <span class=\"o\">==</span> <span class=\"s\">\"HTTP/2.0\"</span></code></pre></div></div><h2 id=\"add-callbacks\">Add callbacks</h2><p>You can perform custom manipulation upon request reception by registering callbacks.</p><p>Callback should expect one parameter, the received <a href=\"https://www.python-httpx.org/api/#request\"><code class=\"language-plaintext highlighter-rouge\">httpx.Request</code></a>.</p><p>If all callbacks are not executed during test execution, the test case will fail at teardown.</p><p>This behavior can be disabled thanks to the <code class=\"language-plaintext highlighter-rouge\">assert_all_responses_were_requested</code> fixture:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">assert_all_responses_were_requested</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"bp\">False</span></code></pre></div></div><p>Note that callbacks are considered as responses, and thus are <a href=\"#how-response-is-selected\">selected the same way</a>.</p><h3 id=\"dynamic-responses\">Dynamic responses</h3><p>Callback should return a <code class=\"language-plaintext highlighter-rouge\">httpx.Response</code>.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_dynamic_response</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">custom_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span>            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"url\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">)},</span>        <span class=\"p\">)</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"n\">custom_response</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s\">\"url\"</span><span class=\"p\">:</span> <span class=\"s\">\"https://test_url\"</span><span class=\"p\">}</span></code></pre></div></div><p>Alternatively, callbacks can also be asynchronous.</p><p>As in the following sample simulating network latency on some responses only.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">asyncio</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_dynamic_async_response</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">simulate_network_latency</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">):</span>        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span>            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"url\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">)},</span>        <span class=\"p\">)</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"n\">simulate_network_latency</span><span class=\"p\">)</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>            <span class=\"c1\"># Response will be received after one second</span>            <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">),</span>            <span class=\"c1\"># Response will instantly be received (1 second before the first request)</span>            <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>        <span class=\"p\">)</span></code></pre></div></div><h3 id=\"raising-exceptions\">Raising exceptions</h3><p>You can simulate HTTPX exception throwing by raising an exception in your callback or use <code class=\"language-plaintext highlighter-rouge\">httpx_mock.add_exception</code> with the exception instance.</p><p>This can be useful if you want to assert that your code handles HTTPX exceptions properly.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_exception_raising</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_exception</span><span class=\"p\">(</span><span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">(</span><span class=\"s\">\"Unable to read within timeout\"</span><span class=\"p\">))</span>        <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">):</span>            <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><p>Note that default behavior is to send an <code class=\"language-plaintext highlighter-rouge\">httpx.TimeoutException</code> in case no response can be found. You can then test this kind of exception this way:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_timeout</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">TimeoutException</span><span class=\"p\">):</span>            <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><h2 id=\"check-sent-requests\">Check sent requests</h2><p>The best way to ensure the content of your requests is still to use the <code class=\"language-plaintext highlighter-rouge\">match_headers</code> and / or <code class=\"language-plaintext highlighter-rouge\">match_content</code> parameters when adding a response.In the same spirit, ensuring that no request was issued does not necessarily require any code.</p><p>In any case, you always have the ability to retrieve the requests that were issued.</p><p>As in the following samples:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_many_requests</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response1</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>        <span class=\"n\">response2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>    <span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">get_requests</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">test_single_request</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span>    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">get_request</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">test_no_request</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">get_request</span><span class=\"p\">()</span></code></pre></div></div><h3 id=\"how-requests-are-selected\">How requests are selected</h3><p>You can add criteria so that requests will be returned only in case of a more specific matching.</p><h4 id=\"matching-on-url-1\">Matching on URL</h4><p><code class=\"language-plaintext highlighter-rouge\">url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\">httpx.URL</a> instance.</p><p>Matching is performed on the full URL, query parameters included.</p><p>Order of parameters in the query string does not matter, however order of values do matter if the same parameter is provided more than once.</p><h4 id=\"matching-on-http-method-1\">Matching on HTTP method</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">method</code> parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) of the requests to retrieve.</p><p><code class=\"language-plaintext highlighter-rouge\">method</code> parameter must be a string. It will be upper-cased, so it can be provided lower cased.</p><p>Matching is performed on equality.</p><h4 id=\"matching-on-proxy-url-1\">Matching on proxy URL</h4><p><code class=\"language-plaintext highlighter-rouge\">proxy_url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\">httpx.URL</a> instance.</p><p>Matching is performed on the full proxy URL, query parameters included.</p><p>Order of parameters in the query string does not matter, however order of values do matter if the same parameter is provided more than once.</p><h4 id=\"matching-on-http-headers-1\">Matching on HTTP headers</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">match_headers</code> parameter to specify the HTTP headers executing the callback.</p><p>Matching is performed on equality for each provided header.</p><h4 id=\"matching-on-http-body-1\">Matching on HTTP body</h4><p>Use <code class=\"language-plaintext highlighter-rouge\">match_content</code> parameter to specify the full HTTP body executing the callback.</p><p>Matching is performed on equality.</p><h5 id=\"matching-on-http-json-body-1\">Matching on HTTP JSON body</h5><p>Use <code class=\"language-plaintext highlighter-rouge\">match_json</code> parameter to specify the JSON decoded HTTP body executing the callback.</p><p>Matching is performed on equality. You can however use <code class=\"language-plaintext highlighter-rouge\">unittest.mock.ANY</code> to do partial matching.</p><p>Note that <code class=\"language-plaintext highlighter-rouge\">match_content</code> cannot be provided if <code class=\"language-plaintext highlighter-rouge\">match_json</code> is also provided.</p><h2 id=\"do-not-mock-some-requests\">Do not mock some requests</h2><p>By default, <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code> will mock every request.</p><p>But, for instance, in case you want to write integration tests with other servers, you might want to let some requests go through.</p><p>To do so, you can use the <code class=\"language-plaintext highlighter-rouge\">non_mocked_hosts</code> fixture:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">non_mocked_hosts</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s\">\"my_local_test_host\"</span><span class=\"p\">,</span> <span class=\"s\">\"my_other_test_host\"</span><span class=\"p\">]</span></code></pre></div></div><p>Every other requested hosts will be mocked as in the following example</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">import</span> <span class=\"nn\">httpx</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">non_mocked_hosts</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s\">\"my_local_test_host\"</span><span class=\"p\">]</span><span class=\"k\">def</span> <span class=\"nf\">test_partial_mock</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"p\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>        <span class=\"c1\"># This request will NOT be mocked</span>        <span class=\"n\">response1</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://www.my_local_test_host/sub?param=value\"</span><span class=\"p\">)</span>        <span class=\"c1\"># This request will be mocked</span>        <span class=\"n\">response2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">)</span></code></pre></div></div><h2 id=\"migrating-to-pytest-httpx\">Migrating to pytest-httpx</h2><p>Here is how to migrate from well-known testing libraries to <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code>.</p><h3 id=\"from-responses\">From responses</h3><table>  <thead>    <tr>      <th style=\"text-align: left\">Feature</th>      <th style=\"text-align: left\">responses</th>      <th style=\"text-align: left\">pytest-httpx</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">Add a response</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">responses.add()</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">httpx_mock.add_response()</code></td>    </tr>    <tr>      <td style=\"text-align: left\">Add a callback</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">responses.add_callback()</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">httpx_mock.add_callback()</code></td>    </tr>    <tr>      <td style=\"text-align: left\">Retrieve requests</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">responses.calls</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">httpx_mock.get_requests()</code></td>    </tr>  </tbody></table><h4 id=\"add-a-response-or-a-callback\">Add a response or a callback</h4><p>Undocumented parameters means that they are unchanged between <code class=\"language-plaintext highlighter-rouge\">responses</code> and <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code>.Below is a list of parameters that will require a change in your code.</p><table>  <thead>    <tr>      <th style=\"text-align: left\">Parameter</th>      <th style=\"text-align: left\">responses</th>      <th style=\"text-align: left\">pytest-httpx</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">method</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">method=responses.GET</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">method=\"GET\"</code></td>    </tr>    <tr>      <td style=\"text-align: left\">body (as bytes)</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">body=b\"sample\"</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">content=b\"sample\"</code></td>    </tr>    <tr>      <td style=\"text-align: left\">body (as str)</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">body=\"sample\"</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">text=\"sample\"</code></td>    </tr>    <tr>      <td style=\"text-align: left\">status code</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">status=201</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">status_code=201</code></td>    </tr>    <tr>      <td style=\"text-align: left\">headers</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">adding_headers={\"name\": \"value\"}</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">headers={\"name\": \"value\"}</code></td>    </tr>    <tr>      <td style=\"text-align: left\">content-type header</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">content_type=\"application/custom\"</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">headers={\"content-type\": \"application/custom\"}</code></td>    </tr>    <tr>      <td style=\"text-align: left\">Match the full query</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">match_querystring=True</code></td>      <td style=\"text-align: left\">The full query is always matched when providing the <code class=\"language-plaintext highlighter-rouge\">url</code> parameter.</td>    </tr>  </tbody></table><p>Sample adding a response with <code class=\"language-plaintext highlighter-rouge\">responses</code>:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">responses</span> <span class=\"kn\">import</span> <span class=\"n\">RequestsMock</span><span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">(</span><span class=\"n\">responses</span><span class=\"p\">:</span> <span class=\"n\">RequestsMock</span><span class=\"p\">):</span>    <span class=\"n\">responses</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>        <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">responses</span><span class=\"p\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span>        <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span>        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the response content\"</span><span class=\"p\">,</span>        <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>    <span class=\"p\">)</span></code></pre></div></div><p>Sample adding the same response with <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code>:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPXMock</span><span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span>        <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">,</span>        <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span>        <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the response content\"</span><span class=\"p\">,</span>        <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>    <span class=\"p\">)</span></code></pre></div></div><h3 id=\"from-aioresponses\">From aioresponses</h3><table>  <thead>    <tr>      <th style=\"text-align: left\">Feature</th>      <th style=\"text-align: left\">aioresponses</th>      <th style=\"text-align: left\">pytest-httpx</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">Add a response</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">aioresponses.method()</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">httpx_mock.add_response(method=\"METHOD\")</code></td>    </tr>    <tr>      <td style=\"text-align: left\">Add a callback</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">aioresponses.method()</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">httpx_mock.add_callback(method=\"METHOD\")</code></td>    </tr>  </tbody></table><h4 id=\"add-a-response-or-a-callback-1\">Add a response or a callback</h4><p>Undocumented parameters means that they are unchanged between <code class=\"language-plaintext highlighter-rouge\">responses</code> and <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code>.Below is a list of parameters that will require a change in your code.</p><table>  <thead>    <tr>      <th style=\"text-align: left\">Parameter</th>      <th style=\"text-align: left\">responses</th>      <th style=\"text-align: left\">pytest-httpx</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">body (as bytes)</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">body=b\"sample\"</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">content=b\"sample\"</code></td>    </tr>    <tr>      <td style=\"text-align: left\">body (as str)</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">body=\"sample\"</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">text=\"sample\"</code></td>    </tr>    <tr>      <td style=\"text-align: left\">body (as JSON)</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">payload=[\"sample\"]</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">json=[\"sample\"]</code></td>    </tr>    <tr>      <td style=\"text-align: left\">status code</td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">status=201</code></td>      <td style=\"text-align: left\"><code class=\"language-plaintext highlighter-rouge\">status_code=201</code></td>    </tr>  </tbody></table><p>Sample adding a response with <code class=\"language-plaintext highlighter-rouge\">aioresponses</code>:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">aioresponses</span> <span class=\"kn\">import</span> <span class=\"n\">aioresponses</span><span class=\"o\">@</span><span class=\"n\">pytest</span><span class=\"p\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">mock_aioresponse</span><span class=\"p\">():</span>    <span class=\"k\">with</span> <span class=\"n\">aioresponses</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">m</span><span class=\"p\">:</span>        <span class=\"k\">yield</span> <span class=\"n\">m</span><span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">(</span><span class=\"n\">mock_aioresponse</span><span class=\"p\">):</span>    <span class=\"n\">mock_aioresponse</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>        <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span>        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the response content\"</span><span class=\"p\">,</span>        <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>    <span class=\"p\">)</span></code></pre></div></div><p>Sample adding the same response with <code class=\"language-plaintext highlighter-rouge\">pytest-httpx</code>:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>    <span class=\"n\">httpx_mock</span><span class=\"p\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span>        <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">,</span>        <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://test_url\"</span><span class=\"p\">,</span>        <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s\">\"This is the response content\"</span><span class=\"p\">,</span>        <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>    <span class=\"p\">)</span></code></pre></div></div>      <footer class=\"site-footer\">                  <span class=\"site-footer-owner\"><a href=\"https://github.com/Colin-b/pytest_httpx\">pytest_httpx</a> is maintained by <a href=\"https://github.com/Colin-b\">Colin-b</a>.</span>                <span class=\"site-footer-credits\">This page was generated by <a href=\"https://pages.github.com\">GitHub Pages</a>.</span>      </footer>    </main>  </body></html>",
  "embeddings": []
}
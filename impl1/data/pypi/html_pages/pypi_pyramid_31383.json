{
  "libtype": "pypi",
  "libname": "pyramid",
  "url": "https://trypyramid.com",
  "html": "<!DOCTYPE html><html><head><meta name=\"generator\" content=\"Hugo 0.109.0\">  <meta charset=\"utf-8\">  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">  <base href=\"https://trypyramid.com/\">  <title>Welcome to Pyramid, a Python Web Framework</title>  <meta name=\"description\" content=\"Pyramid is a lightweight Python web framework aimed at taking small web apps into big web apps. This site provides an easy entry point into Pyramid.\">  <meta name=\"keywords\" content=\"pyramid, web framework, python web framework, pyramid web framework, python, pylons, pylons project, open source\">  <meta name=\"author\" content=\"Pylons Project\">  <link rel=\"shortcut icon\" href=\"img/pyramid-16x16.png\"/>  <script type=\"application/javascript\">var doNotTrack = false;if (!doNotTrack) {(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');ga('create', 'UA-21146943-3', 'auto');ga('send', 'pageview');}</script>    <link href=\"vendors.4d4d0f5d881e49dfb3a7.css\" rel=\"stylesheet\">  <link href=\"main.a30a705ed9c72c526e6d.css\" rel=\"stylesheet\">  </head><body>  <div id=\"pace-loader\"></div>  <section class=\"app\">    <nav id=\"nav\" class=\"index-transparent\">  <div class=\"navbar navbar-inverse navbar-fixed-top\">    <div class=\"container\">      <div class=\"navbar-header\">        <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">          <span class=\"sr-only\">Toggle navigation</span>          <span class=\"icon-bar\"></span>          <span class=\"icon-bar\"></span>          <span class=\"icon-bar\"></span>        </button>        <a class=\"navbar-brand\" href=\"/\">          <img class=\"logo\" alt=\"pyramid\" src=\"img/pyramid-60x60.png\"/>        </a>        <div class=\"navbar-brand-name\">          Pyramid        </div>      </div>      <div id=\"navbar\" class=\"navbar-collapse collapse\">        <ul class=\"nav navbar-nav nav-pills pull-right\">          <li>            <a href=\"/\">Home</a>          </li>          <li>            <a href=\"documentation.html\">Documentation</a>          </li>          <li>            <a href=\"extending-pyramid.html\">Add-ons</a>          </li>          <li class=\"dropdown\">            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">              Community <span class=\"caret\"></span>            </a>            <ul class=\"dropdown-menu dropdown-menu-right\">              <li><a href=\"community.html\">Enter the Tomb</a></li>              <li><a href=\"community-powered-by-pyramid.html\">Powered by Pyramid</a></li>              <li><a href=\"community-sponsors.html\">Sponsors</a></li>              <li><a href=\"community-events.html\">Events</a></li>              <li><a href=\"community-artwork.html\">Artwork</a></li>              <li><a href=\"community-feeds.html\">Feeds</a></li>            </ul>          </li>        </ul>      </div>    </div>  </div></nav>    <div id=\"main\">      <div class=\"home\">  <section class=\"hero-header\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-8\">          <div class=\"tagline\">            <h1>              <span class=\"emphasis title\">Pyramid</span><br>              The Start <span class=\"emphasis\">Small</span>,              Finish <span class=\"emphasis\">Big</span>&nbsp;<br class=\"hidden-xs\">              Stay <span class=\"emphasis\">Finished</span> Framework            </h1>          </div>          <div class=\"elevator-speech\">            Projects with ambition            <span class=\"text-white\">start small</span>            but            <span class=\"text-white\">finish big</span>            and must            <span class=\"text-white\">stay finished</span>.&nbsp;<br class=\"hidden-xs\">            You need a Python web framework that            <span class=\"text-white\">supports your decisions</span>,&nbsp;<br class=\"hidden-xs\">            <span class=\"text-white\">by artisans for artisans</span>.          </div>        </div>      </div>    </div>  </section>  <section class=\"try-pyramid\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-12\">          <h2 class=\"title text-red\">Quick <strong>Start</strong></h2>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6\">          <pre class=\"nobs\">            <code class=\"python\">from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.response import Responsedef hello_world(request):    return Response('Hello World!')if __name__ == '__main__':    with Configurator() as config:        config.add_route('hello', '/')        config.add_view(hello_world, route_name='hello')        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</code>          </pre>        </div>        <div class=\"col-md-6\">          <p>Pyramid makes it easy to write web applications. You can            <strong>start small</strong> with this \"hello world\" minimal            request/response web app. This may take you far, especially while            learning. As your application grows, Pyramid offers many features            that make writing complex software take less effort.          </p>          <p>Pyramid works in all supported versions of Python. Our            <a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/install.html\">installation              instructions</a>            will help you get Pyramid up and running.          </p>          <p>Pyramid's            <a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/quick_tutorial/index.html\">quick              tutorial</a>            will take you step by step through writing a single file            application, forms, database integration, and authentication.          </p>          <p>Developers may dive in to Pyramid's            <a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/introduction.html\">narrative              documentation</a>,            or browse the extensive            <a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/api/index.html\">API reference</a>.            Pyramid has a rich pool of helpful <a href=\"/resources.html\">resources</a>            from which to draw. <a href=\"/resources-extending-pyramid.html\">Extending Pyramid</a>            is a curated and filterable list of add-ons, packages, and applications            built to work with Pyramid.          </p>        </div>      </div>    </div>  </section>  <section class=\"need-pyramid\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-8 col-md-offset-2 text-center\">          <h1 class=\"title text-green dark\">            When You Need <strong>Pyramid</strong>          </h1>        </div>        <div class=\"col-md-5 col-md-offset-1\">          <p><strong>Megaframeworks</strong> make decisions for you. But if you don't fit their viewpoint, you end up            fighting their decisions. <strong>Microframeworks</strong> force no decisions, making it easy to start. But            as your application grows, you're on your own.</p>          <p>In both cases, the focus is on the <strong>start</strong>: either too much or too little. Either way,            finishing and staying finished is hard. You need a <strong>finishing-focused</strong> framework with an            architectural design that scales down to getting started, then up as your application grows.</p>        </div>        <div class=\"col-md-5 feature\">          <p><strong>Pyramid</strong> was made for just this. It's a Goldilocks Solution: not too small, not too big,            just right.</p>          <p><strong>Pyramid</strong> The Start <strong>Small</strong>, Finish <strong>Big</strong>, Stay            <strong>Finished</strong> Framework.</p>        </div>      </div>    </div>  </section>  <section class=\"section-content\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-4\">          <h1 class=\"title text-red\">            Start <strong>Small</strong>          </h1>          <i class=\"fa fa-6x fa-compress text-red pull-right\"></i>          <p>Getting started quickly and simply is a key attraction of lightweight frameworks. Equally, you get to            choose what approaches to use for templating, database, security, and more, or use a convenient starting            point with a scaffold. Pyramid excels at scaling down to the first hour of learning, while avoiding the            pitfalls of framework magic.</p>          <ul class=\"features\">            <li>Start as a <strong>single-file module</strong> with little first-hour complexity</li>            <li>Use a <strong>convenient scaffold</strong> to generate a sample project with your combination of              subsystems</li>            <li>Choose from a variety of <strong>templating, database, security solutions</strong> and more using the              quality and convenience of Pyramid's add-on system</li>            <li>Tap into a variety of <strong>high-quality documentation</strong> for evaluating, trying out, or doing              advanced development with Pyramid</li>            <li><strong>Ask</strong> the growing <strong>Pyramid community</strong> for tips and successes</li>          </ul>        </div>        <div class=\"col-md-4\">          <h1 class=\"title not-first text-red\">            Finish <strong>Big</strong>          </h1>          <i class=\"fa fa-6x fa-expand text-red pull-right\"></i>          <p>Ambitious projects aspire to grow big without losing their dignity. Pyramid is uniquely equipped to scale            with you. Its configuration, extension, and add-on system gives the skeleton to support your ambitions, and            its architecture ensures that you don't lose those performance and quality features you started with.</p>          <ul class=\"features\">            <li><strong>Include and configure</strong> Pyramid add-ons inside your application</li>            <li><strong>Override and customize</strong> core code and add-ons from the outside, without forking</li>            <li>Build and deliver <strong>re-usable subsystems</strong> inside and outside our organization</li>            <li><strong>Less magic</strong> by forgoing globals and import side-effects</li>            <li>Use the <strong>configuration system</strong> to keep your wiring separate from your code</li>            <li>Numerous <strong>extension facilities</strong> built into the framework</li>            <li>Use Pyramid as a <strong>\"framework framework\"</strong> to craft your own special-purpose,              domain-specific web system</li>            <li>Gain insight from our long-standing <strong>culture of systems</strong> that organically get big</li>          </ul>        </div>        <div class=\"col-md-4\">          <h1 class=\"title not-first text-red\">            Stay <strong>Finished</strong>          </h1>          <i class=\"fa fa-6x fa-trophy text-red pull-right\"></i>          <p>Pyramid's simple first hour helps you get started and its extensability helps you finish your ambitions.            There's life after shipping. Pyramid helps keep your application finished by understanding the full life            cycle of a professional web application.</p>          <ul class=\"features\">            <li>Deep commitment to <strong>API stability</strong> and <strong>bug fixing</strong> over the 120+ software              releases</li>            <li>Culture of <strong>100% test and documentation coverage</strong> makes Pyramid a future-proof choice            </li>            <li>Keeping configuration out of code means <strong>less forking</strong> and side-effects</li>            <li>Long history of <strong>repeatable deployments</strong> provides a community culture of helpful tips            </li>            <li>Top-notch <strong>performance</strong> even as Pyramid grows</li>            <li>Deep <strong>extensibility</strong> and large-scale <strong>design patterns</strong> means you won't              outgrow it</li>            <li>Strong following of <strong>Python practices</strong> (WSGI, packages, virtual environments, first to              support Python 3) means you won't be out of the Python mainstream</li>          </ul>        </div>      </div>    </div>  </section>  <section class=\"section-content section-beige\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-6\">          <h1 class=\"title text-green dark\">            Supports Your <strong>Decisions</strong>          </h1>          <i class=\"fa fa-6x fa-cogs text-green dark pull-right\"></i>          <p>Full-stack frameworks provide built-in value by telling you what to do. But doing something different, or            using something better, leads to the dreaded \"fighting the framework\". Pyramid starts from a very small            base, providing many high-quality choices.</p>          <ul class=\"features\">            <li><strong>Don't waste time</strong> fighting the framework's decisions</li>            <li><strong>\"Only pay for what you eat\"</strong> means less magic to live with in production</li>            <li><strong>No bundled templating</strong> system but instead, three very <strong>high-quality                add-ons</strong> for <strong>Chameleon</strong>, <strong>Jinja2</strong> and <strong>Mako</strong></li>            <li>Several <strong>form systems</strong> covering most of the common design tastes</li>            <li>Choose your database, with add-on support for              <strong>SQLAlchemy</strong> and others</li>          </ul>        </div>        <div class=\"col-md-6\">          <h1 class=\"title not-first text-green dark\">            By <strong>Artisans</strong>, For <strong>Artisans</strong>          </h1>          <i class=\"fa fa-6x fa-code text-green dark pull-right\"></i>          <p>The Pyramid team has been doing ambitious Python web frameworks since 1995. We have built small systems and            huge systems. From this, we delight in helping others who appreciate quality and dream big.</p>          <ul class=\"features\">            <li><strong>Craftsmanship</strong> with seriousness of              purpose and honesty</li>            <li>From the start, a deep              commitment to <strong>quality</strong></li>            <li><strong>Builders</strong> of the first open source application server</li>            <li><strong>Bootstrapper</strong> of the PSF and member of its first board</li>            <li>Support letting <strong>quality artisans</strong> add <strong>real value</strong> by quickly but durably              making specific experiences</li>          </ul>        </div>      </div>    </div>  </section>  <section class=\"section-content\">    <div class=\"container\">      <div class=\"row\">        <div class=\"col-md-12\">          <h2 class=\"title text-red\">Pyramid <strong>Features</strong></h2>          <p>To demonstrate these features, <a              href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/install.html\">install Pyramid</a>,            click <i class=\"fa fa-arrows-v text-red\" aria-hidden=\"true\"></i> to expand and copy the code sample into a            file, run the application with <code>env/bin/python demo.py</code>, and use <code>curl</code> or a browser            to request            <a href=\"http://0.0.0.0:6543\">http://0.0.0.0:6543</a>.</p>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6 code-wrapper\">          <div class=\"code-expand collapsed\">            <i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>          </div>          <pre class=\"nobs\">            <code class=\"python\"><span class=\"code-top\">from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.response import Responsefrom pyramid.view import view_config</span><span class=\"code-main\">@view_config(    route_name='home')def home(request):    return Response('Welcome!')</span><span class=\"code-bottom\">if __name__ == '__main__':    with Configurator() as config:        config.add_route('home', '/')        config.scan()        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</span></code>          </pre>        </div>        <div class=\"col-md-6\">          <h3 class=\"title\"><a              href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#mapping-views-using-a-decorator-section\">              Function Decorators</a></h3>          <p>Pyramid is written in Python. All the features you know and love            in the Python language, such as function decorators, are available            to Pyramid developers. Here we show the function named            <code>home</code> that returns a response. The function has a            decorator <code>@view_config</code> which has a route assigned to            it also named <code>home</code>.</p>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6 code-wrapper\">          <div class=\"code-expand collapsed\">            <i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>          </div>          <pre class=\"nobs\">            <code class=\"python\"><span class=\"code-top\">from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.response import Responsefrom pyramid.view import view_config</span><span class=\"code-main\">@view_config(    route_name='home',    request_method='POST')def home(request):    return Response('Welcome!')</span><span class=\"code-bottom\">if __name__ == '__main__':    with Configurator() as config:        config.add_route('home', '/')        config.scan()        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</span></code>          </pre>        </div>        <div class=\"col-md-6\">          <h3 class=\"title\"><a              href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#view-configuration-parameters\">              Predicates</a></h3>          <p>A test which returns <code>True</code> or <code>False</code>, and            which narrows the set of circumstances in which views or routes may            be called. Here we use predicates to limit matching of a view            callable to a route name of <code>home</code> and to the            <code>POST</code> HTTP request method.</p>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6 code-wrapper\">          <div class=\"code-expand collapsed\">            <i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>          </div>          <pre class=\"nobs\">            <code class=\"python\"><span class=\"code-top\">from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.view import view_config</span><span class=\"code-main\">@view_config(    route_name='home',    renderer='json')def home(request):    return {\"a\": 1, \"b\": 2}</span><span class=\"code-bottom\">if __name__ == '__main__':    with Configurator() as config:        config.add_route('home', '/')        config.scan()        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</span></code>          </pre>        </div>        <div class=\"col-md-6\">          <h3 class=\"title\"><a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/renderers.html\">              Renderers</a></h3>          <p>Convert non-response return values that are later consumed by            renderers. Using a renderer can make writing views that require            templating or other serialization, like <code>JSON</code>, less            tedious.          </p>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6 code-wrapper\">          <div class=\"code-expand collapsed\">            <i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>          </div>          <pre class=\"nobs\">            <code class=\"python\"><span class=\"code-top\">\"\"\"1. Run `env/bin/pip install pyramid_jinja2`2. Copy this template and put it in `templates/home.jinja2`:&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;    &lt;title&gt;{{ greet }}, {{ name }}&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;{{ greet }}, {{ name }}&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\"\"from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.view import view_config</span><span class=\"code-main\">@view_config(    route_name='home',    renderer='templates/home.jinja2')def home(request):    return {\"greet\": 'Welcome', \"name\": 'Akhenaten'}</span><span class=\"code-bottom\">if __name__ == '__main__':    with Configurator() as config:        config.include('pyramid_jinja2')        config.add_route('home', '/')        config.scan()        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</span></code>          </pre>        </div>        <div class=\"col-md-6\">          <h3 class=\"title\"><a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/assets.html\">              Asset Specifications</a></h3>          <p>Allows specifying the location of assets in a package. Here the            asset is specified as a Jinja2 template <code>home.jinja2</code>,            located in a subdirectory named <code>templates</code>. Within a            package <code>myapp</code>, a colon delimits the package name from            the location of the asset relative to the package, for example            <code>renderer='myapp:templates/home.jinja2'</code>.</p>        </div>      </div>      <div class=\"row\">        <div class=\"col-md-6 code-wrapper\">          <div class=\"code-expand collapsed\">            <i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>          </div>          <pre class=\"nobs\">            <code class=\"python\"><span class=\"code-top\">from wsgiref.simple_server import make_serverfrom pyramid.config import Configuratorfrom pyramid.events import NewRequestfrom pyramid.events import NewResponsefrom pyramid.events import subscriberfrom pyramid.response import Responsefrom pyramid.view import view_config@view_config(    route_name='home',)def home(request):    return Response('Welcome!')</span><span class=\"code-main\">@subscriber(NewRequest, NewResponse)def mysubscriber(event):    print(event)</span><span class=\"code-bottom\">if __name__ == '__main__':    with Configurator() as config:        config.add_route('home', '/')        config.scan()        app = config.make_wsgi_app()    server = make_server('0.0.0.0', 6543, app)    server.serve_forever()</span></code>          </pre>        </div>        <div class=\"col-md-6\">          <h3 class=\"title\"><a href=\"https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/hooks.html\">              Events and Subscribers</a></h3>          <p>An event is an object broadcast at interesting points during the            lifetime of an application. A subscriber to an event allows you to            run some code, such as resizing an uploaded image, sending email,            or sending a message to a remote system. Here the decorated            subscriber will be called for more than one event type,            specifically for every new request and response objects.          </p>        </div>      </div>    </div>  </section></div>    </div>    <footer id=\"footer\">  <div class=\"container\">    <div class=\"row\">      <p>        <a href=\"https://twitter.com/PylonsProject\"    class=\"twitter-follow-button\"    data-size=\"large\"    data-lang=\"en\"    data-dnt=\"true\"    data-show-count=\"true\">Follow @PylonsProject</a><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>      </p>      <p>      \u00a9 Copyright 2008-2023, <a href=\"http://agendaless.com/\"><strong>Agendaless Consulting</strong></a>        <br/>        <a href=\"https://pylonsproject.org/\"><strong>Pylons Project</strong></a> | Build d21a71393a396b0aed1684345bf8a5f6095213fb      </p>      <p>        <a href=\"https://www.linode.com/?r=f44080aab83cbedcd4d36d0668cb940712639882\" target=\"_blank\" rel=\"noopener noreferrer\">          Sponsored by <strong>Linode</strong>        </a>      </p>    </div>  </div></footer>  </section>    <script src=\"vendors.1dedeacd35498a90d814.js\"></script>  <script src=\"main.a23b7d3c446b8393038b.js\"></script>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "slimit",
  "url": "http://slimit.readthedocs.org",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">  <head>    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />    <title>Welcome to SlimIt &#8212; SlimIt</title>    <link rel=\"stylesheet\" href=\"_static/nature.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/badge_only.css\" type=\"text/css\" />    <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/underscore.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/doctools.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"search\" title=\"Search\" href=\"search.html\" /><a href=\"http://github.com/rspivak/slimit\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://a248.e.akamai.net/assets.github.com/img/7afbc8b248c68eb468279e8c17986ad46549fb71/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\"></a><script type=\"text/javascript\">  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-2572871-2']);  _gaq.push(['_trackPageview']);  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();</script>  <!-- RTD Extra Head --><!-- Always link to the latest version, as canonical.http://docs.readthedocs.org/en/latest/canonical.html--><link rel=\"canonical\" href=\"https://slimit.readthedocs.io/en/latest/\" /><link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"text/javascript\" src=\"_static/readthedocs-data.js\"></script><!-- Add page-specific data, which must exist in the page js, not global --><script type=\"text/javascript\">READTHEDOCS_DATA['page'] = 'index'READTHEDOCS_DATA['source_suffix'] = '.rst'</script><script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/readthedocs-analytics.js\"></script><!-- end RTD <extrahead> --></head><body>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"nav-item nav-item-0\"><a href=\"#\">SlimIt</a> &#187;</li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <div class=\"section\" id=\"welcome-to-slimit\"><h1>Welcome to SlimIt<a class=\"headerlink\" href=\"#welcome-to-slimit\" title=\"Permalink to this headline\">\u00b6</a></h1><p><cite>SlimIt</cite> is a JavaScript minifier written in Python.It compiles JavaScript into more compact code so that it downloadsand runs faster.</p><p><cite>SlimIt</cite> also provides a library that includes a JavaScript parser,lexer, pretty printer and a tree visitor.</p><div class=\"section\" id=\"installation\"><h2>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install slimit</pre></div></div><p>Or the bleeding edge version from the git master branch:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install git+https://github.com/rspivak/slimit.git#egg<span class=\"o\">=</span>slimit</pre></div></div></div><div class=\"section\" id=\"let-s-minify-some-code\"><h2>Let\u2019s minify some code<a class=\"headerlink\" href=\"#let-s-minify-some-code\" title=\"Permalink to this headline\">\u00b6</a></h2><p>From the command line:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$ slimit -hUsage: slimit <span class=\"o\">[</span>options<span class=\"o\">]</span> <span class=\"o\">[</span>input file<span class=\"o\">]</span>If no input file is provided STDIN is used by default.Minified JavaScript code is printed to STDOUT.Options:  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>  -m, --mangle          mangle names  -t, --mangle-toplevel                        mangle top level scope <span class=\"o\">(</span>defaults to False<span class=\"o\">)</span>$ cat test.jsvar <span class=\"nv\">foo</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"o\">(</span> obj <span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"k\">for</span> <span class=\"o\">(</span> var name in obj <span class=\"o\">)</span> <span class=\"o\">{</span>                <span class=\"k\">return</span> false<span class=\"p\">;</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> true<span class=\"p\">;</span><span class=\"o\">}</span><span class=\"p\">;</span>$$ slimit --mangle &lt; test.jsvar <span class=\"nv\">foo</span><span class=\"o\">=</span><span class=\"k\">function</span><span class=\"o\">(</span>a<span class=\"o\">){</span><span class=\"k\">for</span><span class=\"o\">(</span>var b in a<span class=\"o\">)</span><span class=\"k\">return</span> false<span class=\"p\">;</span><span class=\"k\">return</span> true<span class=\"p\">;</span><span class=\"o\">}</span><span class=\"p\">;</span></pre></div></div><p>Or using library API:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit</span> <span class=\"kn\">import</span> <span class=\"n\">minify</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span><span class=\"gp\">... </span><span class=\"s2\">var a = function( obj ) {</span><span class=\"gp\">... </span><span class=\"s2\">        for ( var name in obj ) {</span><span class=\"gp\">... </span><span class=\"s2\">                return false;</span><span class=\"gp\">... </span><span class=\"s2\">        }</span><span class=\"gp\">... </span><span class=\"s2\">        return true;</span><span class=\"gp\">... </span><span class=\"s2\">};</span><span class=\"gp\">... </span><span class=\"s2\">&quot;&quot;&quot;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span> <span class=\"n\">minify</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">mangle</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">mangle_toplevel</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span><span class=\"go\">var a=function(a){for(var b in a)return false;return true;};</span></pre></div></div></div><div class=\"section\" id=\"iterate-over-modify-a-javascript-ast-and-pretty-print-it\"><h2>Iterate over, modify a JavaScript AST and pretty print it<a class=\"headerlink\" href=\"#iterate-over-modify-a-javascript-ast-and-pretty-print-it\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit.parser</span> <span class=\"k\">import</span> <span class=\"n\">Parser</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit.visitors</span> <span class=\"k\">import</span> <span class=\"n\">nodevisitor</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit</span> <span class=\"k\">import</span> <span class=\"n\">ast</span><span class=\"go\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">&#39;for(var i=0; i&lt;10; i++) {var x=5+i;}&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodevisitor</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Identifier</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">:</span><span class=\"gp\">... </span>        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hello&#39;</span><span class=\"gp\">...</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">to_ecma</span><span class=\"p\">()</span> <span class=\"c1\"># print awesome javascript :)</span><span class=\"go\">for (var hello = 0; hello &lt; 10; hello++) {</span><span class=\"go\">  var x = 5 + hello;</span><span class=\"go\">}</span><span class=\"go\">&gt;&gt;&gt;</span></pre></div></div></div><div class=\"section\" id=\"writing-custom-node-visitor\"><h2>Writing custom node visitor<a class=\"headerlink\" href=\"#writing-custom-node-visitor\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit.parser</span> <span class=\"k\">import</span> <span class=\"n\">Parser</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit.visitors.nodevisitor</span> <span class=\"k\">import</span> <span class=\"n\">ASTVisitor</span><span class=\"go\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span><span class=\"gp\">... </span><span class=\"s2\">var x = {</span><span class=\"gp\">... </span><span class=\"s2\">    &quot;key1&quot;: &quot;value1&quot;,</span><span class=\"gp\">... </span><span class=\"s2\">    &quot;key2&quot;: &quot;value2&quot;</span><span class=\"gp\">... </span><span class=\"s2\">};</span><span class=\"gp\">... </span><span class=\"s2\">&quot;&quot;&quot;</span><span class=\"go\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyVisitor</span><span class=\"p\">(</span><span class=\"n\">ASTVisitor</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">visit_Object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span><span class=\"gp\">... </span>        <span class=\"sd\">&quot;&quot;&quot;Visit object literal.&quot;&quot;&quot;</span><span class=\"gp\">... </span>        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">node</span><span class=\"p\">:</span><span class=\"gp\">... </span>            <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"gp\">... </span>            <span class=\"nb\">print</span> <span class=\"s1\">&#39;Property key=</span><span class=\"si\">%s</span><span class=\"s1\">, value=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"gp\">... </span>            <span class=\"c1\"># visit all children in turn</span><span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"go\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">visitor</span> <span class=\"o\">=</span> <span class=\"n\">MyVisitor</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">visitor</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span><span class=\"go\">Property key=&quot;key1&quot;, value=&quot;value1&quot;</span><span class=\"go\">Property key=&quot;key2&quot;, value=&quot;value2&quot;</span></pre></div></div></div><div class=\"section\" id=\"using-lexer-in-your-project\"><h2>Using lexer in your project<a class=\"headerlink\" href=\"#using-lexer-in-your-project\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">slimit.lexer</span> <span class=\"k\">import</span> <span class=\"n\">Lexer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">Lexer</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">&#39;a = 1;&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">lexer</span><span class=\"p\">:</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span> <span class=\"n\">token</span><span class=\"gp\">...</span><span class=\"go\">LexToken(ID,&#39;a&#39;,1,0)</span><span class=\"go\">LexToken(EQ,&#39;=&#39;,1,2)</span><span class=\"go\">LexToken(NUMBER,&#39;1&#39;,1,4)</span><span class=\"go\">LexToken(SEMI,&#39;;&#39;,1,5)</span></pre></div></div><p>You can get one token at a time using <code class=\"docutils literal notranslate\"><span class=\"pre\">token</span></code> method:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">&#39;a = 1;&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span><span class=\"gp\">... </span>    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">()</span><span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token</span><span class=\"p\">:</span><span class=\"gp\">... </span>        <span class=\"k\">break</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span> <span class=\"n\">token</span><span class=\"gp\">...</span><span class=\"go\">LexToken(ID,&#39;a&#39;,1,0)</span><span class=\"go\">LexToken(EQ,&#39;=&#39;,1,2)</span><span class=\"go\">LexToken(NUMBER,&#39;1&#39;,1,4)</span><span class=\"go\">LexToken(SEMI,&#39;;&#39;,1,5)</span></pre></div></div><p><cite>LexToken</cite> instance has different attributes:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">&#39;a = 1;&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lexpos</span><span class=\"go\">(&#39;ID&#39;, &#39;a&#39;, 1, 0)</span></pre></div></div></div><div class=\"section\" id=\"benchmarks\"><h2>Benchmarks<a class=\"headerlink\" href=\"#benchmarks\" title=\"Permalink to this headline\">\u00b6</a></h2><p><strong>SAM</strong> - JQuery size after minification in bytes</p><table border=\"1\" class=\"docutils\"><colgroup><col width=\"46%\" /><col width=\"18%\" /><col width=\"18%\" /><col width=\"18%\" /></colgroup><thead valign=\"bottom\"><tr class=\"row-odd\"><th class=\"head\">Original jQuery 1.6.1 (bytes)</th><th class=\"head\">SlimIt SAM</th><th class=\"head\">rJSmin SAM</th><th class=\"head\">jsmin SAM</th></tr></thead><tbody valign=\"top\"><tr class=\"row-even\"><td>234,995</td><td>94,290</td><td>134,215</td><td>134,819</td></tr></tbody></table></div><div class=\"section\" id=\"roadmap\"><h2>Roadmap<a class=\"headerlink\" href=\"#roadmap\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>More minifications</li><li>Speed improvements</li></ul><div class=\"toctree-wrapper compound\"></div></div><div class=\"section\" id=\"license\"><h2>License<a class=\"headerlink\" href=\"#license\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The MIT License (MIT)</p></div></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><p class=\"logo\"><a href=\"#\">  <img class=\"logo\" src=\"_static/slimit-small.png\" alt=\"Logo\"/></a></p><h3>About SlimIt</h3><p>  SlimIt is a JavaScript minifier</p><h3>Useful Links</h3><ul>  <li><a href=\"http://pypi.python.org/pypi/slimit\">SlimIt @ PyPI</a></li>  <li><a href=\"http://github.com/rspivak/slimit\">SlimIt @ GitHub</a></li></ul><h3>Author</h3><p>  <a href=\"http://ruslanspivak.com\">    <img src=\"_static/feed-24x24.png\" alt=\"blog\" />  </a>  <a href=\"http://ca.linkedin.com/in/ruslanspivak\">    <img src=\"_static/linkedin-24x24.png\" alt=\"linkedin\" />  </a>  <a href=\"http://twitter.com/alienoid\">    <img src=\"_static/twitter-24x24.png\" alt=\"twitter\" />  </a>  <a href=\"http://github.com/rspivak\">    <img src=\"_static/github-24x24.png\" alt=\"github\" />  </a></p>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"nav-item nav-item-0\"><a href=\"#\">SlimIt</a> &#187;</li>       </ul>    </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2011, Ruslan Spivak.      Created using <a href=\"http://sphinx-doc.org/\">Sphinx</a> 1.7.6.    </div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "invoke",
  "url": "https://pyinvoke.org",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />    <title>Welcome to Invoke! &#8212; Invoke  documentation</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/alabaster.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script data-url_root=\"./\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/jquery.js\"></script>    <script src=\"_static/underscore.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"Changelog\" href=\"changelog.html\" />     <link rel=\"stylesheet\" href=\"_static/custom.css\" type=\"text/css\" />      <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.9, maximum-scale=0.9\" />  <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/sites/www/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"invoke-www\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"alabaster\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">                    <div class=\"body\" role=\"main\">              <p><a class=\"reference external\" href=\"https://pypi.org/project/invoke/\"><img alt=\"PyPI - Package Version\" src=\"https://img.shields.io/pypi/v/invoke\" /></a> <a class=\"reference external\" href=\"https://pypi.org/project/invoke/\"><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/invoke\" /></a> <a class=\"reference external\" href=\"https://github.com/pyinvoke/invoke/blob/main/LICENSE\"><img alt=\"PyPI - License\" src=\"https://img.shields.io/pypi/l/invoke\" /></a> <a class=\"reference external\" href=\"https://app.circleci.com/pipelines/github/pyinvoke/invoke\"><img alt=\"CircleCI\" src=\"https://img.shields.io/circleci/build/github/pyinvoke/invoke/main\" /></a> <a class=\"reference external\" href=\"https://app.codecov.io/gh/pyinvoke/invoke\"><img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/gh/pyinvoke/invoke\" /></a></p><section id=\"welcome-to-invoke\"><h1>Welcome to Invoke!<a class=\"headerlink\" href=\"#welcome-to-invoke\" title=\"Permalink to this headline\">\u00b6</a></h1><p>Invoke is a Python (2.7 and 3.4+) library for managing shell-orientedsubprocesses and organizing executable Python code into CLI-invokable tasks. Itdraws inspiration from various sources (<code class=\"docutils literal notranslate\"><span class=\"pre\">make</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">rake</span></code>, Fabric 1.x, etc) toarrive at a powerful &amp; clean feature set.</p><p>To find out what\u2019s new in this version of Invoke, please see <a class=\"reference external\" href=\"https://pyinvoke.org/changelog.html#{}\">the changelog</a>.</p><p>The project maintainer keeps a <a class=\"reference external\" href=\"https://bitprophet.org/projects#roadmap\">roadmap</a> on his website.</p><p>This website covers project information for Invoke such as the changelog,contribution guidelines, development roadmap, news/blog, and so forth.Detailed usage and API documentation can be found at our code documentationsite, <a class=\"reference external\" href=\"https://docs.pyinvoke.org\">docs.pyinvoke.org</a>.</p><p>Please see below for a high level intro, or the navigation on the left for therest of the site content.</p><section id=\"what-is-invoke\"><h2>What is Invoke?<a class=\"headerlink\" href=\"#what-is-invoke\" title=\"Permalink to this headline\">\u00b6</a></h2><ul><li><p>Like Ruby\u2019s Rake tool and Invoke\u2019s own predecessor Fabric 1.x, it provides aclean, high level API for running shell commands and defining/organizingtask functions from a <code class=\"docutils literal notranslate\"><span class=\"pre\">tasks.py</span></code> file:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">invoke</span> <span class=\"kn\">import</span> <span class=\"n\">task</span><span class=\"nd\">@task</span><span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">bytecode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">):</span>    <span class=\"n\">patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;build&#39;</span><span class=\"p\">]</span>    <span class=\"k\">if</span> <span class=\"n\">docs</span><span class=\"p\">:</span>        <span class=\"n\">patterns</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;docs/_build&#39;</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">bytecode</span><span class=\"p\">:</span>        <span class=\"n\">patterns</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;**/*.pyc&#39;</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">extra</span><span class=\"p\">:</span>        <span class=\"n\">patterns</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">extra</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"n\">patterns</span><span class=\"p\">:</span>        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;rm -rf </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))</span><span class=\"nd\">@task</span><span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">docs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;python setup.py build&quot;</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">docs</span><span class=\"p\">:</span>        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;sphinx-build docs docs/_build&quot;</span><span class=\"p\">)</span></pre></div></div></li><li><p>From GNU Make, it inherits an emphasis on minimal boilerplate for commonpatterns and the ability to run multiple tasks in a single invocation:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ invoke clean build</pre></div></div></li><li><p>Where Fabric 1.x considered the command-line approach the default mode ofuse, Invoke (and tools built on it) are equally at home embedded in your ownPython code or a REPL:</p><div class=\"highlight-pycon3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">invoke</span> <span class=\"kn\">import</span> <span class=\"n\">run</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pip install -r requirements.txt&quot;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">hide</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">warn</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">)</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"go\">Successfully installed invocations-0.13.0 pep8-1.5.7 spec-1.3.1</span></pre></div></div></li><li><p>Following the lead of most Unix CLI applications, it offers a traditionalflag-based style of command-line parsing, deriving flag names and value typesfrom task signatures (optionally, of course!):</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ invoke clean --docs --bytecode build --docs --extra=&#39;**/*.pyo&#39;$ invoke clean -d -b build --docs -e &#39;**/*.pyo&#39;$ invoke clean -db build -de &#39;**/*.pyo&#39;</pre></div></div></li><li><p>Like many of its predecessors, it offers advanced features as well \u2013namespacing, task aliasing, before/after hooks, parallel execution and more.</p></li></ul><div class=\"toctree-wrapper compound\"></div></section></section>          </div>                  </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><h1 class=\"logo\"><a href=\"#\">Invoke</a></h1><p class=\"blurb\">Pythonic task execution</p><p><iframe src=\"https://ghbtns.com/github-btn.html?user=pyinvoke&repo=invoke&type=watch&count=true&size=large&v=2\"  allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"200px\" height=\"35px\"></iframe></p><h3>Navigation</h3><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"changelog.html\">Changelog</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"faq.html\">FAQs</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installing.html\">Installing</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"development.html\">Development</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"prior-art.html\">Prior art</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"contact.html\">Contact</a></li></ul><hr /><ul>        <li class=\"toctree-l1\"><a href=\"https://docs.pyinvoke.org\">Documentation</a></li>    </ul><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3 id=\"searchlabel\">Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" aria-labelledby=\"searchlabel\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"/>      <input type=\"submit\" value=\"Go\" />    </form>    </div></div><script>$('#searchbox').show(0);</script><h3 class=\"donation\">Donate/support</h3><p>Professionally-supported Invoke is available with the<a href=\"https://tidelift.com/subscription/pkg/pypi-invoke?utm_source=pypi-invoke&utm_medium=referral&utm_campaign=docs\">Tidelift Subscription</a>.</p>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"footer\">      &copy;2023 Jeff Forcier.            |      Powered by <a href=\"http://sphinx-doc.org/\">Sphinx 4.3.2</a>      &amp; <a href=\"https://github.com/bitprophet/alabaster\">Alabaster 0.7.12</a>            |      <a href=\"_sources/index.rst.txt\"          rel=\"nofollow\">Page source</a>    </div>            <script type=\"text/javascript\">      var _gaq = _gaq || [];      _gaq.push(['_setAccount', 'UA-18486793-3']);      _gaq.push(['_setDomainName', 'none']);      _gaq.push(['_setAllowLinker', true]);      _gaq.push(['_trackPageview']);      (function() {        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);      })();    </script>      </body></html>",
  "embeddings": []
}
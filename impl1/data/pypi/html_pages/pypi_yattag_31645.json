{
  "libtype": "pypi",
  "libname": "yattag",
  "url": "https://www.yattag.org",
  "html": "<!DOCTYPE html><head><title>Yattag - Generate HTML with Python</title><meta name=\"description\" content=\"Python library for generating HTML or XML in a pythonic way. Pure python alternative to template engines.\" /><link href=\"//fonts.googleapis.com/css?family=Cantarell:400,700\" rel=\"stylesheet\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/static/style.css\" /><link rel=\"stylesheet\" href=\"/static/syntax.css\" /></head><body><div id=\"main\"><div id=\"header\"><div id=\"logo-container\"><a href=\"/\"><img src=\"/static/yattag-logo.png\" alt=\"Yattag\" /></a></div><div id=\"menu\"><ul><li><a href=\"/download-install\">download/install</a></li><li><a href=\"/#tutorial\">tutorial</a></li><li><a href=\"/license\">gnu/lgpl license</a></li><li><a href=\"https://github.com/leforestier/yattag\">github repo</a></li><li><a href=\"//blfsoft.com\">contact the author</a></li></ul></div><div id=\"content\"><div id=\"intro\"><div class=\"document\"><p>Yattag is a <strong>Python library</strong> for generating <strong>HTML</strong> or <strong>XML</strong> in a <strong>pythonic</strong> way.</p><p>With Yattag,</p><ul class=\"simple\"><li><strong>you don't have to worry about closing HTML tags</strong></li><li>your HTML templates are <strong>Python code</strong>. Not a weird template language. <strong>Just Python</strong>.</li><li>you can easily <strong>render HTML forms</strong>, with defaults values and error messages.</li></ul><p>It's actually easier and more readable to generate dynamic HTML with Yattag than to write static HTML.</p></div></div><div id=\"tutorial\"><div class=\"document\"><div class=\"section\" id=\"tags-and-text\"><h1>1. Tags and text</h1><pre class=\"code python highlight literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tagtext</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">):</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><div class=\"section\" id=\"how-this-works\"><h2>How this works</h2><p>Have you ever used a list of strings and used the <span class=\"python-inline\">join</span> method to produce just one big string?</p><p>I mean, just like this:</p><pre class=\"literal-block\">mylist = []mylist.append('Everybody')mylist.append('likes')mylist.append('pandas.')mystring = ' '.join(mylist) # mystring contains &quot;Everybody likes pandas.&quot;</pre><p>Well, the <span class=\"python-inline\">yattag.Doc</span> class works just like that. It has more functionnalities than just appending a string, but the idea is the same. That's what makes it so fast.</p><p>I create a <span class=\"python-inline\">Doc</span> instance. I use its methods to append content to it (for example, the <span class=\"python-inline\">text</span> method appends some text, the <span class=\"python-inline\">tag</span> method appends a html tag etc...). When I'm done, the <span class=\"python-inline\">getvalue</span> method returns the whole content as a big string. Exactly like the <span class=\"python-inline\">join</span> method in our example with a list.</p><p>Let's get back to our list example.To avoid typing too much, and also to avoid an attribute lookup each time we call the <span class=\"python-inline\">append</span> method, we could use this little trick:</p><pre class=\"literal-block\">mylist = []append = mylist.appendappend('Everybody')append('likes')append('pandas.')mystring = ' '.join(mylist)</pre><p>Similarly, the <span class=\"python-inline\">tag</span> and <span class=\"python-inline\">text</span> methods are used very often with Yattag. So, your code is a lot more concise if, instead of writing <span class=\"python-inline\">mydocument.tag</span>, you just write <span class=\"python-inline\">tag</span>. It's also faster: you avoid an attribute lookup each time. That's where the <span class=\"python-inline\">tagtext</span> method comes into play.</p><p>The <span class=\"python-inline\">tagtext</span> method is a helper method that returns a triplet composed of:</p><blockquote><ul class=\"simple\"><li>the <span class=\"python-inline\">Doc</span> instance itself</li><li>the <span class=\"python-inline\">tag</span> method of the Doc instance</li><li>the <span class=\"python-inline\">text</span> method of the Doc instance</li></ul></blockquote><p>It's just a little trick to make html templates more concise and beautiful.</p><p>The  &quot;<span class=\"python-inline\">doc, tag, text = Doc().tagtext()</span>&quot; line is thus equivalent to the longer code:</p><pre class=\"literal-block\">doc = Doc()tag = doc.tagtext = doc.text</pre></div><div class=\"section\" id=\"the-tag-method\"><h2>The <span class=\"python-inline\">tag</span> method</h2><p>The <span class=\"python-inline\">tag</span> method returns a context manager. In Python, a context manager is an object that you can use in a <span class=\"python-inline\">with</span> statement. Context managers have <span class=\"python-inline\">__enter__</span> and <span class=\"python-inline\">__exit__</span> methods. The <span class=\"python-inline\">__enter__</span> method is called at the beginning of the <span class=\"python-inline\">with</span> block and the <span class=\"python-inline\">__exit__</span> method is called when leaving the block.</p><p>Now I think you can see why this is useful for generating xml or html.</p><p><span class=\"python-inline\">with tag('h1')</span> creates a <tt class=\"docutils literal\">&lt;h1&gt;</tt> tag.</p><p>It will be closed at the end of the <span class=\"python-inline\">with</span> block.</p><p>This way you don't have to worry about closing your tags.</p><p>Isn't it awesome? The python interpreter will close all your tags for you. No more headache looking for unclosed tags.</p><p>The <span class=\"python-inline\">tag</span> method will accept any string as a tag name. So you're not limited to valid HTML tag names. You can write very strange XML documents if you want. You can specify tag attributes as keyword arguments.</p><pre class=\"code python highlight highlight-large highlight-few-lines literal-block\"><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'icecream'</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"n\">flavour</span> <span class=\"o\">=</span> <span class=\"s1\">'pistachio'</span><span class=\"p\">):</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is really delicious.&quot;</span><span class=\"p\">)</span></pre><p>Since <span class=\"python-inline\">class</span> is a reserved keyword of the Python language, we had to replace it with <span class=\"python-inline\">klass</span>. A klass attribute will be replaced with a <tt class=\"docutils literal\">class</tt> attribute in the end result.</p><pre class=\"code python highlight highlight-few-lines literal-block\"><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'h2'</span><span class=\"p\">,</span> <span class=\"n\">klass</span><span class=\"o\">=</span><span class=\"s1\">'breaking-news'</span><span class=\"p\">):</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Sparta defeats Athens'</span><span class=\"p\">)</span></pre><p>In this example we get the result:</p><p><tt class=\"docutils literal\">&lt;h2 <span class=\"pre\">class=&quot;breaking-news&quot;&gt;Sparta</span> defeats <span class=\"pre\">Athens&lt;/h2&gt;</span></tt></p><p>For any other situation where an attribute's name can't be expressed as a Python identifier, you can use (key, value) pairs. For example, HTML5 allows attributes starting with &quot;data-&quot;. In that situation you would do:</p><pre class=\"code python highlight highlight-few-lines literal-block\"><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'td'</span><span class=\"p\">,</span>    <span class=\"p\">(</span><span class=\"s1\">'data-search'</span><span class=\"p\">,</span> <span class=\"s1\">'lemon'</span><span class=\"p\">),</span>    <span class=\"p\">(</span><span class=\"s1\">'data-order'</span><span class=\"p\">,</span> <span class=\"s1\">'1384'</span><span class=\"p\">),</span>    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'16'</span><span class=\"p\">):</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Citrus Limon'</span><span class=\"p\">)</span></pre><p>You'd get:</p><p><tt class=\"docutils literal\">&lt;td <span class=\"pre\">data-search=&quot;lemon&quot;</span> <span class=\"pre\">data-order=&quot;1384&quot;</span> <span class=\"pre\">id=&quot;16&quot;&gt;Citrus</span> <span class=\"pre\">Limon&lt;/td&gt;</span></tt></p><p><strong>Note:</strong> attributes values are escaped, that is, the &amp;, &lt; and &quot; characters are replaced with &amp;amp;,  &amp;lt;, and &amp;quot;.</p><p>For attributes without a value, just pass a string to the <span class=\"python-inline\">tag</span> method. For example,</p><pre class=\"code python highlight highlight-large highlight-few-lines literal-block\"><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">,</span> <span class=\"s1\">'ng-app'</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">):</span>        <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Welcome to my AngularJS application.'</span><span class=\"p\">)</span></pre><p>You'll get:</p><p><tt class=\"docutils literal\">&lt;html <span class=\"pre\">ng-app&gt;&lt;body&gt;Welcome</span> to my AngularJS <span class=\"pre\">application&lt;/body&gt;&lt;/html&gt;</span></tt></p></div><div class=\"section\" id=\"the-text-method\"><h2>The <span class=\"python-inline\">text</span> method</h2><p>We use the <span class=\"python-inline\">text</span> method to write some text in our document.</p><p>The <span class=\"python-inline\">text</span> method takes a string, escapes it so that it is safe to use in a html document (&amp;, &lt;, &gt; are replaced with &amp;amp;, &amp;lt; and &amp;gt;) and appends the escaped string to the document.</p><p>Actually, you can pass any number of strings to the <span class=\"python-inline\">text</span> method. For example:</p><pre class=\"code python highlight highlight-few-lines literal-block\"><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Hello '</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">)</span></pre><p>If you don't want your strings to be escaped, see the <span class=\"python-inline\">asis</span> method in the next section.</p></div></div><div class=\"section\" id=\"appending-strings-as-is\"><h1>2. Appending strings &quot;as is&quot;</h1><pre class=\"code python highlight literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tagtext</span><span class=\"p\">()</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">asis</span><span class=\"p\">(</span><span class=\"s1\">'&lt;!DOCTYPE html&gt;'</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">):</span>        <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>The <span class=\"python-inline\">asis</span> methods appends a string to the document without any form of escaping.</p><p>In this example, we don't want the <span class=\"python-inline\">&lt;</span> and <span class=\"python-inline\">&gt;</span> characters of the '&lt;!DOCTYPE html&gt;' string to be replaced with <span class=\"python-inline\">&amp;lt;</span> and <span class=\"python-inline\">&amp;gt;</span>.We really want the <span class=\"python-inline\">&lt;</span> and <span class=\"python-inline\">&gt;</span> characters to be added as is. So we use the <span class=\"python-inline\">asis</span> method instead of the <span class=\"python-inline\">text</span> method.</p><p>Our little example prints <tt class=\"docutils literal\">&lt;!DOCTYPE <span class=\"pre\">html&gt;&lt;html&gt;&lt;body&gt;Hello</span> <span class=\"pre\">world!&lt;/body&gt;&lt;/html&gt;</span></tt>.</p><p>As with the <span class=\"python-inline\">text</span> method, the <span class=\"python-inline\">asis</span> method can actually take any number of strings as arguments.</p></div><div class=\"section\" id=\"self-closing-tags\"><h1>3. Self closing tags</h1><pre class=\"code python highlight highlight-large literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tagtext</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'photo-container'</span><span class=\"p\">):</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'img'</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s1\">'/salmon-plays-piano.jpg'</span><span class=\"p\">,</span> <span class=\"n\">klass</span><span class=\"o\">=</span><span class=\"s2\">&quot;photo&quot;</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>The <span class=\"python-inline\">stag</span> method produces a self closing tag.</p><p>As with the <span class=\"python-inline\">tag</span> method, tag attributes are passed as keyword arguments to the <span class=\"python-inline\">stag</span> method, and attribute values are escaped (that is, any occurence of the &quot; character is replaced with &amp;quot;).</p><p>In this example we get the result:</p><p><tt class=\"docutils literal\">&lt;div <span class=\"pre\">id=&quot;photo-container&quot;&gt;&lt;img</span> <span class=\"pre\">src=&quot;/salmon-plays-piano.jpg&quot;</span> <span class=\"pre\">class=&quot;photo&quot;</span> <span class=\"pre\">/&gt;&lt;/div&gt;</span></tt></p><p>Note the <tt class=\"docutils literal\">/</tt> at the end of the self closing img tag.</p></div><div class=\"section\" id=\"setting-tag-attributes-after-opening-a-tag\"><h1>4. Setting tag attributes after opening a tag</h1><pre class=\"code python highlight highlight-large literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"n\">today</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tagtext</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">):</span>        <span class=\"k\">if</span> <span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">month</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">day</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>            <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;new-year-style&quot;</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;normal-style&quot;</span><span class=\"p\">)</span>        <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Welcome to our site&quot;</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>The <span class=\"python-inline\">attr</span> method sets the value(s) of one or more attributes of the current tag.</p><p>As with the <span class=\"python-inline\">tag</span> and <span class=\"python-inline\">stag</span> methods, tag attributes are passed as keyword arguments.</p><p>In our little, example:</p><blockquote><p>January the first, we get the string: <tt class=\"docutils literal\"><span class=\"pre\">&quot;&lt;html&gt;&lt;body</span> <span class=\"pre\">class=&quot;new-year-style&quot;&gt;Welcome</span> to our <span class=\"pre\">site&lt;/body&gt;&lt;/html&gt;&quot;</span></tt>.</p><p>On other days, we get <tt class=\"docutils literal\"><span class=\"pre\">&quot;&lt;html&gt;&lt;body</span> <span class=\"pre\">class=&quot;normal-style&quot;&gt;Welcome</span> to our <span class=\"pre\">site&lt;/body&gt;&lt;/html&gt;&quot;</span></tt>.</p></blockquote></div><div class=\"section\" id=\"shortcut-for-nodes-that-contain-only-text\"><h1>5. Shortcut for nodes that contain only text</h1><p>If you're producing HTML or XML, you've probably realized that most tag nodes contain only text.In order to write these in a terser way, use the <span class=\"python-inline\">line</span> method.</p><pre class=\"code python highlight highlight-large literal-block\"><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'ul'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'grocery-list'</span><span class=\"p\">):</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">,</span> <span class=\"s1\">'Tomato sauce'</span><span class=\"p\">,</span> <span class=\"n\">klass</span><span class=\"o\">=</span><span class=\"s2\">&quot;priority&quot;</span><span class=\"p\">)</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">,</span> <span class=\"s1\">'Salt'</span><span class=\"p\">)</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">,</span> <span class=\"s1\">'Pepper'</span><span class=\"p\">)</span></pre><p>You'll get:</p><pre class=\"code html highlight highlight-large highlight-html literal-block\"><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;grocery-list&quot;</span><span class=\"p\">&gt;</span>  <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;priority&quot;</span><span class=\"p\">&gt;</span>Tomato sauce<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Salt<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Pepper<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></pre><p>Oh, I forgot to introduce the <span class=\"python-inline\">ttl</span> method I just used in the example above.</p><p>It works just like the <span class=\"python-inline\">tagtext</span> method I've talked about in the beginning of the tutorial,but instead of returning the triplet <span class=\"python-inline\">(doc, doc.tag, doc.text)</span>,it returns the quadruplet <span class=\"python-inline\">(doc, doc.tag, doc.text, doc.line)</span>.</p></div><div class=\"section\" id=\"indentation\"><h1>6. Indentation</h1><p>We've added indentation in the example above for readability purpose, but actually the <span class=\"python-inline\">getvalue</span> method doesn't add spaces, indentation or new lines between tags.</p><p>Consequently, for big documents, the HTML or XML output is not as readable as hand-made HTML or XML.</p><p>In most cases, this is not a problem at all. For example, when debugging a web application, you'll look at the Python/Yattag code directly. Yattag code is in fact, more readable than hand made HTML. The Python interpreter guarantees that all your HTML tags are closed, and contrary to hand-made HTML, you'll get a syntax error if you don't close a quoted string, so it's really not necessary to look at the HTML output.</p><p>Moreover, you can use the &quot;Inspect Element&quot; function in Firefox (right click somewhere in the page and click on &quot;Inspect Element&quot;) to see the HTML document tree in a well indented and browsable fashion.</p><p>However, there might be a few situations where you want to produce well indented documents (for example when generating XML configuration files intended to be editable by hand). For that, you can use the <span class=\"python-inline\">indent</span> function.</p><pre class=\"code python highlight literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">indent</span><span class=\"o\">...</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>The <span class=\"python-inline\">indent</span> function takes a string representing a xml or html document, and returns a well indented version of this document.The <span class=\"python-inline\">indent</span> function is completely decoupled from the rest of Yattag. You can indent documents that were not generated by Yattag if you want.</p><p>You can tweak the end result by supplying these keyword arguments:</p><blockquote><ul class=\"simple\"><li><span class=\"python-inline\">indentation</span>: the indentation unit. By default, it's two spaces.</li><li><span class=\"python-inline\">newline</span>: the string to be used for new lines. By default, it's '\\n'. Maybe Windows users would like to set this to '\\r\\n'.</li><li><span class=\"python-inline\">indent_text</span>: by default, the content of nodes that directly contain some text (for example <tt class=\"docutils literal\">&lt;p&gt;Hello <span class=\"pre\">&lt;b&gt;world!&lt;/b&gt;&lt;/p&gt;</span></tt>) is left untouched. If you want the content of these nodes to be indented as well, use <span class=\"python-inline\">indent_text=True</span>.</li></ul></blockquote><pre class=\"code python highlight literal-block\"><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">indent</span><span class=\"p\">(</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">(),</span>    <span class=\"n\">indentation</span> <span class=\"o\">=</span> <span class=\"s1\">'    '</span><span class=\"p\">,</span>    <span class=\"n\">newline</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span>    <span class=\"n\">indent_text</span> <span class=\"o\">=</span> <span class=\"bp\">True</span><span class=\"p\">)</span></pre><p>Don't use the <span class=\"python-inline\">indent</span> function to output HTML in a web application. Although this function is relatively fast, this would remain a waste of cpu time and bandwidth. Think of the planet!</p></div><div class=\"section\" id=\"html-forms-rendering\"><h1>7. HTML forms rendering</h1><p>It is possible to generate HTML forms just by using the <span class=\"python-inline\">tag</span> and <span class=\"python-inline\">text</span> methods. After all, any html document could be generated this way. But you would be missing out on a very cool Yattag feature: completion of html forms with default values and errors. You can create a Doc instance and feed him with a dictionnary of default values and/or a dictionnary or errors. The defaults values are then inserted inside the form elements, and the error values displayed around the relevant fields.</p><pre class=\"code python highlight highlight-large literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">(</span>    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span>        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Untitled'</span><span class=\"p\">,</span>        <span class=\"s1\">'contact_message'</span><span class=\"p\">:</span> <span class=\"s1\">'You just won the lottery!'</span>    <span class=\"p\">},</span>    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">{</span>        <span class=\"s1\">'contact_message'</span><span class=\"p\">:</span> <span class=\"s1\">'Your message looks like spam.'</span>    <span class=\"p\">}</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">,</span> <span class=\"s1\">'Contact form'</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">textarea</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'contact_message'</span><span class=\"p\">):</span>        <span class=\"k\">pass</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'submit'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'Send my message'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>As you can see, we passed a <span class=\"python-inline\">defaults</span> and an <span class=\"python-inline\">errors</span> dictionnary to the Doc constructor.</p><p>Inside our template, we created the <span class=\"python-inline\">&lt;form&gt;</span> node with a call to the <span class=\"python-inline\">tag</span> method. Nothing new here.</p><p>What is new is the call to the <span class=\"python-inline\">input</span> and <span class=\"python-inline\">textarea</span> methods. These special methods look into the <span class=\"python-inline\">defaults</span> and/or <span class=\"python-inline\">errors</span> dictionnaries before generating their html content.</p><p>So instead of writing:</p><pre class=\"literal-block\">doc.stag('input', name = 'title', type = 'text')</pre><p>which would create a simple self closing input tag, without taking defaults or error values into account, you write:</p><pre class=\"literal-block\">doc.input(name = 'title', type = 'text')</pre><p>That creates a self closing input tag with the correct default and errors values.You can still pass all the html attributes you want as keyword arguments to this method.</p><p>Similarly, instead of writing:</p><pre class=\"literal-block\">with tag('textarea', name = 'contact_message'):    pass</pre><p>which would append the string:</p><p><tt class=\"docutils literal\">&lt;textarea <span class=\"pre\">name=&quot;contact_message&quot;&gt;&lt;/textarea&gt;</span></tt></p><p>you write:</p><pre class=\"literal-block\">with doc.textarea(name = 'contact_message'):    pass</pre><p>This appends the following string to the document:</p><p><tt class=\"docutils literal\">&lt;span <span class=\"pre\">class=&quot;error&quot;&gt;Your</span> message looks like <span class=\"pre\">spam.&lt;/span&gt;&lt;textarea</span> <span class=\"pre\">name=&quot;contact_message&quot;</span> <span class=\"pre\">class=&quot;error&quot;&gt;You</span> just won the <span class=\"pre\">lottery!&lt;/textarea&gt;</span></tt></p></div><div class=\"section\" id=\"select-and-options-tags\"><h1>8. Select and options tags</h1><p>Use the <span class=\"python-inline\">select</span> and <span class=\"python-inline\">option</span> methods to create <tt class=\"docutils literal\">select</tt> and <tt class=\"docutils literal\">option</tt> form elements.</p><pre class=\"code python highlight highlight-large literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">(</span>    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'ingredient'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'chocolate'</span><span class=\"p\">,</span> <span class=\"s1\">'coffee'</span><span class=\"p\">]}</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"s1\">'Select one or more ingredients'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'ingredient'</span><span class=\"p\">,</span> <span class=\"n\">multiple</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;multiple&quot;</span><span class=\"p\">):</span>        <span class=\"k\">for</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">description</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>            <span class=\"p\">(</span><span class=\"s2\">&quot;chocolate&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Dark Chocolate&quot;</span><span class=\"p\">),</span>            <span class=\"p\">(</span><span class=\"s2\">&quot;almonds&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Roasted almonds&quot;</span><span class=\"p\">),</span>            <span class=\"p\">(</span><span class=\"s2\">&quot;honey&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Acacia honey&quot;</span><span class=\"p\">),</span>            <span class=\"p\">(</span><span class=\"s2\">&quot;coffee&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Ethiopian coffee&quot;</span><span class=\"p\">)</span>        <span class=\"p\">):</span>            <span class=\"k\">with</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">):</span>                <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"p\">)</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;submit&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Validate&quot;</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>We get (indented for the readability of the example):</p><pre class=\"code html highlight highlight-very-large highlight-html literal-block\"><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>Select one or more ingredients<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">select</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;ingredient&quot;</span> <span class=\"na\">multiple</span><span class=\"o\">=</span><span class=\"s\">&quot;multiple&quot;</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;chocolate&quot;</span> <span class=\"na\">selected</span><span class=\"o\">=</span><span class=\"s\">&quot;selected&quot;</span><span class=\"p\">&gt;</span>Dark chocolate<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;almonds&quot;</span><span class=\"p\">&gt;</span>Roasted almonds<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;honey&quot;</span><span class=\"p\">&gt;</span>Acacia honey<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;coffee&quot;</span> <span class=\"na\">selected</span><span class=\"o\">=</span><span class=\"s\">&quot;selected&quot;</span><span class=\"p\">&gt;</span>Ethiopian coffee<span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;/</span><span class=\"nt\">select</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;Validate&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"p\">/&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></pre><p>Note that the two ingredients we specified in the <span class=\"python-inline\">defaults</span> dictionnary were selected.</p></div><div class=\"section\" id=\"checkboxes-and-radio-inputs\"><h1>9. checkboxes and radio inputs</h1><p>To create a html checkbox, call the <span class=\"python-inline\">input</span> method with the keyword argument <span class=\"python-inline\">type = 'checkbox'</span>.Similarly, for a radio input, call the <span class=\"python-inline\">input</span> method with <span class=\"python-inline\">type = 'radio'</span>.It reads just like HTML.</p><pre class=\"code python highlight highlight-very-large literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">yattag</span> <span class=\"kn\">import</span> <span class=\"n\">Doc</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">(</span>    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'color'</span><span class=\"p\">:</span> <span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'fun'</span><span class=\"p\">:</span> <span class=\"s1\">'yes'</span><span class=\"p\">},</span>    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'shipping-method'</span><span class=\"p\">:</span>\\      <span class=\"s2\">&quot;Error! You're an idiot for not having chosen a shipping method.&quot;</span>    <span class=\"p\">}</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">,</span> <span class=\"s1\">'Spaceship delivery details'</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'Please pick the color of the spaceship'</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'pink'</span><span class=\"p\">,</span> <span class=\"s1\">'yellow'</span><span class=\"p\">,</span> <span class=\"s1\">'ugly-yellow'</span><span class=\"p\">):</span>        <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'color'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'radio'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">)</span>        <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">)</span>    <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'What shipping method should be used?'</span><span class=\"p\">)</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'shipping-method'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'radio'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'1'</span><span class=\"p\">)</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Priority mail'</span><span class=\"p\">)</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'shipping-method'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'radio'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'2'</span><span class=\"p\">)</span>    <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Delivery by a very old monk travelling on a horse'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">):</span>        <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Check this box if you want some additional fun for free&quot;</span><span class=\"p\">)</span>        <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'fun'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'checkbox'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'yes'</span><span class=\"p\">)</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'submit'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'Confirm my order'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span></pre><p>We get the following html output (again, indented for readability):</p><pre class=\"code html highlight highlight-very-large highlight-html literal-block\"><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Spaceship delivery details<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Please pick the color of the spaceship<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;color&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;blue&quot;</span> <span class=\"p\">/&gt;</span>blue    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">checked</span><span class=\"o\">=</span><span class=\"s\">&quot;checked&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;color&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;red&quot;</span> <span class=\"p\">/&gt;</span>red    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;color&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;pink&quot;</span> <span class=\"p\">/&gt;</span>pink    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;color&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;yellow&quot;</span> <span class=\"p\">/&gt;</span>yellow    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;color&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;ugly-yellow&quot;</span> <span class=\"p\">/&gt;</span>ugly-yellow    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>What shipping method should be used?<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;error&quot;</span><span class=\"p\">&gt;</span>Error! You're an idiot for not having chosen a shipping method.<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;shipping-method&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;1&quot;</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;error&quot;</span> <span class=\"p\">/&gt;</span>Priority mail    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;radio&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;shipping-method&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;2&quot;</span> <span class=\"p\">/&gt;</span>Delivery by a very old monk travelling on a horse    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Check this box if you want some additional fun for free<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;checkbox&quot;</span> <span class=\"na\">checked</span><span class=\"o\">=</span><span class=\"s\">&quot;checked&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;fun&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;yes&quot;</span> <span class=\"p\">/&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;Confirm my order&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"p\">/&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span></pre><p>Note that the good radio button (red color) was selected, and that the checkbox was checked.</p></div><div class=\"section\" id=\"using-yattag-in-a-web-application\"><h1>10. Using Yattag in a web application</h1><p>In a web application, it's generally wise to separate business logic from presentation.When a client loads a web page, you compute all kind of stuff, update the database etc, then you pass what needs to be displayed to the presentation layer, for example as a Python dictionnary.</p><p>A good way to do this with Yattag is simply to use Python functions.</p><p><strong>Example</strong>:</p><pre class=\"code python highlight highlight-very-large literal-block\"><span class=\"k\">def</span> <span class=\"nf\">display_article</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>    <span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">(</span>        <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'form_defaults'</span><span class=\"p\">],</span>        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'form_errors'</span><span class=\"p\">]</span>    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">asis</span><span class=\"p\">(</span><span class=\"s1\">'&lt;!DOCTYPE html&gt;'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">):</span>        <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">):</span>            <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'article'</span><span class=\"p\">][</span><span class=\"s1\">'title'</span><span class=\"p\">])</span>            <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"s1\">'description'</span><span class=\"p\">):</span>                <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'article'</span><span class=\"p\">][</span><span class=\"s1\">'description'</span><span class=\"p\">])</span>            <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s1\">'/add-to-cart'</span><span class=\"p\">):</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'article_id'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'hidden'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'quantity'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'submit'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'Add to cart'</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span></pre><p>To reuse templates inside other template, you can use the <span class=\"python-inline\">asis</span> method.Say you have a connection box, that appears on all the pages.</p><pre class=\"code python highlight highlight-very-large literal-block\"><span class=\"k\">def</span> <span class=\"nf\">connection_box</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>    <span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'connection-box'</span><span class=\"p\">):</span>        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]:</span>            <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'Hello '</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">][</span><span class=\"s1\">'username'</span><span class=\"p\">],</span> <span class=\"s1\">'!'</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s1\">'/connect'</span><span class=\"p\">):</span>                <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"s1\">'Username:'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>                <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"s1\">'Password:'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'submit'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'Connexion'</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span></pre><p>You can insert it at the top of the article page:</p><pre class=\"code python highlight highlight-very-large literal-block\"><span class=\"k\">def</span> <span class=\"nf\">display_article</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>    <span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">Doc</span><span class=\"p\">(</span>        <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'form_defaults'</span><span class=\"p\">],</span>        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'form_errors'</span><span class=\"p\">]</span>    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">()</span>    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">asis</span><span class=\"p\">(</span><span class=\"s1\">'&lt;!DOCTYPE html&gt;'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">):</span>        <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">):</span>            <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">asis</span><span class=\"p\">(</span><span class=\"n\">connection_box</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>            <span class=\"n\">line</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'article'</span><span class=\"p\">][</span><span class=\"s1\">'title'</span><span class=\"p\">])</span>            <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"s1\">'description'</span><span class=\"p\">):</span>                <span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'article'</span><span class=\"p\">][</span><span class=\"s1\">'description'</span><span class=\"p\">])</span>            <span class=\"k\">with</span> <span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"s1\">'/add-to-cart'</span><span class=\"p\">):</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'article_id'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'hidden'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'quantity'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>                <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">stag</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'submit'</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'Add to cart'</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span></pre><p>This is only one way to organize your templates. Actually, you can use all the Python patterns you like. For example, if you think you need inheritance, you can put your templates into Python classes. However, simple functions, combined with the <span class=\"python-inline\">asis</span> method are often enough to do what you want.</p></div></div></div></div><div id=\"footer\"></div></div></div></body>",
  "embeddings": []
}
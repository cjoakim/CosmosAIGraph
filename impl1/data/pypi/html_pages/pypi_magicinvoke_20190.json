{
  "libtype": "pypi",
  "libname": "magicinvoke",
  "url": "https://magicinvoke.readthedocs.io/en/latest/",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">  <head>    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />    <title>Welcome to MagicInvoke! &#8212; MagicInvoke  documentation</title>    <link rel=\"stylesheet\" href=\"_static/alabaster.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://assets.readthedocs.org/static/css/badge_only.css\" />    <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>    <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>    <script async=\"async\" type=\"text/javascript\" src=\"https://assets.readthedocs.org/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"canonical\" href=\"https://magicinvoke.readthedocs.io/en/latest/index.html\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"*args and **kwargs support!\" href=\"examples/args-kwargs/README.html\" />     <link rel=\"stylesheet\" href=\"_static/custom.css\" type=\"text/css\" />      <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.9, maximum-scale=0.9\" />  <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"https://assets.readthedocs.org/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"build_date\": \"2022-03-30T23:40:44Z\", \"builder\": \"sphinx\", \"canonical_url\": null, \"commit\": \"1557503d\", \"docroot\": \"/sites/magic_docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"words\", \"project\": \"magicinvoke\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"alabaster\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"https://assets.readthedocs.org/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">                    <div class=\"body\" role=\"main\">              <div class=\"section\" id=\"welcome-to-magicinvoke\"><h1>Welcome to MagicInvoke!<a class=\"headerlink\" href=\"#welcome-to-magicinvoke\" title=\"Permalink to this headline\">\u00b6</a></h1><p><strong>MagicInvoke</strong> is an <a class=\"reference external\" href=\"http://pyinvoke.org\">invoke</a> extension thatadds support for lots of goodies:</p><ul><li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code> <strong>and</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> <strong>support!</strong>See how easy it is here: <a class=\"reference internal\" href=\"examples/args-kwargs/README.html#args-kwargs\"><span class=\"std std-ref\">Try it!</span></a>.</p></li><li><p class=\"first\"><strong>Automatic parameter defaults from ctx!</strong>Have you ever wondered why you can put <code class=\"docutils literal notranslate\"><span class=\"pre\">'run':</span> <span class=\"pre\">{'echo':</span> <span class=\"pre\">True}</span></code> in<code class=\"docutils literal notranslate\"><span class=\"pre\">invoke.yaml</span></code> and suddenly <code class=\"docutils literal notranslate\"><span class=\"pre\">echo=True</span></code> gets passed to all<code class=\"docutils literal notranslate\"><span class=\"pre\">ctx.run</span></code> s, but you can\u2019t do the same for your own tasks?</p><p>Wonder no longer with <a class=\"reference internal\" href=\"api/magicinvoke.html#magicinvoke.get_params_from_ctx\" title=\"magicinvoke.get_params_from_ctx\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">magicinvoke.get_params_from_ctx()</span></code></a>! Here\u2019s how youwould implement a task like ctx.run:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magictask</span><span class=\"k\">def</span> <span class=\"nf\">myrun</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>    <span class=\"k\">pass</span></pre></div></div></li><li><p class=\"first\"><strong>Make-like caching, file dependency recognition, and work-avoidance!</strong>Cache the results of expensive functions on disk:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@magictask</span><span class=\"p\">(</span><span class=\"n\">skippable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Caches to /tmp/.minv/tasks.expensive_task/xyz123</span><span class=\"k\">def</span> <span class=\"nf\">expensive_task</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;wget </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">stdout</span></pre></div></div><p>Also works with input/output file based functions:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@skippable</span><span class=\"k\">def</span> <span class=\"nf\">compile</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">input_c_files</span><span class=\"p\">,</span> <span class=\"n\">output_executable</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>    <span class=\"c1\"># Will not run if all input_c_files are older than output file and output</span>    <span class=\"c1\"># file was last generated with same &#39;flag&#39; values like &#39;debug&#39; arg.</span>    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;gcc </span><span class=\"si\">{}</span><span class=\"s1\"> -o </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">input_c_files</span><span class=\"p\">),</span> <span class=\"n\">output_executable</span><span class=\"p\">))</span></pre></div></div><dl class=\"docutils\"><dt>For API doc, see <a class=\"reference internal\" href=\"api/magicinvoke.html#magicinvoke.skippable\" title=\"magicinvoke.skippable\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">magicinvoke.skippable()</span></code></a>.</dt><dd><p class=\"first last\">Note that aside from re-running based on input/output file timestamps,<code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;skippable</span></code> also attempts to detect changes to the source of yourfunction. We cannot catch all changes that affect your function output,but we record the hash of two things to determine that your function hasremained unchanged since last run:The compiled bytecodeand the number of parsed characters on each line of the source.So, if you want to ensure a function is re-run,just add a comment within it on a new line!</p></dd></dl><p>For more examples, check out a basic<a class=\"reference internal\" href=\"examples/data-pipeline/README.html#data-pipeline\"><span class=\"std std-ref\">Data pipeline</span></a>.or a Py3-specific, more advanced<a class=\"reference internal\" href=\"examples/make-replacement/README.html#make-replacement\"><span class=\"std std-ref\">Make replacement</span></a>.</p><p>Note that chaining these is safer with pre/post feature of tasks, see<a class=\"reference internal\" href=\"examples/skippable-warning/README.html#skippable-warning\"><span class=\"std std-ref\">Skippable Warning</span></a>.</p></li><li><dl class=\"first docutils\"><dt><strong>Arbitrary task filtering!</strong></dt><dd><p class=\"first\">Implements the <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_ifs</span></code> argument for tasks, a rename of <code class=\"docutils literal notranslate\"><span class=\"pre\">checks</span></code> from<a class=\"reference external\" href=\"https://github.com/pyinvoke/invoke/issues/461\">from this issue</a>. Basically, you canadd your own functions that decide whether or not your task should run:</p><div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span><span class=\"k\">def</span> <span class=\"nf\">always_skip</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">skip_ifs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">always_skip</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">never_runs</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">):</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Never happens!&quot;</span><span class=\"p\">)</span></pre></div></div></dd></dl></li><li><p class=\"first\"><strong>Autoprint styles + overriding from cmd-line</strong>:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">autoprint</span><span class=\"o\">=</span><span class=\"s1\">&#39;unix&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Prints lists new-line-separated, dicts tab-separated</span><span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">autoprint</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Pretty-printed json</span></pre></div></div><p>Includes ability to set autoprint without modifying tasks: <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inv</span> <span class=\"pre\">-D</span> <span class=\"pre\">autoprint=unix</span> <span class=\"pre\">my-task-name</span></code></p></li><li><p class=\"first\"><strong>Better error messages for end-users (see bugfixes for more)</strong>:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">inv</span> <span class=\"n\">testing</span> <span class=\"n\">arg0</span><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"s1\">&#39;testing&#39;</span> <span class=\"n\">did</span> <span class=\"ow\">not</span> <span class=\"n\">receive</span> <span class=\"n\">required</span> <span class=\"n\">positional</span> <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"s1\">&#39;important_arg1&#39;</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"s1\">&#39;testing&#39;</span> <span class=\"n\">did</span> <span class=\"ow\">not</span> <span class=\"n\">receive</span> <span class=\"n\">required</span> <span class=\"n\">positional</span> <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"s1\">&#39;important_arg1&#39;</span><span class=\"o\">.</span>     <span class=\"n\">Signature</span><span class=\"p\">:</span> <span class=\"n\">testing</span> <span class=\"o\">&lt;</span><span class=\"n\">arg0</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">important_arg1</span><span class=\"o\">&gt;</span> <span class=\"o\">--</span><span class=\"n\">output</span><span class=\"o\">-</span><span class=\"n\">file</span> <span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span></pre></div></div></li><li><dl class=\"first docutils\"><dt><strong>Single-step namespaced tasks!</strong></dt><dd><p class=\"first last\">Merges the very helpful<a class=\"reference external\" href=\"https://github.com/pyinvoke/invoke/pull/527#issue-189000872\">patch</a>written by &#64;judy2k. No longer need to manually add each function to thecurrent namespace, making it easier to switch over to explicit namespaces.See his GitHub issue for usage.</p></dd></dl></li><li><p class=\"first\"><strong>Program.invoke, thanks &#64;rectalogic!</strong> Example usage:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span><span class=\"k\">def</span> <span class=\"nf\">infinite_recursing_task</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">recursed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>  <span class=\"n\">program</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s2\">&quot;infinite-recursing-task&quot;</span><span class=\"p\">,</span> <span class=\"n\">recursed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></pre></div></div><p><a class=\"reference external\" href=\"https://github.com/pyinvoke/invoke/pull/613\">Longer explanation here.</a></p></li><li><p class=\"first\"><strong>Bugfixes</strong></p><ul class=\"simple\"><li>Fix cryptic error when doing <code class=\"docutils literal notranslate\"><span class=\"pre\">ctx.cd(pathlib.Path)</span></code> (#454).</li><li>Fix help documentation for misspelled variable names silently being ignored (#409).</li><li>Fix help documentation with - instead of _ being silently being ignored (#398).</li><li>Fix silently ignoring config file path  (#560).</li><li>Fix cryptic error when task passed <code class=\"docutils literal notranslate\"><span class=\"pre\">pre=func</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">pre=[func]</span></code>.</li><li>Fix cryptic error when <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;task('func')</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;task(func)</span></code> (#598).</li><li>Private tasks (starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">_</span></code>) no longer show up in task list.</li></ul></li></ul><div class=\"section\" id=\"get-started\"><h2>Get Started<a class=\"headerlink\" href=\"#get-started\" title=\"Permalink to this headline\">\u00b6</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">magicinvoke</span></code></p><p>Beginner\u2019s Note:<a class=\"reference external\" href=\"http://pyinvoke.org\">Invoke\u2019s documentation</a> is the best place to start,as the majority of using this library is just like using regular <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>.You should still install <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">magicinvoke</span></code> to get theimproved error messages.</p></div><div class=\"section\" id=\"examples\"><h2>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/args-kwargs/README.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> support!</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/data-pipeline/README.html\">Easily caching expensive tasks</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/make-replacement/README.html\">GNU Make Replacement</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/skip-if/README.html\">Intelligently skip tasks with <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_ifs</span></code></a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/skippable-warning/README.html\">Careful with &#64;skippable!</a></li></ul></div></div><div class=\"section\" id=\"api-documentation\"><span id=\"api\"></span><h2>API Documentation<a class=\"headerlink\" href=\"#api-documentation\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/magicinvoke.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">magicinvoke</span></code> Documentation</a></li></ul></div></div><div class=\"section\" id=\"thanks-to-invoke\"><h2>Thanks to Invoke<a class=\"headerlink\" href=\"#thanks-to-invoke\" title=\"Permalink to this headline\">\u00b6</a></h2><p>This module is 95% <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code> code. All praise for the extensibility, durabilityand readability of <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code>-using code goes to <code class=\"docutils literal notranslate\"><span class=\"pre\">bitprophet</span></code> and friends.It\u2019s a fun library to use, and here\u2019s hoping <code class=\"docutils literal notranslate\"><span class=\"pre\">magicinvoke</span></code> gives it the littleboost it needs for big, monolithic projects, and serves as a testing-groundsfor potentially breaking features like <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> on tasks, since I\u2019m too lazyto write enough tests to get into the real <code class=\"docutils literal notranslate\"><span class=\"pre\">invoke</span></code> library!</p><p>If you enjoy them (but not too often), you should also thank Anton Backer forthe very handy<code class=\"docutils literal notranslate\"><span class=\"pre\">colored-traceback</span></code>, which will be automatically activated if installed.</p></div></div>          </div>                  </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><h1 class=\"logo\"><a href=\"#\">MagicInvoke</a></h1><p class=\"blurb\">(Pythonic task execution)++</p><p><iframe src=\"https://ghbtns.com/github-btn.html?user=haydenflinner&repo=magicinvoke&type=watch&count=true&size=large&v=2\"  allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"200px\" height=\"35px\"></iframe></p><h3>Navigation</h3><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/args-kwargs/README.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> support!</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/data-pipeline/README.html\">Easily caching expensive tasks</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/make-replacement/README.html\">GNU Make Replacement</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/skip-if/README.html\">Intelligently skip tasks with <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_ifs</span></code></a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/skippable-warning/README.html\">Careful with &#64;skippable!</a></li></ul><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/magicinvoke.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">magicinvoke</span></code> Documentation</a></li></ul><hr /><ul>        <li class=\"toctree-l1\"><a href=\"http://www.pyinvoke.org\">Invoke's website</a></li>    </ul><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3>Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" />      <input type=\"submit\" value=\"Go\" />      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />      <input type=\"hidden\" name=\"area\" value=\"default\" />    </form>    </div></div><script type=\"text/javascript\">$('#searchbox').show(0);</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"footer\">      &copy;2022 Hayden Flinner.            |      Powered by <a href=\"http://sphinx-doc.org/\">Sphinx 1.8.6</a>      &amp; <a href=\"https://github.com/bitprophet/alabaster\">Alabaster 0.7.12</a>            |      <a href=\"_sources/index.rst.txt\"          rel=\"nofollow\">Page source</a>    </div>          </body></html>",
  "embeddings": []
}
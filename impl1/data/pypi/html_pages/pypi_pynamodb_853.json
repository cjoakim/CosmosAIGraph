{
  "libtype": "pypi",
  "libname": "pynamodb",
  "url": "http://jlafon.io/pynamodb.html",
  "html": "<!DOCTYPE html><html lang=\"en\"><head><title>Introducing PynamoDB, a Pythonic interface to Amazon's DynamoDB</title><meta charset=\"utf-8\"/><meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"/><link href=\"http://jlafon.io/images/favicon.ico\" rel=\"shortcut icon\"/><link href=\"http://jlafon.io/theme/css/main.css\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"http://jlafon.io/feeds/all.atom.xml\" rel=\"alternate\" title=\"Cloud Native Atom Feed\" type=\"application/atom+xml\"/><script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js\" type=\"text/javascript\"></script></head><body class=\"home\" id=\"index\"><div class=\"LaunchyardDetail\"><p><a href=\"http://jlafon.io/\"></a>A blog about cloud computing and development<br/><a href=\"http://jlafon.io/pages/jharrod-lafon.html\">About me</a></p></div><section id=\"content\"><div class=\"body\"><article><header><h1 class=\"entry-title\"><a href=\"http://jlafon.io/pynamodb.html\" rel=\"bookmark\" title=\"Permalink to Introducing PynamoDB, a Pythonic interface to Amazon's DynamoDB\">Introducing PynamoDB, a Pythonic interface to Amazon's DynamoDB</a></h1></header><div class=\"entry-content\"><div class=\"post-info\"><ul><li class=\"vcard author\">by\u00a0<a class=\"url fn\" href=\"http://jlafon.io/author/jharrod-lafon.html\">Jharrod LaFon</a> </li><li class=\"published\" title=\"2014-01-23T08:42:00\">on\u00a0Thu 23 January 2014</li></ul><p>Category: <a href=\"http://jlafon.io/tag/python.html\">Python </a><a href=\"http://jlafon.io/tag/dynamodb.html\">DynamoDB </a><a href=\"http://jlafon.io/tag/aws.html\">AWS </a></p></div> <p>Link to <a href=\"https://github.com/jlafon/PynamoDB\">GitHub</a>, <a href=\"http://pynamodb.rtfd.org\">Documentation</a> for the impatient.</p><h2>Introduction</h2><p>DynamoDB is a powerful, proprietary NoSQL database service provided by Amazon. DynamoDB allows you to pay for dedicated throughput, with predictable performance for 'any level of request traffic'. Scalability is handled for you, and table data is replicated across multiple availability zones. All that is left is for you to take your data, and its access patterns, and make it work in the denormalized world of NoSQL.</p><h2>Data Structure</h2><p>The single most important part of using DynamoDB begins before you ever put data into it: designing the table(s) and keys. Keys (Amazon calls them primary keys) can be composed of one attribute, called a hash key, or a compound key called the hash and range key. This key is used to uniquely identify an item in a table. The choice of the primary key is particularly important because of the way that Amazon accesses the data. Amazon shards (partitions) your data internally, based on this key. When you pay for provisioned throughput, that throughput is divided across those shards. If you choose a key with too little entropy, causing too many items to hash to the same shard, then you are limiting your own throughput. Suppose that you wanted to create a table to represent stories submitted to <a href=\"http://news.ycombinator.com/\">Hacker News</a>. You could use the following table:</p><table><thead><tr><th>link (hash key)</th><th>title</th><th>points</th><th>days_old</th></tr></thead><tbody><tr><td>http://goo.gl/LNp4u8</td><td>'The rise and rise of dogecoin'</td><td>21</td><td>1</td></tr></tbody></table><p>In this table we are storing the link, its title, the number of points it has, and how many days old it is. We're using the link as the hash key here, and it uniquely identifies one item. This allows you to retrieve the item, in order update its vote count. Actually, Amazon actually provides an atomic integer update via the <code>UpdateItem</code> operation, so you don't even have to retrieve the item. You can even provide a mapping of attributes and their 'expected' values in order to apply a conditional update. </p><h2>Indexes</h2><p>So far we've chosen our hash key, the <code>link</code>, and we can update the vote count atomically. You may realize that in order to display a list of links, we need to be able to retrieve them without relying solely on the <code>link</code> attribute. In fact, we want to retrieve thembased on the <code>points</code> attribute. This is what indexes are designed for, alternative access. What we can do is define a global index on the <code>days_old</code> and <code>points</code> attributes. This would allow us to issue a query using the index, where we could get the highest voted over a given set of days (yes, it's an overly simplistic model but it works for this example). This is known as a global secondary index by Amazon. It's global because it applies to the entire table, and secondary because the first real index is the primary hash key. In contrast, local secondary indexes are said to be local to a specific hash key. In that case you would have multiple items with the same hash key, but different range keys, and you could query those items using only the hash key. </p><h2>Python</h2><p>I actually had a use case in mind for DynamoDB when I set out to learn it. After studying the concepts I was ready to try it out. My particular use case needed secondary indexes in order to work. Python being my normal language of choice, I went Googling for a Python interface to DynamoDB. I found <a href=\"http://dynamodb-mapper.readthedocs.org/en/latest/\">dynamodb-mapper</a>, which looked very promising. It has many nice features, such as schema validation and attribute type mapping. I got my model defined quickly, and then got ready to create my indexes...only to discover that they aren't supported. Darn. OK, no problem, it's open source - I can fix it. I dug into the source, and found that it uses the widely used <code>boto</code> library. I thought to myself, 'Great! I know boto, I'll have this working in no time!'. That's when I discovered that <code>boto</code> had <em>two</em> versions its DynamoDB library. Apparently, DynamoDB has changed enough that the authors of <code>boto</code> decided to start over. After looking into the dynamodb-mapper code, I realized it would be no small feat to port it from <code>boto.dynamodb</code> to <code>boto.dynamodb2</code>. I even found a <a href=\"http://dynamodb-mapper.readthedocs.org/en/latest/\">pull request</a> where someone attempted it, but the pull request wasn't merged. </p><p>That's when I decided to write my own. I started with the syntax I wanted, and then worked backward. I also started with Python 3, and supported Python 2 as an afterthought (and so should you!). Because I know <code>boto</code>, I assumed it wouldn't be too hard. But...<code>boto</code> doesn't support Python 3. Actually, <code>boto</code> is the <a href=\"http://python3wos.appspot.com/\">most popular Python package</a> to <em>not</em> support Python 3 (which is 6 years old!). </p><p>I couldn't use <code>boto</code>, but all was not lost. There is another library, <code>botocore</code>, written by the same people. It's a much smaller library, providing a minimalist layer on top of Amazon's web API, but it was enough. I sacrificed an entire weekend, but now it's done. </p><h2>PynamoDB</h2><p><a href=\"http://pynamodb.rtfd.org\">Full documentation</a></p><p>PynamoDB is attempt to be a Pythonic interface to DynamoDB that supports all of DynamoDB\u2019s powerful features in both Python 3, and Python 2. This includes properly handling unicode and binary attributes, local secondary indexes, and global secondary indexes. Other features include:</p><ul><li>Sets for Binary, Number, and Unicode attributes</li><li>Automatic pagination for bulk operations</li><li>Iterators for Scan, Query, BatchGet operations</li><li>Context managers for batch operations</li><li>Automatic paging (in progress)</li></ul><h2>Example</h2><p>Here is how you can create a table, with indexes, using PynamoDB.</p><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">pynamodb.models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"kn\">from</span> <span class=\"nn\">pynamodb.indexes</span> <span class=\"kn\">import</span> <span class=\"n\">GlobalSecondaryIndex</span><span class=\"p\">,</span> <span class=\"n\">AllProjection</span><span class=\"kn\">from</span> <span class=\"nn\">pynamodb.attributes</span> <span class=\"kn\">import</span> <span class=\"n\">UnicodeAttribute</span><span class=\"p\">,</span> <span class=\"n\">NumberAttribute</span><span class=\"k\">class</span> <span class=\"nc\">DaysIndex</span><span class=\"p\">(</span><span class=\"n\">GlobalSecondaryIndex</span><span class=\"p\">):</span>    <span class=\"sd\">\"\"\"</span><span class=\"sd\">    This class represents a global secondary index</span><span class=\"sd\">    \"\"\"</span>    <span class=\"n\">read_capacity_units</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>    <span class=\"n\">write_capacity_units</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>    <span class=\"n\">projection</span> <span class=\"o\">=</span> <span class=\"n\">AllProjection</span><span class=\"p\">()</span>    <span class=\"n\">days_old</span> <span class=\"o\">=</span> <span class=\"n\">NumberAttribute</span><span class=\"p\">(</span><span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">HackerNewsLinks</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>    <span class=\"sd\">\"\"\"</span><span class=\"sd\">    A test model that uses a global secondary index</span><span class=\"sd\">    \"\"\"</span>    <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"s\">'HackerNews'</span>    <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">UnicodeAttribute</span><span class=\"p\">(</span><span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">UnicodeAttribute</span><span class=\"p\">()</span>    <span class=\"n\">days_index</span> <span class=\"o\">=</span> <span class=\"n\">DaysIndex</span><span class=\"p\">()</span>    <span class=\"n\">days_old</span> <span class=\"o\">=</span> <span class=\"n\">NumberAttribute</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">HackerNewsLinks</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>    <span class=\"n\">HackerNewsLinks</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">read_capacity_units</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">write_capacity_units</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c\"># Indexes can be queried easily using the index's hash key</span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">HackerNewsLinks</span><span class=\"o\">.</span><span class=\"n\">day_index</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Item queried from index: {0}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span></pre></div><p>Here is the same thing (without the query), but using <code>botocore</code> instead:</p><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">botocore.session</span> <span class=\"kn\">import</span> <span class=\"n\">get_session</span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s\">'read_capacity_units'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>    <span class=\"s\">'write_capacity_units'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>    <span class=\"s\">'attribute_definitions'</span><span class=\"p\">:</span> <span class=\"p\">[</span>         <span class=\"p\">{</span>             <span class=\"s\">'attribute_type'</span><span class=\"p\">:</span> <span class=\"s\">'STRING'</span><span class=\"p\">,</span>             <span class=\"s\">'attribute_name'</span><span class=\"p\">:</span> <span class=\"s\">'link'</span>         <span class=\"p\">},</span>         <span class=\"p\">{</span>             <span class=\"s\">'attribute_type'</span><span class=\"p\">:</span> <span class=\"s\">'STRING'</span><span class=\"p\">,</span>             <span class=\"s\">'attribute_name'</span><span class=\"p\">:</span> <span class=\"s\">'title'</span>         <span class=\"p\">},</span>         <span class=\"p\">{</span>             <span class=\"s\">'attribute_type'</span><span class=\"p\">:</span> <span class=\"s\">'NUMBER'</span><span class=\"p\">,</span>             <span class=\"s\">'attribute_name'</span><span class=\"p\">:</span> <span class=\"s\">'points'</span>         <span class=\"p\">}</span>     <span class=\"p\">],</span>     <span class=\"s\">'key_schema'</span><span class=\"p\">:</span> <span class=\"p\">[</span>         <span class=\"p\">{</span>             <span class=\"s\">'key_type'</span><span class=\"p\">:</span> <span class=\"s\">'HASH'</span><span class=\"p\">,</span>             <span class=\"s\">'attribute_name'</span><span class=\"p\">:</span> <span class=\"s\">'link'</span>         <span class=\"p\">},</span>     <span class=\"p\">],</span>     <span class=\"s\">'global_secondary_indexes'</span><span class=\"p\">:</span> <span class=\"p\">[</span>         <span class=\"p\">{</span>             <span class=\"s\">'index_name'</span><span class=\"p\">:</span> <span class=\"s\">'days_index'</span><span class=\"p\">,</span>             <span class=\"s\">'key_schema'</span><span class=\"p\">:</span> <span class=\"p\">[</span>                 <span class=\"p\">{</span>                     <span class=\"s\">'KeyType'</span><span class=\"p\">:</span> <span class=\"s\">'HASH'</span><span class=\"p\">,</span>                     <span class=\"s\">'AttributeName'</span><span class=\"p\">:</span> <span class=\"s\">'days'</span>                 <span class=\"p\">}</span>             <span class=\"p\">],</span>             <span class=\"s\">'projection'</span><span class=\"p\">:</span> <span class=\"p\">{</span>                 <span class=\"s\">'ProjectionType'</span><span class=\"p\">:</span> <span class=\"s\">'KEYS_ONLY'</span>             <span class=\"p\">},</span>             <span class=\"s\">'provisioned_throughput'</span><span class=\"p\">:</span> <span class=\"p\">{</span>                 <span class=\"s\">'ReadCapacityUnits'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>                 <span class=\"s\">'WriteCapacityUnits'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>             <span class=\"p\">}</span>         <span class=\"p\">}</span>     <span class=\"p\">],</span><span class=\"p\">}</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">get_session</span><span class=\"p\">()</span><span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get_service</span><span class=\"p\">(</span><span class=\"s\">'dynamodb'</span><span class=\"p\">)</span><span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">get_endpoint</span><span class=\"p\">(</span><span class=\"s\">'us-east-1'</span><span class=\"p\">)</span><span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">get_operation</span><span class=\"p\">(</span><span class=\"s\">'CreateTable'</span><span class=\"p\">)</span><span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></pre></div></div><a class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"@JharrodLaFon\" href=\"http://twitter.com/share\">Tweet</a><script src=\"http://platform.twitter.com/widgets.js\" type=\"text/javascript\"></script><br/><br/><div class=\"comments\"><div id=\"disqus_thread\"></div><script type=\"text/javascript\">            var disqus_identifier = \"pynamodb.html\";            (function() {            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;            dsq.src = 'http://jharrodlafonsblog.disqus.com/embed.js';            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);            })();          </script></div></article></div></section><section id=\"extras\"></section><script type=\"text/javascript\">    var _gaq = _gaq || [];    _gaq.push(['_setAccount', 'UA-45985936-1']);    _gaq.push(['_trackPageview']);    (function() {        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);    })();    </script><script type=\"text/javascript\">    var disqus_shortname = 'jharrodlafonsblog';    (function () {        var s = document.createElement('script'); s.async = true;        s.type = 'text/javascript';        s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);    }());</script></body></html>",
  "embeddings": []
}
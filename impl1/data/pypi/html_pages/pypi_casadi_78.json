{
  "libtype": "pypi",
  "libname": "casadi",
  "url": "http://casadi.org",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head><meta name=\"generator\" content=\"Hugo 0.112.7\">    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <meta name=\"description\" content=\"\">    <meta name=\"author\" content=\"\">          <title>CasADi</title>            <link href=\"https://web.casadi.org/_css/font-awesome.min.css\" rel=\"stylesheet\">        <link href=\"https://web.casadi.org/_css/bootstrap.min.css\" rel=\"stylesheet\">        <link href=\"https://web.casadi.org/_css/pygments-default.css\" rel=\"stylesheet\">        <link href=\"https://web.casadi.org/_css/casadi-theme.min.css\" rel=\"stylesheet\">    <script type=\"text/x-mathjax-config\">      MathJax.Hub.Config({        tex2jax: {          inlineMath: [ ['$','$'], ['\\\\(','\\\\)'] ],          displayMath: [ ['$$','$$'], ['\\\\[','\\\\]'] ],          processEnvironments: false        }      });    </script>    <link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" />    <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />  </head>  <body><nav class=\"navbar fixed-top navbar-expand-lg nav-top\">  <div class=\"container\">    <a class=\"navbar-brand\" href=\"https://web.casadi.org/\"></a>    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">      <i class=\"fa fa-bars\" aria-hidden=\"true\"></i>    </button>    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">      <ul class=\"navbar-nav\">                                    <li class=\"nav-item active\">                      <a class=\"nav-link\" href=\"/\">Home</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/get/\">Try/Install</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/docs/\">Docs</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/support/\">Support</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/source/\">Source</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/publications/\">Publications</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/events/\">Workshops</a>          </li>                            <li class=\"nav-item\">                      <a class=\"nav-link\" href=\"/blog/\">Blog</a>          </li>              </ul>    </div>  </div></nav><div id=\"landing-cover\">  <div class=\"vert-text\">    <img src=\"https://web.casadi.org/_img/logo_2017_horizontal.png\" class=\"logo\">    <div class=\"description\"></div>  </div>  <div class=\"scroll\">    <i class=\"fa fa-angle-down fa-2x\"></i>  </div></div><div id=\"main\" class=\"container landing\">                          <div class=\"row subtitle\"><p>  Build efficient optimal control software, with minimal effort.</p></div><div class=\"text-center\">  <p>CasADi is an <em>open-source</em> tool for <em>nonlinear optimization</em> and <em>algorithmic differentiation</em>.</p>  <p>It <em>facilitates</em> rapid &mdash; yet efficient &mdash; implementation of different methods for numerical <em>optimal control</em>, both in an offline context and for nonlinear <em>model predictive control</em> (NMPC).</p></div>                       <hr class=\"sep\">               <h2 class=\"text-center\">Algorithmic Differentiation (AD)</h2><div class=\"row\">  <div class=\"col-md-6  text-left\">CasADi's backbone is a <a href=\"docs/#document-symbolic\">symbolic framework</a> implementing forward and reverse mode of <a href=\"docs/#calculus-algorithmic differentiation\">AD</a> on expression graphs to construct gradients, large-and-sparse Jacobians and Hessians.<p>These expression graphs, encapsulated in <a href=\"docs/#calling-function-objects\">Function</a> objects, can be evaluated in a virtual machine or be <a href=\"docs/#generating-c-code\">exported</a> to stand-alone C code.</p>  </div><div class=\"col-md-6\"><div class=\"multisnip text-left\"><div class=\"highlight\"><pre><code data-lang=\"example\"></code></pre><figure class=\" default\">  <a href=\"https://web.casadi.org/home/card-ad/../ad.png\" target=\"_blank\">  <img src=\"https://web.casadi.org/home/card-ad/../ad.png\"  />  </a></figure></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-octave\" data-lang=\"octave\"><span class=\"line\"><span class=\"cl\"><span class=\"n\">import</span> <span class=\"n\">casadi</span><span class=\"o\">.*</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Create scalar/matrix symbols</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Compose into expressions</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">y</span> <span class=\"p\">=</span> <span class=\"nb\">norm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Sensitivity of expression -&gt; new expression</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">grad_y</span> <span class=\"p\">=</span> <span class=\"nb\">gradient</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Create a Function to evaluate expression</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s\">&#39;f&#39;</span><span class=\"p\">,{</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"n\">grad_y</span><span class=\"p\">});</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Evaluate numerically</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">grad_y_num</span> <span class=\"p\">=</span> <span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"mi\">5</span><span class=\"p\">])</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-python\" data-lang=\"python\"><span class=\"line\"><span class=\"cl\"><span class=\"kn\">from</span> <span class=\"nn\">casadi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Create scalar/matrix symbols</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Compose into expressions</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">norm_2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Sensitivity of expression -&gt; new expression</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">grad_y</span> <span class=\"o\">=</span> <span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Create a Function to evaluate expression</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">,[</span><span class=\"n\">x</span><span class=\"p\">],[</span><span class=\"n\">grad_y</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Evaluate numerically</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">grad_y_num</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]);</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"line\"><span class=\"cl\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;casadi/casadi.hpp&gt;</span><span class=\"cp\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">casadi</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Create scalar/matrix symbols</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Compose into expressions</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">norm_2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Sensitivity of expression -&gt; new expression</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">grad_y</span> <span class=\"o\">=</span> <span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Create a Function to evaluate expression</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">Function</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s\">&#34;f&#34;</span><span class=\"p\">,{</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"n\">grad_y</span><span class=\"p\">});</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Evaluate numerically</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">DM</span><span class=\"o\">&gt;</span> <span class=\"n\">grad_y_num</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">DM</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">}));</span></span></span></code></pre></div></div>  </div></div>                       <hr class=\"sep\">               <h2 class=\"text-center\">Dynamic systems</h2><div class=\"row\"><div class=\"col-md-6\"><div class=\"multisnip text-left\"><div class=\"highlight\"><pre><code data-lang=\"example\"></code></pre><figure class=\" default\">  <a href=\"https://web.casadi.org/home/card-integrator/../integration.png\" target=\"_blank\">  <img src=\"https://web.casadi.org/home/card-integrator/../integration.png\"  />  </a></figure><p>$$\\begin{align}\\left\\{\\begin{array}{ccll}\\dot{x}_1 &amp;=&amp; (1-x_2^2) \\, x_1 - x_2, \\quad &amp;x_1(0)=0 \\\\\\dot{x}_2 &amp;=&amp; x_1, \\quad &amp;x_2(0)=1\\end{array}\\right.\\end{align}$$</p></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-octave\" data-lang=\"octave\"><span class=\"line\"><span class=\"cl\"><span class=\"n\">import</span> <span class=\"n\">casadi</span><span class=\"o\">.*</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c\">% Two states</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Expression for ODE right-hand side</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">z</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>^<span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">rhs</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)];</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">ode</span> <span class=\"p\">=</span> <span class=\"nb\">struct</span><span class=\"p\">;</span>    <span class=\"c\">% ODE declaration</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">ode</span><span class=\"p\">.</span><span class=\"n\">x</span>   <span class=\"p\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>     <span class=\"c\">% states</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">ode</span><span class=\"p\">.</span><span class=\"n\">ode</span> <span class=\"p\">=</span> <span class=\"n\">rhs</span><span class=\"p\">;</span>   <span class=\"c\">% right-hand side</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Construct a Function that integrates over 4s</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">F</span> <span class=\"p\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;cvodes&#39;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Start from x=[0;1]</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">res</span> <span class=\"p\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s\">&#39;x0&#39;</span><span class=\"p\">,[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">xf</span><span class=\"p\">)</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Sensitivity wrt initial state</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">res</span> <span class=\"p\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s\">&#39;x0&#39;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">S</span> <span class=\"p\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s\">&#39;S&#39;</span><span class=\"p\">,{</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"n\">jacobian</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">xf</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)});</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]))</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-python\" data-lang=\"python\"><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\"># Two states</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Expression for ODE right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">ode</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>         <span class=\"c1\"># ODE declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">ode</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>   <span class=\"o\">=</span> <span class=\"n\">x</span>   <span class=\"c1\"># states</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">ode</span><span class=\"p\">[</span><span class=\"s1\">&#39;ode&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rhs</span> <span class=\"c1\"># right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Construct a Function that integrates over 4s</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;cvodes&#39;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Start from x=[0;1]</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">&#34;xf&#34;</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Sensitivity wrt initial state</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"s1\">&#39;S&#39;</span><span class=\"p\">,[</span><span class=\"n\">x</span><span class=\"p\">],[</span><span class=\"n\">jacobian</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s2\">&#34;xf&#34;</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">)])</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"line\"><span class=\"cl\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;casadi/casadi.hpp&gt;</span><span class=\"cp\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">casadi</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// Two states</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Expression for ODE right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"mi\">2</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MXDict</span> <span class=\"n\">ode</span><span class=\"p\">;</span>         <span class=\"c1\">// ODE declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">ode</span><span class=\"p\">[</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">]</span>   <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>     <span class=\"c1\">// states</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">ode</span><span class=\"p\">[</span><span class=\"s\">&#34;ode&#34;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rhs</span><span class=\"p\">;</span>   <span class=\"c1\">// right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Construct a Function that integrates over 4s</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">Function</span> <span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s\">&#34;F&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;cvodes&#34;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Start from x=[0;1]</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">DMDict</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">DMDict</span><span class=\"p\">{{</span><span class=\"s\">&#34;x0&#34;</span><span class=\"p\">,</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}}});</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s\">&#34;xf&#34;</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Sensitivity wrt initial state</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MXDict</span> <span class=\"n\">ress</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">MXDict</span><span class=\"p\">{{</span><span class=\"s\">&#34;x0&#34;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">}});</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">Function</span> <span class=\"nf\">S</span><span class=\"p\">(</span><span class=\"s\">&#34;S&#34;</span><span class=\"p\">,{</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"n\">jacobian</span><span class=\"p\">(</span><span class=\"n\">ress</span><span class=\"p\">[</span><span class=\"s\">&#34;xf&#34;</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">)});</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"n\">DM</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}));</span></span></span></code></pre></div></div></div><div class=\"col-md-6  text-left\"><p><a href=\"docs/#initial-value-problems-and-sensitivity-analysis\">Initial value problems</a> in ordinary or differential-algebraic equations (ODE/DAE) can be calculated using explicit or implicit Runge-Kutta methods or interfaces to IDAS/CVODES from the SUNDIALS suite. Derivatives are calculated using <em>sensitivity equations</em>, up to arbitrary order.</p><p><em>Problem class:</em></p><p>$$\\begin{aligned}\\dot{x} &amp;= f_{\\text{ode}}(t,x,z,p), \\qquad x(0) = x_0 \\\\0  &amp;= f_{\\text{alg}}(t,x,z,p)\\end{aligned}$$</p></div></div>                        <hr class=\"sep\">               <h2 class=\"text-center\">Nonlinear and quadratic programming</h2><div class=\"row\">  <div class=\"col-md-6  text-left\"><p><a href=\"docs/#nonlinear-programming\">Nonlinear programs</a> (NLPs), possibly with integer variables (MINLP), can be solved using block structure or general sparsity exploiting sequential quadratic programming (SQP) or interfaces to IPOPT/BONMIN, BlockSQP, WORHP, KNITRO, SNOPT, SLEQP, and Alpaqa. Solution <em>sensitivities</em>, up to arbitrary order, can be calculated analytically. <a href=\"docs/#quadratic-programming\">Quadratic programs</a> (QPs), possibly with integer variables (MIQP), can be solved using a primal-dual active-set method [3] or interfaces to CPLEX, GUROBI, HPIPM, OOQP, qpOASES or HiGHS.<br /><p><em>Problem class:</em>$$\\begin{array}{cc}\\begin{array}{c}\\text{minimize:} \\\\x\\end{array}&amp;f(x,p)\\\\\\begin{array}{c}\\text{subject to:}\\end{array}&amp;\\begin{array}{rcl}x_{\\textrm{lb}} \\le &amp;  x   &amp; \\le x_{\\textrm{ub}} \\\\g_{\\textrm{lb}} \\le &amp;g(x,p)&amp; \\le g_{\\textrm{ub}}\\end{array}\\end{array}$$</p></p></div><div class=\"col-md-6\"><div class=\"multisnip text-left\"><div class=\"highlight\"><pre><code data-lang=\"example\"></code></pre><p>$$\\begin{equation}\\begin{array}{cl}\\underset{\\begin{array}{c}x, y, z\\end{array}}{\\text{minimize}} \\quad &amp;  x^2 + 100 \\, z^2 \\\\\\text{subject to} \\quad &amp;  z+(1-x)^2 - y = 0\\end{array}\\end{equation}$$</p></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-octave\" data-lang=\"octave\"><span class=\"line\"><span class=\"cl\"><span class=\"n\">import</span> <span class=\"n\">casadi</span><span class=\"o\">.*</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Symbols/expressions</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">y</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;y&#39;</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">z</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;z&#39;</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"n\">x</span>^<span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"n\">z</span>^<span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">g</span> <span class=\"p\">=</span> <span class=\"n\">z</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>^<span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">nlp</span> <span class=\"p\">=</span> <span class=\"nb\">struct</span><span class=\"p\">;</span>            <span class=\"c\">% NLP declaration</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">nlp</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"n\">z</span><span class=\"p\">];</span>         <span class=\"c\">% decision vars</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">nlp</span><span class=\"p\">.</span><span class=\"n\">f</span> <span class=\"p\">=</span> <span class=\"n\">f</span><span class=\"p\">;</span>               <span class=\"c\">% objective</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">nlp</span><span class=\"p\">.</span><span class=\"n\">g</span> <span class=\"p\">=</span> <span class=\"n\">g</span><span class=\"p\">;</span>               <span class=\"c\">% constraints</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Create solver instance</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">F</span> <span class=\"p\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;ipopt&#39;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Solve the problem using a guess</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s\">&#39;x0&#39;</span><span class=\"p\">,[</span><span class=\"mf\">2.5</span> <span class=\"mf\">3.0</span> <span class=\"mf\">0.75</span><span class=\"p\">],</span><span class=\"s\">&#39;ubg&#39;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s\">&#39;lbg&#39;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-python\" data-lang=\"python\"><span class=\"line\"><span class=\"cl\"><span class=\"kn\">from</span> <span class=\"nn\">casadi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Symbols/expressions</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">y</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>                 <span class=\"c1\"># NLP declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span><span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"c1\"># decision vars</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span>             <span class=\"c1\"># objective</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s1\">&#39;g&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span>             <span class=\"c1\"># constraints</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Create solver instance</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;ipopt&#39;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Solve the problem using a guess</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">2.5</span><span class=\"p\">,</span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"mf\">0.75</span><span class=\"p\">],</span><span class=\"n\">ubg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">lbg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"line\"><span class=\"cl\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;casadi/casadi.hpp&gt;</span><span class=\"cp\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">casadi</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Symbols/expressions</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;y&#34;</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;z&#34;</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">+</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">y</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MXDict</span> <span class=\"n\">nlp</span><span class=\"p\">;</span>                 <span class=\"c1\">// NLP declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">]</span><span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">);</span>   <span class=\"c1\">// decision vars</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s\">&#34;f&#34;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">;</span>               <span class=\"c1\">// objective</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">nlp</span><span class=\"p\">[</span><span class=\"s\">&#34;g&#34;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"p\">;</span>               <span class=\"c1\">// constraints</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Create solver instance</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">Function</span> <span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s\">&#34;F&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;ipopt&#34;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Solve the problem using a guess</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">DMDict</span><span class=\"p\">{{</span><span class=\"s\">&#34;x0&#34;</span><span class=\"p\">,</span><span class=\"n\">DM</span><span class=\"p\">({</span><span class=\"mf\">2.5</span><span class=\"p\">,</span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"mf\">0.75</span><span class=\"p\">})},{</span><span class=\"s\">&#34;ubg&#34;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">},{</span><span class=\"s\">&#34;lbg&#34;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">}});</span></span></span></code></pre></div></div>  </div></div>                       <hr class=\"sep\">               <h2 class=\"text-center\">Composition of the above</h2><div class=\"row\"><div class=\"col-md-6\"><div class=\"multisnip text-left\"><div class=\"highlight\"><pre><code data-lang=\"example\"></code></pre><figure class=\" default\">  <a href=\"https://web.casadi.org/home/card-ocp/../composition.png\" target=\"_blank\">  <img src=\"https://web.casadi.org/home/card-ocp/../composition.png\"  />  </a></figure><figure class=\" default\">  <a href=\"https://web.casadi.org/home/card-ocp/../ocp.png\" target=\"_blank\">  <img src=\"https://web.casadi.org/home/card-ocp/../ocp.png\"  />  </a></figure></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-octave\" data-lang=\"octave\"><span class=\"line\"><span class=\"cl\"><span class=\"n\">import</span> <span class=\"n\">casadi</span><span class=\"o\">.*</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c\">% Two states</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">p</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;p&#39;</span><span class=\"p\">);</span>   <span class=\"c\">% Free parameter</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Expression for ODE right-hand side</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">z</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>^<span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">rhs</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nb\">tanh</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)];</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% ODE declaration with free parameter</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">ode</span> <span class=\"p\">=</span> <span class=\"nb\">struct</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"s\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"s\">&#39;ode&#39;</span><span class=\"p\">,</span><span class=\"n\">rhs</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Construct a Function that integrates over 1s</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">F</span> <span class=\"p\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;cvodes&#39;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Control vector</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">u</span> <span class=\"p\">=</span> <span class=\"n\">MX</span><span class=\"p\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"c\">% Initial state</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">=</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span>  <span class=\"c\">% Integrate 1s forward in time:</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span>  <span class=\"c\">% call integrator symbolically</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span>  <span class=\"n\">res</span> <span class=\"p\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s\">&#39;x0&#39;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"s\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">));</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span>  <span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">xf</span><span class=\"p\">;</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"k\">end</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% NLP declaration</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">nlp</span> <span class=\"p\">=</span> <span class=\"nb\">struct</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"s\">&#39;f&#39;</span><span class=\"p\">,</span><span class=\"nb\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">),</span><span class=\"s\">&#39;g&#39;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"c\">% Solve using IPOPT</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">solver</span> <span class=\"p\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s\">&#39;solver&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;ipopt&#39;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"n\">res</span> <span class=\"p\">=</span> <span class=\"n\">solver</span><span class=\"p\">(</span><span class=\"s\">&#39;x0&#39;</span><span class=\"p\">,</span><span class=\"mf\">0.2</span><span class=\"p\">,</span><span class=\"s\">&#39;lbg&#39;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s\">&#39;ubg&#39;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"err\"></span><span class=\"nb\">plot</span><span class=\"p\">(</span><span class=\"nb\">full</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">))</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-python\" data-lang=\"python\"><span class=\"line\"><span class=\"cl\"><span class=\"kn\">from</span> <span class=\"nn\">casadi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"kn\">from</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">import</span> <span class=\"n\">plot</span><span class=\"p\">,</span> <span class=\"n\">show</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Two states</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">)</span>    <span class=\"c1\"># Free parameter</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Expression for ODE right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">tanh</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># ODE declaration with free parameter</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">ode</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">:</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"s1\">&#39;ode&#39;</span><span class=\"p\">:</span><span class=\"n\">rhs</span><span class=\"p\">}</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Construct a Function that integrates over 1s</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;cvodes&#39;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Control vector</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">.</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Initial state</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"c1\"># Integrate 1s forward in time:</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"c1\"># call integrator symbolically</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s1\">&#39;xf&#39;</span><span class=\"p\">]</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># NLP declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">:</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">),</span><span class=\"s1\">&#39;g&#39;</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"p\">}</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"># Solve using IPOPT</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s1\">&#39;solver&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;ipopt&#39;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span><span class=\"n\">lbg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">ubg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">])</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">show</span><span class=\"p\">()</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"line\"><span class=\"cl\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;casadi/casadi.hpp&gt;</span><span class=\"cp\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">casadi</span><span class=\"p\">;</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// Two states</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;p&#34;</span><span class=\"p\">);</span>   <span class=\"c1\">// Free parameter</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Expression for ODE right-hand side</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"mi\">2</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">MX</span> <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">vertcat</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">tanh</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// ODE declaration with free parameter</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MXDict</span> <span class=\"n\">ode</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"s\">&#34;p&#34;</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">},{</span><span class=\"s\">&#34;ode&#34;</span><span class=\"p\">,</span><span class=\"n\">rhs</span><span class=\"p\">}};</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Construct a Function that integrates over 1s</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">Function</span> <span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">integrator</span><span class=\"p\">(</span><span class=\"s\">&#34;F&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;cvodes&#34;</span><span class=\"p\">,</span><span class=\"n\">ode</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Control vector</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MX</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">MX</span><span class=\"o\">::</span><span class=\"n\">sym</span><span class=\"p\">(</span><span class=\"s\">&#34;u&#34;</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">DM</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">});</span>  <span class=\"c1\">// Initial state</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"o\">++</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">{</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"c1\">// Integrate 1s forward in time:</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>  <span class=\"c1\">// call integrator symbolically</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>  <span class=\"n\">MXDict</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">({{</span><span class=\"s\">&#34;x0&#34;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">},{</span><span class=\"s\">&#34;p&#34;</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)}});</span></span></span><span class=\"line\"><span class=\"cl\">  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s\">&#34;xf&#34;</span><span class=\"p\">];</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">}</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// NLP declaration</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">MXDict</span> <span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"s\">&#34;x&#34;</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">},{</span><span class=\"s\">&#34;f&#34;</span><span class=\"p\">,</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">)},{</span><span class=\"s\">&#34;g&#34;</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">}};</span></span></span><span class=\"line\"><span class=\"cl\"></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Solve using IPOPT</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"n\">Function</span> <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">nlpsol</span><span class=\"p\">(</span><span class=\"s\">&#34;solver&#34;</span><span class=\"p\">,</span><span class=\"s\">&#34;ipopt&#34;</span><span class=\"p\">,</span><span class=\"n\">nlp</span><span class=\"p\">);</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"n\">DMDict</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">(</span><span class=\"n\">DMDict</span><span class=\"p\">{{</span><span class=\"s\">&#34;x0&#34;</span><span class=\"p\">,</span><span class=\"mf\">0.2</span><span class=\"p\">},{</span><span class=\"s\">&#34;lbg&#34;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">},{</span><span class=\"s\">&#34;ubg&#34;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">}});</span></span></span></code></pre></div></div></div>  <div class=\"col-md-6 text-left\">    <p>CasADi offers a rich set of <em>differentiable</em> operations for its matrix-valued expression graphs, including common <a href=\"docs/#arithmetic-operations\">matrix-valued operations</a>, <a href=\"docs/#calling-function-objects\">serial</a> or <a href=\"docs/#for-loop-equivalents\">parallel</a> function calls, <a href=\"docs/#non-linear-rootfinding-problems\">implicit functions</a>, <a href=\"docs/#initial-value-problems-and-sensitivity-analysis\">integrators</a>, spline-based <a href=\"docs/#using-lookup-tables\">lookup tables</a>, and <a href=\"docs/#document-custom\">external codes</a>.</p>    <p>These building blocks allow the user to code a wide variety of <a href=\"docs/#document-ocp\">optimal control problem</a> (OCP) formulations.</p>    <p>For example, a single shooting code can be created by embedding a call to an integrator in an NLP declaration.</p>  </div></div>                       <hr class=\"sep\">               <div class=\"row\">                    <div class=\"col text-center\">                                    <h2>Applications</h2><p>CasADi saves time <em>prototyping</em> formulations, <em>solving</em> complex engineering problems, and <em>building</em> professional optimization tools.<br/>The landscape of its <em>academic</em> and <em>industrial</em> applications is diverse:</p><figure class=\" default\">  <a href=\"https://web.casadi.org/home/card-users/../wordcloud.png\" target=\"_blank\">  <img src=\"https://web.casadi.org/home/card-users/../wordcloud.png\"  />  </a></figure><ul class=\"wordcloud\"><!--<li>thermal control</li>--><!--<li>wind turbine</li>--><!--<li>airborne wind</li>--><!--<li>solar thermal</li>--><!--<li>fossil fuel</li>--><!--<li>renewables</li>--><!--<li>grid balance</li>--><li>trajectory optimization</li><li>optimal control</li><li>OCP</li><li>moving horizon estimation</li><li>MHE</li><li>model predictive control</li><li>MPC</li><li>NLP</li><li>MINLP</li><li>ODE</li><li>differential equations</li><li>algebraic loops</li><li>DAE</li><!--<li>bio-reactors</li>--><!--<li>autonomous vehicles</li>--><!--<li>iceberg drift</li>--><li>optimal experiment</li><li>OED</li><!--<li>steam power</li>--><li>pseudo spectral</li><li>direct collocation</li><li>single shooting</li><li>multiple shooting</li><li>indirect methods</li><li>machine learning</li><!--<li>serial robots</li>--><!--<li>dual control</li>--><li>distributed MPC</li><li>multi-objective</li><li>pareto front</li><li>robust optimization</li><li>scenario tree</li><li>hierarchical control</li><li>sigma points</li><!--<li>gearbox synthesis</li>--><!--<li>artificial pancreas</li>--><!--<li>polynomial chaos</li>--><!--<li>traffic control</li>--><!--<li>MEMS</li>--><!--<li>walking robot</li>--><li>design</li><li>control</li><li>co-design</li><li>stochastic optimization</li><!--<li>spline-relaxations</li>--><li>multi-level MPC</li><!--<li>tube following</li>--><li>time optimal</li><li>path following</li><li>iterative learning</li><li>Gauss-Newton</li><li>energy</li><li>medical</li><!--<li>fixed-bed reactor</li>--><!--<li>chemical reactor</li>--><li>stabilization</li><li>cost curves</li><li>grey-box model</li><li>Collision Avoidance</li><li>Lagrangian Duality</li><li>economic MPC</li><li>NMPC</li><li>self-reflective</li><li>real-time</li><li>offline</li><li>online</li><!--<li>mesh refinement</li>--><!--<li>pose estimation</li><li>heart model</li>--><li>Lagrange mechanics</li><!--<li>Baumgarte</li>--><!--<li>invariants</li>--><!--<li>atomic layer deposition</li>--><!--<li> well network</li>--><li>object-oriented</li><li>multi-stage</li><li>path constraints</li><!--<li>pharmacokinetic</li>--><li>non-steady</li><li>periodic</li><li>cyclic</li><li>feasibility study</li><!--<li>air conditioning</li>--><!--<li>powertrain</li>--><!--<li>diesel</li>--><!--<li>biological networks</li>--><li>offset-free mpc</li><li>Gaussian</li><li>belief space</li><li>continuous systems</li><li>discrete systems</li><li>redundant manipulators</li><li>inverse kinematics</li><!--<li>marine vessel</li>--><!--<li>confidence interval</li>--><!--<li>agriculture</li>--><!--<li>B-spline</li>--><!--<li>path-parametric</li>--><!--<li>invariant description</li>--><!--<li>heat exchangers</li>--><li>Jacobian</li><li>Hessian</li><li>gradient</li><li>Lyapunov</li></ul><p>Examples of software with a CasADi backend: <a href=\"http://www.modelon.com/products/jmodelicaorg/\">JModelica.org</a>, <a href=\"https://github.com/meco-group/omg-tools\">omg-tools</a>, <a href=\"https://bitbucket.org/rawlings-group/mpc-tools-casadi\">MPC-tools</a>, <a href=\"https://www.deltares.nl/nl/software/rtc-tools-2/\">RTC-tools</a>, <a href=\"http://openocl.org\">openocl.org</a>, <a href=\"https://gitlab.kuleuven.be/meco-software/rockit\">rockit</a>, <a href=\"https://www.yoptimization.com\">yop</a>, <a href=\"https://www.do-mpc.com\">do-mpc</a>, <a href=\"https://github.com/hilo-mpc/hilo-mpc\">hilo-mpc</a>, <a href=\"https://github.com/chenyutao36/MATMPC\">MATMPC</a>, <a href=\"https://alphaville.github.io/optimization-engine/\">Optimization Engine</a>, <a href=\"http://acados.org\">acados</a>, <a href=\"https://cmower.github.io/optas/\">OpTaS</a>, <a href=\"https://github.com/FilippoAiraldi/casadi-nlp\">csnlp</a>, <a href=\"https://github.com/nMPyC/nmpyc\">nmpyc</a>, <a href=\"OpenAP Trajectory Optimizer\"><a href=\"https://github.com/junzis/openap-top/\">https://github.com/junzis/openap-top/</a></a>, <a href=\"https://github.com/kul-optec/alpaqa\">Alpaqa</a>, <a href=\"https://github.com/CPCLAB-UNIPI/SIPPY\">SIPPY</a>, <a href=\"https://github.com/NREL/m2p\">Monomers to Polymers (m2p)</a>, <a href=\"https://github.com/mpopt/mpopt\">MPOPT</a>, <a href=\"https://github.com/peterdsharpe/AeroSandbox\">AeroSandbox</a>, <a href=\"https://github.com/pymoca/pymoca\">Pymoca</a>.</p>                      </div>        </div>                       <hr class=\"sep\">               <div class=\"row\">                    <div class=\"col text-center\">                                    <h2 id=\"ready-to-try\">Ready to try?</h2><p><em>Jump right in</em> by <a href=\"get/\">getting CasADi</a> and exploring the example pack</a>, joining a <a href=\"events/\">workshop or online course</a>, or watching a small tutorial.</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/JI-AyLv68Xs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>                      </div>        </div>                       <hr class=\"sep\">               <div class=\"row\">                    <div class=\"col text-center\">                                    <h2 id=\"paper-about-casadi\">Paper about CasADi</h2><p>A detailed description of the tool and its implementation can be found in a recent paper in <em>Mathematical Programming Computation</em> (<a href=\"http://paper.casadi.org\">preprint</a>). Please <a href=\"publications/\">cite</a> this paper if you use CasADi in your academic work.                      </div>        </div>                       <hr class=\"sep\">               <div class=\"row\">                    <div class=\"col text-center\">                                    <h2 id=\"keep-informed\">Keep informed</h2><p>Subscribe to our <a href=\"https://forms.gle/9v1HKPYZDHcBYMXNA\">newsletter</a> or follow us on the social media links below.                      </div>        </div>                                                                              </div>    <a href=\"http://master2024.casadi.org\" target=\"_blank\" id=\"bottom-banner\">  <div class=\"container p-3\">    <div class=\"row justify-content-md-center\">      <div class=\"col-md-auto text-center\">        <p>\ud83d\udce3Next CasADi master class: March 18-20</p>      </div>    </div>  </div></a>        <footer>      <div class=\"container\">        <div class=\"row justify-content-md-center\">          <div class=\"col-md-auto text-center\">            <ul id=\"social\" class=\"list-inline\">                              <li class=\"list-inline-item\">                  <a href=\"https://github.com/casadi/casadi\" title=\"github\">                    <i class=\"fa fa-github\"></i>                  </a>                </li>                              <li class=\"list-inline-item\">                  <a href=\"https://twitter.com/casadi_software\" title=\"twitter\">                    <i class=\"fa fa-twitter\"></i>                  </a>                </li>                              <li class=\"list-inline-item\">                  <a href=\"https://www.youtube.com/channel/UC3VDpv5Pi3R-a2VkcJN1RLw\" title=\"youtube\">                    <i class=\"fa fa-youtube\"></i>                  </a>                </li>                          </ul>            <p class=\"copyright\">Copyright 2023.</p>          </div>        </div>      </div>    </footer>        <script type=\"text/javascript\"  src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>        <script src=\"https://web.casadi.org/_js/bootstrap.min.js\"></script>        <script src=\"https://web.casadi.org/_js/scripts.js\"></script>        <script type=\"text/javascript\" async  src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_CHTML\"></script>      </body></html>",
  "embeddings": []
}
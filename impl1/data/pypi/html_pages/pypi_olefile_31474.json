{
  "libtype": "pypi",
  "libname": "olefile",
  "url": "https://www.decalage.info/python/olefileio",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\">  <head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><link rel=\"shortcut icon\" href=\"/misc/favicon.ico\" type=\"image/x-icon\" />    <title>olefile - a Python module to read/write MS OLE2 files | Decalage</title>    <link type=\"text/css\" rel=\"stylesheet\" media=\"all\" href=\"/files/css/css_8fe97c1596c0ea7a7b8c7c74ddc8dfcd.css\" /><link type=\"text/css\" rel=\"stylesheet\" media=\"print\" href=\"/files/css/css_aed2616564aeeed8da200e1f6b63945d.css\" />    <script type=\"text/javascript\" src=\"/files/js/js_e82399664c7bf77e8db60ce786e4f7d4.js\"></script><script type=\"text/javascript\"><!--//--><![CDATA[//><!--jQuery.extend(Drupal.settings, { \"basePath\": \"/\" });//--><!]]></script>    <!--[if lt IE 7]>      <link type=\"text/css\" rel=\"stylesheet\" media=\"all\" href=\"/themes/garland/fix-ie.css\" />    <![endif]-->  </head>  <body class=\"sidebar-left\"><!-- Layout -->  <div id=\"header-region\" class=\"clear-block\"></div>    <div id=\"wrapper\">    <div id=\"container\" class=\"clear-block\">      <div id=\"header\">        <div id=\"logo-floater\">        <h1><a href=\"/en\" title=\"\"><img src=\"/files/logo.gif\" alt=\"\" id=\"logo\" /></a></h1>        </div>                  <ul class=\"links primary-links\"><li class=\"menu-473 first\"><a href=\"/en/mwsearch\" title=\"\">Malware Search</a></li><li class=\"menu-241\"><a href=\"/en/python\" title=\"\">Python</a></li><li class=\"menu-242\"><a href=\"/en/security\" title=\"\">Security</a></li><li class=\"menu-401\"><a href=\"https://twitter.com/decalage2\" title=\"Decalage on Twitter\">Twitter @decalage2</a></li><li class=\"menu-471 last\"><a href=\"https://github.com/decalage2\" title=\"\">GitHub</a></li></ul>                                        </div> <!-- /header -->              <div id=\"sidebar-left\" class=\"sidebar\">          <div class=\"block block-theme\"><form action=\"/python/olefileio\"  accept-charset=\"UTF-8\" method=\"post\" id=\"search-theme-form\"><div><div id=\"search\" class=\"container-inline\">  <div class=\"form-item\" id=\"edit-search-theme-form-1-wrapper\"> <label for=\"edit-search-theme-form-1\">Search this site: </label> <input type=\"text\" maxlength=\"128\" name=\"search_theme_form\" id=\"edit-search-theme-form-1\" size=\"15\" value=\"\" title=\"Enter the terms you wish to search for.\" class=\"form-text\" /></div><input type=\"submit\" name=\"op\" id=\"edit-submit-1\" value=\"Search\"  class=\"form-submit\" /><input type=\"hidden\" name=\"form_build_id\" id=\"form-zOgLjvF1aO3RU3unDeTndbelXNWjOVgvuvUxo0cNBgY\" value=\"form-zOgLjvF1aO3RU3unDeTndbelXNWjOVgvuvUxo0cNBgY\"  /><input type=\"hidden\" name=\"form_id\" id=\"edit-search-theme-form\" value=\"search_theme_form\"  /></div></div></form></div>          <div id=\"block-locale-0\" class=\"clear-block block block-locale\">  <h2>Languages</h2>  <div class=\"content\"><ul><li class=\"en first active\"><a href=\"/en/python/olefileio\" class=\"language-link active\"><img src=\"/sites/all/modules/languageicons/flags/en.png\" alt=\"English\" title=\"English\"  class=\"language-icon\" width=\"16\" height=\"12\" /> English</a></li><li class=\"fr last\"><a href=\"/fr/olefile\" class=\"language-link\"><img src=\"/sites/all/modules/languageicons/flags/fr.png\" alt=\"French\" title=\"French\"  class=\"language-icon\" width=\"16\" height=\"12\" /> French</a></li></ul></div></div><div id=\"block-user-1\" class=\"clear-block block block-user\">  <h2>Navigation</h2>  <div class=\"content\"><ul class=\"menu\"><li class=\"leaf first\"><a href=\"/en/contact\" title=\"\">Contact</a></li><li class=\"collapsed active-trail\"><a href=\"/en/node\" title=\"\">Content</a></li><li class=\"expanded\"><a href=\"/en/security\" title=\"\">Security</a><ul class=\"menu\"><li class=\"leaf first\"><a href=\"/en/taxonomy/term/11\" title=\"\">Forensics</a></li><li class=\"leaf\"><a href=\"/en/taxonomy/term/10\" title=\"\">Malware Analysis</a></li><li class=\"leaf last\"><a href=\"/en/taxonomy/term/12\" title=\"\">VBA Macros</a></li></ul></li><li class=\"leaf\"><a href=\"/en/python\" title=\"\">Python</a></li><li class=\"leaf\"><a href=\"/en/ruby\" title=\"\">Ruby</a></li><li class=\"leaf\"><a href=\"/en/windows\" title=\"\">Windows</a></li><li class=\"leaf\"><a href=\"/en/file_formats_security\" title=\"Series of articles on security issues of well-known file formats\">Weaponized File Formats</a></li><li class=\"collapsed\"><a href=\"/en/exefilter\" title=\"\">ExeFilter</a></li><li class=\"leaf last\"><a href=\"/en/tracker\" title=\"\">Recent posts</a></li></ul></div></div><div id=\"block-menu-primary-links\" class=\"clear-block block block-menu\">  <h2>Primary links</h2>  <div class=\"content\"><ul class=\"menu\"><li class=\"leaf first\"><a href=\"/en/mwsearch\" title=\"\">Malware Search</a></li><li class=\"leaf\"><a href=\"/en/python\" title=\"\">Python</a></li><li class=\"leaf\"><a href=\"/en/security\" title=\"\">Security</a></li><li class=\"leaf\"><a href=\"https://twitter.com/decalage2\" title=\"Decalage on Twitter\">Twitter @decalage2</a></li><li class=\"leaf last\"><a href=\"https://github.com/decalage2\" title=\"\">GitHub</a></li></ul></div></div><div id=\"block-statistics-0\" class=\"clear-block block block-statistics\">  <h2>Popular content</h2>  <div class=\"content\"><div class=\"item-list\"><h3>Today's:</h3><ul><li class=\"first\"><a href=\"/en/python/print_list\">Python tips - How to easily convert a list to a string for display</a></li><li><a href=\"/en/python/html\">HTML.py - a Python module to easily generate HTML tables and lists</a></li><li class=\"last\"><a href=\"/en/python/olefileio\" class=\"active\">olefile - a Python module to read/write MS OLE2 files</a></li></ul></div><br /><div class=\"item-list\"><h3>All time:</h3><ul><li class=\"first\"><a href=\"/en/python/print_list\">Python tips - How to easily convert a list to a string for display</a></li><li><a href=\"/en/python/olefileio\" class=\"active\">olefile - a Python module to read/write MS OLE2 files</a></li><li class=\"last\"><a href=\"/en/python/html\">HTML.py - a Python module to easily generate HTML tables and lists</a></li></ul></div></div></div>        </div>            <div id=\"center\"><div id=\"squeeze\"><div class=\"right-corner\"><div class=\"left-corner\">          <div class=\"breadcrumb\"><a href=\"/en\">Home</a> \u203a <a href=\"/en/node\">Content</a></div>                              <h2>olefile - a Python module to read/write MS OLE2 files</h2>                                                  <div class=\"clear-block\">            <div id=\"node-20\" class=\"node\">    <div class=\"content clear-block\">    <p><strong>olefile </strong>(formerly OleFileIO_PL) is a Python package to parse, read and write <a href=\"http://en.wikipedia.org/wiki/Compound_File_Binary_Format\">Microsoft OLE2 files</a> (also called Structured Storage, Compound File Binary Format or Compound Document File Format), such as <strong>Microsoft Office 97-2003 documents</strong>, vbaProject.bin in MS Office 2007+ files, Image Composer and FlashPix files, Outlook MSG files, StickyNotes, several Microscopy file formats, McAfee antivirus quarantine files, etc.</p><p><strong>Quick links</strong>: <a href=\"http://olefile.readthedocs.io/en/latest/Install.html\">Download/Install</a> - <a href=\"http://olefile.readthedocs.io/en/latest\">Documentation</a> - <a href=\"https://github.com/decalage2/olefile/issues\">Report Issues/Suggestions/Questions</a> - <a href=\"https://www.decalage.info/contact\">Contact the author</a> - <a href=\"https://github.com/decalage2/olefile\">Repository</a> - <a href=\"https://twitter.com/decalage2\">Updates on Twitter</a></p><script type=\"text/javascript\">toc_collapse=0;</script><div class=\"toc\" id=\"toc\"><div class=\"toc-title\">Table of Contents<span class=\"toc-toggle-message\">&nbsp;</span></div><div class=\"toc-list\"><ol><li class=\"toc-level-1\"><a href=\"#News\">News</a></li><li class=\"toc-level-1\"><a href=\"#Download_and_Install\">Download and Install</a></li><li class=\"toc-level-1\"><a href=\"#Features\">Features</a></li><li class=\"toc-level-1\"><a href=\"#Documentation\">Documentation</a></li><li class=\"toc-level-1\"><a href=\"#License\">License</a></li><li class=\"toc-level-1\"><a href=\"#Other_projects_using_olefile_OleFileIO_PL\">Other projects using olefile / OleFileIO_PL</a></li></ol></div></div><h2 id=\"News\">News</h2><ul><li><strong>2018-09-09 v0.46</strong>: OleFileIO can now be used as a context manager (with&hellip;as), to close the file automatically (see <a href=\"https://olefile.readthedocs.io/en/latest/Howto.html#open-an-ole-file-from-disk\" rel=\"nofollow\">doc</a>). Improved handling of malformed files, fixed several bugs.</li><li>2018-01-24 v0.45: olefile can now overwrite streams of any size, improved handling of malformed files, fixed several <a href=\"https://github.com/decalage2/olefile/milestone/4?closed=1\">bugs</a>, end of support for Python 2.6 and 3.3.</li><li>2017-01-06 v0.44: several bugfixes, removed support for Python 2.5 (olefile2), added support for incomplete streams and incorrect directory entries (to read malformed documents), added getclsid, improved <a href=\"http://olefile.readthedocs.io/en/latest\" rel=\"nofollow\">documentation</a> with API reference.</li><li>2017-01-04: moved the documentation to <a href=\"http://olefile.readthedocs.io/en/latest\">ReadTheDocs</a></li><li>2016-05-20: moved olefile repository to <a href=\"https://github.com/decalage2/olefile\">GitHub</a></li><li>2016-02-02 v0.43: fixed issues <a href=\"https://github.com/decalage2/olefile/issues/26\">#26</a> and <a href=\"https://github.com/decalage2/olefile/issues/27\">#27</a>, better handling of malformed files, use python logging.</li><li>2015-01-25 v0.42: improved handling of special characters in stream/storage names on Python 2.x (using UTF-8 instead of Latin-1), fixed bug in listdir with empty storages.</li><li>2014-11-25 v0.41: OleFileIO.open and isOleFile now support OLE files stored in byte strings, fixed installer for python 3, added support for Jython (Niko Ehrenfeuchter)</li><li>2014-10-01 v0.40: renamed OleFileIO_PL to olefile, added initial write support for streams &gt;4K, updated doc and license, improved the setup script.</li></ul><h2 id=\"Download_and_Install\">Download and Install</h2><p>If you have pip or setuptools installed (pip is included in Python 2.7.9+), you may simply run <strong>pip install olefile</strong> or <strong>easy_install olefile</strong> for the first installation.</p><p>To update olefile, run <strong>pip install -U olefile</strong>.</p><p>Otherwise, see <a href=\"http://olefile.readthedocs.io/en/latest/Install.html\">http://olefile.readthedocs.io/en/latest/Install.html</a></p><h2 id=\"Features\">Features</h2><ul><li>Parse/read/write any OLE file such as Microsoft Office 97-2003 legacy document formats (Word .doc, Excel .xls, PowerPoint .ppt, Visio .vsd, Project .mpp), Image Composer and FlashPix files, Outlook messages, StickyNotes, Zeiss AxioVision ZVI files, ...</li><li>List all the streams and storages contained in an OLE file</li><li>Open streams as files</li><li>Parse and read property streams, containing metadata of the file</li></ul><p>olefile can be used as an independent module or with PIL/Pillow.</p><p>olefile is mostly meant for developers. If you are looking for tools to analyze OLE files or to extract data (especially for security purposes such as malware analysis and forensics), then please also check my <a href=\"http://www.decalage.info/python/oletools\">python-oletools</a>, which are built upon olefile and provide a higher-level interface.</p><p>&nbsp;</p><h2 id=\"Documentation\">Documentation</h2><p>&nbsp;</p><p>Please see the <a href=\"http://olefile.readthedocs.io/en/latest\">online documentation</a> for more information.</p><h2 id=\"License\">License</h2><p>See <a href=\"http://olefile.readthedocs.io/en/latest/License.html\" title=\"http://olefile.readthedocs.io/en/latest/License.html\">http://olefile.readthedocs.io/en/latest/License.html</a></p><p>&nbsp;</p><h2 id=\"Other_projects_using_olefile_OleFileIO_PL\">Other projects using olefile / OleFileIO_PL</h2><p>&nbsp;</p><ul><li><a href=\"/python/oletools\">python-oletools</a>: a package of python tools to analyze OLE files and MS Office documents, mainly for malware analysis and debugging. It includes olebrowse, a graphical tool to browse and extract OLE streams, oleid to quickly identify characteristics of malicious documents, olevba to detect/extract/analyze VBA macros, and pyxswf to extract Flash objects (SWF) from OLE files.</li><li><a href=\"http://blog.didierstevens.com/programs/oledump-py/\">oledump</a>: a tool to analyze malicious MS Office documents and extract VBA macros</li><li><a href=\"/exefilter\">ExeFilter</a>: to&nbsp;scan and clean active content in file formats (e.g. MS Office VBA macros)</li><li><a href=\"http://code.google.com/p/py-office-tools/\">py-office-tools</a>:&nbsp; to display records inside Excel and PowerPoint files</li><li><a href=\"http://code.google.com/p/pyew/\">pyew</a>: a malware analysis tool</li><li><a href=\"https://github.com/Evilcry/PythonScripts/blob/master/pyOLEScanner.py\">pyOLEscanner</a>: a malware analysis tool</li><li><a href=\"https://github.com/sney2002/PPTExtractor\">PPTExtractor</a>: to extract images from PowerPoint presentations</li><li><a href=\"https://github.com/mattgwwalker/msg-extractor\">msg-extractor</a>: to parse MS Outlook MSG files</li><li><a href=\"https://github.com/mete0r/pyhwp\">pyhwp</a>: hwp file format python parser</li><li><a href=\"https://github.com/kholia/RC4-40-brute-office\">RC4-40-brute-office</a>: a tool to crack MS&nbsp;Office files using RC4 40-bit encryption</li><li><a href=\"https://github.com/herrcore/punbup\">punbup</a>: a tool to extract files from McAfee antivirus quarantine files (.bup)</li><li><a href=\"https://github.com/botherder/viper\">Viper</a>: a framework to store, classify and investigate binary files of any sort for malware analysis (also includes code from <a href=\"/python/oleid\">oleid</a>)</li><li><a href=\"http://python-pillow.github.io/\">Pillow</a>: the friendly fork of <a href=\"http://www.pythonware.com/products/pil/\">PIL</a>, the Python Image Library</li><li><a href=\"http://www.getghiro.org/\">Ghiro</a>: a digital image forensics tool</li><li><a href=\"https://github.com/joxeankoret/nightmare\">Nightmare</a>: A distributed fuzzing testing suite, using olefile to fuzz OLE streams and write them back to OLE files.</li></ul><p>&nbsp;</p>  </div>  <div class=\"clear-block\">    <div class=\"meta\">          <div class=\"terms\"><ul class=\"links inline\"><li class=\"taxonomy_term_11 first\"><a href=\"/en/taxonomy/term/11\" rel=\"tag\" title=\"\">Forensics</a></li><li class=\"taxonomy_term_10\"><a href=\"/en/taxonomy/term/10\" rel=\"tag\" title=\"Articles and tools related to Malware Analysis. (see http://en.wikipedia.org/wiki/Malware)\">Malware Analysis</a></li><li class=\"taxonomy_term_3\"><a href=\"/en/security\" rel=\"tag\" title=\"Cyber Security, IT Security, Cyber Defence\">Security</a></li><li class=\"taxonomy_term_6\"><a href=\"/en/taxonomy/term/6\" rel=\"tag\" title=\"\">Tool</a></li><li class=\"taxonomy_term_2 last\"><a href=\"/en/python\" rel=\"tag\" title=\"\">Python</a></li></ul></div>        </div>          <div class=\"links\"><ul class=\"links inline\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>      </div></div><div id=\"comments\">  <h2 class=\"comments\">Comments</h2><form action=\"/python/olefileio\"  accept-charset=\"UTF-8\" method=\"post\" id=\"comment-controls\"><div><div class=\"box\">  <h2>Comment viewing options</h2>  <div class=\"content\"><div class=\"container-inline\"><input type=\"hidden\" name=\"form_build_id\" id=\"form-vadwi9fiekk1QWwo_jysr-VWIb0A8GvtQS5df0kGedY\" value=\"form-vadwi9fiekk1QWwo_jysr-VWIb0A8GvtQS5df0kGedY\"  /><input type=\"hidden\" name=\"form_id\" id=\"edit-comment-controls\" value=\"comment_controls\"  /><div class=\"form-item\" id=\"edit-mode-wrapper\"> <select name=\"mode\" class=\"form-select\" id=\"edit-mode\" ><option value=\"1\">Flat list - collapsed</option><option value=\"2\">Flat list - expanded</option><option value=\"3\">Threaded list - collapsed</option><option value=\"4\" selected=\"selected\">Threaded list - expanded</option></select></div><div class=\"form-item\" id=\"edit-order-wrapper\"> <select name=\"order\" class=\"form-select\" id=\"edit-order\" ><option value=\"1\">Date - newest first</option><option value=\"2\" selected=\"selected\">Date - oldest first</option></select></div><div class=\"form-item\" id=\"edit-comments-per-page-wrapper\"> <select name=\"comments_per_page\" class=\"form-select\" id=\"edit-comments-per-page\" ><option value=\"10\">10 comments per page</option><option value=\"30\">30 comments per page</option><option value=\"50\" selected=\"selected\">50 comments per page</option><option value=\"70\">70 comments per page</option><option value=\"90\">90 comments per page</option><option value=\"150\">150 comments per page</option><option value=\"200\">200 comments per page</option><option value=\"250\">250 comments per page</option><option value=\"300\">300 comments per page</option></select></div><input type=\"submit\" name=\"op\" id=\"edit-submit\" value=\"Save settings\"  class=\"form-submit\" /></div><div class=\"description\">Select your preferred way to display the comments and click \"Save settings\" to activate your changes.</div></div></div></div></form><a id=\"comment-280\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Fri, 09/11/2009 - 13:17 \u2014 <a href=\"http://ihaveno.com/\" rel=\"nofollow\">PeZo</a> (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-280\" class=\"active\">question</a></h3>    <div class=\"content\">      <p>My question is: Can I extract all images from MS OLE2 documents with OleFileIO_PL ?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-281\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Fri, 09/11/2009 - 18:13 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-281\" class=\"active\">Extracting images from MS OLE2 documents</a></h3>    <div class=\"content\">      <p>Not directly: images are not always stored the same way, and it also depends on the format.</p><p>For example in Powerpoint presentations, you may find a stream named &quot;Pictures&quot; when running &quot;OleFileIO_PL yourfile.ppt&quot;. You may extract the stream by using the openstream() method on the OleFileIO object, but you will usually get a binary stream containing several picture files. You may also extract it manually using tools such as SSView (<a href=\"http://www.mitec.cz/ssv.html\" title=\"http://www.mitec.cz/ssv.html\">http://www.mitec.cz/ssv.html</a>).</p><p>Then the only way I've found so far is to use file carving tools which are able to determine the beginning and the end of each picture in a binary file. These tools are not always easy to use but if you're interested have a look at <a href=\"http://pypi.python.org/pypi/hachoir-subfile\" title=\"http://pypi.python.org/pypi/hachoir-subfile\">http://pypi.python.org/pypi/hachoir-subfile</a> and <a href=\"http://www.forensicswiki.org/wiki/Tools:Data_Recovery#Carving\" title=\"http://www.forensicswiki.org/wiki/Tools:Data_Recovery#Carving\">http://www.forensicswiki.org/wiki/Tools:Data_Recovery#Carving</a>.</p><p>If you really need to automate the process then you have to study Microsoft specifications (at <a href=\"http://www.microsoft.com/interop/docs/officebinaryformats.mspx\" title=\"http://www.microsoft.com/interop/docs/officebinaryformats.mspx\">http://www.microsoft.com/interop/docs/officebinaryformats.mspx</a>) and find the right way to parse MS Office documents...</p><p>A lot of people (including me) would be very interested if you find a solution! ;-)</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><a id=\"comment-450\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Fri, 10/22/2010 - 19:38 \u2014 v3ss (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-450\" class=\"active\">How can i Extract Documents Embedded inside </a></h3>    <div class=\"content\">      <p>I am trying to extract MS documents (xls,doc,ppt) embedded inside  as their original documents , How can i achieve this?</p><p>here is what i get:</p><p>n [6]: ole.dumpdirectory()<br />'Root Entry' (root) 2816 bytes<br />{00020820-0000-0000-C000-000000000046}<br />  '\\x01CompObj' (stream) 114 bytes<br />  '\\x05DocumentSummaryInformation' (stream) 676 bytes<br />  '\\x05SummaryInformation' (stream) 200 bytes<br />  'MBD0005263B' (storage)<br />  {B801CA65-A1FC-11D0-85AD-444553540000}<br />    '\\x01CompObj' (stream) 93 bytes<br />    '\\x01Ole' (stream) 20 bytes<br />    'CONTENTS' (stream) 66833 bytes<br />  'MBD00053027' (storage)<br />  {00020906-0000-0000-C000-000000000046}<br />    '\\x01CompObj' (stream) 121 bytes<br />    '\\x01Ole' (stream) 20 bytes<br />    '\\x05DocumentSummaryInformation' (stream) 5640 bytes<br />    '\\x05SummaryInformation' (stream) 384 bytes<br />    '1Table' (stream) 8095 bytes<br />    'Data' (stream) 4563 bytes<br />    'ObjectPool' (storage)<br />      '_1347688647' (storage)<br />      {00020820-0000-0000-C000-000000000046}<br />        '\\x01CompObj' (stream) 114 bytes<br />        '\\x01Ole' (stream) 20 bytes<br />        '\\x03ObjInfo' (stream) 6 bytes<br />        '\\x05DocumentSummaryInformation' (stream) 244 bytes<br />        '\\x05SummaryInformation' (stream) 200 bytes<br />        'MBD000465A6' (storage)<br />        {B801CA65-A1FC-11D0-85AD-444553540000}<br />          '\\x01CompObj' (stream) 93 bytes<br />          '\\x01Ole' (stream) 20 bytes<br />          'CONTENTS' (stream) 66833 bytes<br />        'Workbook' (stream) 36816 bytes<br />    'WordDocument' (stream) 15924 bytes<br />  'Workbook' (stream) 175989 bytes</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-451\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Wed, 11/03/2010 - 23:06 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-451\" class=\"active\">Embedded documents</a></h3>    <div class=\"content\">      <p>Unfortunately there is currently no way to extract embedded MS Office documents with OleFileIO alone, because they are not stored as a single stream but as a collection of streams in a storage object (see the ones starting with &quot;MBD&quot; in your example). So extracting them requires to create a new OLE document from scratch, and to rebuild their structure with several streams.</p><p>There might be alternative solutions: see the message about Excel below, or try the <a href=\"http://sourceforge.net/projects/pywin32/\">pywin32</a> modules if your code runs on Windows (see <a href=\"http://docs.activestate.com/activepython/2.5/pywin32/pythoncom__StgOpenStorageEx_meth.html\">pythoncom.StgOpenStorageEx</a> and then maybe the EnumElements, OpenStorage and CopyTo methods of the <a href=\"http://docs.activestate.com/activepython/2.5/pywin32/PyIStorage.html\">PyIStorage</a> object). </p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-468\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 09/22/2011 - 18:08 \u2014 v3ss (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-468\" class=\"active\">I did managed to extract embedded using OleFileIO_PL alone</a></h3>    <div class=\"content\">      <p>def extract_embedded_ole()<br />ole = OleFileIO_PL.OleFileIO( fname )<br />i = 0<br />for stream in ole.listdir():<br />for s in stream:<br />if type( stream ) == type( [] ) and len( stream ) &gt; 1:<br />i += 1<br />if ole.get_type( stream ) == 2 and s in ['Workbook', 'WordDocument', 'Package', 'WordDocument','VisioDocument' ,'PowerPoint Document', \"Book\", \"CONTENTS\"]:<br />ole_stream = ole.openstream( stream )<br />ole_props = ole.getproperties( ['\\x05SummaryInformation'] )<br />out_dir = fname + \".embeddings/\" + \"/\".join( stream[:-1] )<br />try:<br />os.makedirs( out_dir )<br />except OSError:<br />pass</p><p>#Write out Streams<br />out_name = out_dir + \"/\" + os.path.split( fname )[1] + \"-emb-\" + s + \"-\" + str( i ) + \".ole\"<br />out_file = open( out_name, 'w+b' )<br />out_file.write( ole_stream.read() )<br />out_file.close()</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div></div></div><a id=\"comment-287\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Wed, 12/09/2009 - 01:40 \u2014 Ben G. (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-287\" class=\"active\">array.array should use &#039;I&#039; for 64-bit compatibility</a></h3>    <div class=\"content\">      <p>On 64-bit systems, array.array('L', ...) expects the buffer to be 64-bit aligned, so OleFileIO_PL doesn't work there.</p><p>The fix is to change all calls like array.array('L', ...) to array.array('I', ...).</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><a id=\"comment-288\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 12/10/2009 - 08:53 \u2014 Martijn (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-288\" class=\"active\">Small bug</a></h3>    <div class=\"content\">      <p>Hoi,</p><p>Nice library. Did find a problem with it while using it on a 64-bit system. The construct</p><p>a = array.array(\"L\", string)</p><p>is used often and doesn't work on 64-bit system where for some reason the above eats chunks of 8-bytes. Replacing all the occurrences with array.array(\"I\", string) fixes the issue.</p><p>Works perfectly otherwise.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-289\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 12/10/2009 - 22:05 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-289\" class=\"active\">v0.19 fixed for 64 bits platforms</a></h3>    <div class=\"content\">      <p>Thanks a lot Ben and Martijn for reporting that bug.</p><p>I have made the suggested change in v0.19. Please tell me if it works.</p><p>Philippe.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-291\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 12/24/2009 - 12:34 \u2014 Martijn (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-291\" class=\"active\">Tested ok</a></h3>    <div class=\"content\">      <p>On the 64-bit systems I have access to it works fine, thanks.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div></div><a id=\"comment-300\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Sun, 02/21/2010 - 14:38 \u2014 Naor (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-300\" class=\"active\">Reading MSGraph workbook data</a></h3>    <div class=\"content\">      <p>Hi,</p><p>First, thanks for writing this, it is much helpful.</p><p>I need to get the data values (sheet) from MSGraph.<br />I did:<br />f=OleFileIO_PL.OleFileIO('mygraphfile')<br />f.listdir()<br />output: [['\\x01CompObj'], ['\\x01Ole'], ['Workbook']]</p><p>and now:<br />f.openstream('Workbook').read()<br />gave me a binary stream, where I recognized the data in.<br />Is there a way to grep the data from the binary stream?</p><p>Thanks again,</p><p>Naor.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-301\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Mon, 02/22/2010 - 16:46 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-301\" class=\"active\">reading Excel data</a></h3>    <div class=\"content\">      <p>Naor, OleFileIO is only meant to parse the OLE2 structure, not the binary streams inside which are different for each application (MS Word, Excel, Powerpoint, etc). Here are a few potential solutions:</p><ul><li>Write your own parser on top of OleFileIO, following <a href=\"http://www.microsoft.com/interop/docs/officebinaryformats.mspx\">MS specifications</a>.</li><li><a href=\"http://pypi.python.org/pypi/pyExcelerator\">pyExcelerator</a> - to create and read Excel files</li><li><a href=\"http://pypi.python.org/pypi/xlwt\">xlwt</a> (a new fork of pyExcelerator) - not sure it can parse files</li><li><a href=\"http://pypi.python.org/pypi/xlrd\">xlrd</a> - to read Excel files</li><li><a href=\"http://pypi.python.org/pypi/xlutils\">xlutils</a> - tools based on xlrd and xlwt</li><li>or ask your question on <a href=\"http://groups.google.com/group/python-excel\" title=\"http://groups.google.com/group/python-excel\">http://groups.google.com/group/python-excel</a></li></ul>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div><a id=\"comment-456\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 01/06/2011 - 20:06 \u2014 chris (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-456\" class=\"active\">Extracting just the text from Doc files?</a></h3>    <div class=\"content\">      <p>I'm interested in just extracting all the text for .doc files, for the purpose of building a search index.  Any ideas on how to do this?</p><p>When I read a docfile and I go to print ole.openstream(\"WordDocument\"), I get the text, as well as tons of other binary gibberish.  Is there another format inside this stream I'd have to parse to just extract the text?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><a id=\"comment-458\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Mon, 04/25/2011 - 19:44 \u2014 Forrest Collman (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-458\" class=\"active\">zvi file format</a></h3>    <div class=\"content\">      <p>I am trying to use this plugin for reading in a ZVI file format for Zeiss Microscopy products, which is based upon OLE2.  </p><p>In the process I discovered what I think is a bug based upon the assumption that the sectorsize is 512 bytes.</p><p>line 1274 was<br />self.directory_fp = self._open(sect)<br />now i have it<br />self.directory_fp = self._open(sect,sectorsize=self.SectorSize)</p><p>line 1330 was<br /> def _open(self, start, size = 0x7FFFFFFF, force_FAT=False)<br />now i have it<br /> def _open(self, start, size = 0x7FFFFFFF, force_FAT=False,sectorsize=512):</p><p>lines 1359-1360 were<br /> return _OleStream(self.fp, start, size, sectorsize,<br />                              512, self.fat)<br />now i have<br /> return _OleStream(self.fp, start, size, sectorsize,<br />                              self.sectorsize, self.fat)</p><p>This made the basic test program given above go from failing to working on a test zvi file format which has a 4096 byte sectorsize.</p><p>I'm still playing around with using it further, but I hope that the success of reading the directory structure means the rest will work as designed.</p><p>Forrest</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-459\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Mon, 05/02/2011 - 09:31 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-459\" class=\"active\">sectorsize &gt;512</a></h3>    <div class=\"content\">      <p>Thanks a lot for reporting the bug and providing a solution, Forrest. I will publish an updated version soon, with other improvements. In the meantime, could you please send me sample ZVI files by e-mail, so that I check if everything works fine?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div><a id=\"comment-467\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 09/22/2011 - 17:55 \u2014 v3ss (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-467\" class=\"active\">\\listdir() gives empty list on Outlook MSG Files</a></h3>    <div class=\"content\">      <p>Hello decleage</p><p>I want to detect if ole file is Outlook MSG or not (in case of  MS Outlooks with changed extensions) .</p><p>i do this :<br />ole = OleFileIO_PL.OleFileIO(\"./ol-msg.msg \")<br />ole.listdir()<br />&gt;&gt;[]</p><p> it gives empty List</p><p>what i need to do to list out contents?</p><p>i tested with 7zip . </p><p>7z -l ol-msg.msg</p><p>and it prints out contents fine :</p><p>Listing archive: ID0020.msg</p><p>--<br />Path = ID0020.msg<br />Type = Compound<br />Cluster Size = 4096<br />Sector Size = 64</p><p>   Date      Time    Attr         Size   Compressed  Name<br />------------------- ----- ------------ ------------  ------------------------<br />2011-07-16 02:28:00 D....                            __recip_version1.0_#00000003<br />2011-07-16 02:28:00 D....                            __recip_version1.0_#00000002<br />2011-07-16 02:28:00 D....                            __recip_version1.0_#00000001<br />...</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-469\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Mon, 10/10/2011 - 20:06 \u2014 Anonymous (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-469\" class=\"active\">ALready dead?</a></h3>    <div class=\"content\">      <p>Is this awesome project already dead or abandoned?</p><p>If you abandoned can you host your code at github or bitbucket so people can clone easy and contiue supporting it.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-470\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Thu, 10/20/2011 - 04:49 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-470\" class=\"active\">project code now on bitbucket</a></h3>    <div class=\"content\">      <p>This project is not dead, but that's true I haven't touched the code for a while. I just created a repository on bitbucket for it, so that it is easier to contribute: <a href=\"https://bitbucket.org/decalage/olefileio_pl\" title=\"https://bitbucket.org/decalage/olefileio_pl\">https://bitbucket.org/decalage/olefileio_pl</a></p><p>See the <a href=\"https://bitbucket.org/decalage/olefileio_pl/issues?status=new&amp;status=open\">issues page</a> for known bugs and enhancements that have not yet been fixed in the code. Please use it to report any other bug you might have found.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div></div><a id=\"comment-478\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Tue, 01/24/2012 - 16:42 \u2014 Anonymous (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-478\" class=\"active\">Inserting content</a></h3>    <div class=\"content\">      <p>I'm looking to write some python code that picks up TAGs that I'll embed within a word document. These Tags will serve as placeholders to insert content. In my case, I'm trying to develop a \"survey/Questionnaire\" Python script, that takes as input a word document that serves as a \"template\" (has all the formatting I want). I want my python code to read the word document, find the tags, and then execute appropriate handlers. For instance, one handler will be simply to look up the associated content from a database, and then inserting that content into the file. </p><p>Can anyone show a snippet of code that would read for a string, and replace that string with another? Should I simply be using Win32Com instead? </p><p>(yes, I'm a newb - trying to quickly come up to speed)</p><p>I'd like to also manage more complex formatting from Python - such as creating tables - setting margins, etc. But that's down the road... but, can anyone comment if such a thing is possible?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-482\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Sun, 03/04/2012 - 13:57 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-482\" class=\"active\">Re: Inserting content</a></h3>    <div class=\"content\">      <p>Unfortunately you can't do that with OleFileIO, because it is currently still a parser (no editing), and it only parses the OLE2 structure, not the specific Word content.</p><p>However, maybe you can achieve this using python-docx? : <a href=\"https://github.com/mikemaccana/python-docx\" title=\"https://github.com/mikemaccana/python-docx\">https://github.com/mikemaccana/python-docx</a></p><p>You may also try win32com, by using OLE to control the MS Word application.</p><p>On a similar topic, I just published a new module to parse MS Word forms with tags, called <a href=\"http://www.decalage.info/python/pywordform\">pywordform</a>.</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div><a id=\"comment-481\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Tue, 02/28/2012 - 22:46 \u2014 Anonymous (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-481\" class=\"active\">passing file to </a></h3>    <div class=\"content\">      <p>Hello, </p><p>I passed a file() to OleFileIO() and got an error in this line 979:<br />        filesize = os.path.getsize(filename)<br />but in line 847 you check for a file object<br />        if hasattr(filename, 'read'):</p><p>just for your information.<br />thanks for this module!</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-483\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Tue, 03/06/2012 - 18:04 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-483\" class=\"active\">bug with file object</a></h3>    <div class=\"content\">      <p>Thanks a lot for reporting this bug, indeed OleFileIO should support file-like objects.</p><p>I opened a ticket for this, will fix the code soon: <a href=\"https://bitbucket.org/decalage/olefileio_pl/issue/8/bug-with-file-object\" title=\"https://bitbucket.org/decalage/olefileio_pl/issue/8/bug-with-file-object\">https://bitbucket.org/decalage/olefileio_pl/issue/8/bug-with-file-object</a></p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div><a id=\"comment-511\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Mon, 01/14/2013 - 19:19 \u2014 Kane (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-511\" class=\"active\">Text from a Word doc</a></h3>    <div class=\"content\">      <p>This your library is really easy to get up and running to look at the structure of a Word doc, but what I am mainly interested in is the actual text.  I'd like to be able to get the 'WordDocument' portion of the stream and discard anything that isn't actual content so I'm left with just a plain text version of the document.</p><p>Following the examples it is easy to get the document to parse but outputting pieces of the stream still includes binary data.  Is there a way to get only the text?</p><p>I'm trying to parse uploaded documents to pull out key words for search indexing.  I have PDF and DOCX working using (PyPDF and python-docx) but old school DOC files are troublesome and unfortunately still extremely commonly used.  This library is one of the few I have found that will handle old DOC formats.</p><p>Any advice would be appreciated!</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><a id=\"comment-574\"></a><div class=\"comment comment-published odd\">  <div class=\"clear-block\">      <span class=\"submitted\">Tue, 06/03/2014 - 09:49 \u2014 Rudolf Enberg (not verified)</span>          <h3><a href=\"/en/python/olefileio#comment-574\" class=\"active\">Sectors</a></h3>    <div class=\"content\">      <p>Hey,</p><p>to replace data inside an OLE file I'd like to get a list of where each sector starts and ends for a specific stream of the OLE.</p><p>I started by collecting \"offset + sectorsize * sect\" in _OleStream under \"for i in range(nb_sectors):\", but that doesn't work for all OLE files, as apparently _OleStream is sometimes used to read somehow pre-processed data.</p><p>So, let's say the OLE includes a stream \"example.txt\", and it's 600 bytes long; I'd like to get a list that might look, for example, like this:<br />[<br />    [2048, 2175], # 128 bytes<br />    [2176, 2303], # 128 bytes<br />    [2304, 2431], # 128 bytes<br />    [2560, 2687], # 128 bytes<br />    [17408, 17495] # 88 bytes<br />]</p><p>This would enable anyone to quite easily write new data into an OLE file, as long as the size and structure of things remain the same. I'm aware I might be breaking some checksums somewhere or something, but that's not an important issue in my case.</p><p>Can I get some help?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div><div class=\"indented\"><a id=\"comment-575\"></a><div class=\"comment comment-published even\">  <div class=\"clear-block\">      <span class=\"submitted\">Wed, 06/04/2014 - 21:16 \u2014 decalage</span>          <h3><a href=\"/en/python/olefileio#comment-575\" class=\"active\">Write a stream back to disk</a></h3>    <div class=\"content\">      <p>Hi Rudolf, adding the possibility to write sectors and streams back to an OLE file is something that I plan to implement for a long time. I think it would be easier to provide methods to overwrite a single sector, and then to overwrite an existing stream by data of the same size. This is recorded in this ticket: <a href=\"https://bitbucket.org/decalage/olefileio_pl/issue/6/improve-olefileio_pl-to-write-ole-files\" title=\"https://bitbucket.org/decalage/olefileio_pl/issue/6/improve-olefileio_pl-to-write-ole-files\">https://bitbucket.org/decalage/olefileio_pl/issue/6/improve-olefileio_pl...</a> - Would that cover your needs?</p>          </div>  </div>      <div class=\"links\"><ul class=\"links\"><li class=\"comment_forbidden first\"></li><li class=\"0 last\"></li></ul></div>  </div></div></div>          </div>                    <div id=\"footer\"><p><a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"license\"><img alt=\"Creative Commons License\" src=\"http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png\" /></a><br />Except where otherwise noted, all content on this site <a href=\"http://www.decalage.info\" rel=\"source\">www.decalage.info</a> is licensed by <a href=\"http://www.decalage.info\" rel=\"attributionURL\">Philippe Lagadec</a> under a <a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/\" rel=\"license\">Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License</a>.</p></div>      </div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->          </div> <!-- /container -->  </div><!-- /layout -->    </body></html>",
  "embeddings": []
}
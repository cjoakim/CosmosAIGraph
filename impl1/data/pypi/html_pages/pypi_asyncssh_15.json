{
  "libtype": "pypi",
  "libname": "asyncssh",
  "url": "http://asyncssh.timeheart.net",
  "html": "<!DOCTYPE html><html lang=\"en\" data-content_root=\"./\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />    <title>AsyncSSH: Asynchronous SSH for Python &#8212; AsyncSSH 2.14.2 documentation</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css?v=fa44fd50\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/rftheme.css?v=ef7955da\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script src=\"_static/documentation_options.js?v=e8362b60\"></script>    <script src=\"_static/doctools.js?v=888ff710\"></script>    <script src=\"_static/sphinx_highlight.js?v=dc90522c\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"Change Log\" href=\"changes.html\" />   <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"asyncssh\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"rftheme\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <div class=\"toctree-wrapper compound\"></div><a class=\"reference external image-reference\" href=\"https://asyncssh.readthedocs.io/en/latest/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/asyncssh/badge/?version=latest\" /></a><a class=\"reference external image-reference\" href=\"https://pypi.python.org/pypi/asyncssh/\"><img alt=\"AsyncSSH PyPI Project\" src=\"https://img.shields.io/pypi/v/asyncssh.svg\" /></a><section id=\"asyncssh-asynchronous-ssh-for-python\"><h1>AsyncSSH: Asynchronous SSH for Python<a class=\"headerlink\" href=\"#asyncssh-asynchronous-ssh-for-python\" title=\"Link to this heading\">\u00b6</a></h1><p>AsyncSSH is a Python package which provides an asynchronous client andserver implementation of the SSHv2 protocol on top of the Python 3.6+asyncio framework.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">():</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;echo &quot;Hello!&quot;&#39;</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div><p>Check out the <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/#client-examples\">examples</a> to get started!</p><section id=\"features\"><h2>Features<a class=\"headerlink\" href=\"#features\" title=\"Link to this heading\">\u00b6</a></h2><ul class=\"simple\"><li><p>Full support for SSHv2, SFTP, and SCP client and server functions</p><ul><li><p>Shell, command, and subsystem channels</p></li><li><p>Environment variables, terminal type, and window size</p></li><li><p>Direct and forwarded TCP/IP channels</p></li><li><p>OpenSSH-compatible direct and forwarded UNIX domain socket channels</p></li><li><p>Local and remote TCP/IP port forwarding</p></li><li><p>Local and remote UNIX domain socket forwarding</p></li><li><p>Dynamic TCP/IP port forwarding via SOCKS</p></li><li><p>X11 forwarding support on both the client and the server</p></li><li><p>SFTP protocol version 3 with OpenSSH extensions</p><ul><li><p>Experimental support for SFTP versions 4-6, when requested</p></li></ul></li><li><p>SCP protocol support, including third-party remote to remote copies</p></li></ul></li><li><p>Multiple simultaneous sessions on a single SSH connection</p></li><li><p>Multiple SSH connections in a single event loop</p></li><li><p>Byte and string based I/O with settable encoding</p></li><li><p>A variety of <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#key-exchange-algorithms\">key exchange</a>, <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#encryption-algorithms\">encryption</a>, and <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#mac-algorithms\">MAC</a> algorithms</p><ul><li><p>Including OpenSSH post-quantum kex algorithmsntrup761x25519-sha512&#64;openssh.com</p></li></ul></li><li><p>Support for <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#compression-algorithms\">gzip compression</a></p><ul><li><p>Including OpenSSH variant to delay compression until after auth</p></li></ul></li><li><p>User and host-based public key, password, and keyboard-interactiveauthentication methods</p></li><li><p>Many types and formats of <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#public-key-support\">public keys and certificates</a></p><ul><li><p>Including OpenSSH-compatible support for U2F and FIDO2 security keys</p></li><li><p>Including PKCS#11 support for accessing PIV security tokens</p></li><li><p>Including support for X.509 certificates as defined in RFC 6187</p></li></ul></li><li><p>Support for accessing keys managed by <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#ssh-agent-support\">ssh-agent</a> on UNIX systems</p><ul><li><p>Including agent forwarding support on both the client and the server</p></li></ul></li><li><p>Support for accessing keys managed by PuTTY\u2019s Pageant agent on Windows</p></li><li><p>Support for accessing host keys via OpenSSH\u2019s ssh-keysign</p></li><li><p>OpenSSH-style <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#known-hosts\">known_hosts file</a> support</p></li><li><p>OpenSSH-style <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#authorized-keys\">authorized_keys file</a> support</p></li><li><p>Partial support for <a class=\"reference external\" href=\"http://asyncssh.readthedocs.io/en/stable/api.html#config-file-support\">OpenSSH-style configuration files</a></p></li><li><p>Compatibility with OpenSSH \u201cEncrypt then MAC\u201d option for better security</p></li><li><p>Time and byte-count based session key renegotiation</p></li><li><p>Designed to be easy to extend to support new forms of key exchange,authentication, encryption, and compression algorithms</p></li></ul></section><section id=\"license\"><h2>License<a class=\"headerlink\" href=\"#license\" title=\"Link to this heading\">\u00b6</a></h2><p>This package is released under the following terms:</p><blockquote><div><p>Copyright (c) 2013-2022 by Ron Frederick &lt;<a class=\"reference external\" href=\"mailto:ronf&#37;&#52;&#48;timeheart&#46;net\">ronf<span>&#64;</span>timeheart<span>&#46;</span>net</a>&gt; and others.</p><p>This program and the accompanying materials are made available underthe terms of the Eclipse Public License v2.0 which accompanies thisdistribution and is available at:</p><blockquote><div><p><a class=\"reference external\" href=\"http://www.eclipse.org/legal/epl-2.0/\">http://www.eclipse.org/legal/epl-2.0/</a></p></div></blockquote><p>This program may also be made available under the following secondarylicenses when the conditions for such availability set forth in theEclipse Public License v2.0 are satisfied:</p><blockquote><div><p>GNU General Public License, Version 2.0, or any later versions ofthat license</p></div></blockquote><p>SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later</p></div></blockquote><p>For more information about this license, please see the <a class=\"reference external\" href=\"https://www.eclipse.org/legal/epl-2.0/faq.php\">EclipsePublic License FAQ</a>.</p></section><section id=\"prerequisites\"><h2>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Link to this heading\">\u00b6</a></h2><p>To use AsyncSSH 2.0 or later, you need the following:</p><ul class=\"simple\"><li><p>Python 3.6 or later</p></li><li><p>cryptography (PyCA) 3.1 or later</p></li></ul></section><section id=\"installation\"><h2>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Link to this heading\">\u00b6</a></h2><p>Install AsyncSSH by running:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">asyncssh</span></pre></div></div></div></blockquote><section id=\"optional-extras\"><h3>Optional Extras<a class=\"headerlink\" href=\"#optional-extras\" title=\"Link to this heading\">\u00b6</a></h3><p>There are some optional modules you can install to enable additionalfunctionality:</p><ul class=\"simple\"><li><p>Install bcrypt from <a class=\"reference external\" href=\"https://pypi.python.org/pypi/bcrypt\">https://pypi.python.org/pypi/bcrypt</a>if you want support for OpenSSH private key encryption.</p></li><li><p>Install fido2 from <a class=\"reference external\" href=\"https://pypi.org/project/fido2\">https://pypi.org/project/fido2</a> if you want supportfor key exchange and authentication with U2F/FIDO2 security keys.</p></li><li><p>Install python-pkcs11 from <a class=\"reference external\" href=\"https://pypi.org/project/python-pkcs11\">https://pypi.org/project/python-pkcs11</a> ifyou want support for accessing PIV keys on PKCS#11 security tokens.</p></li><li><p>Install gssapi from <a class=\"reference external\" href=\"https://pypi.python.org/pypi/gssapi\">https://pypi.python.org/pypi/gssapi</a> if youwant support for GSSAPI key exchange and authentication on UNIX.</p></li><li><p>Install liboqs from <a class=\"reference external\" href=\"https://github.com/open-quantum-safe/liboqs\">https://github.com/open-quantum-safe/liboqs</a>if you want support for the OpenSSH post-quantum key exchangealgorithm sntrup761x25519-sha512&#64;openssh.com.</p></li><li><p>Install libsodium from <a class=\"reference external\" href=\"https://github.com/jedisct1/libsodium\">https://github.com/jedisct1/libsodium</a>and libnacl from <a class=\"reference external\" href=\"https://pypi.python.org/pypi/libnacl\">https://pypi.python.org/pypi/libnacl</a> if you havea version of OpenSSL older than 1.1.1b installed and you wantsupport for Curve25519 key exchange, Ed25519 keys and certificates,or the Chacha20-Poly1305 cipher.</p></li><li><p>Install libnettle from <a class=\"reference external\" href=\"http://www.lysator.liu.se/~nisse/nettle/\">http://www.lysator.liu.se/~nisse/nettle/</a>if you want support for UMAC cryptographic hashes.</p></li><li><p>Install pyOpenSSL from <a class=\"reference external\" href=\"https://pypi.python.org/pypi/pyOpenSSL\">https://pypi.python.org/pypi/pyOpenSSL</a>if you want support for X.509 certificate authentication.</p></li><li><p>Install pywin32 from <a class=\"reference external\" href=\"https://pypi.python.org/pypi/pywin32\">https://pypi.python.org/pypi/pywin32</a> if youwant support for using the Pageant agent or support for GSSAPIkey exchange and authentication on Windows.</p></li></ul><p>AsyncSSH defines the following optional PyPI extra packages to make iteasy to install any or all of these dependencies:</p><blockquote><div><div class=\"line-block\"><div class=\"line\">bcrypt</div><div class=\"line\">fido2</div><div class=\"line\">gssapi</div><div class=\"line\">libnacl</div><div class=\"line\">pkcs11</div><div class=\"line\">pyOpenSSL</div><div class=\"line\">pywin32</div></div></div></blockquote><p>For example, to install bcrypt, fido2, gssapi, libnacl, pkcs11, andpyOpenSSL on UNIX, you can run:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"s1\">&#39;asyncssh[bcrypt,fido2,gssapi,libnacl,pkcs11,pyOpenSSL]&#39;</span></pre></div></div></div></blockquote><p>To install bcrypt, fido2, libnacl, pkcs11, pyOpenSSL, and pywin32 onWindows, you can run:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"s1\">&#39;asyncssh[bcrypt,fido2,libnacl,pkcs11,pyOpenSSL,pywin32]&#39;</span></pre></div></div></div></blockquote><p>Note that you will still need to manually install the libsodium librarylisted above for libnacl to work correctly and/or libnettle for UMACsupport. Unfortunately, since liboqs, libsodium, and libnettle are notPython packages, they cannot be directly installed using pip.</p></section><section id=\"installing-the-development-branch\"><h3>Installing the development branch<a class=\"headerlink\" href=\"#installing-the-development-branch\" title=\"Link to this heading\">\u00b6</a></h3><p>If you would like to install the development branch of asyncssh directlyfrom Github, you can use the following command to do this:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">git</span><span class=\"o\">+</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ronf</span><span class=\"o\">/</span><span class=\"n\">asyncssh</span><span class=\"nd\">@develop</span></pre></div></div></div></blockquote></section></section><section id=\"mailing-lists\"><h2>Mailing Lists<a class=\"headerlink\" href=\"#mailing-lists\" title=\"Link to this heading\">\u00b6</a></h2><p>Three mailing lists are available for AsyncSSH:</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://groups.google.com/d/forum/asyncssh-announce\">asyncssh-announce&#64;googlegroups.com</a>: Project announcements</p></li><li><p><a class=\"reference external\" href=\"http://groups.google.com/d/forum/asyncssh-dev\">asyncssh-dev&#64;googlegroups.com</a>: Development discussions</p></li><li><p><a class=\"reference external\" href=\"http://groups.google.com/d/forum/asyncssh-users\">asyncssh-users&#64;googlegroups.com</a>: End-user discussions</p></li></ul></section></section><section id=\"client-examples\"><span id=\"clientexamples\"></span><h1>Client Examples<a class=\"headerlink\" href=\"#client-examples\" title=\"Link to this heading\">\u00b6</a></h1><section id=\"simple-client\"><h2>Simple client<a class=\"headerlink\" href=\"#simple-client\" title=\"Link to this heading\">\u00b6</a></h2><p>The following code shows an example of a simple SSH client which logs intolocalhost and lists files in a directory named \u2018abc\u2019 under the user\u2019s homedirectory. The username provided is the logged in user, and the user\u2019sdefault SSH client keys or certificates are presented during authentication.The server\u2019s host key is checked against the user\u2019s SSH known_hosts file andthe connection will fail if there\u2019s no entry for localhost there or if thekey doesn\u2019t match.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>This example only uses the output on stdout, but output on stderr is alsocollected as another attribute in the returned <a class=\"reference internal\" href=\"api.html#asyncssh.SSHCompletedProcess\" title=\"asyncssh.SSHCompletedProcess\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHCompletedProcess</span></code></a>object.</p><p>Shell and exec sessions default to an encoding of \u2018utf-8\u2019, so read andwrite calls operate on strings by default. If you want to send andreceive binary data, you can set the encoding to <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.12)\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">None</span></code></a> when thesession is opened to make read and write operate on bytes instead.Alternate encodings can also be selected to change how strings areconverted to and from bytes.</p><p>To check against a different set of server host keys, they can be providedin the known_hosts argument when the connection is opened:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"n\">known_hosts</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_known_hosts&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span></pre></div></div></div></blockquote><p>Server host key checking can be disabled by setting the known_hostsargument to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, but that\u2019s not recommended as it makes theconnection vulnerable to a man-in-the-middle attack.</p><p>To log in as a different remote user, the username argument can beprovided:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;user123&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span></pre></div></div></div></blockquote><p>To use a different set of client keys for authentication, they can beprovided in the client_keys argument:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"n\">client_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;my_ssh_key&#39;</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span></pre></div></div></div></blockquote><p>Password authentication can be used by providing a password argument:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">&#39;secretpw&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span></pre></div></div></div></blockquote><p>Any of the arguments above can be combined together as needed. If clientkeys and a password are both provided, either may be used dependingon what forms of authentication the server supports and whether theauthentication with them is successful.</p></section><section id=\"callback-example\"><h2>Callback example<a class=\"headerlink\" href=\"#callback-example\" title=\"Link to this heading\">\u00b6</a></h2><p>AsyncSSH also provides APIs that use callbacks rather than \u201cawait\u201d and \u201casyncwith\u201d. Here\u2019s the example above written using custom <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClient\" title=\"asyncssh.SSHClient\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHClient</span></code></a> and<a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientSession\" title=\"asyncssh.SSHClientSession\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHClientSession</span></code></a> subclasses:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"k\">class</span> <span class=\"nc\">MySSHClientSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH session error: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">MySSHClient</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientConnection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Connection made to </span><span class=\"si\">%s</span><span class=\"s1\">.&#39;</span> <span class=\"o\">%</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;peername&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>    <span class=\"k\">def</span> <span class=\"nf\">auth_completed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Authentication successful.&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_connection</span><span class=\"p\">(</span><span class=\"n\">MySSHClient</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">chan</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_session</span><span class=\"p\">(</span><span class=\"n\">MySSHClientSession</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>In cases where you don\u2019t need to customize callbacks on the SSHClient class,this code can be simplified somewhat to:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"k\">class</span> <span class=\"nc\">MySSHClientSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH session error: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">chan</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_session</span><span class=\"p\">(</span><span class=\"n\">MySSHClientSession</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>If you need to distinguish output going to stdout vs. stderr, that\u2019s easy todo with the following change:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"k\">class</span> <span class=\"nc\">MySSHClientSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">datatype</span> <span class=\"o\">==</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">EXTENDED_DATA_STDERR</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH session error: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">chan</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_session</span><span class=\"p\">(</span><span class=\"n\">MySSHClientSession</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote></section><section id=\"interactive-input\"><h2>Interactive input<a class=\"headerlink\" href=\"#interactive-input\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates sending interactive input to a remoteprocess. It executes the calculator program <code class=\"docutils literal notranslate\"><span class=\"pre\">bc</span></code> and performs some basicmath calculations. Note that it uses the <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_process\" title=\"asyncssh.SSHClientConnection.create_process\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_process</span></code></a> method rather than the <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.run\" title=\"asyncssh.SSHClientConnection.run\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">run</span></code></a> method. This starts the process but doesn\u2019t waitfor it to exit, allowing interaction with it.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_process</span><span class=\"p\">(</span><span class=\"s1\">&#39;bc&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">process</span><span class=\"p\">:</span>            <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2+2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1*2*3*4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2^32&#39;</span><span class=\"p\">]:</span>                <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"s1\">&#39;=&#39;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>When run, this program should produce the following output:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"mi\">1</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"mi\">4</span> <span class=\"o\">=</span> <span class=\"mi\">24</span><span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"mi\">32</span> <span class=\"o\">=</span> <span class=\"mi\">4294967296</span></pre></div></div></div></blockquote></section><section id=\"i-o-redirection\"><h2>I/O redirection<a class=\"headerlink\" href=\"#i-o-redirection\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example shows how to pass a fixed input string to a remoteprocess and redirect the resulting output to the local file \u2018/tmp/stdout\u2019.Input lines containing 1, 2, and 3 are passed into the \u2018tail -r\u2019 commandand the output written to \u2018/tmp/stdout\u2019 should contain the reversed lines3, 2, and 1:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;tail -r&#39;</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"s1\">&#39;1</span><span class=\"se\">\\n</span><span class=\"s1\">2</span><span class=\"se\">\\n</span><span class=\"s1\">3</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"s1\">&#39;/tmp/stdout&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">stdin</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code> arguments support redirectingto a variety of locations include local files, pipes, and sockets aswell as <a class=\"reference internal\" href=\"api.html#asyncssh.SSHReader\" title=\"asyncssh.SSHReader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHReader</span></code></a> or <a class=\"reference internal\" href=\"api.html#asyncssh.SSHWriter\" title=\"asyncssh.SSHWriter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHWriter</span></code></a> objects associated withother remote SSH processes. Here\u2019s an example of piping stdout from alocal process to a remote process:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">subprocess</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">local_proc</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;echo &quot;1\\n2\\n3&quot;&#39;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                                      <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>        <span class=\"n\">remote_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;tail -r&#39;</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">local_proc</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">remote_result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>Here\u2019s an example of piping one remote process to another:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">proc1</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_process</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;echo &quot;1\\n2\\n3&quot;&#39;</span><span class=\"p\">)</span>        <span class=\"n\">proc2_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;tail -r&#39;</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">proc1</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">proc2_result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>In this example both remote processes are running on the same SSHconnection, but this redirection can just as easily be used betweenSSH sessions associated with connections going to different servers.</p></section><section id=\"checking-exit-status\"><h2>Checking exit status<a class=\"headerlink\" href=\"#checking-exit-status\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example shows how to test the exit status of a remote process:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">exit_status</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Program exited with status </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">exit_status</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>                  <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>If an exit signal is received, the exit status will be set to -1 and exitsignal information is provided in the <code class=\"docutils literal notranslate\"><span class=\"pre\">exit_signal</span></code> attribute of thereturned <a class=\"reference internal\" href=\"api.html#asyncssh.SSHCompletedProcess\" title=\"asyncssh.SSHCompletedProcess\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHCompletedProcess</span></code></a>.</p><p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">check</span></code> argument in <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.run\" title=\"asyncssh.SSHClientConnection.run\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">run</span></code></a> is setto <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, any abnormal exit will raise a <a class=\"reference internal\" href=\"api.html#asyncssh.ProcessError\" title=\"asyncssh.ProcessError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ProcessError</span></code></a> exceptioninstead of returning an <a class=\"reference internal\" href=\"api.html#asyncssh.SSHCompletedProcess\" title=\"asyncssh.SSHCompletedProcess\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHCompletedProcess</span></code></a>.</p></section><section id=\"running-multiple-clients\"><h2>Running multiple clients<a class=\"headerlink\" href=\"#running-multiple-clients\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example shows how to run multiple clients in parallel andprocess the results when all of them have completed:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHCompletedProcess</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_multiple_clients</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"c1\"># Put your lists of hosts here</span>    <span class=\"n\">hosts</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">]</span>    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ls abc&#39;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">host</span> <span class=\"ow\">in</span> <span class=\"n\">hosts</span><span class=\"p\">)</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">return_exceptions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Task </span><span class=\"si\">%d</span><span class=\"s1\"> failed: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)))</span>        <span class=\"k\">elif</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">exit_status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Task </span><span class=\"si\">%d</span><span class=\"s1\"> exited with status </span><span class=\"si\">%s</span><span class=\"s1\">:&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">exit_status</span><span class=\"p\">))</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Task </span><span class=\"si\">%d</span><span class=\"s1\"> succeeded:&#39;</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"o\">*</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">)</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_multiple_clients</span><span class=\"p\">())</span></pre></div></div></div></blockquote><p>Results could be processed as they became available by setting up aloop which repeatedly called <a class=\"reference external\" href=\"https://docs.python.org/3/library/asyncio-task.html#asyncio.wait\" title=\"(in Python v3.12)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.wait()</span></code></a> instead of calling<a class=\"reference external\" href=\"https://docs.python.org/3/library/asyncio-task.html#asyncio.gather\" title=\"(in Python v3.12)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">asyncio.gather()</span></code></a>.</p></section><section id=\"setting-environment-variables\"><h2>Setting environment variables<a class=\"headerlink\" href=\"#setting-environment-variables\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates setting environment variablesfor the remote session and displaying them by executing the \u2018env\u2019command.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;env&#39;</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;LANG&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;en_GB&#39;</span><span class=\"p\">,</span>                                            <span class=\"s1\">&#39;LC_COLLATE&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">})</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>Any number of environment variables can be passed in the dictionarygiven to <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_session\" title=\"asyncssh.SSHClientConnection.create_session\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_session()</span></code></a>.Note that SSH servers may restrict which environment variables (if any)are accepted, so this feature may require setting options on the SSHserver before it will work.</p></section><section id=\"setting-terminal-information\"><h2>Setting terminal information<a class=\"headerlink\" href=\"#setting-terminal-information\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates setting the terminal type and sizepassed to the remote session.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">&#39;echo $TERM; stty size&#39;</span><span class=\"p\">,</span>                                <span class=\"n\">term_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;xterm-color&#39;</span><span class=\"p\">,</span>                                <span class=\"n\">term_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">))</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>Note that this will cause AsyncSSH to request a pseudo-tty from theserver. When a pseudo-tty is used, the server will no longer send outputgoing to stderr with a different data type. Instead, it will be mixedwith output going to stdout (unless it is redirected elsewhere by theremote command).</p></section><section id=\"port-forwarding\"><h2>Port forwarding<a class=\"headerlink\" href=\"#port-forwarding\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates the client setting up a local TCPlistener on port 8080 and requesting that connections which arrive onthat port be forwarded across SSH to the server and on to port 80 on<code class=\"docutils literal notranslate\"><span class=\"pre\">www.google.com</span></code>:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">forward_local_port</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"s1\">&#39;www.google.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To listen on a dynamically assigned port, the client can pass in <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>as the listening port. If the listener is successfully opened, the selectedport will be available via the <a class=\"reference internal\" href=\"api.html#asyncssh.SSHListener.get_port\" title=\"asyncssh.SSHListener.get_port\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_port()</span></code></a>method on the returned listener object:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">forward_local_port</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;www.google.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Listening on port </span><span class=\"si\">%s</span><span class=\"s1\">...&#39;</span> <span class=\"o\">%</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">get_port</span><span class=\"p\">())</span>        <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>The client can also request remote port forwarding from the server. Thefollowing example shows the client requesting that the server listen onport 8080 and that connections arriving there be forwarded across SSHand on to port 80 on <code class=\"docutils literal notranslate\"><span class=\"pre\">localhost</span></code>:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">forward_remote_port</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To limit which connections are accepted or dynamically select where toforward traffic to, the client can implement their own session factory andcall <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">forward_connection()</span></code>on the connections they wish to forward and raise an error on those theywish to reject:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Awaitable</span><span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientConnection</span><span class=\"p\">,</span> <span class=\"n\">orig_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>                         <span class=\"n\">orig_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHForwarder</span><span class=\"p\">]:</span>    <span class=\"k\">if</span> <span class=\"n\">orig_host</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;::1&#39;</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">forward_connection</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">raise</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">ChannelOpenError</span><span class=\"p\">(</span>            <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">OPEN_ADMINISTRATIVELY_PROHIBITED</span><span class=\"p\">,</span>            <span class=\"s1\">&#39;Connections only allowed from localhost&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span>            <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">connection_requested</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">),</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>Just as with local listeners, the client can request remote port forwardingfrom a dynamic port by passing in <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> as the listening port and then call<a class=\"reference internal\" href=\"api.html#asyncssh.SSHListener.get_port\" title=\"asyncssh.SSHListener.get_port\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_port()</span></code></a> on the returned listener todetermine which port was selected.</p></section><section id=\"direct-tcp-connections\"><h2>Direct TCP connections<a class=\"headerlink\" href=\"#direct-tcp-connections\" title=\"Link to this heading\">\u00b6</a></h2><p>The client can also ask the server to open a TCP connection and directlysend and receive data on it by using the <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_connection\" title=\"asyncssh.SSHClientConnection.create_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_connection()</span></code></a> method on the<a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection\" title=\"asyncssh.SSHClientConnection\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHClientConnection</span></code></a> object. In this example, a connection isattempted to port 80 on <code class=\"docutils literal notranslate\"><span class=\"pre\">www.google.com</span></code> and an HTTP HEAD request issent for the document root.</p><p>Note that unlike sessions created with <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_session\" title=\"asyncssh.SSHClientConnection.create_session\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_session()</span></code></a>, the I/O on these connections defaultsto sending and receiving bytes rather than strings, allowing arbitrarybinary data to be exchanged. However, this can be changed by settingthe encoding to use when the connection is created.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"k\">class</span> <span class=\"nc\">MySSHTCPSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"c1\"># We use sys.stdout.buffer here because we&#39;re writing bytes</span>        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Direct connection error:&#39;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">chan</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_connection</span><span class=\"p\">(</span><span class=\"n\">MySSHTCPSession</span><span class=\"p\">,</span>                                                     <span class=\"s1\">&#39;www.google.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>        <span class=\"c1\"># By default, TCP connections send and receive bytes</span>        <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;HEAD / HTTP/1.0</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">write_eof</span><span class=\"p\">()</span>        <span class=\"k\">await</span> <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To use the streams API to open a direct connection, you can use<a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.open_connection\" title=\"asyncssh.SSHClientConnection.open_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">open_connection</span></code></a> instead of<a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_connection\" title=\"asyncssh.SSHClientConnection.create_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_connection</span></code></a>:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">open_connection</span><span class=\"p\">(</span><span class=\"s1\">&#39;www.google.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>        <span class=\"c1\"># By default, TCP connections send and receive bytes</span>        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;HEAD / HTTP/1.0</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write_eof</span><span class=\"p\">()</span>        <span class=\"c1\"># We use sys.stdout.buffer here because we&#39;re writing bytes</span>        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote></section><section id=\"forwarded-tcp-connections\"><h2>Forwarded TCP connections<a class=\"headerlink\" href=\"#forwarded-tcp-connections\" title=\"Link to this heading\">\u00b6</a></h2><p>The client can also directly process data from incoming TCP connectionsreceived on the server. The following example demonstrates the clientrequesting that the server listen on port 8888 and forward any receivedconnections back to it over SSH. It then has a simple handler whichechoes any data it receives back to the sender.</p><p>As in the direct TCP connection example above, the default would be tosend and receive bytes on this connection rather than strings, but herewe set the encoding explicitly so all data is sent and received as strings:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySSHTCPSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chan</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPChannel</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span> <span class=\"o\">=</span> <span class=\"n\">chan</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"n\">orig_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>                         <span class=\"n\">orig_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPSession</span><span class=\"p\">:</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Connection received from </span><span class=\"si\">%s</span><span class=\"s1\">, port </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">orig_host</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">))</span>    <span class=\"k\">return</span> <span class=\"n\">MySSHTCPSession</span><span class=\"p\">()</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">connection_requested</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8888</span><span class=\"p\">,</span>                                          <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">server</span><span class=\"p\">:</span>            <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Listener couldn</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t be opened.&#39;</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To use the streams API to open a listening connection, you can use<a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.start_server\" title=\"asyncssh.SSHClientConnection.start_server\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_server</span></code></a> insteadof <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection.create_server\" title=\"asyncssh.SSHClientConnection.create_server\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_server</span></code></a>:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_connection</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">):</span>    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">at_eof</span><span class=\"p\">():</span>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">)</span>        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"n\">orig_host</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">):</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Connection received from </span><span class=\"si\">%s</span><span class=\"s1\">, port </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">orig_host</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">))</span>    <span class=\"k\">return</span> <span class=\"n\">handle_connection</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">():</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">connection_requested</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8888</span><span class=\"p\">,</span>                                         <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>        <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote></section><section id=\"sftp-client\"><h2>SFTP client<a class=\"headerlink\" href=\"#sftp-client\" title=\"Link to this heading\">\u00b6</a></h2><p>AsyncSSH also provides SFTP support. The following code shows an exampleof starting an SFTP client and requesting the download of a file:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">start_sftp_client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">sftp</span><span class=\"p\">:</span>            <span class=\"k\">await</span> <span class=\"n\">sftp</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SFTP operation failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To recursively download a directory, preserving access and modificationtimes and permissions on the files, the preserve and recurse argumentscan be included:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">sftp</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;example_dir&#39;</span><span class=\"p\">,</span> <span class=\"n\">preserve</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">recurse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>Wild card pattern matching is supported by the <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPClient.mget\" title=\"asyncssh.SFTPClient.mget\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">mget</span></code></a>,<a class=\"reference internal\" href=\"api.html#asyncssh.SFTPClient.mput\" title=\"asyncssh.SFTPClient.mput\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">mput</span></code></a>, and <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPClient.mcopy\" title=\"asyncssh.SFTPClient.mcopy\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">mcopy</span></code></a> methods.The following downloads all files with extension \u201ctxt\u201d:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">sftp</span><span class=\"o\">.</span><span class=\"n\">mget</span><span class=\"p\">(</span><span class=\"s1\">&#39;*.txt&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>See the <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPClient\" title=\"asyncssh.SFTPClient\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SFTPClient</span></code></a> documentation for the full list of availableactions.</p></section><section id=\"scp-client\"><h2>SCP client<a class=\"headerlink\" href=\"#scp-client\" title=\"Link to this heading\">\u00b6</a></h2><p>AsyncSSH also supports SCP. The following code shows an example ofdownloading a file via SCP:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost:example.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SFTP operation failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote><p>To upload a file to a remote system, host information can be specified forthe destination instead of the source:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost:&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>If the destination path includes a file name, that name will be used insteadof the original file name when performing the copy. For instance:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost:example2.txt&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>If the destination path refers to a directory, the origin file namewill be preserved, but it will be copied into the requested directory.</p><p>Wild card patterns are also supported on local source paths. For instance,the following copies all files with extension \u201ctxt\u201d:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(</span><span class=\"s1\">&#39;*.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost:&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>When copying files from a remote system, any wild card expansion is theresponsibility of the remote SCP program or the shell which starts it.</p><p>Similar to SFTP, SCP also supports options for recursively copying adirectory and preserving modification times and permissions on filesusing the preserve and recurse arguments:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(</span><span class=\"s1\">&#39;example_dir&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost:&#39;</span><span class=\"p\">,</span> <span class=\"n\">preserve</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">recurse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>In addition to the <code class=\"docutils literal notranslate\"><span class=\"pre\">'host:path'</span></code> syntax for source and destination paths,a tuple of the form <code class=\"docutils literal notranslate\"><span class=\"pre\">(host,</span> <span class=\"pre\">path)</span></code> is also supported. A non-default portcan be specified by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">host</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">(host,</span> <span class=\"pre\">port)</span></code>, resulting insomething like:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">(((</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">),</span> <span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>An already open <a class=\"reference internal\" href=\"api.html#asyncssh.SSHClientConnection\" title=\"asyncssh.SSHClientConnection\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHClientConnection</span></code></a> can also be passed as the host:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">scp</span><span class=\"p\">((</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)</span></pre></div></div></div></blockquote><p>Multiple file patterns can be copied to the same destination by making thesource path argument a list.  Source paths in this list can be a mixtureof local and remote file references and the destination path can belocal or remote, but one or both of source and destination must be remote.Local to local copies are not supported.</p><p>See the <a class=\"reference internal\" href=\"api.html#asyncssh.scp\" title=\"asyncssh.scp\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">scp()</span></code></a> function documentation for the complete list ofavailable options.</p></section></section><section id=\"server-examples\"><span id=\"serverexamples\"></span><h1>Server Examples<a class=\"headerlink\" href=\"#server-examples\" title=\"Link to this heading\">\u00b6</a></h1><section id=\"simple-server\"><h2>Simple server<a class=\"headerlink\" href=\"#simple-server\" title=\"Link to this heading\">\u00b6</a></h2><p>The following code shows an example of a simple SSH server which listensfor connections on port 8022, does password authentication, and printsa message when users authenticate successfully and start a shell.</p><p>Shell and exec sessions default to an encoding of \u2018utf-8\u2019, so read andwrite calls operate on strings by default. If you want to send andreceive binary data, you can set the encoding to <a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.12)\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">None</span></code></a> when thesession is opened to make read and write operate on bytes instead.Alternate encodings can also be selected to change how strings areconverted to and from bytes.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># To run this program, the file ``ssh_host_key`` must exist with an SSH</span><span class=\"c1\"># private key in it to use as a server host key. An SSH host certificate</span><span class=\"c1\"># can optionally be provided in the file ``ssh_host_key-cert.pub``.</span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">crypt</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"n\">passwords</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;guest&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>                 <span class=\"c1\"># guest account with no password</span>             <span class=\"s1\">&#39;user123&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;qV2iEadIGV2rw&#39;</span>   <span class=\"c1\"># password of &#39;secretpw&#39;</span>            <span class=\"p\">}</span><span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Welcome to my SSH server, </span><span class=\"si\">%s</span><span class=\"s1\">!</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                         <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">))</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerConnection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection received from </span><span class=\"si\">%s</span><span class=\"s1\">.&#39;</span> <span class=\"o\">%</span>                  <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;peername&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection error: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH connection closed.&#39;</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">begin_auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"c1\"># If the user&#39;s password is the empty string, no auth is required</span>        <span class=\"k\">return</span> <span class=\"n\">passwords</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;&#39;</span>    <span class=\"k\">def</span> <span class=\"nf\">password_auth_supported</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"kc\">True</span>    <span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"n\">passwords</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"s1\">&#39;*&#39;</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"n\">crypt</span><span class=\"o\">.</span><span class=\"n\">crypt</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">pw</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">pw</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>To authenticate with SSH client keys or certificates, the server wouldlook something like the following. Client and certificate authoritykeys for each user need to be placed in a file matching the username ina directory called <code class=\"docutils literal notranslate\"><span class=\"pre\">authorized_keys</span></code>.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Welcome to my SSH server, </span><span class=\"si\">%s</span><span class=\"s1\">!</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                         <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">))</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerConnection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn</span> <span class=\"o\">=</span> <span class=\"n\">conn</span>    <span class=\"k\">def</span> <span class=\"nf\">begin_auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">try</span><span class=\"p\">:</span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn</span><span class=\"o\">.</span><span class=\"n\">set_authorized_keys</span><span class=\"p\">(</span><span class=\"s1\">&#39;authorized_keys/</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">username</span><span class=\"p\">)</span>        <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>            <span class=\"k\">pass</span>        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>It is also possible to use a single authorized_keys file for all users.This is common when using certificates, as AsyncSSH can automaticallyenforce that the certificates presented have a principal in them whichmatches the username. In this case, a custom <a class=\"reference internal\" href=\"api.html#asyncssh.SSHServer\" title=\"asyncssh.SSHServer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHServer</span></code></a> subclassis no longer required, and so the <a class=\"reference internal\" href=\"api.html#asyncssh.listen\" title=\"asyncssh.listen\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">listen()</span></code></a> function can be used inplace of <a class=\"reference internal\" href=\"api.html#asyncssh.create_server\" title=\"asyncssh.create_server\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">create_server()</span></code></a>.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Welcome to my SSH server, </span><span class=\"si\">%s</span><span class=\"s1\">!</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                         <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">))</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"simple-server-with-input\"><h2>Simple server with input<a class=\"headerlink\" href=\"#simple-server-with-input\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates reading input in a server session.It adds a column of numbers, displaying the total when it receives EOF.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Enter numbers one per line, or EOF when done:</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">try</span><span class=\"p\">:</span>        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">:</span>            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>            <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"p\">:</span>                <span class=\"k\">try</span><span class=\"p\">:</span>                    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>                    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid number: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">line</span><span class=\"p\">)</span>    <span class=\"k\">except</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">BreakReceived</span><span class=\"p\">:</span>        <span class=\"k\">pass</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Total = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">total</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"id14\"><h2>Callback example<a class=\"headerlink\" href=\"#id14\" title=\"Link to this heading\">\u00b6</a></h2><p>Here\u2019s an example of the server above written using callbacks incustom <a class=\"reference internal\" href=\"api.html#asyncssh.SSHServer\" title=\"asyncssh.SSHServer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHServer</span></code></a> and <a class=\"reference internal\" href=\"api.html#asyncssh.SSHServerSession\" title=\"asyncssh.SSHServerSession\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSHServerSession</span></code></a> subclasses.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServerSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_input</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chan</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerChannel</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span> <span class=\"o\">=</span> <span class=\"n\">chan</span>    <span class=\"k\">def</span> <span class=\"nf\">shell_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"kc\">True</span>    <span class=\"k\">def</span> <span class=\"nf\">session_started</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Enter numbers one per line, or EOF when done:</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_input</span> <span class=\"o\">+=</span> <span class=\"n\">data</span>        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_input</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>            <span class=\"k\">try</span><span class=\"p\">:</span>                <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"p\">:</span>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_total</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">write_stderr</span><span class=\"p\">(</span><span class=\"s1\">&#39;Invalid number: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">line</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_input</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>    <span class=\"k\">def</span> <span class=\"nf\">eof_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Total = </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_total</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"kc\">False</span>    <span class=\"k\">def</span> <span class=\"nf\">break_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msec</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eof_received</span><span class=\"p\">()</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">session_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerSession</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">MySSHServerSession</span><span class=\"p\">()</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"id15\"><h2>I/O redirection<a class=\"headerlink\" href=\"#id15\" title=\"Link to this heading\">\u00b6</a></h2><p>The following shows an example of I/O redirection on the server side,executing a process on the server with input and output redirectedback to the SSH client:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">subprocess</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">bc_proc</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"s1\">&#39;bc&#39;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>                               <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>    <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">bc_proc</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">bc_proc</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span>                           <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">bc_proc</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>    <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"serving-multiple-clients\"><h2>Serving multiple clients<a class=\"headerlink\" href=\"#serving-multiple-clients\" title=\"Link to this heading\">\u00b6</a></h2><p>The following is a slightly more complicated example showing how aserver can manage multiple simultaneous clients. It implements abasic chat service, where clients can send messages to one other.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">cast</span><span class=\"k\">class</span> <span class=\"nc\">ChatClient</span><span class=\"p\">:</span>    <span class=\"n\">_clients</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"s1\">&#39;ChatClient&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_process</span> <span class=\"o\">=</span> <span class=\"n\">process</span>    <span class=\"nd\">@classmethod</span>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">):</span>        <span class=\"k\">await</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">readline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">broadcast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"k\">for</span> <span class=\"n\">client</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clients</span><span class=\"p\">:</span>            <span class=\"k\">if</span> <span class=\"n\">client</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"p\">:</span>                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Welcome to chat!</span><span class=\"se\">\\n\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Enter your name: &#39;</span><span class=\"p\">)</span>        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"si\">%d</span><span class=\"s1\"> other users are connected.</span><span class=\"se\">\\n\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clients</span><span class=\"p\">))</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clients</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">broadcast</span><span class=\"p\">(</span><span class=\"s1\">&#39;*** </span><span class=\"si\">%s</span><span class=\"s1\"> has entered chat ***</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)</span>        <span class=\"k\">try</span><span class=\"p\">:</span>            <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">:</span>                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">broadcast</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">))</span>        <span class=\"k\">except</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">BreakReceived</span><span class=\"p\">:</span>            <span class=\"k\">pass</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">broadcast</span><span class=\"p\">(</span><span class=\"s1\">&#39;*** </span><span class=\"si\">%s</span><span class=\"s1\"> has left chat ***</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clients</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">ChatClient</span><span class=\"o\">.</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"line-editing\"><h2>Line editing<a class=\"headerlink\" href=\"#line-editing\" title=\"Link to this heading\">\u00b6</a></h2><p>When SSH clients request a pseudo-terminal, they generally default tosending input a character at a time and expect the remote system toprovide character echo and line editing. To better support interactiveapplications like the one above, AsyncSSH defaults to providing basicline editing for server sessions which request a pseudo-terminal.</p><p>When this line editor is enabled, it defaults to delivering input tothe application a line at a time. Applications can switch between lineand character at a time input using the <a class=\"reference internal\" href=\"api.html#asyncssh.SSHLineEditorChannel.set_line_mode\" title=\"asyncssh.SSHLineEditorChannel.set_line_mode\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_line_mode()</span></code></a> method. Also, when in linemode, applications can enable or disable echoing of input using the<a class=\"reference internal\" href=\"api.html#asyncssh.SSHLineEditorChannel.set_echo\" title=\"asyncssh.SSHLineEditorChannel.set_echo\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_echo()</span></code></a> method. Thefollowing code provides an example of this.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">cast</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">):</span>    <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHLineEditorChannel</span><span class=\"p\">,</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Welcome to my SSH server, </span><span class=\"si\">%s</span><span class=\"s1\">!</span><span class=\"se\">\\n\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                         <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">))</span>    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">set_echo</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Tell me a secret: &#39;</span><span class=\"p\">)</span>    <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">set_line_mode</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">Your secret is safe with me! &#39;</span>                         <span class=\"s1\">&#39;Press any key to exit...&#39;</span><span class=\"p\">)</span>    <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"getting-environment-variables\"><h2>Getting environment variables<a class=\"headerlink\" href=\"#getting-environment-variables\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates reading environment variables setby the client. It will show all of the variables set by the client,or return an error if none are set. Note that SSH clients may restrictwhich environment variables (if any) are sent by default, so you mayneed to set options in the client to get it to do so.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">:</span>        <span class=\"n\">keywidth</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span><span class=\"o\">+</span><span class=\"mi\">1</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Environment:</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>            <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;  </span><span class=\"si\">%-*s</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">keywidth</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">+</span><span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;No environment sent.</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"getting-terminal-information\"><h2>Getting terminal information<a class=\"headerlink\" href=\"#getting-terminal-information\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates reading the client\u2019s terminaltype and window size, and handling window size changes during asession.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">pixwidth</span><span class=\"p\">,</span> <span class=\"n\">pixheight</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">term_size</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Terminal type: </span><span class=\"si\">%s</span><span class=\"s1\">, size: </span><span class=\"si\">%s</span><span class=\"s1\">x</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                         <span class=\"p\">(</span><span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">term_type</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">))</span>    <span class=\"k\">if</span> <span class=\"n\">pixwidth</span> <span class=\"ow\">and</span> <span class=\"n\">pixheight</span><span class=\"p\">:</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39; (</span><span class=\"si\">%s</span><span class=\"s1\">x</span><span class=\"si\">%s</span><span class=\"s1\"> pixels)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">pixwidth</span><span class=\"p\">,</span> <span class=\"n\">pixheight</span><span class=\"p\">))</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">Try resizing your window!</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">at_eof</span><span class=\"p\">():</span>        <span class=\"k\">try</span><span class=\"p\">:</span>            <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>        <span class=\"k\">except</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">TerminalSizeChanged</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>            <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;New window size: </span><span class=\"si\">%s</span><span class=\"s1\">x</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span>                                 <span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>            <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">pixwidth</span> <span class=\"ow\">and</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">pixheight</span><span class=\"p\">:</span>                <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39; (</span><span class=\"si\">%s</span><span class=\"s1\">x</span><span class=\"si\">%s</span><span class=\"s1\"> pixels)&#39;</span> <span class=\"o\">%</span>                                     <span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">pixwidth</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">pixheight</span><span class=\"p\">))</span>            <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_client</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"id16\"><h2>Port forwarding<a class=\"headerlink\" href=\"#id16\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example demonstrates a server accepting port forwardingrequests from clients, but only when they are destined to port 80. Whensuch a connection is received, a connection is attempted to the requestedhost and port and data is bidirectionally forwarded over SSH from theclient to this destination. Requests by the client to connect to anyother port are rejected.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dest_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>                             <span class=\"n\">orig_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">dest_port</span> <span class=\"o\">==</span> <span class=\"mi\">80</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kc\">True</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">raise</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">ChannelOpenError</span><span class=\"p\">(</span>                      <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">OPEN_ADMINISTRATIVELY_PROHIBITED</span><span class=\"p\">,</span>                      <span class=\"s1\">&#39;Only connections to port 80 are allowed&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH server failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>The server can also support forwarding inbound TCP connections back tothe client. The following example demonstrates a server which will acceptrequests like this from clients, but only to listen on port 8080. Whensuch a connection is received, the client is notified and data isbidirectionally forwarded from the incoming connection over SSH to theclient.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">server_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">listen_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">listen_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">listen_port</span> <span class=\"o\">==</span> <span class=\"mi\">8080</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH server failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"id17\"><h2>Direct TCP connections<a class=\"headerlink\" href=\"#id17\" title=\"Link to this heading\">\u00b6</a></h2><p>The server can also accept direct TCP connection requests from the clientand process the data on them itself. The following example demonstrates aserver which accepts requests to port 7 (the \u201cecho\u201d port) for any host andechoes the data itself rather than forwarding the connection:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySSHTCPSession</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPSession</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chan</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPChannel</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span> <span class=\"o\">=</span> <span class=\"n\">chan</span>    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_chan</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dest_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>                             <span class=\"n\">orig_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> \\            <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHTCPSession</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">dest_port</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">MySSHTCPSession</span><span class=\"p\">()</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">raise</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">ChannelOpenError</span><span class=\"p\">(</span>                <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">OPEN_ADMINISTRATIVELY_PROHIBITED</span><span class=\"p\">,</span>                <span class=\"s1\">&#39;Only echo connections allowed&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH server failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>Here\u2019s an example of this server written using the streams API. In thiscase, <a class=\"reference internal\" href=\"api.html#asyncssh.SSHServer.connection_requested\" title=\"asyncssh.SSHServer.connection_requested\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">connection_requested()</span></code></a>returns a handler coroutine instead of a session object. When a newdirect TCP connection is opened, the handler coroutine is called withAsyncSSH stream objects which can be used to perform I/O on the tunneledconnection.</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_connection</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHReader</span><span class=\"p\">,</span>                            <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHWriter</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">at_eof</span><span class=\"p\">():</span>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">)</span>        <span class=\"k\">try</span><span class=\"p\">:</span>            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>        <span class=\"k\">except</span> <span class=\"ne\">BrokenPipeError</span><span class=\"p\">:</span>            <span class=\"k\">break</span>    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"k\">class</span> <span class=\"nc\">MySSHServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">connection_requested</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dest_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>                             <span class=\"n\">orig_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">orig_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> \\            <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHSocketSessionFactory</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">dest_port</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">handle_connection</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">raise</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">ChannelOpenError</span><span class=\"p\">(</span>                      <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">OPEN_ADMINISTRATIVELY_PROHIBITED</span><span class=\"p\">,</span>                      <span class=\"s1\">&#39;Only echo connections allowed&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">MySSHServer</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span>                                 <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                                 <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;SSH server failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section><section id=\"sftp-server\"><h2>SFTP server<a class=\"headerlink\" href=\"#sftp-server\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example shows how to start an SFTP server with defaultbehavior:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">sftp_factory</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>A subclass of <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPServer\" title=\"asyncssh.SFTPServer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SFTPServer</span></code></a> can be provided as the value of the SFTPfactory to override specific behavior. For example, the following coderemaps path names so that each user gets access to only their own individualdirectory under <code class=\"docutils literal notranslate\"><span class=\"pre\">/tmp/sftp</span></code>:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">class</span> <span class=\"nc\">MySFTPServer</span><span class=\"p\">(</span><span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SFTPServer</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chan</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerChannel</span><span class=\"p\">):</span>        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/tmp/sftp/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">chan</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">)</span>        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">chan</span><span class=\"p\">,</span> <span class=\"n\">chroot</span><span class=\"o\">=</span><span class=\"n\">root</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">sftp_factory</span><span class=\"o\">=</span><span class=\"n\">MySFTPServer</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote><p>More complex path remapping can be performed by implementing the<a class=\"reference internal\" href=\"api.html#asyncssh.SFTPServer.map_path\" title=\"asyncssh.SFTPServer.map_path\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">map_path</span></code></a> and<a class=\"reference internal\" href=\"api.html#asyncssh.SFTPServer.reverse_map_path\" title=\"asyncssh.SFTPServer.reverse_map_path\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">reverse_map_path</span></code></a> methods. IndividualSFTP actions can also be overridden as needed. See the <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPServer\" title=\"asyncssh.SFTPServer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SFTPServer</span></code></a>documentation for the full list of methods to override.</p></section><section id=\"scp-server\"><h2>SCP server<a class=\"headerlink\" href=\"#scp-server\" title=\"Link to this heading\">\u00b6</a></h2><p>The above server examples can be modified to also support SCP by simplyadding <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_scp=True</span></code> alongside the specification of the <code class=\"docutils literal notranslate\"><span class=\"pre\">sftp_factory</span></code>in the <a class=\"reference internal\" href=\"api.html#asyncssh.listen\" title=\"asyncssh.listen\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">listen()</span></code></a> call. This will use the same <a class=\"reference internal\" href=\"api.html#asyncssh.SFTPServer\" title=\"asyncssh.SFTPServer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SFTPServer</span></code></a>instance when performing file I/O for both SFTP and SCP requests. Forinstance:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_host_key&#39;</span><span class=\"p\">],</span>                          <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;ssh_user_ca&#39;</span><span class=\"p\">,</span>                          <span class=\"n\">sftp_factory</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">allow_scp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section></section><section id=\"reverse-direction-example\"><h1>Reverse Direction Example<a class=\"headerlink\" href=\"#reverse-direction-example\" title=\"Link to this heading\">\u00b6</a></h1><p>One of the unique capabilities of AsyncSSH is its ability to support\u201creverse direction\u201d SSH connections, using the functions<a class=\"reference internal\" href=\"api.html#asyncssh.connect_reverse\" title=\"asyncssh.connect_reverse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">connect_reverse()</span></code></a> and <a class=\"reference internal\" href=\"api.html#asyncssh.listen_reverse\" title=\"asyncssh.listen_reverse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">listen_reverse()</span></code></a>. This can behelpful when implementing protocols such as \u201cNETCONF Call Home\u201d,described in <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc8071.html\"><strong>RFC 8071</strong></a>. When using this capability, the SSH protocoldoesn\u2019t change, but the roles at the TCP level about which side actsas a TCP client and server are reversed, with the TCP client takingon the role of the SSH server and the TCP server taking on the role ofthe SSH client once the connection is established.</p><p>For these examples to run, the following files must be created:</p><blockquote><div><ul class=\"simple\"><li><p>The file <code class=\"docutils literal notranslate\"><span class=\"pre\">client_host_key</span></code> must exist on the client and contain anSSH private key for the client to use to authenticate itself as ahost to the server. An SSH certificate can optionally be providedin <code class=\"docutils literal notranslate\"><span class=\"pre\">client_host_key-cert.pub</span></code>.</p></li><li><p>The file <code class=\"docutils literal notranslate\"><span class=\"pre\">trusted_server_keys</span></code> must exist on the client and containa list of trusted server keys or a <code class=\"docutils literal notranslate\"><span class=\"pre\">cert-authority</span></code> entry with apublic key trusted to sign server keys if certificates are used. Thisfile should be in \u201cauthorized_keys\u201d format.</p></li><li><p>The file <code class=\"docutils literal notranslate\"><span class=\"pre\">server_key</span></code> must exist on the server and contain an SSHprivate key for the server to use to authenticate itself to theclient. An SSH certificate can optionally be provided in<code class=\"docutils literal notranslate\"><span class=\"pre\">server_key-cert.pub</span></code>.</p></li><li><p>The file <code class=\"docutils literal notranslate\"><span class=\"pre\">trusted_client_host_keys</span></code> must exist on the server andcontain a list of trusted client host keys or a <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;cert-authority</span></code>entry with a public key trusted to sign client host keys ifcertificates are used. This file should be in \u201cknown_hosts\u201d format.</p></li></ul></div></blockquote><section id=\"reverse-direction-client\"><h2>Reverse Direction Client<a class=\"headerlink\" href=\"#reverse-direction-client\" title=\"Link to this heading\">\u00b6</a></h2><p>The following example shows a reverse-direction SSH client which will runarbitrary shell commands given to it by the server it connects to:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">asyncio.subprocess</span> <span class=\"kn\">import</span> <span class=\"n\">PIPE</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHServerProcess</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Run a command on the client, piping I/O over an SSH session&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>    <span class=\"n\">local_proc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_subprocess_shell</span><span class=\"p\">(</span>        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>    <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">local_proc</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">local_proc</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span>                           <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">local_proc</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">local_proc</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">())</span>    <span class=\"k\">await</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_reverse_client</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Make an outbound connection and then become an SSH server on it&quot;&quot;&quot;</span>    <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">connect_reverse</span><span class=\"p\">(</span>        <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">server_host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;client_host_key&#39;</span><span class=\"p\">],</span>        <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">&#39;trusted_server_keys&#39;</span><span class=\"p\">,</span>        <span class=\"n\">process_factory</span><span class=\"o\">=</span><span class=\"n\">handle_request</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>    <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run_reverse_client</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Reverse SSH connection failed: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span></pre></div></div></div></blockquote></section><section id=\"reverse-direction-server\"><h2>Reverse Direction Server<a class=\"headerlink\" href=\"#reverse-direction-server\" title=\"Link to this heading\">\u00b6</a></h2><p>Here is the corresponding server which makes requests to run the commands:</p><blockquote><div><div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span><span class=\"o\">,</span> <span class=\"nn\">asyncssh</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_commands</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">SSHClientConnection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Run a series of commands on the client which connected to us&quot;&quot;&quot;</span>    <span class=\"n\">commands</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;ls&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sleep 30 &amp;&amp; date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sleep 5 &amp;&amp; cat /proc/cpuinfo&#39;</span><span class=\"p\">)</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">]</span>        <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">):</span>            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">task</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Command:&#39;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Return code:&#39;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stdout:&#39;</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stderr:&#39;</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"o\">*</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">)</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_reverse_server</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Accept inbound connections and then become an SSH client on them&quot;&quot;&quot;</span>    <span class=\"k\">await</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">listen_reverse</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8022</span><span class=\"p\">,</span> <span class=\"n\">client_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;server_key&#39;</span><span class=\"p\">],</span>                                  <span class=\"n\">known_hosts</span><span class=\"o\">=</span><span class=\"s1\">&#39;trusted_client_host_keys&#39;</span><span class=\"p\">,</span>                                  <span class=\"n\">acceptor</span><span class=\"o\">=</span><span class=\"n\">run_commands</span><span class=\"p\">)</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">start_reverse_server</span><span class=\"p\">())</span><span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">,</span> <span class=\"n\">asyncssh</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error starting server: &#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span></pre></div></div></div></blockquote></section></section>            <div class=\"clearer\"></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><font color=#fff><font size=6>AsyncSSH</font><br>Version 2.14.2</font><p>  <div>    <h3><a href=\"#\">Table of Contents</a></h3>    <ul><li><a class=\"reference internal\" href=\"#\">AsyncSSH: Asynchronous SSH for Python</a><ul><li><a class=\"reference internal\" href=\"#features\">Features</a></li><li><a class=\"reference internal\" href=\"#license\">License</a></li><li><a class=\"reference internal\" href=\"#prerequisites\">Prerequisites</a></li><li><a class=\"reference internal\" href=\"#installation\">Installation</a><ul><li><a class=\"reference internal\" href=\"#optional-extras\">Optional Extras</a></li><li><a class=\"reference internal\" href=\"#installing-the-development-branch\">Installing the development branch</a></li></ul></li><li><a class=\"reference internal\" href=\"#mailing-lists\">Mailing Lists</a></li></ul></li><li><a class=\"reference internal\" href=\"#client-examples\">Client Examples</a><ul><li><a class=\"reference internal\" href=\"#simple-client\">Simple client</a></li><li><a class=\"reference internal\" href=\"#callback-example\">Callback example</a></li><li><a class=\"reference internal\" href=\"#interactive-input\">Interactive input</a></li><li><a class=\"reference internal\" href=\"#i-o-redirection\">I/O redirection</a></li><li><a class=\"reference internal\" href=\"#checking-exit-status\">Checking exit status</a></li><li><a class=\"reference internal\" href=\"#running-multiple-clients\">Running multiple clients</a></li><li><a class=\"reference internal\" href=\"#setting-environment-variables\">Setting environment variables</a></li><li><a class=\"reference internal\" href=\"#setting-terminal-information\">Setting terminal information</a></li><li><a class=\"reference internal\" href=\"#port-forwarding\">Port forwarding</a></li><li><a class=\"reference internal\" href=\"#direct-tcp-connections\">Direct TCP connections</a></li><li><a class=\"reference internal\" href=\"#forwarded-tcp-connections\">Forwarded TCP connections</a></li><li><a class=\"reference internal\" href=\"#sftp-client\">SFTP client</a></li><li><a class=\"reference internal\" href=\"#scp-client\">SCP client</a></li></ul></li><li><a class=\"reference internal\" href=\"#server-examples\">Server Examples</a><ul><li><a class=\"reference internal\" href=\"#simple-server\">Simple server</a></li><li><a class=\"reference internal\" href=\"#simple-server-with-input\">Simple server with input</a></li><li><a class=\"reference internal\" href=\"#id14\">Callback example</a></li><li><a class=\"reference internal\" href=\"#id15\">I/O redirection</a></li><li><a class=\"reference internal\" href=\"#serving-multiple-clients\">Serving multiple clients</a></li><li><a class=\"reference internal\" href=\"#line-editing\">Line editing</a></li><li><a class=\"reference internal\" href=\"#getting-environment-variables\">Getting environment variables</a></li><li><a class=\"reference internal\" href=\"#getting-terminal-information\">Getting terminal information</a></li><li><a class=\"reference internal\" href=\"#id16\">Port forwarding</a></li><li><a class=\"reference internal\" href=\"#id17\">Direct TCP connections</a></li><li><a class=\"reference internal\" href=\"#sftp-server\">SFTP server</a></li><li><a class=\"reference internal\" href=\"#scp-server\">SCP server</a></li></ul></li><li><a class=\"reference internal\" href=\"#reverse-direction-example\">Reverse Direction Example</a><ul><li><a class=\"reference internal\" href=\"#reverse-direction-client\">Reverse Direction Client</a></li><li><a class=\"reference internal\" href=\"#reverse-direction-server\">Reverse Direction Server</a></li></ul></li></ul>  </div><p><h3><a href=\"changes.html\">Change Log</a></h3><p><h3><a href=\"contributing.html\">Contributing</a></h3><p><h3><a href=\"api.html\">API Documentation</a></h3><p><h3><a href=\"https://pypi.python.org/pypi/asyncssh/\">Source on PyPI</a></h3><p><h3><a href=\"https://github.com/ronf/asyncssh\">Source on GitHub</a></h3><p><h3><a href=\"https://github.com/ronf/asyncssh/issues\">Issue Tracker</a></h3><p><h3><a href=\"search.html\">Search</a></h3></font>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"footer\" role=\"contentinfo\">    &#169; Copyright 2013-2023, Ron Frederick.      Created using <a href=\"https://www.sphinx-doc.org/\">Sphinx</a> 7.2.6.    </div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "edflib-python",
  "url": "https://www.teuniz.net/edflib_python/",
  "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"><html><head>    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">    <title>EDFlib for Python</title>    <meta http-equiv=\"Pragma\" content=\"no-cache\">    <meta http-equiv=\"Expires\" content=\"-1\">    <meta name=\"description\" content=\"EDFlib for Python\">    <link rel=\"stylesheet\" type=\"text/css\" href=\"../styles.css\">    <link rel=\"icon\" type=\"image/png\" href=\"https://www.teuniz.net/edfbrowser/edf.png\"></head><body><ul class=\"navbar\">  <li class=\"navbar\"><a href=\"../index.html\">Home</a></li>  <li>    <div class=\"dropdown\">      <a class=\"dropbtn\">Projects</a>      <div class=\"dropdown-content\">        <a href=\"../edfbrowser/index.html\">EDFbrowser</a>        <a href=\"../edflib/index.html\">EDFlib for C/C++</a>        <a href=\"../edflib_java/index.html\">EDFlib for Java</a>        <a href=\"../edflib_python/index.html\">EDFlib for Python</a>        <a href=\"../edf-resampler/index.html\">EDF resampler</a>        <a href=\"../edf-hdr-repair/index.html\">EDF Header Repair</a>        <a href=\"../edf_deidentifier/index.html\">EDF de-identifier</a>        <a href=\"../edfplusd-converter/index.html\">EDF+D to EDF+C converter</a>        <a href=\"../EDF-test-file-generator/index.html\">EDF/BDF test file generator</a>        <a href=\"../vital2edf/index.html\">Vitaldb to EDF converter</a>        <a href=\"../edf_labview/index.html\">EDF for Labview</a>        <a href=\"../RS-232/index.html\">RS-232</a>        <a href=\"../DSRemote/index.html\">DSRemote</a>        <a href=\"../serial-com-tester/index.html\">Serial Com Tester</a>        <a href=\"../eagle2kicad/index.html\">Eagle to KiCad converter</a>      </div>    </div>  </li></ul><h1>EDFlib for Python</h1><p>    EDFlib for Python is a programming library to read and write EDF+ and BDF+ files. (It also reads old-type EDF/BDF files.)<br>    EDF means <a href=\"../edfbrowser/edf%20format%20description.html\">European Data Format</a>. BDF is the <a href=\"../edfbrowser/bdfplus%20format%20description.html\">24-bits version</a> of EDF.<br>    For a C/C++ version, look <a href=\"../edflib/index.html\">here</a>.    For a Java version, look <a href=\"../edflib_java/index.html\">here</a>.</p><ul class=\"normal_txt\">  <li>supports reading and writing of 16-bit (EDF+) and 24-bit (BDF+) resolution</li>  <li>supports annotations (events)</li>  <li>strives for strict standard compliance, generated files adheres to the standard</li>  <li>supports multiple annotation channels</li>  <li>supports wide range of samplerate combinations</li>  <li>written in pure Python, no wrappers used</li>  <li>Apart from NumPy, there are no other dependencies</li>  <li>3-clause BSD License</li></ul><p>  <br></p><h3>Install</h3><pre class=\"console_orange\"> pip install EDFlib-Python</pre><p>  <br></p><h3>Documentation</h3><p>  Documentation can be generated using the command pydoc3 -w ./edfreader.py ./edfwriter.py<br>  Have a look at the examples in the examples directory (follow the download link).<br>  Scroll down for more info about EDFlib.<br><br>  <a href=\"./edfreader.html\">EDF reader documentation</a><br><br>  <a href=\"./edfwriter.html\">EDF writer documentation</a><br></p><p>  <br></p><h3>Versions</h3><ul class=\"normal_txt\">    <li>version 1.08  September 14, 2023    <ul class=\"normal_txt\">      <li><a href=\"https://gitlab.com/Teuniz/EDFlib-Python\">Download</a></li>    </ul>  </li></ul><p><br>    Feedback to: <a href=\"mailto:teuniz@protonmail.com\">teuniz@protonmail.com</a></p><p><br></p><h3>Other EDF software</h3><ul class=\"normal\">    <li class=\"normal\"><a href=\"../edflib/index.html\">EDFlib for C/C++</a></li>    <li class=\"normal\"><a href=\"../edflib_java/index.html\">EDFlib for Java</a></li>    <li class=\"normal\"><a href=\"../edfbrowser/\">EDFbrowser</a></li>    <li class=\"normal\"><a href=\"../edf/\">Nihon Kohden to EDF+ format converter</a></li>    <li class=\"normal\"><a href=\"../edf2ascii/\">EDF to ASCII converter</a></li>    <li class=\"normal\"><a href=\"../edfchecker/\">EDF+/BDF+ compatibility checker</a></li>    <li class=\"normal\"><a href=\"../emsa2edf/\">Emsa to EDF+ format converter</a></li></ul><p><br></p><h3>Notes:</h3><p> In EDF, the sensitivity/resolution (e.g. uV/bit) and offset are stored using four parameters:<br> digital maximum and minimum, and physical maximum and minimum.<br> Here, digital means the raw data coming from a sensor or ADC. Physical means the units like uV.<br> The sensitivity in units/bit is calculated as follows:<br><br> units per bit = (physical max - physical min) / (digital max - digital min)<br><br> The digital offset is calculated as follows:<br><br> offset = (physical max / units per bit) - digital max<br><br> For a better explanation about the relation between digital data and physical data, read the document <a href=\"https://www.ti.com/general/docs/lit/getliterature.tsp?baseLiteratureNumber=sbaa042\">Coding Schemes Used with Data Converters</a>.<br><br> note: An EDF file usually contains multiple so-called datarecords. One datarecord usually has a duration of one second (this is the default but it is not mandatory!).<br> In that case a file with a duration of five minutes contains 300 datarecords. The duration of a datarecord can be freely choosen but, if possible, use values from<br> 0.1 to 1 second for easier handling. Just make sure that the total size of one datarecord, expressed in bytes, does not exceed 10MByte (15MBytes for BDF(+)).<br><br> The <b>recommendation</b> of a maximum datarecordsize of 61440 bytes in the EDF and EDF+ specification was usefull in the time people were still using DOS as their main operating system.<br> Using DOS and fast (near) pointers (16-bit pointers), the maximum allocatable block of memory was 64KByte.<br> This is not a concern anymore so the maximum datarecord size now is limited to 10MByte for EDF(+) and 15MByte for BDF(+).<br> This helps to accommodate for higher samplingrates used by modern, fast Analog to Digital Converters.<br><br> EDF header character encoding: The EDF specification says that only ASCII characters are allowed.<br> EDFlib will automatically convert characters with accents, umlauts, tilde, etc. to their \"normal\" equivalent without the accent/umlaut/tilde/etc.<br><br> The description/name of an EDF+ annotation on the other hand, is encoded in UTF-8.<br><br></p><p><br></p><div>  <a class=\"anchor\" name=\"notes\"></a></div><h2>Notes:</h2><h3>Annotationsignals</h3><p>    EDFplus and BDFplus store the annotations in one or more signals (in order to be backwards compatibel with EDF and BDF).<br>    The counting of the signals in the file starts at 0. Signals used for annotations are skipped.<br>    This means that the annotationsignal(s) in the file are hided.<br>    Use annotationslist.size(), annotationslist.get().onset, annotationslist.get().duration and annotationslist.get().description<br>    to get the information in the annotations.<br><br>    So, when a file contains 5 signals and the third signal is used to store the annotations, the library will<br>    report that there are only 4 signals in the file.<br>    The library will \"map\" the signalnumbers as follows: 0->0, 1->1, 2->3, 3->4.<br>    This way you don't need to worry about which signals are annotationsignals. The library will do it for you.<br><br></p><h3>Writing annotations</h3><p>    In order to keep the resulting filesize acceptable, EDFlib limits the maximum annotation description length at 40 bytes.<br><br></p><h3>Can I read or write discontinuous files?</h3><p>    No. Discontinuous files can be converted to continuous files using <a href=\"../edfbrowser/\">EDFbrowser</a>.<br><br></p><h3>Maximum size of patient- and recording info</h3><p>    Originally, EDF has two headerfields reserved for the patientname and the recording info.<br>    Both fields can each contain 80 bytes. EDF+ and BDF+ have divided these fields in subfields in order<br>    to identify administrationcode, birthdate, etc. Because of backwards compatibility with EDF and BDF,<br>    these subfields ared divided in two groups. Both groups have to share 80 bytes minus some other bytes<br>    used for other purpose like startdate. The following table shows how many bytes are available for the<br>    two groups. Birthdate takes 10 bytes.</p><table style=\"margin-left: 25px; border-collapse: collapse; text-align: center; width: 700px; height: 100px;\">  <tbody>    <tr>      <td>72 bytes are available for:</td>      <td>patientname</td>      <td>patientcode</td>      <td>birthdate</td>      <td>patient_additional</td>    </tr>    <tr>      <td>42 bytes are available for:</td>      <td>admincode</td>      <td>technician</td>      <td>equipment</td>      <td>recording_additional</td>    </tr>  </tbody></table><p><br>    EDFlib will perform a maximum size check for these two groups and prevent against writing too many bytes<br>    into the header.<br></p><p><br></p><h3>More info</h3><ul class=\"normal\">    <li class=\"normal\"><a href=\"https://www.edfplus.info/\">The EDF(+) website where you can find the EDF(+) format description</a></li>    <li class=\"normal\"><a href=\"../edfbrowser/bdfplus%20format%20description.html\">The BDF+ format description</a></li>    <li class=\"normal\"><a href=\"../edf_bdf_testfiles/index.html\">Some EDF files for testing purposes, with screenshots</a></li></ul><p><br><br><br><br></p></body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "typed-argument-parser",
  "url": "https://pypi.org/project/typed-argument-parser/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>typed-argument-parser \u00b7 PyPI</title>    <meta name=\"description\" content=\"Typed Argument Parser\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for typed-argument-parser\" href=\"/rss/project/typed-argument-parser/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/typed-argument-parser/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/typed-argument-parser/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"typed-argument-parser\">    <meta property=\"og:description\" content=\"Typed Argument Parser\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/swansonk14/typed-argument-parser\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:swansonk14/typed-argument-parser+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        typed-argument-parser 1.9.0      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install typed-argument-parser</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/typed-argument-parser/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2023-11-12T04:52:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 12, 2023</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/typed-argument-parser\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">Typed Argument Parser</p><div data-html-include=\"/_includes/edit-project-button/typed-argument-parser\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for typed-argument-parser\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/swansonk14/typed-argument-parser\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/swansonk14/typed-argument-parser/archive/refs/tags/v_1.9.0.tar.gz\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/typed-argument-parser\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:jessem.michel@gmail.com\">Jesse Michel and Kyle Swanson</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      typing,    </span>    <span class=\"package-keyword\">      argument parser,    </span>    <span class=\"package-keyword\">      python    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.8  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/swansonk14/\" aria-label=\"swansonk14\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/fb7bbe9542ab96b2a76e3e417ac403757edbcc24/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36393362306661663736326335356161323566383635353039623330326137323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for swansonk14 from gravatar.com\" title=\"Avatar for swansonk14 from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            swansonk14          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>    <li>      <strong>Typing</strong>      <ul>        <li>          <a href=\"/search/?c=Typing+%3A%3A+Typed\">            Typed          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for typed-argument-parser\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <p align=center>   <img src=\"https://pypi-camo.freetls.fastly.net/08396b80bc7d8ede344e3dc16fcd5891658fa9b3/696d616765732f6c6f676f2e706e67\" width=40% align=middle></p><h1>Typed Argument Parser (Tap)</h1><p><a href=\"https://badge.fury.io/py/typed-argument-parser\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/84548feada77ff2f9cb54570b2b6530fbe06a962/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74797065642d617267756d656e742d706172736572\" alt=\"PyPI - Python Version\"></a><a href=\"https://badge.fury.io/py/typed-argument-parser\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/4f2fb20e38498b3b15b0945e7c687e622b9d5499/68747470733a2f2f62616467652e667572792e696f2f70792f74797065642d617267756d656e742d7061727365722e737667\" alt=\"PyPI version\"></a><a href=\"https://pepy.tech/project/typed-argument-parser\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/67bdd8352375be15ed3222b3dd9741390b7df940/68747470733a2f2f706570792e746563682f62616467652f74797065642d617267756d656e742d706172736572\" alt=Downloads></a><a href=\"https://github.com/swansonk14/typed-argument-parser\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/26fbe8183542d37a75a61e18ae9f5ea62303820c/68747470733a2f2f6769746875622e636f6d2f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722f776f726b666c6f77732f74657374732f62616467652e737667\" alt=\"Build Status\"></a><a href=\"https://codecov.io/gh/swansonk14/typed-argument-parser\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/2dbde4796656c996564581bb817464fff12c8192/68747470733a2f2f636f6465636f762e696f2f67682f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722f6272616e63682f6d61696e2f67726170682f62616467652e737667\" alt=codecov></a><a href=\"https://github.com/swansonk14/typed-argument-parser/blob/main/LICENSE.txt\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/7d3a7cc87539ffb55678b6d6d601407d913f6d60/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722e737667\" alt=license></a></p><p>Tap is a typed modernization of Python's <a href=\"https://docs.python.org/3/library/argparse.html\" rel=nofollow>argparse</a> library.</p><p>Tap provides the following benefits:</p><ul><li>Static type checking</li><li>Code completion</li><li>Source code navigation (e.g. go to definition and go to implementation)</li></ul><p><img src=\"https://pypi-camo.freetls.fastly.net/228acb00d63b13152a1365249f0730702a5ab35f/68747470733a2f2f6769746875622e636f6d2f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722f7261772f6d61696e2f696d616765732f7461702e706e67\" alt=Tap></p><p>See <a href=\"https://docs.google.com/presentation/d/1AirN6gpiq4P1L8K003EsXmobVxP3A4AVEIR2KOEQN7Y/edit?usp=sharing\" rel=nofollow>this poster</a>, which we presented at <a href=\"https://us.pycon.org/2020/\" rel=nofollow>PyCon 2020</a>, for a presentation of some of the relevant concepts we used to guide the development of Tap.</p><p>As of version 1.8.0, Tap includes <code>tapify</code>, which runs functions or initializes classes with arguments parsed from the command line. We show an example below.</p><pre lang=python3><span class=c1># square.py</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=k>def</span> <span class=nf>square</span><span class=p>(</span><span class=n>num</span><span class=p>:</span> <span class=nb>float</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span>    <span class=k>return</span> <span class=n>num</span> <span class=o>**</span> <span class=mi>2</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'The square of your number is </span><span class=si>{</span><span class=n>tapify</span><span class=p>(</span><span class=n>square</span><span class=p>)</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span></pre><p>Running <code>python square.py --num 2</code> will print <code>The square of your number is 4.0.</code>. Please see <a href=#tapify rel=nofollow>tapify</a> for more details.</p><h2>Installation</h2><p>Tap requires Python 3.8+</p><p>To install Tap from PyPI run:</p><pre><code>pip install typed-argument-parser</code></pre><p>To install Tap from source, run the following commands:</p><pre><code>git clone https://github.com/swansonk14/typed-argument-parser.gitcd typed-argument-parserpip install -e .</code></pre><h2>Table of Contents</h2><ul><li><a href=#installation rel=nofollow>Installation</a></li><li><a href=#table-of-contents rel=nofollow>Table of Contents</a></li><li><a href=#tap-is-python-native rel=nofollow>Tap is Python-native</a></li><li><a href=#tap-features rel=nofollow>Tap features</a><ul><li><a href=#arguments rel=nofollow>Arguments</a></li><li><a href=#tap-help rel=nofollow>Tap help</a></li><li><a href=#configuring-arguments rel=nofollow>Configuring arguments</a><ul><li><a href=#adding-special-argument-behavior rel=nofollow>Adding special argument behavior</a></li><li><a href=#adding-subparsers rel=nofollow>Adding subparsers</a></li></ul></li><li><a href=#types rel=nofollow>Types</a></li><li><a href=#argument-processing rel=nofollow>Argument processing</a></li><li><a href=#processing-known-args rel=nofollow>Processing known args</a></li><li><a href=#subclassing rel=nofollow>Subclassing</a></li><li><a href=#printing rel=nofollow>Printing</a></li><li><a href=#reproducibility rel=nofollow>Reproducibility</a></li><li><a href=#saving-and-loading-arguments rel=nofollow>Saving and loading arguments</a></li><li><a href=#loading-from-configuration-files rel=nofollow>Loading from configuration files</a></li></ul></li><li><a href=#tapify rel=nofollow>tapify</a><ul><li><a href=#examples rel=nofollow>Examples</a><ul><li><a href=#function rel=nofollow>Function</a></li><li><a href=#class rel=nofollow>Class</a></li><li><a href=#dataclass rel=nofollow>Dataclass</a></li></ul></li><li><a href=#tapify-help rel=nofollow>tapify help</a></li><li><a href=#command-line-vs-explicit-arguments rel=nofollow>Command line vs explicit arguments</a></li><li><a href=#known-args rel=nofollow>Known args</a></li></ul></li></ul><h2>Tap is Python-native</h2><p>To see this, let's look at an example:</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>SimpleArgumentParser</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span>  <span class=c1># Your name</span>    <span class=n>language</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=s1>'Python'</span>  <span class=c1># Programming language</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=s1>'Tap'</span>  <span class=c1># Package name</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span>  <span class=c1># Number of stars</span>    <span class=n>max_stars</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=mi>5</span>  <span class=c1># Maximum stars</span><span class=n>args</span> <span class=o>=</span> <span class=n>SimpleArgumentParser</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'My name is </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>name</span><span class=si>}</span><span class=s1> and I give the </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>language</span><span class=si>}</span><span class=s1> package '</span>      <span class=sa>f</span><span class=s1>'</span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>package</span><span class=si>}</span><span class=s1> </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>stars</span><span class=si>}</span><span class=s1>/</span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>max_stars</span><span class=si>}</span><span class=s1> stars!'</span><span class=p>)</span></pre><p>You use Tap the same way you use standard argparse.</p><pre><code>&gt;&gt;&gt; python main.py --name Jesse --stars 5My name is Jesse and I give the Python package Tap 5/5 stars!</code></pre><p>The equivalent argparse code is:</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>argparse</span> <span class=kn>import</span> <span class=n>ArgumentParser</span><span class=n>parser</span> <span class=o>=</span> <span class=n>ArgumentParser</span><span class=p>()</span><span class=n>parser</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--name'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=nb>str</span><span class=p>,</span> <span class=n>required</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>                    <span class=n>help</span><span class=o>=</span><span class=s1>'Your name'</span><span class=p>)</span><span class=n>parser</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--language'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=nb>str</span><span class=p>,</span> <span class=n>default</span><span class=o>=</span><span class=s1>'Python'</span><span class=p>,</span>                    <span class=n>help</span><span class=o>=</span><span class=s1>'Programming language'</span><span class=p>)</span><span class=n>parser</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--package'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=nb>str</span><span class=p>,</span> <span class=n>default</span><span class=o>=</span><span class=s1>'Tap'</span><span class=p>,</span>                    <span class=n>help</span><span class=o>=</span><span class=s1>'Package name'</span><span class=p>)</span><span class=n>parser</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--stars'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=nb>int</span><span class=p>,</span> <span class=n>required</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>                    <span class=n>help</span><span class=o>=</span><span class=s1>'Number of stars'</span><span class=p>)</span><span class=n>parser</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--max_stars'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=nb>int</span><span class=p>,</span> <span class=n>default</span><span class=o>=</span><span class=mi>5</span><span class=p>,</span>                    <span class=n>help</span><span class=o>=</span><span class=s1>'Maximum stars'</span><span class=p>)</span><span class=n>args</span> <span class=o>=</span> <span class=n>parser</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'My name is </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>name</span><span class=si>}</span><span class=s1> and I give the </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>language</span><span class=si>}</span><span class=s1> package '</span>      <span class=sa>f</span><span class=s1>'</span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>package</span><span class=si>}</span><span class=s1> </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>stars</span><span class=si>}</span><span class=s1>/</span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>max_stars</span><span class=si>}</span><span class=s1> stars!'</span><span class=p>)</span></pre><p>The advantages of being Python-native include being able to:</p><ul><li>Overwrite convenient built-in methods (e.g. <code>process_args</code> ensures consistency among arguments)</li><li>Add custom methods</li><li>Inherit from your own template classes</li></ul><h2>Tap features</h2><p>Now we are going to highlight some of our favorite features and give examples of how they work in practice.</p><h3>Arguments</h3><p>Arguments are specified as class variables defined in a subclass of <code>Tap</code>. Variables defined as <code>name: type</code> are required arguments while variables defined as <code>name: type = value</code> are not required and default to the provided value.</p><pre lang=python3><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>required_arg</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>default_arg</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=s1>'default value'</span></pre><h3>Tap help</h3><p>Single line and/or multiline comments which appear after the argument are automatically parsed into the help string provided when running <code>python main.py -h</code>. The type and default values of arguments are also provided in the help string.</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>float</span>  <span class=c1># What am I?</span>    <span class=n>pi</span><span class=p>:</span> <span class=nb>float</span> <span class=o>=</span> <span class=mf>3.14</span>  <span class=c1># I'm pi!</span><span class=w>    </span><span class=sd>\"\"\"Pi is my favorite number!\"\"\"</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span></pre><p>Running <code>python main.py -h</code> results in the following:</p><pre><code>&gt;&gt;&gt; python main.py -husage: demo.py --x X [--pi PI] [-h]optional arguments:  --x X       (float, required) What am I?  --pi PI     (float, default=3.14) I'm pi! Pi is my favorite number.  -h, --help  show this help message and exit</code></pre><h3>Configuring arguments</h3><p>To specify behavior beyond what can be specified using arguments as class variables, override the <code>configure</code> method.<code>configure</code> provides access to advanced argument parsing features such as <code>add_argument</code> and <code>add_subparser</code>.Since Tap is a wrapper around argparse, Tap provides all of the same functionality.We detail these two functions below.</p><h4>Adding special argument behavior</h4><p>In the <code>configure</code> method, call <code>self.add_argument</code> just as you would use argparse's <code>add_argument</code>. For example,</p><pre lang=python3><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>positional_argument</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>list_of_three_things</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span>    <span class=n>argument_with_really_long_name</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'positional_argument'</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--list_of_three_things'</span><span class=p>,</span> <span class=n>nargs</span><span class=o>=</span><span class=mi>3</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'-arg'</span><span class=p>,</span> <span class=s1>'--argument_with_really_long_name'</span><span class=p>)</span></pre><h4>Adding subparsers</h4><p>To add a subparser, override the <code>configure</code> method and call <code>self.add_subparser</code>. Optionally, to specify keyword arguments (e.g., <code>help</code>) to the subparser collection, call <code>self.add_subparsers</code>. For example,</p><pre lang=python3><span class=k>class</span> <span class=nc>SubparserA</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>bar</span><span class=p>:</span> <span class=nb>int</span>  <span class=c1># bar help</span><span class=k>class</span> <span class=nc>SubparserB</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>baz</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=s1>'X'</span><span class=p>,</span> <span class=s1>'Y'</span><span class=p>,</span> <span class=s1>'Z'</span><span class=p>]</span>  <span class=c1># baz help</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>False</span>  <span class=c1># foo help</span>    <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_subparsers</span><span class=p>(</span><span class=n>help</span><span class=o>=</span><span class=s1>'sub-command help'</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_subparser</span><span class=p>(</span><span class=s1>'a'</span><span class=p>,</span> <span class=n>SubparserA</span><span class=p>,</span> <span class=n>help</span><span class=o>=</span><span class=s1>'a help'</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_subparser</span><span class=p>(</span><span class=s1>'b'</span><span class=p>,</span> <span class=n>SubparserB</span><span class=p>,</span> <span class=n>help</span><span class=o>=</span><span class=s1>'b help'</span><span class=p>)</span></pre><h3>Types</h3><p>Tap automatically handles all the following types:</p><pre lang=python3><span class=nb>str</span><span class=p>,</span> <span class=nb>int</span><span class=p>,</span> <span class=nb>float</span><span class=p>,</span> <span class=nb>bool</span><span class=n>Optional</span><span class=p>,</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>str</span><span class=p>],</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>int</span><span class=p>],</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>float</span><span class=p>],</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>bool</span><span class=p>]</span><span class=n>List</span><span class=p>,</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>],</span> <span class=n>List</span><span class=p>[</span><span class=nb>int</span><span class=p>],</span> <span class=n>List</span><span class=p>[</span><span class=nb>float</span><span class=p>],</span> <span class=n>List</span><span class=p>[</span><span class=nb>bool</span><span class=p>]</span><span class=n>Set</span><span class=p>,</span> <span class=n>Set</span><span class=p>[</span><span class=nb>str</span><span class=p>],</span> <span class=n>Set</span><span class=p>[</span><span class=nb>int</span><span class=p>],</span> <span class=n>Set</span><span class=p>[</span><span class=nb>float</span><span class=p>],</span> <span class=n>Set</span><span class=p>[</span><span class=nb>bool</span><span class=p>]</span><span class=n>Tuple</span><span class=p>,</span> <span class=n>Tuple</span><span class=p>[</span><span class=n>Type1</span><span class=p>,</span> <span class=n>Type2</span><span class=p>,</span> <span class=n>etc</span><span class=o>.</span><span class=p>],</span> <span class=n>Tuple</span><span class=p>[</span><span class=n>Type</span><span class=p>,</span> <span class=o>...</span><span class=p>]</span>  <span class=n>Literal</span></pre><p>If you're using Python 3.9+, then you can replace <code>List</code> with <code>list</code>, <code>Set</code> with <code>set</code>, and <code>Tuple</code> with <code>tuple</code>.</p><p>Tap also supports <code>Union</code>, but this requires additional specification (see <a href=#-union- rel=nofollow>Union</a> section below).</p><p>Additionally, any type that can be instantiated with a string argument can be used. For example, in</p><pre lang=python3><span class=kn>from</span> <span class=nn>pathlib</span> <span class=kn>import</span> <span class=n>Path</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>   <span class=n>path</span><span class=p>:</span> <span class=n>Path</span><span class=n>args</span> <span class=o>=</span> <span class=n>Args</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span></pre><p><code>args.path</code> is a <code>Path</code> instance containing the string passed in through the command line.</p><h4><code>str</code>, <code>int</code>, and <code>float</code></h4><p>Each is automatically parsed to their respective types, just like argparse.</p><h4><code>bool</code></h4><p>If an argument <code>arg</code> is specified as <code>arg: bool</code> or <code>arg: bool = False</code>, then adding the <code>--arg</code> flag to the command line will set <code>arg</code> to <code>True</code>. If <code>arg</code> is specified as <code>arg: bool = True</code>, then adding <code>--arg</code> sets <code>arg</code> to <code>False</code>.</p><p>Note that if the <code>Tap</code> instance is created with <code>explicit_bool=True</code>, then booleans can be specified on the command line as <code>--arg True</code> or <code>--arg False</code> rather than <code>--arg</code>. Additionally, booleans can be specified by prefixes of <code>True</code> and <code>False</code> with any capitalization as well as <code>1</code> or <code>0</code> (e.g. for True, <code>--arg tRu</code>, <code>--arg T</code>, <code>--arg 1</code> all suffice).</p><h4><code>Optional</code></h4><p>These arguments are parsed in exactly the same way as <code>str</code>, <code>int</code>, <code>float</code>, and <code>bool</code>. Note bools can be specified using the same rules as above and that <code>Optional</code> is equivalent to <code>Optional[str]</code>.</p><h4><code>List</code></h4><p>If an argument <code>arg</code> is a <code>List</code>, simply specify the values separated by spaces just as you would with regular argparse. For example, <code>--arg 1 2 3</code> parses to <code>arg = [1, 2, 3]</code>.</p><h4><code>Set</code></h4><p>Identical to <code>List</code> but parsed into a set rather than a list.</p><h4><code>Tuple</code></h4><p>Tuples can be used to specify a fixed number of arguments with specified types using the syntax <code>Tuple[Type1, Type2, etc.]</code> (e.g. <code>Tuple[str, int, bool, str]</code>). Tuples with a variable number of arguments are specified by <code>Tuple[Type, ...]</code> (e.g. <code>Tuple[int, ...]</code>). Note <code>Tuple</code> defaults to <code>Tuple[str, ...]</code>.</p><h4><code>Literal</code></h4><p>Literal is analagous to argparse's <a href=\"https://docs.python.org/3/library/argparse.html#choices\" rel=nofollow>choices</a>, which specifies the values that an argument can take. For example, if arg can only be one of 'H', 1, False, or 1.0078 then you would specify that <code>arg: Literal['H', 1, False, 1.0078]</code>. For instance, <code>--arg False</code> assigns arg to False and <code>--arg True</code> throws error.</p><h4><code>Union</code></h4><p>Union types must include the <code>type</code> keyword argument in <code>add_argument</code> in order to specify which type to use, as in the example below.</p><pre lang=python3><span class=k>def</span> <span class=nf>to_number</span><span class=p>(</span><span class=n>string</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Union</span><span class=p>[</span><span class=nb>float</span><span class=p>,</span> <span class=nb>int</span><span class=p>]:</span>    <span class=k>return</span> <span class=nb>float</span><span class=p>(</span><span class=n>string</span><span class=p>)</span> <span class=k>if</span> <span class=s1>'.'</span> <span class=ow>in</span> <span class=n>string</span> <span class=k>else</span> <span class=nb>int</span><span class=p>(</span><span class=n>string</span><span class=p>)</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>number</span><span class=p>:</span> <span class=n>Union</span><span class=p>[</span><span class=nb>float</span><span class=p>,</span> <span class=nb>int</span><span class=p>]</span>    <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--number'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=n>to_number</span><span class=p>)</span></pre><p>In Python 3.10+, <code>Union[Type1, Type2, etc.]</code> can be replaced with <code>Type1 | Type2 | etc.</code>, but the <code>type</code> keyword argument must still be provided in <code>add_argument</code>.</p><h4>Complex Types</h4><p>Tap can also support more complex types than the ones specified above. If the desired type is constructed with a single string as input, then the type can be specified directly without additional modifications. For example,</p><pre lang=python3><span class=k>class</span> <span class=nc>Person</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>person</span><span class=p>:</span> <span class=n>Person</span><span class=n>args</span> <span class=o>=</span> <span class=n>Args</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>(</span><span class=s1>'--person Tapper'</span><span class=o>.</span><span class=n>split</span><span class=p>())</span><span class=nb>print</span><span class=p>(</span><span class=n>args</span><span class=o>.</span><span class=n>person</span><span class=o>.</span><span class=n>name</span><span class=p>)</span>  <span class=c1># Tapper</span></pre><p>If the desired type has a more complex constructor, then the <code>type</code> keyword argument must be provided in <code>add_argument</code>. For example,</p><pre lang=python3><span class=k>class</span> <span class=nc>AgedPerson</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>,</span> <span class=n>age</span><span class=p>:</span> <span class=nb>int</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>        <span class=bp>self</span><span class=o>.</span><span class=n>age</span> <span class=o>=</span> <span class=n>age</span><span class=k>def</span> <span class=nf>to_aged_person</span><span class=p>(</span><span class=n>string</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>AgedPerson</span><span class=p>:</span>    <span class=n>name</span><span class=p>,</span> <span class=n>age</span> <span class=o>=</span> <span class=n>string</span><span class=o>.</span><span class=n>split</span><span class=p>(</span><span class=s1>','</span><span class=p>)</span>    <span class=k>return</span> <span class=n>AgedPerson</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=n>name</span><span class=p>,</span> <span class=n>age</span><span class=o>=</span><span class=nb>int</span><span class=p>(</span><span class=n>age</span><span class=p>))</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>aged_person</span><span class=p>:</span> <span class=n>AgedPerson</span>    <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_argument</span><span class=p>(</span><span class=s1>'--aged_person'</span><span class=p>,</span> <span class=nb>type</span><span class=o>=</span><span class=n>to_aged_person</span><span class=p>)</span><span class=n>args</span> <span class=o>=</span> <span class=n>Args</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>(</span><span class=s1>'--aged_person Tapper,27'</span><span class=o>.</span><span class=n>split</span><span class=p>())</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'</span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>aged_person</span><span class=o>.</span><span class=n>name</span><span class=si>}</span><span class=s1> is </span><span class=si>{</span><span class=n>args</span><span class=o>.</span><span class=n>aged_person</span><span class=o>.</span><span class=n>age</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span>  <span class=c1># Tapper is 27</span></pre><h3>Argument processing</h3><p>With complex argument parsing, arguments often end up having interdependencies. This means that it may be necessary to disallow certain combinations of arguments or to modify some arguments based on other arguments.</p><p>To handle such cases, simply override <code>process_args</code> and add the required logic. <code>process_args</code> is automatically called when <code>parse_args</code> is called.</p><pre lang=python3><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>def</span> <span class=nf>process_args</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=c1># Validate arguments</span>        <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>is_cool</span> <span class=ow>and</span> <span class=bp>self</span><span class=o>.</span><span class=n>stars</span> <span class=o>&lt;</span> <span class=mi>4</span><span class=p>:</span>            <span class=k>raise</span> <span class=ne>ValueError</span><span class=p>(</span><span class=s1>'Cool packages cannot have fewer than 4 stars'</span><span class=p>)</span>        <span class=c1># Modify arguments</span>        <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>package</span> <span class=o>==</span> <span class=s1>'Tap'</span><span class=p>:</span>            <span class=bp>self</span><span class=o>.</span><span class=n>is_cool</span> <span class=o>=</span> <span class=kc>True</span>            <span class=bp>self</span><span class=o>.</span><span class=n>stars</span> <span class=o>=</span> <span class=mi>5</span></pre><h3>Processing known args</h3><p>Similar to argparse's <code>parse_known_args</code>, Tap is capable of parsing only arguments that it is aware of without raising an error due to additional arguments. This can be done by calling <code>parse_args</code> with <code>known_only=True</code>. The remaining un-parsed arguments are then available by accessing the <code>extra_args</code> field of the Tap object.</p><pre lang=python3><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>([</span><span class=s1>'--package'</span><span class=p>,</span> <span class=s1>'Tap'</span><span class=p>,</span> <span class=s1>'--other_arg'</span><span class=p>,</span> <span class=s1>'value'</span><span class=p>],</span> <span class=n>known_only</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=n>args</span><span class=o>.</span><span class=n>extra_args</span><span class=p>)</span>  <span class=c1># ['--other_arg', 'value']</span></pre><h3>Subclassing</h3><p>It is sometimes useful to define a template Tap and then subclass it for different use cases. Since Tap is a native Python class, inheritance is built-in, making it easy to customize from a template Tap.</p><p>In the example below, <code>StarsTap</code> and <code>AwardsTap</code> inherit the arguments (<code>package</code> and <code>is_cool</code>) and the methods (<code>process_args</code>) from <code>BaseTap</code>.</p><pre lang=python3><span class=k>class</span> <span class=nc>BaseTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span>    <span class=k>def</span> <span class=nf>process_args</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>package</span> <span class=o>==</span> <span class=s1>'Tap'</span><span class=p>:</span>            <span class=bp>self</span><span class=o>.</span><span class=n>is_cool</span> <span class=o>=</span> <span class=kc>True</span><span class=k>class</span> <span class=nc>StarsTap</span><span class=p>(</span><span class=n>BaseTap</span><span class=p>):</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span><span class=k>class</span> <span class=nc>AwardsTap</span><span class=p>(</span><span class=n>BaseTap</span><span class=p>):</span>    <span class=n>awards</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span></pre><h3>Printing</h3><p>Tap uses Python's <a href=\"https://docs.python.org/3/library/pprint.html\" rel=nofollow>pretty printer</a> to print out arguments in an easy-to-read format.</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>True</span>    <span class=n>awards</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'amazing'</span><span class=p>,</span> <span class=s1>'wow'</span><span class=p>,</span> <span class=s1>'incredible'</span><span class=p>,</span> <span class=s1>'awesome'</span><span class=p>]</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=n>args</span><span class=p>)</span></pre><p>Running <code>python main.py --package Tap</code> results in:</p><pre><code>&gt;&gt;&gt; python main.py{'awards': ['amazing', 'wow', 'incredible', 'awesome'], 'is_cool': True, 'package': 'Tap'}</code></pre><h3>Reproducibility</h3><p>Tap makes reproducibility easy, especially when running code in a git repo.</p><h4>Reproducibility info</h4><p>Specifically, Tap has a method called <code>get_reproducibility_info</code> that returns a dictionary containing all the information necessary to replicate the settings under which the code was run. This dictionary includes:</p><ul><li>Python command<ul><li>The Python command that was used to run the program</li><li>Ex. <code>python main.py --package Tap</code></li></ul></li><li>Time<ul><li>The time when the command was run</li><li>Ex. <code>Thu Aug 15 00:09:13 2019</code></li></ul></li><li>Git root<ul><li>The root of the git repo containing the code that was run</li><li>Ex. <code>/Users/swansonk14/typed-argument-parser</code></li></ul></li><li>Git url<ul><li>The url to the git repo, specifically pointing to the current git hash (i.e. the hash of HEAD in the local repo)</li><li>Ex. <a href=\"https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998\" rel=nofollow>https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998</a></li></ul></li><li>Uncommitted changes<ul><li>Whether there are any uncommitted changes in the git repo (i.e. whether the code is different from the code at the above git hash)</li><li>Ex. <code>True</code> or <code>False</code></li></ul></li></ul><h3>Saving and loading arguments</h3><h4>Save</h4><p>Tap has a method called <code>save</code> which saves all arguments, along with the reproducibility info, to a JSON file.</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>True</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=mi>5</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span><span class=n>args</span><span class=o>.</span><span class=n>save</span><span class=p>(</span><span class=s1>'args.json'</span><span class=p>)</span></pre><p>After running <code>python main.py --package Tap</code>, the file <code>args.json</code> will contain:</p><pre><code>{    \"is_cool\": true,    \"package\": \"Tap\",    \"reproducibility\": {        \"command_line\": \"python main.py --package Tap\",        \"git_has_uncommitted_changes\": false,        \"git_root\": \"/Users/swansonk14/typed-argument-parser\",        \"git_url\": \"https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998\",        \"time\": \"Thu Aug 15 00:18:31 2019\"    },    \"stars\": 5}</code></pre><p>Note: More complex types will be encoded in JSON as a pickle string.</p><h4>Load</h4><blockquote><p>:exclamation: :warning:<br>Never call <code>args.load('args.json')</code> on untrusted files. Argument loading uses the <code>pickle</code> module to decode complex types automatically. Unpickling of untrusted data is a security risk and can lead to arbitrary code execution. See <a href=\"https://docs.python.org/3/library/pickle.html\" rel=nofollow>the warning in the pickle docs</a>.<br>:exclamation: :warning:</p></blockquote><p>Arguments can be loaded from a JSON file rather than parsed from the command line.</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>True</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=mi>5</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=n>args</span><span class=o>.</span><span class=n>load</span><span class=p>(</span><span class=s1>'args.json'</span><span class=p>)</span></pre><p>Note: All required arguments (in this case <code>package</code>) must be present in the JSON file if not already set in the Tap object.</p><h4>Load from dict</h4><p>Arguments can be loaded from a Python dictionary rather than parsed from the command line.</p><pre lang=python3><span class=sd>\"\"\"main.py\"\"\"</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>MyTap</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>package</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>is_cool</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>True</span>    <span class=n>stars</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=mi>5</span><span class=n>args</span> <span class=o>=</span> <span class=n>MyTap</span><span class=p>()</span><span class=n>args</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span>    <span class=s1>'package'</span><span class=p>:</span> <span class=s1>'Tap'</span><span class=p>,</span>    <span class=s1>'stars'</span><span class=p>:</span> <span class=mi>20</span><span class=p>})</span></pre><p>Note: As with <code>load</code>, all required arguments must be present in the dictionary if not already set in the Tap object. All values in the provided dictionary will overwrite values currently in the Tap object.</p><h3>Loading from configuration files</h3><p>Configuration files can be loaded along with arguments with the optional flag <code>config_files: List[str]</code>. Arguments passed in from the command line overwrite arguments from the configuration files. Arguments in configuration files that appear later in the list overwrite the arguments in previous configuration files.</p><p>For example, if you have the config file <code>my_config.txt</code></p><pre><code>--arg1 1--arg2 two</code></pre><p>then you can write</p><pre lang=python3><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>arg1</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>arg2</span><span class=p>:</span> <span class=nb>str</span><span class=n>args</span> <span class=o>=</span> <span class=n>Args</span><span class=p>(</span><span class=n>config_files</span><span class=o>=</span><span class=p>[</span><span class=s1>'my_config.txt'</span><span class=p>])</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span></pre><p>Config files are parsed using <code>shlex.split</code> from the python standard library, which supports shell-style string quoting, as well as line-end comments starting with <code>#</code>.</p><p>For example, if you have the config file <code>my_config_shlex.txt</code></p><pre><code>--arg1 21 # Important arg value# Multi-word quoted string--arg2 \"two three four\"</code></pre><p>then you can write</p><pre lang=python3><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>Tap</span><span class=k>class</span> <span class=nc>Args</span><span class=p>(</span><span class=n>Tap</span><span class=p>):</span>    <span class=n>arg1</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>arg2</span><span class=p>:</span> <span class=nb>str</span><span class=n>args</span> <span class=o>=</span> <span class=n>Args</span><span class=p>(</span><span class=n>config_files</span><span class=o>=</span><span class=p>[</span><span class=s1>'my_config_shlex.txt'</span><span class=p>])</span><span class=o>.</span><span class=n>parse_args</span><span class=p>()</span></pre><p>to get the resulting <code>args = {'arg1': 21, 'arg2': 'two three four'}</code></p><p>The legacy parsing behavior of using standard string split can be re-enabled by passing <code>legacy_config_parsing=True</code> to <code>parse_args</code>.</p><h2>tapify</h2><p><code>tapify</code> makes it possible to run functions or initialize objects via command line arguments. This is inspired by Google's <a href=\"https://github.com/google/python-fire\" rel=nofollow>Python Fire</a>, but <code>tapify</code> also automatically casts command line arguments to the appropriate types based on the type hints. Under the hood, <code>tapify</code> implicitly creates a Tap object and uses it to parse the command line arguments, which it then uses to run the function or initialize the class. We show a few examples below.</p><h3>Examples</h3><h4>Function</h4><pre lang=python3><span class=c1># square_function.py</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=k>def</span> <span class=nf>square</span><span class=p>(</span><span class=n>num</span><span class=p>:</span> <span class=nb>float</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"Square a number.</span><span class=sd>    :param num: The number to square.</span><span class=sd>    \"\"\"</span>    <span class=k>return</span> <span class=n>num</span> <span class=o>**</span> <span class=mi>2</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=n>squared</span> <span class=o>=</span> <span class=n>tapify</span><span class=p>(</span><span class=n>square</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'The square of your number is </span><span class=si>{</span><span class=n>squared</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span></pre><p>Running <code>python square_function.py --num 5</code> prints <code>The square of your number is 25.0.</code>.</p><h4>Class</h4><pre lang=python3><span class=c1># square_class.py</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=k>class</span> <span class=nc>Squarer</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>num</span><span class=p>:</span> <span class=nb>float</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w>        </span><span class=sd>\"\"\"Initialize the Squarer with a number to square.</span><span class=sd>        :param  num: The number to square.</span><span class=sd>        \"\"\"</span>        <span class=bp>self</span><span class=o>.</span><span class=n>num</span> <span class=o>=</span> <span class=n>num</span>    <span class=k>def</span> <span class=nf>get_square</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span><span class=w>        </span><span class=sd>\"\"\"Get the square of the number.\"\"\"</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>num</span> <span class=o>**</span> <span class=mi>2</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=n>squarer</span> <span class=o>=</span> <span class=n>tapify</span><span class=p>(</span><span class=n>Squarer</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'The square of your number is </span><span class=si>{</span><span class=n>squarer</span><span class=o>.</span><span class=n>get_square</span><span class=p>()</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span></pre><p>Running <code>python square_class.py --num 2</code> prints <code>The square of your number is 4.0.</code>.</p><h4>Dataclass</h4><pre lang=python3><span class=c1># square_dataclass.py</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Squarer</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"Squarer with a number to square.</span><span class=sd>     :param  num: The number to square.</span><span class=sd>    \"\"\"</span>    <span class=n>num</span><span class=p>:</span> <span class=nb>float</span>    <span class=k>def</span> <span class=nf>get_square</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span><span class=w>        </span><span class=sd>\"\"\"Get the square of the number.\"\"\"</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>num</span> <span class=o>**</span> <span class=mi>2</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=n>squarer</span> <span class=o>=</span> <span class=n>tapify</span><span class=p>(</span><span class=n>Squarer</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'The square of your number is </span><span class=si>{</span><span class=n>squarer</span><span class=o>.</span><span class=n>get_square</span><span class=p>()</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span></pre><p>Running <code>python square_dataclass.py --num -1</code> prints <code>The square of your number is 1.0.</code>.</p><h3>tapify help</h3><p>The help string on the command line is set based on the docstring for the function or class. For example, running <code>python square_function.py -h</code> will print:</p><pre><code>usage: square_function.py [-h] --num NUMSquare a number.options:  -h, --help  show this help message and exit  --num NUM   (float, required) The number to square.</code></pre><p>Note that for classes, if there is a docstring in the <code>__init__</code> method, then <code>tapify</code> sets the help string description to that docstring. Otherwise, it uses the docstring from the top of the class.</p><h3>Command line vs explicit arguments</h3><p><code>tapify</code> can simultaneously use both arguments passed from the command line and arguments passed in explicitly in the <code>tapify</code> call. Arguments provided in the <code>tapify</code> call override function defaults, and arguments provided via the command line override both arguments provided in the <code>tapify</code> call and function defaults. We show an example below.</p><pre lang=python3><span class=c1># add.py</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=k>def</span> <span class=nf>add</span><span class=p>(</span><span class=n>num_1</span><span class=p>:</span> <span class=nb>float</span><span class=p>,</span> <span class=n>num_2</span><span class=p>:</span> <span class=nb>float</span> <span class=o>=</span> <span class=mf>0.0</span><span class=p>,</span> <span class=n>num_3</span><span class=p>:</span> <span class=nb>float</span> <span class=o>=</span> <span class=mf>0.0</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"Add numbers.</span><span class=sd>    :param num_1: The first number.</span><span class=sd>    :param num_2: The second number.</span><span class=sd>    :param num_3: The third number.</span><span class=sd>    \"\"\"</span>    <span class=k>return</span> <span class=n>num_1</span> <span class=o>+</span> <span class=n>num_2</span> <span class=o>+</span> <span class=n>num_3</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=n>added</span> <span class=o>=</span> <span class=n>tapify</span><span class=p>(</span><span class=n>add</span><span class=p>,</span> <span class=n>num_2</span><span class=o>=</span><span class=mf>2.2</span><span class=p>,</span> <span class=n>num_3</span><span class=o>=</span><span class=mf>4.1</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'The sum of your numbers is </span><span class=si>{</span><span class=n>added</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span></pre><p>Running <code>python add.py --num_1 1.0 --num_2 0.9</code> prints <code>The sum of your numbers is 6.0.</code>. (Note that <code>add</code> took <code>num_1 = 1.0</code> and <code>num_2 = 0.9</code> from the command line and <code>num_3=4.1</code> from the <code>tapify</code> call due to the order of precedence.)</p><h3>Known args</h3><p>Calling <code>tapify</code> with <code>known_only=True</code> allows <code>tapify</code> to ignore additional arguments from the command line that are not needed for the function or class. If <code>known_only=False</code> (the default), then <code>tapify</code> will raise an error when additional arguments are provided. We show an example below where <code>known_only=True</code> might be useful for running multiple <code>tapify</code> calls.</p><pre lang=python3><span class=c1># person.py</span><span class=kn>from</span> <span class=nn>tap</span> <span class=kn>import</span> <span class=n>tapify</span><span class=k>def</span> <span class=nf>print_name</span><span class=p>(</span><span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"Print a person's name.</span><span class=sd>    :param name: A person's name.</span><span class=sd>    \"\"\"</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'My name is </span><span class=si>{</span><span class=n>name</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span><span class=k>def</span> <span class=nf>print_age</span><span class=p>(</span><span class=n>age</span><span class=p>:</span> <span class=nb>int</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"Print a person's age.</span><span class=sd>    :param name: A person's age.</span><span class=sd>    \"\"\"</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'My age is </span><span class=si>{</span><span class=n>age</span><span class=si>}</span><span class=s1>.'</span><span class=p>)</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=n>tapify</span><span class=p>(</span><span class=n>print_name</span><span class=p>,</span> <span class=n>known_only</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>    <span class=n>tapify</span><span class=p>(</span><span class=n>print_age</span><span class=p>,</span> <span class=n>known_only</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></pre><p>Running <code>python person.py --name Jesse --age 1</code> prints <code>My name is Jesse.</code> followed by <code>My age is 1.</code>. Without <code>known_only=True</code>, the <code>tapify</code> calls would raise an error due to the extra argument.</p>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/swansonk14/typed-argument-parser\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/swansonk14/typed-argument-parser/archive/refs/tags/v_1.9.0.tar.gz\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/typed-argument-parser\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:jessem.michel@gmail.com\">Jesse Michel and Kyle Swanson</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      typing,    </span>    <span class=\"package-keyword\">      argument parser,    </span>    <span class=\"package-keyword\">      python    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.8  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/swansonk14/\" aria-label=\"swansonk14\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/fb7bbe9542ab96b2a76e3e417ac403757edbcc24/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36393362306661663736326335356161323566383635353039623330326137323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for swansonk14 from gravatar.com\" title=\"Avatar for swansonk14 from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            swansonk14          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>    <li>      <strong>Typing</strong>      <ul>        <li>          <a href=\"/search/?c=Typing+%3A%3A+Typed\">            Typed          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/typed-argument-parser/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.9.0/\">                <p class=\"release__version\">                  1.9.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-11-12T04:52:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 12, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.8.1/\">                <p class=\"release__version\">                  1.8.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-06-28T23:05:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 28, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.8.0/\">                <p class=\"release__version\">                  1.8.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-03-06T20:06:07+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 6, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.7.2/\">                <p class=\"release__version\">                  1.7.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-01-01T03:01:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 1, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.7.1/\">                <p class=\"release__version\">                  1.7.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-15T20:45:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 15, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.7.0/\">                <p class=\"release__version\">                  1.7.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-06-20T15:30:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 20, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.6.3/\">                <p class=\"release__version\">                  1.6.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-06-07T09:29:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 7, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.6.2/\">                <p class=\"release__version\">                  1.6.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-03-27T18:20:02+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 27, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.6.1/\">                <p class=\"release__version\">                  1.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-11-27T16:45:58+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 27, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.6.0/\">                <p class=\"release__version\">                  1.6.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-10-07T19:02:02+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 7, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.5.4/\">                <p class=\"release__version\">                  1.5.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-23T17:16:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 23, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.5.3/\">                <p class=\"release__version\">                  1.5.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-20T03:29:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 20, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.5.2/\">                <p class=\"release__version\">                  1.5.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-16T04:38:20+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 16, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.5.1/\">                <p class=\"release__version\">                  1.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-14T04:18:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 14, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.5.0/\">                <p class=\"release__version\">                  1.5.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-06-20T18:56:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 20, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.4.3/\">                <p class=\"release__version\">                  1.4.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-22T18:58:15+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 22, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.4.2/\">                <p class=\"release__version\">                  1.4.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-13T04:43:34+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 13, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.4.1/\">                <p class=\"release__version\">                  1.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-30T04:20:26+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 30, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.4/\">                <p class=\"release__version\">                  1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-12-27T23:59:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 27, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.3/\">                <p class=\"release__version\">                  1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-09-08T02:21:53+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 8, 2019</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/typed-argument-parser/1.2/\">                <p class=\"release__version\">                  1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-23T05:31:02+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 23, 2019</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/97/25/9a17c3b9e45fd413cd4497b0a5e17e173420f895c96b8805cb28ea6a40da/typed-argument-parser-1.9.0.tar.gz\">          typed-argument-parser-1.9.0.tar.gz        </a>        (50.4 kB        <a href=\"#copy-hash-modal-c3f39182-7bd3-4998-a0c6-9286d74ee0eb\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2023-11-12T04:52:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 12, 2023</time>          <code>source</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-c3f39182-7bd3-4998-a0c6-9286d74ee0eb\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for typed-argument-parser-1.9.0.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for typed-argument-parser-1.9.0.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">7bfa8629849ab89912df1f5a4ecf6feae5de0deaf30914fa6e2733a95abd7c20</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">d862051b03a36422ced0abcda0e7ee00</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">97259a17c3b9e45fd413cd4497b0a5e17e173420f895c96b8805cb28ea6a40da</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
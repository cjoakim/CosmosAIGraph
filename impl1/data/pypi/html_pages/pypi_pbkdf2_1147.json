{
  "libtype": "pypi",
  "libname": "pbkdf2",
  "url": "http://www.dlitz.net/software/python-pbkdf2/",
  "html": "<!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"><head>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>  <title>PKCS#5 PBKDF2 for Python</title>  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\"/>  <link rel=\"stylesheet\" type=\"text/css\" href=\"../../style/main.css\"/>  <link rel=\"shortcut icon\" type=\"image/png\" href=\"../../images/dlitz-favicon.png\"/>  <!-- <link rel=\"alternate\" title=\"Atom 1.0 feed\" type=\"application/atom+xml\" href=\"/feeds/atom/\" /> -->  <!--[if lte IE 6]>  <script type=\"text/javascript\" src=\"/images/stopie6.js\"> </script>  <![endif]-->  </head><body><!-- <div style=\"display: none\"><a href=\"#pagecontent\">&gt; Jump to main content</a></div> --><div id=\"PageHeader\">  <a href=\"../../\"><img id=\"PageBanner\" src=\"../../images/dlitz-carsstop-small.jpg\" alt=\"DLitz.net\" title=\"Back to home page\" style=\"border: 0\"/></a><!--  <a style=\"width:400px;height:100px;vertical-align:middle;text-align:center;background-color:#000;position:absolute;z-index:5555;top:80px;left:30px;background-image:url(/images/thirdparty/stop-censorship-small.png);background-position:center center;background-repeat:no-repeat;\" href=\"http://americancensorship.org\"></a> -->  <div style=\"border-top: 2em solid #eee; padding: 1em\">    <div><i>Darsey Litzenberger</i></div>    <div style=\"padding-top: 1ex; font-size: x-small\">(formerly: Dwayne Litzenberger)</div>  </div>  <div style=\"padding: 1em 0 0 1em\">    <!-- <a href=\"http://www.dlitz.net/blog/\">Blog</a> <a href=\"/feeds/atom/\"><img src=\"/images/thirdparty/feed-icon-14x14.png\" title=\"Follow this site (Atom 1.0 feed)\" alt=\"[Atom 1.0 feed]\" style=\"border: 0\" /></a> -->    <a href=\"mailto:dlitz@dlitz.net\">Email</a>    | <a href=\"https://keybase.io/dlitz\">Keybase</a>    | <a href=\"https://github.com/dlitz\">GitHub</a>    | <a href=\"https://ca.linkedin.com/in/dlitz\">LinkedIn</a>    | <a href=\"https://www.facebook.com/dlitz2\">Facebook</a>    | <a href=\"https://mastodon.dlitz.net/@dlitz\" title=\"@dlitz@dlitz.net\">Mastodon</a>    | <a href=\"https://twitter.com/DLitz\" title=\"rip\">Twitter</a>    | <a href=\"../../resume/\">R\u00e9sum\u00e9</a>    <!-- | <a href=\"https://www.youtube.com/user/Dwonis\">YouTube</a> -->  </div>  <hr style=\"clear: both\"/></div><!-- <div style=\"display: none\"><a name=\"pagecontent\">&gt; Main content starts here &lt;</a></div> --><div id=\"PageContent\">  <h1>Python PKCS#5 v2.0 PBKDF2 Module</h1>  <a href=\"https://github.com/dlitz/python-pbkdf2\"><img alt=\"Fork me on GitHub\" src=\"../../images/thirdparty/fork-me-on-github.png\" style=\"position: absolute; top: 0; right: 0; border: 0;\"/></a>  <p>This module implements the password-based key derivation function, PBKDF2, specified in <a href=\"http://www.rsa.com/rsalabs/node.asp?id=2127\">RSA PKCS#5 v2.0</a>.</p>  <h2>Quick start</h2>  <p>Install from <a href=\"http://pypi.python.org/pypi/pbkdf2\">PyPI</a>:</p>  <pre>pip install pbkdf2</pre>  <h2>Example PBKDF2 usage</h2>  <div><pre>from PBKDF2 import PBKDF2  from Crypto.Cipher import AES  import os  salt = os.urandom(8)    # 64-bit salt  key = PBKDF2(&quot;This passphrase is a secret.&quot;, salt).read(32) # 256-bit key  iv = os.urandom(16)     # 128-bit IV  cipher = AES.new(key, AES.MODE_CBC, iv)    <em>...</em></pre></div>  <h2>Example crypt() usage</h2>  <div><pre>from pbkdf2 import crypt  pwhash = crypt(&quot;secret&quot;)  alleged_pw = raw_input(&quot;Enter password: &quot;)  if pwhash == crypt(alleged_pw, pwhash):      print &quot;Password good&quot;  else:      print &quot;Invalid password&quot;</pre></div>  <h2>Example crypt() output</h2>  <div><pre>&gt;&gt;&gt; from pbkdf2 import crypt  &gt;&gt;&gt; crypt(&quot;secret&quot;)  '$p5k2$$hi46RA73$aGBpfPOgOrgZLaHGweSQzJ5FLz4BsQVs'  &gt;&gt;&gt; crypt(&quot;secret&quot;, &quot;XXXXXXXX&quot;)  '$p5k2$$XXXXXXXX$L9mVVdq7upotdvtGvXTDTez3FIu3z0uG'  &gt;&gt;&gt; crypt(&quot;secret&quot;, &quot;XXXXXXXX&quot;, 400)  # 400 iterations (the default for crypt)  '$p5k2$$XXXXXXXX$L9mVVdq7upotdvtGvXTDTez3FIu3z0uG'  &gt;&gt;&gt; crypt(&quot;spam&quot;, iterations=400)  '$p5k2$$FRsH3HJB$SgRWDNmB2LukCy0OTal6LYLHZVgtOi7s'  &gt;&gt;&gt; crypt(&quot;spam&quot;, iterations=1000)    # 1000 iterations  '$p5k2$3e8$H0NX9mT/$wk/sE8vv6OMKuMaqazCJYDSUhWY9YB2J'  </pre></div></div><div id=\"PageFooter\">  <hr style=\"clear: both\"/><pre>OpenPGP: 19E1 1FE8 B3CF F273 ED17  4A24 928C EC13 39C2 5CF7</pre></div></body></html>",
  "embeddings": []
}
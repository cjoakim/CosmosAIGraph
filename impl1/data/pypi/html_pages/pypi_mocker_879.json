{
  "libtype": "pypi",
  "libname": "mocker",
  "url": "http://labix.org/mocker",
  "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"><meta name=\"robots\" content=\"index,nofollow\"><title>Python Mocker - Labix</title><script type=\"text/javascript\" src=\"/moin//common/js/common.js\"></script><script type=\"text/javascript\"><!--var search_hint = \"Search\";//--></script><link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"all\" href=\"/moin//labixtheme/css/common.css\"><link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"screen\" href=\"/moin//labixtheme/css/screen.css\"><link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"print\" href=\"/moin//labixtheme/css/print.css\"><link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"projection\" href=\"/moin//labixtheme/css/projection.css\"><!-- css only for MSIE browsers --><!--[if IE]>   <link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"all\" href=\"/moin//labixtheme/css/msie.css\"><![endif]--><link rel=\"alternate\" title=\"Labix Blog\" href=\"http://blog.labix.org/feed\" type=\"application/rss+xml\"><link rel=\"Start\" href=\"/MainPage\"><link rel=\"Alternate\" title=\"Wiki Markup\" href=\"/mocker?action=raw\"><link rel=\"Alternate\" media=\"print\" title=\"Print View\" href=\"/mocker?action=print\"><link rel=\"Search\" href=\"/FindPage\"><link rel=\"Index\" href=\"/TitleIndex\"><link rel=\"Glossary\" href=\"/WordIndex\"><link rel=\"Help\" href=\"/HelpOnFormatting\"></head><body  lang=\"en\" dir=\"ltr\"><div id=\"header\"><form id=\"searchform\" method=\"get\" action=\"/mocker\"><div><input type=\"hidden\" name=\"action\" value=\"fullsearch\"><input type=\"hidden\" name=\"context\" value=\"180\"><label for=\"searchinput\">Search:</label><input id=\"searchinput\" type=\"text\" name=\"value\" value=\"\" size=\"20\"    onfocus=\"searchFocus(this)\" onblur=\"searchBlur(this)\"    onkeyup=\"searchChange(this)\" onchange=\"searchChange(this)\" alt=\"Search\"><input id=\"titlesearch\" name=\"titlesearch\" type=\"submit\"    value=\"Titles\" alt=\"Search Titles\"><input id=\"fullsearch\" name=\"fullsearch\" type=\"submit\"    value=\"Text\" alt=\"Search Full Text\"></div></form><script type=\"text/javascript\"><!--// Initialize search formvar f = document.getElementById('searchform');f.getElementsByTagName('label')[0].style.display = 'none';var e = document.getElementById('searchinput');searchChange(e);searchBlur(e);//--></script><div id=\"logo\"><a href=\"/MainPage\">Labix</a></div></div><div id=\"sidebar\"><div class=\"sidepanel\"><h1>Navigation</h1><ul id=\"navibar\"><li class=\"wikilink\"><a href=\"/MainPage\">Index</a></li><li class=\"wikilink\"><a href=\"/RecentChanges\">RecentChanges</a></li><li class=\"wikilink\"><a href=\"/FindPage\">FindPage</a></li><li class=\"wikilink\"><a href=\"/HelpContents\">HelpContents</a></li><li class=\"current\"><a href=\"/mocker\">Python Mocker</a></li></ul></div><div class=\"sidepanel\"><h1>User</h1><ul id=\"username\"><li><a href=\"/mocker?action=login\" id=\"login\" rel=\"nofollow\">Login</a></li></ul></div></div><div id=\"page\" lang=\"en\" dir=\"ltr\"><div id=\"navigation\"></div><h1 id=\"title\">Python Mocker</h1><div dir=\"ltr\" id=\"content\" lang=\"en\"><span class=\"anchor\" id=\"top\"></span><span class=\"anchor\" id=\"line-2\"></span><span class=\"anchor\" id=\"line-3\"></span><p class=\"line867\"><div class=\"table-of-contents\"><p class=\"table-of-contents-heading\">Contents<ol><li><a href=\"#head-6382074eafd562aba14d8927fe0763aa705de975\">About</a></li><li><a href=\"#head-ffc378c56308eb42f42814b5e111c126ae5bea33\">Recent changes</a></li><li><a href=\"#head-4d347c6330bf1dc7c2d412da94366427d4b51d08\">Supported Python versions</a></li><li><a href=\"#head-5c51aafa2962009672f1b00df5c2aa0e0ec6869e\">Download</a></li><li><a href=\"#head-8eafd100e6cf826657fa2a89203af94ad2754c16\">License</a></li><li><a href=\"#head-44a383852c64a865f816f298ccc112422f08b205\">Bug tracking</a></li><li><a href=\"#head-2e685b0b44d9d8a27ed81e3e7124f4788d8eef12\">Development</a></li><li><a href=\"#head-ff69dc7d7b8d69d1fc4384774cbaf46ac3e197d9\">Author</a></li><li><a href=\"#head-0c676f1e71710302abe7e1a5bb4fdd0b944aca8b\">Tutorial</a><ol><li><a href=\"#head-d5599b191ba394ee40e90712e666037287054c10\">Basis</a></li><li><a href=\"#head-d991d70774f7d584ef3285f49a55a34391204767\">Expression kinds</a></li><li><a href=\"#head-e9d9d4f789b850c9e77b197e42d4e744654938e3\">Expression reactions</a></li><li><a href=\"#head-0f3cb8ad24741d3f104e70abdf1ebe080df358aa\">Parameter matching</a></li><li><a href=\"#head-05755c3920a6a200a71f2fa5b1ce2bbf07132164\">Ordering of expressions</a></li><li><a href=\"#head-f372c49a9d1b56832e42d5a1ccc960ff75b0b096\">Proxying</a></li><li><a href=\"#head-83d80b643ee8544628ee7a8301a72443ac51a173\">Patching</a></li><li><a href=\"#head-a6bf69501920fd40fe30e73e414444cc533ba13d\">Specification checking for API conformance</a></li><li><a href=\"#head-d5f3e7a31a406ee658f82807bed111545e3c4522\">Type simulation</a></li><li><a href=\"#head-035566b41c7f96cf0815a339eb9b23c1346a1fd9\">Extension to unittest.TestCase</a></li></ol></li></ol></div> <span class=\"anchor\" id=\"line-4\"></span><span class=\"anchor\" id=\"line-5\"></span><p class=\"line867\"><h2 id=\"head-6382074eafd562aba14d8927fe0763aa705de975\">About</h2><span class=\"anchor\" id=\"line-6\"></span><span class=\"anchor\" id=\"line-7\"></span><p class=\"line874\">That's what Mocker is about: <span class=\"anchor\" id=\"line-8\"></span><span class=\"anchor\" id=\"line-9\"></span><ul><li>Graceful platform for test doubles in Python (mocks, stubs, fakes, and dummies). <span class=\"anchor\" id=\"line-10\"></span></li><li>Inspiration from real needs, and also from pmock, jmock, pymock, easymock, etc. <span class=\"anchor\" id=\"line-11\"></span></li><li>Expectation of expressions defined by actually using mock objects. <span class=\"anchor\" id=\"line-12\"></span></li><li>Expressions may be replayed in any order by default,  <span class=\"anchor\" id=\"line-13\"></span></li><li>Trivial specification of ordering between expressions when wanted. <span class=\"anchor\" id=\"line-14\"></span></li><li>Nice parameter matching for defining expectations on method calls. <span class=\"anchor\" id=\"line-15\"></span></li><li>Good error messages when expectations are broken. <span class=\"anchor\" id=\"line-16\"></span></li><li>Mocking of many kinds of expressions (getting/setting/deleting attributes, calling, iteration, containment, etc) <span class=\"anchor\" id=\"line-17\"></span></li><li><p class=\"line862\">Graceful handling of nested expressions (e.g. <em>person.details.get_phone().get_prefix()</em>) <span class=\"anchor\" id=\"line-18\"></span></li><li><p class=\"line862\">Mock <em>proxies</em>, which allow passing through to the real object on specified expressions (e.g. useful with <em>os.path.isfile()</em>). <span class=\"anchor\" id=\"line-19\"></span></li><li><p class=\"line862\">Mocking via temporary <em>patching</em> of existent classes and instances. <span class=\"anchor\" id=\"line-20\"></span></li><li><p class=\"line862\">Trivial mocking of any external module (e.g. <em>time.time()</em>) via <em>proxy replacement</em>. <span class=\"anchor\" id=\"line-21\"></span></li><li>Mock objects may have method calls checked for conformance with real class/instance to prevent API divergence. <span class=\"anchor\" id=\"line-22\"></span></li><li>Type simulation for using mocks while still performing certain type-checking operations. <span class=\"anchor\" id=\"line-23\"></span></li><li><p class=\"line862\">Nice (optional) integration with <em>unittest.<a class=\"nonexistent\" href=\"/TestCase\">TestCase</a></em>, including additional assertions (e.g. <em>assertIs</em>, <em>assertIn</em>, etc). <span class=\"anchor\" id=\"line-24\"></span></li><li><p class=\"line862\">Code 100% covered by tests through TDD and statement analysis (good for a <em>testing</em> tool) <span class=\"anchor\" id=\"line-25\"></span></li><li>More ... <span class=\"anchor\" id=\"line-26\"></span><span class=\"anchor\" id=\"line-27\"></span><span class=\"anchor\" id=\"line-28\"></span></li></ul><p class=\"line867\"><h2 id=\"head-ffc378c56308eb42f42814b5e111c126ae5bea33\">Recent changes</h2><span class=\"anchor\" id=\"line-29\"></span><span class=\"anchor\" id=\"line-30\"></span><p class=\"line862\">Please check the <a class=\"http\" href=\"http://codebrowse.launchpad.net/~niemeyer/mocker/trunk/annotate/?file_id=news-20071112015353-3p0wa0n8cx1s5crs-1\">NEWS</a> file. <span class=\"anchor\" id=\"line-31\"></span><span class=\"anchor\" id=\"line-32\"></span><span class=\"anchor\" id=\"line-33\"></span><p class=\"line867\"><h2 id=\"head-4d347c6330bf1dc7c2d412da94366427d4b51d08\">Supported Python versions</h2><span class=\"anchor\" id=\"line-34\"></span><span class=\"anchor\" id=\"line-35\"></span><p class=\"line874\">The following Python versions are supported by the current version of Mocker: <span class=\"anchor\" id=\"line-36\"></span><span class=\"anchor\" id=\"line-37\"></span><ul><li><p class=\"line891\"><strong>2.6</strong> <span class=\"anchor\" id=\"line-38\"></span></li><li><p class=\"line891\"><strong>2.5</strong> <span class=\"anchor\" id=\"line-39\"></span></li><li><p class=\"line891\"><strong>2.4</strong> <span class=\"anchor\" id=\"line-40\"></span><span class=\"anchor\" id=\"line-41\"></span></li></ul><p class=\"line867\"><h2 id=\"head-5c51aafa2962009672f1b00df5c2aa0e0ec6869e\">Download</h2><span class=\"anchor\" id=\"line-42\"></span><span class=\"anchor\" id=\"line-43\"></span><p class=\"line874\">You can find released files at: <span class=\"anchor\" id=\"line-44\"></span><span class=\"anchor\" id=\"line-45\"></span><ul><li style=\"list-style-type:none\"><p class=\"line891\"><a class=\"https\" href=\"https://launchpad.net/mocker/+download\">https://launchpad.net/mocker/+download</a> <span class=\"anchor\" id=\"line-46\"></span><span class=\"anchor\" id=\"line-47\"></span><span class=\"anchor\" id=\"line-48\"></span></li></ul><p class=\"line867\"><h2 id=\"head-8eafd100e6cf826657fa2a89203af94ad2754c16\">License</h2><span class=\"anchor\" id=\"line-49\"></span><span class=\"anchor\" id=\"line-50\"></span><p class=\"line874\">Mocker is available under the BSD license (have fun!). <span class=\"anchor\" id=\"line-51\"></span><span class=\"anchor\" id=\"line-52\"></span><span class=\"anchor\" id=\"line-53\"></span><p class=\"line867\"><h2 id=\"head-44a383852c64a865f816f298ccc112422f08b205\">Bug tracking</h2><span class=\"anchor\" id=\"line-54\"></span><span class=\"anchor\" id=\"line-55\"></span><p class=\"line874\">Performed in Launchpad: <span class=\"anchor\" id=\"line-56\"></span><span class=\"anchor\" id=\"line-57\"></span><ul><li style=\"list-style-type:none\"><p class=\"line891\"><a class=\"https\" href=\"https://bugs.launchpad.net/mocker\">https://bugs.launchpad.net/mocker</a> <span class=\"anchor\" id=\"line-58\"></span><span class=\"anchor\" id=\"line-59\"></span><span class=\"anchor\" id=\"line-60\"></span></li></ul><p class=\"line867\"><h2 id=\"head-2e685b0b44d9d8a27ed81e3e7124f4788d8eef12\">Development</h2><span class=\"anchor\" id=\"line-61\"></span><span class=\"anchor\" id=\"line-62\"></span><p class=\"line874\">Development of Mocker may be tracked in Launchpad: <span class=\"anchor\" id=\"line-63\"></span><span class=\"anchor\" id=\"line-64\"></span><ul><li style=\"list-style-type:none\"><p class=\"line891\"><a class=\"https\" href=\"https://launchpad.net/mocker\">https://launchpad.net/mocker</a> <span class=\"anchor\" id=\"line-65\"></span><span class=\"anchor\" id=\"line-66\"></span></li></ul><p class=\"line862\">The source code may be obtained using <a class=\"http\" href=\"http://bazaar-vcs.org\">Bazaar</a>: <span class=\"anchor\" id=\"line-67\"></span><span class=\"anchor\" id=\"line-68\"></span><ul><li style=\"list-style-type:none\"><p class=\"line891\"><tt>bzr&nbsp;branch&nbsp;lp:mocker</tt> <span class=\"anchor\" id=\"line-69\"></span><span class=\"anchor\" id=\"line-70\"></span></li></ul><p class=\"line874\">Code may be browsed at: <span class=\"anchor\" id=\"line-71\"></span><span class=\"anchor\" id=\"line-72\"></span><ul><li style=\"list-style-type:none\"><p class=\"line891\"><a class=\"http\" href=\"http://codebrowse.launchpad.net/~niemeyer/mocker/trunk/files\">http://codebrowse.launchpad.net/~niemeyer/mocker/trunk/files</a> <span class=\"anchor\" id=\"line-73\"></span><span class=\"anchor\" id=\"line-74\"></span><span class=\"anchor\" id=\"line-75\"></span></li></ul><p class=\"line867\"><h2 id=\"head-ff69dc7d7b8d69d1fc4384774cbaf46ac3e197d9\">Author</h2><span class=\"anchor\" id=\"line-76\"></span><span class=\"anchor\" id=\"line-77\"></span><p class=\"line862\">Gustavo Niemeyer &lt;<a class=\"mailto\" href=\"mailto:gustavo@niemeyer.net\">gustavo@niemeyer.net</a>&gt; <span class=\"anchor\" id=\"line-78\"></span><span class=\"anchor\" id=\"line-79\"></span><span class=\"anchor\" id=\"line-80\"></span><p class=\"line867\"><h2 id=\"head-0c676f1e71710302abe7e1a5bb4fdd0b944aca8b\">Tutorial</h2><span class=\"anchor\" id=\"line-81\"></span><span class=\"anchor\" id=\"line-82\"></span><p class=\"line867\"><h3 id=\"head-d5599b191ba394ee40e90712e666037287054c10\">Basis</h3><span class=\"anchor\" id=\"line-83\"></span><span class=\"anchor\" id=\"line-84\"></span><p class=\"line862\">A <em>Mocker</em> instance is used to command recording and replaying of <span class=\"anchor\" id=\"line-85\"></span>expectations on any number of mock objects. <span class=\"anchor\" id=\"line-86\"></span><span class=\"anchor\" id=\"line-87\"></span><p class=\"line874\">Expectations should be expressed for the mock object while in <span class=\"anchor\" id=\"line-88\"></span>record mode (the initial one) by using the mock object itself, <span class=\"anchor\" id=\"line-89\"></span>and using the mocker (and/or <em>expect()</em> as a helper) to define <span class=\"anchor\" id=\"line-90\"></span>additional behavior for each expression.  For instance: <span class=\"anchor\" id=\"line-91\"></span><span class=\"anchor\" id=\"line-92\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-93\"></span><span class=\"anchor\" id=\"line-94\"></span><span class=\"anchor\" id=\"line-95\"></span><span class=\"anchor\" id=\"line-96\"></span><span class=\"anchor\" id=\"line-97\"></span><span class=\"anchor\" id=\"line-98\"></span><span class=\"anchor\" id=\"line-99\"></span><span class=\"anchor\" id=\"line-100\"></span><span class=\"anchor\" id=\"line-101\"></span><span class=\"anchor\" id=\"line-102\"></span><span class=\"anchor\" id=\"line-103\"></span><span class=\"anchor\" id=\"line-104\"></span><span class=\"anchor\" id=\"line-105\"></span><span class=\"anchor\" id=\"line-106\"></span><span class=\"anchor\" id=\"line-107\"></span><span class=\"anchor\" id=\"line-108\"></span><span class=\"anchor\" id=\"line-109\"></span><span class=\"anchor\" id=\"line-110\"></span><span class=\"anchor\" id=\"line-111\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">function isnumbered(obj) {  return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';}function nformat(num,chrs,add) {  var nlen = Math.max(0,chrs-(''+num).length), res = '';  while (nlen>0) { res += ' '; nlen-- }  return res+num+add;}function addnumber(did, nstart, nstep) {  var c = document.getElementById(did), l = c.firstChild, n = 1;  if (!isnumbered(c))    if (typeof nstart == 'undefined') nstart = 1;    if (typeof nstep  == 'undefined') nstep = 1;    n = nstart;    while (l != null) {      if (l.tagName == 'SPAN') {        var s = document.createElement('SPAN');        s.className = 'LineNumber'        s.appendChild(document.createTextNode(nformat(n,4,' ')));        n += nstep;        if (l.childNodes.length)          l.insertBefore(s, l.firstChild)        else          l.appendChild(s)      }      l = l.nextSibling;    }  return false;}function remnumber(did) {  var c = document.getElementById(did), l = c.firstChild;  if (isnumbered(c))    while (l != null) {      if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);      l = l.nextSibling;    }  return false;}function togglenumber(did, nstart, nstep) {  var c = document.getElementById(did);  if (isnumbered(c)) {    remnumber(did);  } else {    addnumber(did,nstart,nstep);  }  return false;}</script><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-4ff0c48897cf0a76d8453e9af1ed0abd69dd19f0_000\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-4ff0c48897cf0a76d8453e9af1ed0abd69dd19f0_000\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span> <span class=\"Operator\">=</span> <span class=\"ID\">Mocker</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"String\">'Hi!'</span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  13 </span><span class=\"ID\">Traceback</span> <span class=\"Operator\">(</span><span class=\"ID\">most</span> <span class=\"ID\">recent</span> <span class=\"ID\">call</span> <span class=\"ID\">last</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  14 </span>  <span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">  15 </span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">MatchError</span><span class=\"Operator\">:</span> <span class=\"Operator\">[</span><span class=\"ID\">Mocker</span><span class=\"Operator\">]</span> <span class=\"ID\">Unexpected</span> <span class=\"ID\">expression</span><span class=\"Operator\">:</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span></span><span class=\"line\"><span class=\"LineNumber\">  16 </span></span><span class=\"line\"><span class=\"LineNumber\">  17 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">restore</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  18 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">verify</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-112\"></span><span class=\"anchor\" id=\"line-113\"></span><p class=\"line874\">In this short excerpt a mock object is being created, then an <span class=\"anchor\" id=\"line-114\"></span>expectation of a call to the <em>hello()</em> method was recorded, and <span class=\"anchor\" id=\"line-115\"></span>when called the method should return the value <em>\"Hi!\"</em>.  Then, the <span class=\"anchor\" id=\"line-116\"></span>mocker is put in replay mode, and the expectation is satisfied <span class=\"anchor\" id=\"line-117\"></span>by calling the <em>hello()</em> method, which indeed returns <em>\"Hi!\"</em>. <span class=\"anchor\" id=\"line-118\"></span>Calling the unexpected method <em>bye()</em> on the mock raises an error. <span class=\"anchor\" id=\"line-119\"></span>Finally, a call to the <em>restore()</em> method is performed to undo any <span class=\"anchor\" id=\"line-120\"></span>needed changes made in the environment, and the <em>verify()</em> method is <span class=\"anchor\" id=\"line-121\"></span>called to ensure that all defined expectations were met. <span class=\"anchor\" id=\"line-122\"></span><span class=\"anchor\" id=\"line-123\"></span><p class=\"line874\">The same kind of logic may be expressed more elegantly using the <span class=\"anchor\" id=\"line-124\"></span><em>with mocker:</em> statement (Python 2.5+), as follows: <span class=\"anchor\" id=\"line-125\"></span><span class=\"anchor\" id=\"line-126\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-127\"></span><span class=\"anchor\" id=\"line-128\"></span><span class=\"anchor\" id=\"line-129\"></span><span class=\"anchor\" id=\"line-130\"></span><span class=\"anchor\" id=\"line-131\"></span><span class=\"anchor\" id=\"line-132\"></span><span class=\"anchor\" id=\"line-133\"></span><span class=\"anchor\" id=\"line-134\"></span><span class=\"anchor\" id=\"line-135\"></span><span class=\"anchor\" id=\"line-136\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-87b2c8910e783bd94cf2f7c9591023f974e64aa9_001\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-87b2c8910e783bd94cf2f7c9591023f974e64aa9_001\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">with</span> <span class=\"ID\">mocker</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"String\">'Hi!'</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-137\"></span><span class=\"anchor\" id=\"line-138\"></span><p class=\"line862\">Also, the <em><a class=\"nonexistent\" href=\"/MockerTestCase\">MockerTestCase</a></em> class, which integrates the mocker on <span class=\"anchor\" id=\"line-139\"></span>a <em>unittest.<a class=\"nonexistent\" href=\"/TestCase\">TestCase</a></em> subclass, may be used to reduce the overhead <span class=\"anchor\" id=\"line-140\"></span>of controlling the mocker.  A test could be written as follows: <span class=\"anchor\" id=\"line-141\"></span><span class=\"anchor\" id=\"line-142\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-143\"></span><span class=\"anchor\" id=\"line-144\"></span><span class=\"anchor\" id=\"line-145\"></span><span class=\"anchor\" id=\"line-146\"></span><span class=\"anchor\" id=\"line-147\"></span><span class=\"anchor\" id=\"line-148\"></span><span class=\"anchor\" id=\"line-149\"></span><span class=\"anchor\" id=\"line-150\"></span><span class=\"anchor\" id=\"line-151\"></span><span class=\"anchor\" id=\"line-152\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-9a2e156948cf1a0d9f5321848cbae298f0554e7c_002\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-9a2e156948cf1a0d9f5321848cbae298f0554e7c_002\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">class</span> <span class=\"ID\">SampleTest</span><span class=\"Operator\">(</span><span class=\"ID\">MockerTestCase</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ResWord\">def</span> <span class=\"ID\">test_hello</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">assertEquals</span><span class=\"Operator\">(</span><span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span><span class=\"Operator\">,</span> <span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-153\"></span><span class=\"anchor\" id=\"line-154\"></span><p class=\"line874\">After each test method is run, expectations defined will be verified, <span class=\"anchor\" id=\"line-155\"></span>and any requested changes made to the environment will be restored. <span class=\"anchor\" id=\"line-156\"></span><span class=\"anchor\" id=\"line-157\"></span><span class=\"anchor\" id=\"line-158\"></span><p class=\"line867\"><h3 id=\"head-d991d70774f7d584ef3285f49a55a34391204767\">Expression kinds</h3><span class=\"anchor\" id=\"line-159\"></span><span class=\"anchor\" id=\"line-160\"></span><p class=\"line874\">The following expression kinds are currently understood by Mocker, <span class=\"anchor\" id=\"line-161\"></span>and will be properly recorded if used on a mock object: <span class=\"anchor\" id=\"line-162\"></span><span class=\"anchor\" id=\"line-163\"></span><ul><li><p class=\"line891\"><strong>value = mock.attr</strong> <span class=\"anchor\" id=\"line-164\"></span></li><li><p class=\"line891\"><strong>mock.attr = value</strong> <span class=\"anchor\" id=\"line-165\"></span></li><li><p class=\"line891\"><strong>del mock.attr</strong> <span class=\"anchor\" id=\"line-166\"></span></li><li><p class=\"line891\"><strong>mock([*args, **kwargs])</strong> <span class=\"anchor\" id=\"line-167\"></span></li><li><p class=\"line891\"><strong>value in mock</strong> <span class=\"anchor\" id=\"line-168\"></span></li><li><p class=\"line891\"><strong>mock[key]</strong> <span class=\"anchor\" id=\"line-169\"></span></li><li><p class=\"line891\"><strong>mock[key] = value</strong> <span class=\"anchor\" id=\"line-170\"></span></li><li><p class=\"line891\"><strong>del mock[key]</strong> <span class=\"anchor\" id=\"line-171\"></span></li><li><p class=\"line891\"><strong>len(mock)</strong> <span class=\"anchor\" id=\"line-172\"></span></li><li><p class=\"line891\"><strong>bool(mock)</strong> <span class=\"anchor\" id=\"line-173\"></span></li><li><p class=\"line891\"><strong>iter(mock)</strong> <span class=\"anchor\" id=\"line-174\"></span><span class=\"anchor\" id=\"line-175\"></span></li></ul><p class=\"line862\">Notice that these expressions may be <em>nested</em>.  For instance, notice how <span class=\"anchor\" id=\"line-176\"></span>the following expressions are recorded and replayed back: <span class=\"anchor\" id=\"line-177\"></span><span class=\"anchor\" id=\"line-178\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-179\"></span><span class=\"anchor\" id=\"line-180\"></span><span class=\"anchor\" id=\"line-181\"></span><span class=\"anchor\" id=\"line-182\"></span><span class=\"anchor\" id=\"line-183\"></span><span class=\"anchor\" id=\"line-184\"></span><span class=\"anchor\" id=\"line-185\"></span><span class=\"anchor\" id=\"line-186\"></span><span class=\"anchor\" id=\"line-187\"></span><span class=\"anchor\" id=\"line-188\"></span><span class=\"anchor\" id=\"line-189\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-5c233f0e37cb4f09957937066b2ee0e597bab60c_003\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-5c233f0e37cb4f09957937066b2ee0e597bab60c_003\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">len</span><span class=\"Operator\">(</span><span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">attr</span><span class=\"Operator\">.</span><span class=\"ID\">method</span><span class=\"Operator\">(</span><span class=\"String\">\"param\"</span><span class=\"Operator\">)</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"Number\">3</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">method</span> <span class=\"Operator\">=</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">attr</span><span class=\"Operator\">.</span><span class=\"ID\">method</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">result</span> <span class=\"Operator\">=</span> <span class=\"ID\">method</span><span class=\"Operator\">(</span><span class=\"String\">\"param\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">len</span><span class=\"Operator\">(</span><span class=\"ID\">result</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"Number\">3</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-190\"></span><span class=\"anchor\" id=\"line-191\"></span><span class=\"anchor\" id=\"line-192\"></span><p class=\"line867\"><h3 id=\"head-e9d9d4f789b850c9e77b197e42d4e744654938e3\">Expression reactions</h3><span class=\"anchor\" id=\"line-193\"></span><span class=\"anchor\" id=\"line-194\"></span><p class=\"line874\">Mocker may instruct mock objects to react in certain ways once recorded <span class=\"anchor\" id=\"line-195\"></span>expressions are seen during replay mode.  There are two different ways to <span class=\"anchor\" id=\"line-196\"></span>specify that, and they are completely equivalent.  One of them is using <span class=\"anchor\" id=\"line-197\"></span>method calls on the mocker instance itself, and the other is using the <span class=\"anchor\" id=\"line-198\"></span><em>expect()</em> helper.  As an example: <span class=\"anchor\" id=\"line-199\"></span><span class=\"anchor\" id=\"line-200\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-201\"></span><span class=\"anchor\" id=\"line-202\"></span><span class=\"anchor\" id=\"line-203\"></span><span class=\"anchor\" id=\"line-204\"></span><span class=\"anchor\" id=\"line-205\"></span><span class=\"anchor\" id=\"line-206\"></span><span class=\"anchor\" id=\"line-207\"></span><pre>&gt;&gt;&gt; obj1 = mocker.mock()&gt;&gt;&gt; obj1.hello()&gt;&gt;&gt; mocker.result(\"Hi!\")&gt;&gt;&gt; obj2 = mocker.mock()&gt;&gt;&gt; expect(obj2.hello()).result(\"Hi!\")</pre><span class=\"anchor\" id=\"line-208\"></span><span class=\"anchor\" id=\"line-209\"></span><p class=\"line874\">The following reactions are supported: <span class=\"anchor\" id=\"line-210\"></span><span class=\"anchor\" id=\"line-211\"></span><ul><li><p class=\"line891\"><strong>result(value)</strong> - Make the last recorded expression return the given value on replay. <span class=\"anchor\" id=\"line-212\"></span></li><li><p class=\"line891\"><strong>generate(sequence)</strong> - Last recorded expression will return a generator with the given sequence. <span class=\"anchor\" id=\"line-213\"></span></li><li><p class=\"line891\"><strong>throw(exception)</strong> - Make the last recorded expression raise the given exception on replay <span class=\"anchor\" id=\"line-214\"></span></li><li><p class=\"line891\"><strong>call(func, with_object=False)</strong> - Make the last recorded expression cause the given function to be called (result of function is also the result of the expression). If with_object is True, the called function will receive the patched or proxied object so that its state may be used or verified in checks. <span class=\"anchor\" id=\"line-215\"></span></li><li><p class=\"line891\"><strong>count(min[, max])</strong> - Last recorded expression must be replayed between min and max times (<em>max=min</em>, if <em>max</em> isn't given, and <em>max</em> may be <em>None</em>, in which case there's no upper limit). <span class=\"anchor\" id=\"line-216\"></span></li><li><p class=\"line891\"><strong>passthrough([result_callback])</strong> - Make the last recorded expression run on the real object once seen (works with proxies, patches, and replacements). If <em>result_callback</em> is given, it will be called with the value returned by the real method as the only argument. <span class=\"anchor\" id=\"line-217\"></span><span class=\"anchor\" id=\"line-218\"></span></li></ul><p class=\"line874\">Check the API documentation for a more detailed explanation of these methods. <span class=\"anchor\" id=\"line-219\"></span><span class=\"anchor\" id=\"line-220\"></span><span class=\"anchor\" id=\"line-221\"></span><p class=\"line867\"><h3 id=\"head-0f3cb8ad24741d3f104e70abdf1ebe080df358aa\">Parameter matching</h3><span class=\"anchor\" id=\"line-222\"></span><span class=\"anchor\" id=\"line-223\"></span><p class=\"line874\">Mocker offers a very flexible way to match parameters in method calls. <span class=\"anchor\" id=\"line-224\"></span><span class=\"anchor\" id=\"line-225\"></span><p class=\"line874\">In simple cases, parameters are matched using basic equality. For instance: <span class=\"anchor\" id=\"line-226\"></span><span class=\"anchor\" id=\"line-227\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-228\"></span><span class=\"anchor\" id=\"line-229\"></span><span class=\"anchor\" id=\"line-230\"></span><span class=\"anchor\" id=\"line-231\"></span><span class=\"anchor\" id=\"line-232\"></span><span class=\"anchor\" id=\"line-233\"></span><span class=\"anchor\" id=\"line-234\"></span><span class=\"anchor\" id=\"line-235\"></span><span class=\"anchor\" id=\"line-236\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-94115603060472fbcffd7bfa3a3a03ed084a7208_004\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-94115603060472fbcffd7bfa3a3a03ed084a7208_004\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi Joe!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi Jeff!\"</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-237\"></span><span class=\"anchor\" id=\"line-238\"></span><span class=\"anchor\" id=\"line-239\"></span><p class=\"line874\">In more interesting cases, a few special parameters may be used to define <span class=\"anchor\" id=\"line-240\"></span>the expectation. <span class=\"anchor\" id=\"line-241\"></span><span class=\"anchor\" id=\"line-242\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-243\"></span><span class=\"anchor\" id=\"line-244\"></span><span class=\"anchor\" id=\"line-245\"></span><span class=\"anchor\" id=\"line-246\"></span><span class=\"anchor\" id=\"line-247\"></span><span class=\"anchor\" id=\"line-248\"></span><span class=\"anchor\" id=\"line-249\"></span><span class=\"anchor\" id=\"line-250\"></span><span class=\"anchor\" id=\"line-251\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-3460c71ea33474523ff699c93cae2ac3a020500d_005\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-3460c71ea33474523ff699c93cae2ac3a020500d_005\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">,</span> <span class=\"String\">\"morning\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Good morning, Joe!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">,</span> <span class=\"ID\">ANY</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">call</span><span class=\"Operator\">(</span><span class=\"ResWord\">lambda</span> <span class=\"ID\">name</span><span class=\"Operator\">,</span> <span class=\"ID\">when</span><span class=\"Operator\">:</span> <span class=\"String\">\"Good %s, Jeff!\"</span> <span class=\"Operator\">%</span> <span class=\"ID\">when</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-252\"></span><span class=\"anchor\" id=\"line-253\"></span><span class=\"anchor\" id=\"line-254\"></span><p class=\"line874\">It's possible to specify keyword arguments in a similar way, and also to <span class=\"anchor\" id=\"line-255\"></span>match a variable number of positional or keyword arguments using the <span class=\"anchor\" id=\"line-256\"></span><em>ARGS</em> and <em>KWARGS</em> special parameters, respectively.  These may be <span class=\"anchor\" id=\"line-257\"></span>used alone or alongside other normal parameters. <span class=\"anchor\" id=\"line-258\"></span><span class=\"anchor\" id=\"line-259\"></span><p class=\"line874\">As an example, the following code will record an expression which will <span class=\"anchor\" id=\"line-260\"></span>match any method calls that take \"Joe\" as the second argument. <span class=\"anchor\" id=\"line-261\"></span><span class=\"anchor\" id=\"line-262\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-263\"></span><span class=\"anchor\" id=\"line-264\"></span><span class=\"anchor\" id=\"line-265\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-82d7b2fa4a4e670f66d116ad8d65fc080f350b70_006\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-82d7b2fa4a4e670f66d116ad8d65fc080f350b70_006\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"ID\">ANY</span><span class=\"Operator\">,</span> <span class=\"String\">\"Joe\"</span><span class=\"Operator\">,</span> <span class=\"ID\">ARGS</span><span class=\"Operator\">,</span> <span class=\"ID\">KWARGS</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-266\"></span><span class=\"anchor\" id=\"line-267\"></span><p class=\"line874\">The following special parameters are available: <span class=\"anchor\" id=\"line-268\"></span><span class=\"anchor\" id=\"line-269\"></span><ul><li><p class=\"line891\"><strong>ANY</strong> - Matches any single parameter (positional or keyword, depending on the context used). <span class=\"anchor\" id=\"line-270\"></span></li><li><p class=\"line891\"><strong>ARGS</strong> - Matches any number of postional parameters, in the position where it was used. <span class=\"anchor\" id=\"line-271\"></span></li><li><p class=\"line891\"><strong>KWARGS</strong> - Matches any number of keyword arguments. <span class=\"anchor\" id=\"line-272\"></span></li><li><p class=\"line891\"><strong>IS(object)</strong> - Matches parameter if it <strong>is</strong> the given object. <span class=\"anchor\" id=\"line-273\"></span></li><li><p class=\"line891\"><strong>IN(object)</strong> - Matches parameter if it is contained in the given object. <span class=\"anchor\" id=\"line-274\"></span></li><li><p class=\"line891\"><strong>CONTAINS(object)</strong> - Matches parameter if it contains the given object. <span class=\"anchor\" id=\"line-275\"></span></li><li><p class=\"line891\"><strong>MATCH(func)</strong> - Matches parameter if <em>func(param)</em> is true. <span class=\"anchor\" id=\"line-276\"></span><span class=\"anchor\" id=\"line-277\"></span></li></ul><p class=\"line867\"><strong>Patching limitations:</strong> <span class=\"anchor\" id=\"line-278\"></span><span class=\"anchor\" id=\"line-279\"></span><ul><li><p class=\"line862\">At this time patching doesn't work in <em>classmethods</em>. <span class=\"anchor\" id=\"line-280\"></span><span class=\"anchor\" id=\"line-281\"></span><span class=\"anchor\" id=\"line-282\"></span></li></ul><p class=\"line867\"><h3 id=\"head-05755c3920a6a200a71f2fa5b1ce2bbf07132164\">Ordering of expressions</h3><span class=\"anchor\" id=\"line-283\"></span><span class=\"anchor\" id=\"line-284\"></span><p class=\"line874\">By default, mocker won't force expressions to be expected precisely in <span class=\"anchor\" id=\"line-285\"></span>the order they were recorded.  You can change this behavior <span class=\"anchor\" id=\"line-286\"></span>in a few different ways.  Which one is used in a given occasion <span class=\"anchor\" id=\"line-287\"></span>depends only on convenience. <span class=\"anchor\" id=\"line-288\"></span><span class=\"anchor\" id=\"line-289\"></span><p class=\"line862\">One way to obtain ordering is calling <em>mocker.order()</em>.  With this, <span class=\"anchor\" id=\"line-290\"></span>the mocker will be put in a mode where any recorded expressions following <span class=\"anchor\" id=\"line-291\"></span>it will only be met if they are replayed in the recorded order.  When <span class=\"anchor\" id=\"line-292\"></span>that's used, the mocker may be put back in unordered mode by calling <span class=\"anchor\" id=\"line-293\"></span><em>mocker.unorder()</em>, or by using a <em>with mocker.order():</em> block, <span class=\"anchor\" id=\"line-294\"></span>like so: <span class=\"anchor\" id=\"line-295\"></span><span class=\"anchor\" id=\"line-296\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-297\"></span><span class=\"anchor\" id=\"line-298\"></span><span class=\"anchor\" id=\"line-299\"></span><span class=\"anchor\" id=\"line-300\"></span><span class=\"anchor\" id=\"line-301\"></span><span class=\"anchor\" id=\"line-302\"></span><span class=\"anchor\" id=\"line-303\"></span><span class=\"anchor\" id=\"line-304\"></span><span class=\"anchor\" id=\"line-305\"></span><span class=\"anchor\" id=\"line-306\"></span><span class=\"anchor\" id=\"line-307\"></span><span class=\"anchor\" id=\"line-308\"></span><span class=\"anchor\" id=\"line-309\"></span><span class=\"anchor\" id=\"line-310\"></span><span class=\"anchor\" id=\"line-311\"></span><span class=\"anchor\" id=\"line-312\"></span><span class=\"anchor\" id=\"line-313\"></span><span class=\"anchor\" id=\"line-314\"></span><span class=\"anchor\" id=\"line-315\"></span><span class=\"anchor\" id=\"line-316\"></span><span class=\"anchor\" id=\"line-317\"></span><span class=\"anchor\" id=\"line-318\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-90701059860d9d693061b034fb7447a27c0fd699_007\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-90701059860d9d693061b034fb7447a27c0fd699_007\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">with</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">order</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"See ya!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"Comment\"># mocker.unorder() -- Not needed when using a 'with' block.</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  13 </span><span class=\"ID\">Traceback</span> <span class=\"Operator\">(</span><span class=\"ID\">most</span> <span class=\"ID\">recent</span> <span class=\"ID\">call</span> <span class=\"ID\">last</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  14 </span>  <span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">  15 </span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">MatchError</span><span class=\"Operator\">:</span> <span class=\"Operator\">[</span><span class=\"ID\">Mocker</span><span class=\"Operator\">]</span> <span class=\"ID\">Unexpected</span> <span class=\"ID\">expression</span><span class=\"Operator\">:</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span></span><span class=\"line\"><span class=\"LineNumber\">  16 </span></span><span class=\"line\"><span class=\"LineNumber\">  17 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  18 </span><span class=\"String\">'Hi!'</span></span><span class=\"line\"><span class=\"LineNumber\">  19 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">bye</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  20 </span><span class=\"String\">'See ya!'</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-319\"></span><span class=\"anchor\" id=\"line-320\"></span><p class=\"line862\">Note how the first call to <em>bye()</em> raises an error, because <em>hello()</em> <span class=\"anchor\" id=\"line-321\"></span>hadn't been called yet. <span class=\"anchor\" id=\"line-322\"></span><span class=\"anchor\" id=\"line-323\"></span><span class=\"anchor\" id=\"line-324\"></span><p class=\"line867\"><h3 id=\"head-f372c49a9d1b56832e42d5a1ccc960ff75b0b096\">Proxying</h3><span class=\"anchor\" id=\"line-325\"></span><span class=\"anchor\" id=\"line-326\"></span><p class=\"line874\">Two powerful features of Mocker which aren't commonly seen in other <span class=\"anchor\" id=\"line-327\"></span>mocking systems is the ability of <em>proxying</em> to existing objects, <span class=\"anchor\" id=\"line-328\"></span>or even <em>patching</em> the real instance or class. <span class=\"anchor\" id=\"line-329\"></span><span class=\"anchor\" id=\"line-330\"></span><p class=\"line862\">When an object is <em>proxied</em>, Mocker will create a mock object <span class=\"anchor\" id=\"line-331\"></span>which will hold a reference to the real object, and will allow <span class=\"anchor\" id=\"line-332\"></span>expressions to passthrough (mocked or not, and by default or on <span class=\"anchor\" id=\"line-333\"></span>request). <span class=\"anchor\" id=\"line-334\"></span><span class=\"anchor\" id=\"line-335\"></span><p class=\"line874\">To understand how it works in practice, let's define a new class: <span class=\"anchor\" id=\"line-336\"></span><span class=\"anchor\" id=\"line-337\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-338\"></span><span class=\"anchor\" id=\"line-339\"></span><span class=\"anchor\" id=\"line-340\"></span><span class=\"anchor\" id=\"line-341\"></span><span class=\"anchor\" id=\"line-342\"></span><span class=\"anchor\" id=\"line-343\"></span><span class=\"anchor\" id=\"line-344\"></span><span class=\"anchor\" id=\"line-345\"></span><span class=\"anchor\" id=\"line-346\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-c73a6893a2742e0ca7e341c4c8ba38a99d882467_008\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-c73a6893a2742e0ca7e341c4c8ba38a99d882467_008\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">class</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">(</span><span class=\"ID\">object</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ResWord\">def</span> <span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">,</span> <span class=\"ID\">name</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ResWord\">return</span> <span class=\"String\">\"Hi %s!\"</span> <span class=\"Operator\">%</span> <span class=\"ID\">name</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ResWord\">def</span> <span class=\"ID\">bye</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ResWord\">return</span> <span class=\"String\">\"See ya!\"</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-347\"></span><span class=\"anchor\" id=\"line-348\"></span><span class=\"anchor\" id=\"line-349\"></span><p class=\"line874\">Let's see an example: <span class=\"anchor\" id=\"line-350\"></span><span class=\"anchor\" id=\"line-351\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-352\"></span><span class=\"anchor\" id=\"line-353\"></span><span class=\"anchor\" id=\"line-354\"></span><span class=\"anchor\" id=\"line-355\"></span><span class=\"anchor\" id=\"line-356\"></span><span class=\"anchor\" id=\"line-357\"></span><span class=\"anchor\" id=\"line-358\"></span><span class=\"anchor\" id=\"line-359\"></span><span class=\"anchor\" id=\"line-360\"></span><span class=\"anchor\" id=\"line-361\"></span><span class=\"anchor\" id=\"line-362\"></span><span class=\"anchor\" id=\"line-363\"></span><span class=\"anchor\" id=\"line-364\"></span><span class=\"anchor\" id=\"line-365\"></span><span class=\"anchor\" id=\"line-366\"></span><span class=\"anchor\" id=\"line-367\"></span><span class=\"anchor\" id=\"line-368\"></span><span class=\"anchor\" id=\"line-369\"></span><span class=\"anchor\" id=\"line-370\"></span><span class=\"anchor\" id=\"line-371\"></span><span class=\"anchor\" id=\"line-372\"></span><span class=\"anchor\" id=\"line-373\"></span><span class=\"anchor\" id=\"line-374\"></span><span class=\"anchor\" id=\"line-375\"></span><span class=\"anchor\" id=\"line-376\"></span><span class=\"anchor\" id=\"line-377\"></span><span class=\"anchor\" id=\"line-378\"></span><span class=\"anchor\" id=\"line-379\"></span><span class=\"anchor\" id=\"line-380\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-24cdc41358a8a3d77f68482368b2cfbb68935ffd_009\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-24cdc41358a8a3d77f68482368b2cfbb68935ffd_009\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">greeting</span> <span class=\"Operator\">=</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">proxy</span><span class=\"Operator\">(</span><span class=\"ID\">greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hello buddy!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jim\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">passthrough</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jim\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  13 </span><span class=\"String\">'Hi Jim!'</span></span><span class=\"line\"><span class=\"LineNumber\">  14 </span></span><span class=\"line\"><span class=\"LineNumber\">  15 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  16 </span><span class=\"String\">'Hello buddy!'</span></span><span class=\"line\"><span class=\"LineNumber\">  17 </span></span><span class=\"line\"><span class=\"LineNumber\">  18 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  19 </span><span class=\"String\">'Hi Joe!'</span></span><span class=\"line\"><span class=\"LineNumber\">  20 </span></span><span class=\"line\"><span class=\"LineNumber\">  21 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jim\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  22 </span><span class=\"ID\">Traceback</span> <span class=\"Operator\">(</span><span class=\"ID\">most</span> <span class=\"ID\">recent</span> <span class=\"ID\">call</span> <span class=\"ID\">last</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  23 </span>  <span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">  24 </span><span class=\"ID\">AssertionError</span><span class=\"Operator\">:</span> <span class=\"Operator\">[</span><span class=\"ID\">Mocker</span><span class=\"Operator\">]</span> <span class=\"ID\">Unmet</span> <span class=\"ID\">expectation</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  25 </span></span><span class=\"line\"><span class=\"LineNumber\">  26 </span><span class=\"Operator\">=</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">'Jim'</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  27 </span> <span class=\"Operator\">-</span> <span class=\"ID\">Performed</span> <span class=\"ID\">more</span> <span class=\"ID\">times</span> <span class=\"ID\">than</span> <span class=\"ID\">expected</span><span class=\"Operator\">.</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-381\"></span><span class=\"anchor\" id=\"line-382\"></span><p class=\"line862\">Note how we requested that one call taking <em>\"Jeff\"</em> as an argument <span class=\"anchor\" id=\"line-383\"></span>should result in a message with <em>Hello</em>, and that a single call <span class=\"anchor\" id=\"line-384\"></span>taking <em>\"Jim\"</em> as an argument should be made, and it should passthrough <span class=\"anchor\" id=\"line-385\"></span>to the real object.  Then, when replaying, we've used both of them, and <span class=\"anchor\" id=\"line-386\"></span>then a <em>third</em> call which uses neither was made, and it passed through <span class=\"anchor\" id=\"line-387\"></span>(that's the default setting, see the <em>patch()</em> method documentation for <span class=\"anchor\" id=\"line-388\"></span>more details).  Also interestingly, a <em>second</em> call with the <em>\"Jim\"</em> <span class=\"anchor\" id=\"line-389\"></span>argument failed, because we said it'd happen only once (<em>mocker.count()</em> <span class=\"anchor\" id=\"line-390\"></span>could have changed this). <span class=\"anchor\" id=\"line-391\"></span><span class=\"anchor\" id=\"line-392\"></span><p class=\"line862\">Mocker also offers a <em>proxy and replace</em> mode, which basically means <span class=\"anchor\" id=\"line-393\"></span>that if using the <em>replace()</em> method instead of <em>proxy()</em>, on replay <span class=\"anchor\" id=\"line-394\"></span>time the returned mock object will replace the original object in <span class=\"anchor\" id=\"line-395\"></span>namespaces of the whole Python interpreter (including modules, etc). <span class=\"anchor\" id=\"line-396\"></span>Using that system, it's trivial to perform environment-level changes, <span class=\"anchor\" id=\"line-397\"></span>such as in functions defined in standard Python modules.  Both <em>replace()</em> <span class=\"anchor\" id=\"line-398\"></span>and <em>proxy()</em> offer a mode where the passed object may be an <span class=\"anchor\" id=\"line-399\"></span><em>\"import string\"</em> instead of an object, to facilitate that kind of <span class=\"anchor\" id=\"line-400\"></span>operation even more.  Here is a simple example to illustrate how it may <span class=\"anchor\" id=\"line-401\"></span>be used (luckily examples are still simple even when the explanation isn't): <span class=\"anchor\" id=\"line-402\"></span><span class=\"anchor\" id=\"line-403\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-404\"></span><span class=\"anchor\" id=\"line-405\"></span><span class=\"anchor\" id=\"line-406\"></span><span class=\"anchor\" id=\"line-407\"></span><span class=\"anchor\" id=\"line-408\"></span><span class=\"anchor\" id=\"line-409\"></span><span class=\"anchor\" id=\"line-410\"></span><span class=\"anchor\" id=\"line-411\"></span><span class=\"anchor\" id=\"line-412\"></span><span class=\"anchor\" id=\"line-413\"></span><span class=\"anchor\" id=\"line-414\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-a25a2c16ecea818439349b5f0b23eda994ab34bf_010\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-a25a2c16ecea818439349b5f0b23eda994ab34bf_010\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replace</span><span class=\"Operator\">(</span><span class=\"String\">\"time.time\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"Number\">123</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">from</span> <span class=\"ID\">time</span> <span class=\"ResWord\">import</span> <span class=\"ID\">time</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">time</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span><span class=\"Number\">123</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-415\"></span><span class=\"anchor\" id=\"line-416\"></span><p class=\"line862\">Note that this works even if modules have <em>already</em> run <em>\"from time <span class=\"anchor\" id=\"line-417\"></span>import time\"</em> by the time mocker is instructed to perform the <span class=\"anchor\" id=\"line-418\"></span>replacement. <span class=\"anchor\" id=\"line-419\"></span><span class=\"anchor\" id=\"line-420\"></span><p class=\"line862\">As explained in the <em>Basis</em> section, changes will be undone when the <span class=\"anchor\" id=\"line-421\"></span>mocker is restored. <span class=\"anchor\" id=\"line-422\"></span><span class=\"anchor\" id=\"line-423\"></span><span class=\"anchor\" id=\"line-424\"></span><p class=\"line867\"><h3 id=\"head-83d80b643ee8544628ee7a8301a72443ac51a173\">Patching</h3><span class=\"anchor\" id=\"line-425\"></span><span class=\"anchor\" id=\"line-426\"></span><p class=\"line862\">Being able to <em>patch</em> objects is another powerful and uncommon <span class=\"anchor\" id=\"line-427\"></span>feature found in Mocker, which is certainly handy in certain <span class=\"anchor\" id=\"line-428\"></span>occasions. <span class=\"anchor\" id=\"line-429\"></span><span class=\"anchor\" id=\"line-430\"></span><p class=\"line862\">When an object is <em>patched</em>, Mocker will return a mock object <span class=\"anchor\" id=\"line-431\"></span>as usual, and will allow expectations to be defined on it.  But then, <span class=\"anchor\" id=\"line-432\"></span>when put on replay mode, Mocker will make modifications so that the <span class=\"anchor\" id=\"line-433\"></span><em>real</em> class or instance acts as defined by the recorded expectations. <span class=\"anchor\" id=\"line-434\"></span>Just like with proxies, Mocker will allow expressions to passthrough to <span class=\"anchor\" id=\"line-435\"></span>the real implementation when desired.  Once the Mocker is restored (by calling <span class=\"anchor\" id=\"line-436\"></span><em>mocker.restore()</em> explicitly, or by the end of a <em>with</em> block, <span class=\"anchor\" id=\"line-437\"></span>or by returning from a test method in <em><a class=\"nonexistent\" href=\"/MockerTestCase\">MockerTestCase</a></em>), Mocker will <span class=\"anchor\" id=\"line-438\"></span>ensure that the patched object is put back in its original form. <span class=\"anchor\" id=\"line-439\"></span><span class=\"anchor\" id=\"line-440\"></span><p class=\"line862\">Let's define the same <em>Greeting</em> class again, just for proximity with <span class=\"anchor\" id=\"line-441\"></span>the following examples. <span class=\"anchor\" id=\"line-442\"></span><span class=\"anchor\" id=\"line-443\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-444\"></span><span class=\"anchor\" id=\"line-445\"></span><span class=\"anchor\" id=\"line-446\"></span><span class=\"anchor\" id=\"line-447\"></span><span class=\"anchor\" id=\"line-448\"></span><span class=\"anchor\" id=\"line-449\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-7d88aee926ad4d4c71a2b372a1641ff5e3a29b35_011\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-7d88aee926ad4d4c71a2b372a1641ff5e3a29b35_011\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">class</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">(</span><span class=\"ID\">object</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ResWord\">def</span> <span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">,</span> <span class=\"ID\">name</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ResWord\">return</span> <span class=\"String\">\"Hi %s!\"</span> <span class=\"Operator\">%</span> <span class=\"ID\">name</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-450\"></span><span class=\"anchor\" id=\"line-451\"></span><span class=\"anchor\" id=\"line-452\"></span><p class=\"line874\">Patching works both in classes and in instances.  When a class is patched, <span class=\"anchor\" id=\"line-453\"></span>all instances of this class will act and be restricted by defined <span class=\"anchor\" id=\"line-454\"></span>expectations, while if defined in the instance itself, only the given <span class=\"anchor\" id=\"line-455\"></span>instance will reflect these. <span class=\"anchor\" id=\"line-456\"></span><span class=\"anchor\" id=\"line-457\"></span><p class=\"line874\">Here is a simple example of changes performed for an instance: <span class=\"anchor\" id=\"line-458\"></span><span class=\"anchor\" id=\"line-459\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-460\"></span><span class=\"anchor\" id=\"line-461\"></span><span class=\"anchor\" id=\"line-462\"></span><span class=\"anchor\" id=\"line-463\"></span><span class=\"anchor\" id=\"line-464\"></span><span class=\"anchor\" id=\"line-465\"></span><span class=\"anchor\" id=\"line-466\"></span><span class=\"anchor\" id=\"line-467\"></span><span class=\"anchor\" id=\"line-468\"></span><span class=\"anchor\" id=\"line-469\"></span><span class=\"anchor\" id=\"line-470\"></span><span class=\"anchor\" id=\"line-471\"></span><span class=\"anchor\" id=\"line-472\"></span><span class=\"anchor\" id=\"line-473\"></span><span class=\"anchor\" id=\"line-474\"></span><span class=\"anchor\" id=\"line-475\"></span><span class=\"anchor\" id=\"line-476\"></span><span class=\"anchor\" id=\"line-477\"></span><span class=\"anchor\" id=\"line-478\"></span><span class=\"anchor\" id=\"line-479\"></span><span class=\"anchor\" id=\"line-480\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-ea851ef8af5be2306f0947a8671b2ed9e315034b_012\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-ea851ef8af5be2306f0947a8671b2ed9e315034b_012\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">greeting</span> <span class=\"Operator\">=</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">patch</span><span class=\"Operator\">(</span><span class=\"ID\">greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&lt;</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">Mock</span> <span class=\"ID\">object</span> <span class=\"ID\">at</span> <span class=\"Number\">0xb76c608c</span><span class=\"Operator\">&gt;</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hello Jeff!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">greeting</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span><span class=\"String\">'Hello Jeff!'</span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">greeting</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  13 </span><span class=\"String\">'Hi Joe!'</span></span><span class=\"line\"><span class=\"LineNumber\">  14 </span></span><span class=\"line\"><span class=\"LineNumber\">  15 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">type</span><span class=\"Operator\">(</span><span class=\"ID\">greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  16 </span><span class=\"Operator\">&lt;</span><span class=\"ResWord\">class</span> <span class=\"String\">'__main__.Greeting'</span><span class=\"Operator\">&gt;</span></span><span class=\"line\"><span class=\"LineNumber\">  17 </span></span><span class=\"line\"><span class=\"LineNumber\">  18 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">restore</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  19 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">greeting</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Jeff\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  20 </span><span class=\"String\">'Hi Jeff!'</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-481\"></span><span class=\"anchor\" id=\"line-482\"></span><p class=\"line862\">As explained in the <em>Basis</em> section, changes are fully undone when <span class=\"anchor\" id=\"line-483\"></span>the mocker is restored. <span class=\"anchor\" id=\"line-484\"></span><span class=\"anchor\" id=\"line-485\"></span><p class=\"line862\">Mocked expressions may easily <em>passthrough</em> to the real object, using <span class=\"anchor\" id=\"line-486\"></span>the <em>mocker.passthrough()</em> method, as previously explained. <span class=\"anchor\" id=\"line-487\"></span><span class=\"anchor\" id=\"line-488\"></span><span class=\"anchor\" id=\"line-489\"></span><p class=\"line867\"><h3 id=\"head-a6bf69501920fd40fe30e73e414444cc533ba13d\">Specification checking for API conformance</h3><span class=\"anchor\" id=\"line-490\"></span><span class=\"anchor\" id=\"line-491\"></span><p class=\"line874\">One issue with using mock objects is that, depending on the amount of <span class=\"anchor\" id=\"line-492\"></span>integration test performed, real objects may diverge from the mocked <span class=\"anchor\" id=\"line-493\"></span>objects, and this might go unnoticed for a while.  Mocker tries to <span class=\"anchor\" id=\"line-494\"></span>minimize that situation by allowing method calls to be checked for <span class=\"anchor\" id=\"line-495\"></span>conformance against the real object.  These checks may be easily <span class=\"anchor\" id=\"line-496\"></span>enabled for pure mock objects, and are performed by default with <span class=\"anchor\" id=\"line-497\"></span>proxies and patched objects (it's possible to disable these; see the <span class=\"anchor\" id=\"line-498\"></span>API documentation for more information). <span class=\"anchor\" id=\"line-499\"></span><span class=\"anchor\" id=\"line-500\"></span><p class=\"line874\">Here is an example: <span class=\"anchor\" id=\"line-501\"></span><span class=\"anchor\" id=\"line-502\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-503\"></span><span class=\"anchor\" id=\"line-504\"></span><span class=\"anchor\" id=\"line-505\"></span><span class=\"anchor\" id=\"line-506\"></span><span class=\"anchor\" id=\"line-507\"></span><span class=\"anchor\" id=\"line-508\"></span><span class=\"anchor\" id=\"line-509\"></span><span class=\"anchor\" id=\"line-510\"></span><span class=\"anchor\" id=\"line-511\"></span><span class=\"anchor\" id=\"line-512\"></span><span class=\"anchor\" id=\"line-513\"></span><span class=\"anchor\" id=\"line-514\"></span><span class=\"anchor\" id=\"line-515\"></span><span class=\"anchor\" id=\"line-516\"></span><span class=\"anchor\" id=\"line-517\"></span><span class=\"anchor\" id=\"line-518\"></span><span class=\"anchor\" id=\"line-519\"></span><span class=\"anchor\" id=\"line-520\"></span><span class=\"anchor\" id=\"line-521\"></span><span class=\"anchor\" id=\"line-522\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-263aa398011aed4958adc6720419bf6d6b231154_013\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-263aa398011aed4958adc6720419bf6d6b231154_013\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">class</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">(</span><span class=\"ID\">object</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>     <span class=\"ResWord\">def</span> <span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">,</span> <span class=\"ID\">name</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>         <span class=\"ResWord\">return</span> <span class=\"String\">\"Hi %s!\"</span> <span class=\"Operator\">%</span> <span class=\"ID\">name</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"ID\">Greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">,</span> <span class=\"String\">\"what?\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">\"Joe\"</span><span class=\"Operator\">,</span> <span class=\"String\">\"what?\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  13 </span><span class=\"ID\">Traceback</span> <span class=\"Operator\">(</span><span class=\"ID\">most</span> <span class=\"ID\">recent</span> <span class=\"ID\">call</span> <span class=\"ID\">last</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  14 </span>  <span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">  15 </span><span class=\"ID\">AssertionError</span><span class=\"Operator\">:</span> <span class=\"Operator\">[</span><span class=\"ID\">Mocker</span><span class=\"Operator\">]</span> <span class=\"ID\">Unmet</span> <span class=\"ID\">expectation</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">  16 </span></span><span class=\"line\"><span class=\"LineNumber\">  17 </span><span class=\"Operator\">=</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"String\">'Joe'</span><span class=\"Operator\">,</span> <span class=\"String\">'what?'</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  18 </span> <span class=\"Operator\">-</span> <span class=\"ID\">Specification</span> <span class=\"ResWord\">is</span> <span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"ID\">name</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span> <span class=\"ID\">too</span> <span class=\"ID\">many</span> <span class=\"ID\">args</span> <span class=\"ID\">provided</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-523\"></span><span class=\"anchor\" id=\"line-524\"></span><p class=\"line862\">Notice that passing the spec as the first parameter of the <em>mock()</em> method <span class=\"anchor\" id=\"line-525\"></span>will also enable the type simulation, as explained in the next section.  To <span class=\"anchor\" id=\"line-526\"></span>perform <em>just</em> specification checking, use the <em>spec</em> keyword argument <span class=\"anchor\" id=\"line-527\"></span>explicitly. <span class=\"anchor\" id=\"line-528\"></span><span class=\"anchor\" id=\"line-529\"></span><p class=\"line874\">To disable specification checking for a specific expression, Mocker <span class=\"anchor\" id=\"line-530\"></span>offers the <em>nospec()</em> method.  It's also possible to disable these <span class=\"anchor\" id=\"line-531\"></span>checks on proxies and patched objects using <em>spec=None</em> when buildling <span class=\"anchor\" id=\"line-532\"></span>these. <span class=\"anchor\" id=\"line-533\"></span><span class=\"anchor\" id=\"line-534\"></span><span class=\"anchor\" id=\"line-535\"></span><p class=\"line867\"><h3 id=\"head-d5f3e7a31a406ee658f82807bed111545e3c4522\">Type simulation</h3><span class=\"anchor\" id=\"line-536\"></span><span class=\"anchor\" id=\"line-537\"></span><p class=\"line862\">It's possible to ask Mocker to <em>lie</em> when its <em>_<tt class=\"backtick\"></tt>_class_<tt class=\"backtick\"></tt>_</em> attribute <span class=\"anchor\" id=\"line-538\"></span>is accessed.  This makes it easier to perform type-related checks in the <span class=\"anchor\" id=\"line-539\"></span>implementation while still using mock objects. <span class=\"anchor\" id=\"line-540\"></span><span class=\"anchor\" id=\"line-541\"></span><p class=\"line874\">This is enabled by default on proxies, and may be easily requested with <span class=\"anchor\" id=\"line-542\"></span>pure mock objects, as follows: <span class=\"anchor\" id=\"line-543\"></span><span class=\"anchor\" id=\"line-544\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-545\"></span><span class=\"anchor\" id=\"line-546\"></span><span class=\"anchor\" id=\"line-547\"></span><span class=\"anchor\" id=\"line-548\"></span><span class=\"anchor\" id=\"line-549\"></span><span class=\"anchor\" id=\"line-550\"></span><span class=\"anchor\" id=\"line-551\"></span><span class=\"anchor\" id=\"line-552\"></span><span class=\"anchor\" id=\"line-553\"></span><span class=\"anchor\" id=\"line-554\"></span><span class=\"anchor\" id=\"line-555\"></span><span class=\"anchor\" id=\"line-556\"></span><span class=\"anchor\" id=\"line-557\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-24aca9ac46245e8804c953dfac23943538b0dd88_014\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-24aca9ac46245e8804c953dfac23943538b0dd88_014\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"ID\">Greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">__class__</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">&lt;</span><span class=\"ResWord\">class</span> <span class=\"String\">'__main__.Greeting'</span><span class=\"Operator\">&gt;</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">isinstance</span><span class=\"Operator\">(</span><span class=\"ID\">obj</span><span class=\"Operator\">,</span> <span class=\"ID\">Greeting</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   9 </span><span class=\"ID\">True</span></span><span class=\"line\"><span class=\"LineNumber\">  10 </span></span><span class=\"line\"><span class=\"LineNumber\">  11 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ID\">type</span><span class=\"Operator\">(</span><span class=\"ID\">obj</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">  12 </span><span class=\"Operator\">&lt;</span><span class=\"ResWord\">class</span> <span class=\"String\">'mocker.Mock'</span><span class=\"Operator\">&gt;</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-558\"></span><span class=\"anchor\" id=\"line-559\"></span><p class=\"line862\">Note how <em>type()</em> will still reveal the truth.  Also, the first argument <span class=\"anchor\" id=\"line-560\"></span>to <em>mock()</em> will enable specification checking (see previous section).  Use <span class=\"anchor\" id=\"line-561\"></span>the <em>type</em> keyword argument if you really want just type simulation. <span class=\"anchor\" id=\"line-562\"></span><span class=\"anchor\" id=\"line-563\"></span><span class=\"anchor\" id=\"line-564\"></span><p class=\"line867\"><h3 id=\"head-035566b41c7f96cf0815a339eb9b23c1346a1fd9\">Extension to unittest.TestCase</h3><span class=\"anchor\" id=\"line-565\"></span><span class=\"anchor\" id=\"line-566\"></span><p class=\"line862\">Mocker offers <em><a class=\"nonexistent\" href=\"/MockerTestCase\">MockerTestCase</a></em>, which is a handy subclass of <span class=\"anchor\" id=\"line-567\"></span><em>unittest.<a class=\"nonexistent\" href=\"/TestCase\">TestCase</a></em> integrating Mocker support.  It's by no means <span class=\"anchor\" id=\"line-568\"></span>required for using what Mocker offers, but even then it's definitely a <span class=\"anchor\" id=\"line-569\"></span>convenient integration. <span class=\"anchor\" id=\"line-570\"></span><span class=\"anchor\" id=\"line-571\"></span><p class=\"line862\">Test methods will have a Mocker instance available on <em>self.mocker</em>, <span class=\"anchor\" id=\"line-572\"></span>and at the end of each test method, expectations of the mocker will <span class=\"anchor\" id=\"line-573\"></span>be verified, and any requested changes made to the environment <span class=\"anchor\" id=\"line-574\"></span>will be restored, without any manual intervention. <span class=\"anchor\" id=\"line-575\"></span><span class=\"anchor\" id=\"line-576\"></span><p class=\"line862\">It also offers <em>self.expect</em>, which is an alias for the <em>expect()</em> <span class=\"anchor\" id=\"line-577\"></span>helper. <span class=\"anchor\" id=\"line-578\"></span><span class=\"anchor\" id=\"line-579\"></span><p class=\"line874\">Tests which don't require the mocker will not be affected. <span class=\"anchor\" id=\"line-580\"></span><span class=\"anchor\" id=\"line-581\"></span><p class=\"line874\">Here is a short example: <span class=\"anchor\" id=\"line-582\"></span><span class=\"anchor\" id=\"line-583\"></span><p class=\"line867\"><span class=\"anchor\" id=\"line-584\"></span><span class=\"anchor\" id=\"line-585\"></span><span class=\"anchor\" id=\"line-586\"></span><span class=\"anchor\" id=\"line-587\"></span><span class=\"anchor\" id=\"line-588\"></span><span class=\"anchor\" id=\"line-589\"></span><span class=\"anchor\" id=\"line-590\"></span><span class=\"anchor\" id=\"line-591\"></span><span class=\"anchor\" id=\"line-592\"></span><span class=\"anchor\" id=\"line-593\"></span><div class=\"codearea\" dir=\"ltr\" lang=\"en\"><script type=\"text/javascript\">document.write('<a href=\"#\" onclick=\"return togglenumber(\\'CA-1c4a979d730520ebeb7295fd08a1fc6a6a3e46be_015\\', 1, 1);\" \\                class=\"codenumbers\">Toggle line numbers<\\/a>');</script><pre dir=\"ltr\" id=\"CA-1c4a979d730520ebeb7295fd08a1fc6a6a3e46be_015\" lang=\"en\"><span class=\"line\"><span class=\"LineNumber\">   1 </span><span class=\"Operator\">&gt;&gt;</span><span class=\"Operator\">&gt;</span> <span class=\"ResWord\">class</span> <span class=\"ID\">SampleTest</span><span class=\"Operator\">(</span><span class=\"ID\">MockerTestCase</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   2 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span></span><span class=\"line\"><span class=\"LineNumber\">   3 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>    <span class=\"ResWord\">def</span> <span class=\"ID\">test_hello</span><span class=\"Operator\">(</span><span class=\"ID\">self</span><span class=\"Operator\">)</span><span class=\"Operator\">:</span></span><span class=\"line\"><span class=\"LineNumber\">   4 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>        <span class=\"ID\">obj</span> <span class=\"Operator\">=</span> <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">mock</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   5 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>        <span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   6 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>        <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">result</span><span class=\"Operator\">(</span><span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   7 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>        <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">mocker</span><span class=\"Operator\">.</span><span class=\"ID\">replay</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span></span><span class=\"line\"><span class=\"LineNumber\">   8 </span><span class=\"Operator\">.</span><span class=\"Operator\">.</span><span class=\"Operator\">.</span>        <span class=\"ID\">self</span><span class=\"Operator\">.</span><span class=\"ID\">assertEquals</span><span class=\"Operator\">(</span><span class=\"ID\">obj</span><span class=\"Operator\">.</span><span class=\"ID\">hello</span><span class=\"Operator\">(</span><span class=\"Operator\">)</span><span class=\"Operator\">,</span> <span class=\"String\">\"Hi!\"</span><span class=\"Operator\">)</span><span class=\"Text\"></span></span></pre></div><span class=\"anchor\" id=\"line-594\"></span><span class=\"anchor\" id=\"line-595\"></span><p class=\"line874\">In addition to the integration with Mocker, this class provides <span class=\"anchor\" id=\"line-596\"></span>a few additional helper methods, which make it interesting even <span class=\"anchor\" id=\"line-597\"></span>when Mocker itself isn't needed. <span class=\"anchor\" id=\"line-598\"></span><span class=\"anchor\" id=\"line-599\"></span><ul><li><p class=\"line891\"><strong>assertIs(first, second)</strong> - Asserts that <em>first</em> is the same object as <em>second</em>. <span class=\"anchor\" id=\"line-600\"></span></li><li><p class=\"line891\"><strong>assertIsInstance(obj, cls)</strong> - Asserts that <em>obj</em> is an instance of <em>cls</em>. <span class=\"anchor\" id=\"line-601\"></span></li><li><p class=\"line891\"><strong>assertIn(first, second)</strong> - Asserts that <em>first</em> is contained in <em>second</em>. <span class=\"anchor\" id=\"line-602\"></span></li><li><p class=\"line891\"><strong>assertStartsWith(first, second)</strong> - Asserts that <em>first</em> starts with <em>second</em>. <span class=\"anchor\" id=\"line-603\"></span></li><li><p class=\"line891\"><strong>assertEndsWith(first, second)</strong> - Asserts that <em>first</em> ends with <em>second</em>. <span class=\"anchor\" id=\"line-604\"></span></li><li><p class=\"line891\"><strong>assertApproximates(first, second, tolerance)</strong> - Asserts that <em>first</em> is near <em>second</em> by at most the given <em>tolerance</em>. <span class=\"anchor\" id=\"line-605\"></span></li><li><p class=\"line891\"><strong>assertMethodsMatch(first, second)</strong> - Asserts that methods of class <em>first</em> exist in class <em>second</em>, and take precisely the same arguments. <span class=\"anchor\" id=\"line-606\"></span></li><li><p class=\"line891\"><strong>makeFile(content=None, suffix=\"\", prefix=\"tmp\", basename=None, dirname=None, path=None)</strong> - Creates a file (if content is not None) with the given information and returns its filename. The file is removed after the test method returns. <span class=\"anchor\" id=\"line-607\"></span></li><li><p class=\"line891\"><strong>makeDir(suffix=\"\", prefix=\"tmp\", dirname=None, path=None)</strong> - Creates a temporary directory and returns its name. The directory and its contents are removed after the test method returns. <span class=\"anchor\" id=\"line-608\"></span></li><li><p class=\"line891\"><strong>addCleanup(func, *args, **kwargs)</strong> - After the test method is finished, ensure that <em>func(*args, **args)</em> is called. <span class=\"anchor\" id=\"line-609\"></span><span class=\"anchor\" id=\"line-610\"></span></li></ul><p class=\"line874\">In addition to these, the following extensions to standard modules were <span class=\"anchor\" id=\"line-611\"></span>made: <span class=\"anchor\" id=\"line-612\"></span><span class=\"anchor\" id=\"line-613\"></span><ul><li><p class=\"line891\"><strong>assertRaises(exc, func=None, *args, **kwargs)</strong> - In addition to the standard features, this method returns the raised exception so that further tests on it may be done. Also, it supports the Python 2.7/3.2 use of assertRaises() with a single argument, so that it can be used as: <span class=\"anchor\" id=\"line-614\"></span><ul><li style=\"list-style-type:none\"><span class=\"anchor\" id=\"line-615\"></span><span class=\"anchor\" id=\"line-616\"></span><span class=\"anchor\" id=\"line-617\"></span><pre>    with self.assertRaises(MyException):        raising_logic()</pre><span class=\"anchor\" id=\"line-618\"></span><span class=\"anchor\" id=\"line-619\"></span></li></ul></li><li class=\"gap\"><p class=\"line891\"><strong>assertRaisesRegexp(exc, regexp, func=None, *args, **kwargs)</strong> - Works very similarly to <em>assertRaises()</em>, but will also ensure that str(error) matches the provided regular expression. <span class=\"anchor\" id=\"line-620\"></span><span class=\"anchor\" id=\"line-621\"></span></li></ul><p class=\"line874\">All of the expected negations and aliases for these methods are also <span class=\"anchor\" id=\"line-622\"></span>available (note that one of them is spelled <em>assertIsNot</em>, rather than <span class=\"anchor\" id=\"line-623\"></span><em>assertNotIs</em>, for obvious reasons). <span class=\"anchor\" id=\"line-624\"></span><span class=\"anchor\" id=\"line-625\"></span><p class=\"line867\"><img alt=\"{i}\" height=\"16\" src=\"/moin//labixtheme/img/icon-info.png\" title=\"{i}\" width=\"16\" />  Credits for the <em>assertApproximates()</em> idea go to Twisted's Trial. <span class=\"anchor\" id=\"line-626\"></span><span class=\"anchor\" id=\"bottom\"></span></div><p id=\"pageinfo\" class=\"info\" lang=\"en\" dir=\"ltr\">mocker  (last edited 2010-11-15 14:46:21 by <span title=\"GustavoNiemeyer @ 189-10-175-46.pltce701.dsl.brasiltelecom.net.br[189.10.175.46]\"><a class=\"nonexistent\" href=\"/GustavoNiemeyer\" title=\"GustavoNiemeyer @ 189-10-175-46.pltce701.dsl.brasiltelecom.net.br[189.10.175.46]\">GustavoNiemeyer</a></span>)</p><div id=\"pagebottom\"></div></div><div id=\"footer\"><ul id=\"credits\"><li><a href=\"http://moinmo.in/\" title=\"This site uses the MoinMoin Wiki software.\">MoinMoin Powered</a></li><li><a href=\"http://moinmo.in/Python\" title=\"MoinMoin is written in Python.\">Python Powered</a></li><li><a href=\"http://moinmo.in/GPL\" title=\"MoinMoin is GPL licensed.\">GPL licensed</a></li><li><a href=\"http://validator.w3.org/check?uri=referer\" title=\"Click here to validate this page.\">Valid HTML 4.01</a></li></ul></div><script type=\"text/javascript\">var gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\");document.write(unescape(\"%3Cscript src='\" + gaJsHost + \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));</script><script type=\"text/javascript\">var pageTracker = _gat._getTracker(\"UA-3731229-3\");pageTracker._initData();pageTracker._trackPageview();</script></body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "robotframework-pabot",
  "url": "https://pabot.org",
  "html": "<!DOCTYPE html><html><head><link rel=\"shortcut icon\" href=\"/pabot.ico\" /><title>Pabot</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><!-- Global site tag (gtag.js) - Google Analytics --><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-141142606-1\"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-141142606-1', { 'anonymize_ip': true });</script><style>body {    font-family: monospace;}@keyframes zoom {    from {        transform: scale(0.1);    }    to {        transform: scale(1.0);        opacity: 1;    }}@keyframes zoomLong {    0% {        transform: scale(0.0);    }    30% {        transform: scale(0.0);    }    100% {        transform: scale(1.0);        opacity: 1;    }}.circle-bigrobo {    transform-origin: center;    animation: zoomLong 2.0s ease;}.circle-toprobo {    transform-origin: center;    animation: zoomLong 0.6s ease;}.circle-bottomrobo {    transform-origin: center;    animation: zoomLong 0.8s ease;}.circle-leftrobo {    transform-origin: center;    animation: zoomLong 1.0s ease;}@keyframes dash {  to {    stroke-dashoffset: 0;  }}.path1 {  stroke-dasharray: 1000;  stroke-dashoffset: 1000;  animation: dash 5s linear 2.3s forwards;}.path2 {  stroke-dasharray: 1000;  stroke-dashoffset: 1000;  animation: dash 5s linear 2.7s forwards;}.path3 {  stroke-dasharray: 1000;  stroke-dashoffset: 1000;  animation: dash 5s linear 2.5s forwards;}@keyframes fadein {    0% {        opacity: 0;    }    50% {        opacity: 0;    }    100% {        opacity: 1;    }}.bigrobo {    animation: fadein 2.7s ease, shake 0.6s both 3.4s;}@keyframes shake {  10%, 90% {    transform: translate3d(-1px, 0, 0);  }    20%, 80% {    transform: translate3d(2px, 0, 0);  }  30%, 50%, 70% {    transform: translate3d(-4px, 0, 0);  }  40%, 60% {    transform: translate3d(4px, 0, 0);  }}.minirobo1 {    animation: fadein 1.2s ease, shake 0.6s both 2.7s;}.minirobo2 {    animation: fadein 1.6s ease, shake 0.6s both 2.9s;}.minirobo3 {    animation: fadein 2.0s ease, shake 0.6s both 3.1s;}.flexbox {    display: flex;    align-items: center;    justify-content: center;    width: 100%;}.flexcolumn {    display: flex;    flex-direction: column;    align-items: center;    justify-content: center;    height: 100%;}.content {    margin: 1rem;    display: flex;    flex-direction: column;    justify-content: center;    align-items: center;    text-align: center;}.code {    margin: 1rem;    display: flex;    border: 2px solid black;    border-radius: 6px;    align-items: stretch;    justify-content: center;    background-color: #f0f0f0;}@media (hover: hover) {    .code:hover {        opacity: 0.8;    }}.disabled {    filter: blur(2px);}.codetitle {    display: flex;    align-items: center;    background-color: black;    color: white;    font-weight: bold;    padding: 8px;}.codecontent {    text-align: left;    color: black;    padding: 8px;    flex-basis: 100%;    transition: 150ms filter linear;}.example {    border-radius: 6px;    display: flex;    justify-content: center;    flex-wrap: wrap;    background-color: black;    color: white;}.consoleOutput {    display: flex;    flex-direction: column;    align-items: flex-start;    margin: 0.5rem;}#oldConsoleOutput {    margin: 0;}#newConsoleOutput {    transition: 100ms opacity linear;}.invisible {    opacity: 0;    visibility: hidden;}pre {    text-align: left;    min-width: 240px;    margin: 0;    transition: 100ms color linear;}@media (max-width: 320px) {    pre {        font-size: 10px;    }}</style></head><body>    <div class=\"flexbox\">    <svg width=\"378px\" height=\"373px\" viewBox=\"0 0 378 373\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">        <title>Pabot</title>        <g id=\"pabot\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">            <circle class=\"circle-toprobo\" id=\"Oval\" fill=\"#000000\" fill-rule=\"nonzero\" cx=\"269.5\" cy=\"90.5\" r=\"62.5\"></circle>            <circle class=\"circle-bottomrobo\" id=\"Oval\" fill=\"#000000\" fill-rule=\"nonzero\" cx=\"251.5\" cy=\"301.5\" r=\"62.5\"></circle>            <circle class=\"circle-leftrobo\" id=\"Oval\" fill=\"#000000\" fill-rule=\"nonzero\" cx=\"92.5\" cy=\"228.5\" r=\"62.5\"></circle>            <circle class=\"circle-bigrobo\" id=\"Oval\" fill=\"#000000\" fill-rule=\"nonzero\" cx=\"189.5\" cy=\"187.5\" r=\"91.5\"></circle>            <path class=\"path1\" d=\"M149,218 L110,233\" id=\"Line-3\" stroke=\"#FFFFFF\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\"></path>            <path class=\"path2\" d=\"M220.5,158.5 L255,108\" id=\"Line-4\" stroke=\"#FFFFFF\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\"></path>            <path class=\"path3\" d=\"M215,223 L243,279\" id=\"Line-5\" stroke=\"#FFFFFF\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\"></path>            <g class=\"bigrobo\" id=\"Group\" fill=\"#FFFFFF\" fill-rule=\"nonzero\" stroke=\"#FFFFFF\" stroke-width=\"8\">                <rect id=\"Rectangle\" x=\"0\" y=\"0\" width=\"80\" height=\"80\" rx=\"8\" transform=\"translate(149.000000, 148.000000)\"></rect>                <path d=\"M182.269231,163.3 L182.269231,168.15\" id=\"Line-2\" stroke=\"#000000\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\"></path>                <path d=\"M211.269231,163.3 L211.269231,168.15\" id=\"Line-2\" stroke=\"#000000\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\" transform=\"translate(211.000000, 166.000000) scale(-1, 1) translate(-211.000000, -166.000000) \"></path>                <path d=\"M182.269231,218 L211,217.5\" id=\"Line\" stroke=\"#000000\" stroke-width=\"8\" stroke-linecap=\"round\" fill-rule=\"nonzero\"></path>            </g>            <g class=\"minirobo1\" id=\"Group\" fill-rule=\"nonzero\" stroke-width=\"8\">                <rect transform=\"translate(69.000000, 206.000000)\" id=\"Rectangle\" stroke=\"#FFFFFF\" fill=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"44\" height=\"44\" rx=\"8\"></rect>                <path transform=\"translate(69.000000, 206.000000)\" d=\"M4,36.5 L33,36.5\" id=\"Line\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(69.000000, 206.000000)\" d=\"M4.26923077,17.3 L4.26923077,22.15\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(69.000000, 206.000000)\" d=\"M33.2692308,17.3 L33.2692308,22.15\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\" transform=\"translate(33.000000, 20.000000) scale(-1, 1) translate(-33.000000, -20.000000) \"></path>            </g>            <g class=\"minirobo2\" id=\"Group\" fill-rule=\"nonzero\" stroke-width=\"8\">                <rect transform=\"translate(229.000000, 279.000000)\" id=\"Rectangle\" stroke=\"#FFFFFF\" fill=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"44\" height=\"44\" rx=\"8\"></rect>                <path transform=\"translate(229.000000, 279.000000)\" d=\"M7,31.5 L36,31.5\" id=\"Line\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(229.000000, 279.000000)\" d=\"M7.26923077,12.3 L7.26923077,18\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(229.000000, 279.000000)\" d=\"M36.2692308,12.3 L36.2692308,18\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\" transform=\"translate(36.000000, 15.000000) scale(-1, 1) translate(-36.000000, -15.000000) \"></path>            </g>            <g class=\"minirobo3\" id=\"Group\" fill-rule=\"nonzero\" stroke-width=\"8\">                <rect transform=\"translate(247.000000, 68.000000)\" id=\"Rectangle\" stroke=\"#FFFFFF\" fill=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"44\" height=\"44\" rx=\"8\"></rect>                <path transform=\"translate(247.000000, 68.000000)\" d=\"M9,27.5 L38,27.5\" id=\"Line\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(247.000000, 68.000000)\" d=\"M9.26923077,7.3 L9.26923077,13\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\"></path>                <path transform=\"translate(247.000000, 68.000000)\" d=\"M38.2692308,7.3 L38.2692308,13\" id=\"Line-2\" stroke=\"#000000\" stroke-linecap=\"round\" transform=\"translate(38.000000, 10.000000) scale(-1, 1) translate(-38.000000, -10.000000) \"></path>            </g>        </g>    </svg>    <div class=\"flexcolumn\">    <h1>Pabot</h1>    <a href=\"https://github.com/mkorpela/pabot\">GitHub</a>    </div>    </div>    <div class=\"content\">            <p>A parallel executor for <a href=\"https://robotframework.org\">Robot Framework</a> tests.            Split one execution into multiple and save test execution time.</p>            <div class=\"code\" onclick=\"installClick()\">            <div class=\"codetitle\"><div>Install</div></div>            <div class=\"codecontent\" id=\"installContent\">pip install -U robotframework-pabot</div>            </div>                        <h2>Example</h2>            <div class=\"example\"><div class=\"controls\">    <div class=\"code\" onclick=\"pabotClick()\">        <div class=\"codecontent\" id=\"pabotContent\">> pabot suites</div>    </div>        <p>VS.</p>    <div class=\"code\" onclick=\"pabot2Click()\">        <div class=\"codecontent\" id=\"pabot2Content\">> pabot --testlevelsplit suites</div>    </div>        <p>VS.</p>    <div class=\"code\" onclick=\"robotClick()\">        <div class=\"codecontent\" id=\"robotContent\">> robot suites</div>    </div></div><div class=\"consoleOutput\"><pre id=\"oldConsoleOutput\"></pre><div id=\"newConsoleOutput\"></div></div><div class=\"consoleOutput\"><pre>.</pre><pre id=\"S\">o-- suites</pre><pre>    |</pre><pre id=\"s1\">    o-- suite1.robot</pre><pre>    |   |</pre><pre id=\"t1\">    |   o-- Test 1</pre><pre>    |   |</pre><pre id=\"t2\">    |   o-- Test 2</pre><pre>    |</pre><pre id=\"s2\">    o-- suite2.robot</pre><pre>        |</pre><pre id=\"t3\">        o-- Test 3</pre><pre>        |</pre><pre id=\"t4\">        o-- Test 4</pre></div></div>        </div>    </div></body><script>const robotOutput = `====================================##Suites                              #S#yellow====================================##Suites.Suite1                       #s1#yellow====================================##Test 1                      | PASS |#t1#yellow------------------------------------##Test 2                      | PASS |#t2#yellow------------------------------------##Suites.Suite1               | PASS |#s1#yellow2 critical tests, 2 passed, 0 failed##2 tests total, 2 passed, 0 failed##====================================##Suites.Suite2                       #s2#yellow====================================##Test 3                      | PASS |#t3#yellow------------------------------------##Test 4                      | PASS |#t4#yellow------------------------------------##Suites.Suite2               | PASS |#s2#yellow2 critical tests, 2 passed, 0 failed##2 tests total, 2 passed, 0 failed##====================================##Suites                      | PASS |#S#yellow4 critical tests, 4 passed, 0 failed##4 tests total, 4 passed, 0 failed##====================================##Output:  /output.xml##Log:     /log.html##Report:  /report.html##`;const pabotOutput = `[PID:6] [0] EXECUTING Suites.Suite1#S&s1&t1&t2&s1&S#yellow[PID:7] [1] EXECUTING Suites.Suite2#S&s2&t3&t4&s2&S#cyan[PID:7] [1] PASSED Suites.Suite2##cyan[PID:6] [0] PASSED Suites.Suite1##yellowOutput:  /output.xml##Log:     /log.html##Report:  /report.html##Total testing: 16.20 seconds##Elapsed time:  9.10 seconds##`;const pabot2Output = `[PID:9] [0] EXECUTING Suites.Suite2.Test 4#S&s2&t4&s2&S#violet[PID:7] [1] EXECUTING Suites.Suite2.Test 3#S&s2&t3&s2&S#greenyellow[PID:8] [2] EXECUTING Suites.Suite1.Test 1#S&s1&t1&s1&S#yellow[PID:2] [3] EXECUTING Suites.Suite1.Test 2#S&s1&t2&s1&S#cyan[PID:9] [0] PASSED Suites.Suite2.Test 4##violet[PID:2] [3] PASSED Suites.Suite1.Test 2##cyan[PID:7] [1] PASSED Suites.Suite2.Test 3##greenyellow[PID:8] [2] PASSED Suites.Suite1.Test 1##yellowOutput:  /output.xml##Log:     /log.html##Report:  /report.html##Total testing: 18.80 seconds##Elapsed time:  7.27 seconds##`;    function clickAnimate(label, id, fullText) {        gtag('event', 'Click', {        'event_category': 'Button',        'event_label': label        });        const elem = document.getElementById(id);        const width = elem.offsetWidth;        const height = elem.offsetHeight;        elem.textContent = \"_\";        elem.style.width = (width - 16) + \"px\";        elem.style.height = (height - 16) + \"px\";        let index = 0;        return new Promise((resolve, reject) => {            const intervalId = setInterval(() => {                index++;                if (index === fullText.length) {                    elem.textContent = fullText;                    elem.style.width = null;                    elem.style.height = null;                    clearInterval(intervalId);                    resolve();                    return;                }                elem.textContent = fullText.slice(0, index) + (index % 2 ? \"_\" : \"\");            }, 70);        })    }    function installClick() {        clickAnimate(\"Install\", \"installContent\", \"pip install -U robotframework-pabot\");    }    const oldConsole = document.getElementById(\"oldConsoleOutput\");    const newConsole = document.getElementById(\"newConsoleOutput\");    const treeSuites = document.getElementById(\"Suites\");    function animateOutput(output, instructions) {        return () => {        let i = 1;        let j = 0;        let delay = 0;        let treeids = [];        const lines = output.split(\"\\n\").map(line => line.split(\"#\"));        const helps = instructions || [];        const drawCycle = (resolve) => {            while (newConsole.firstChild) { newConsole.removeChild(newConsole.firstChild); }            treeids.forEach((id) => {document.getElementById(id).style.color = null;});            if (helps.length > 0) {                let helpItem = helps.shift();                i += helpItem[0];                delay = helpItem[1]*1000;            } else {                i++;                delay = 0;            }            let oldOutput = lines.slice(0, j).map(l => l[0]).join(\"\\n\");            let newOutput = lines.slice(j, i).map(l => {                let elem = document.createElement(\"pre\");                elem.textContent = l[0];                elem.style.color = l[2];                return elem;                }            );            oldConsole.textContent = oldOutput;            newOutput.forEach(elem => { newConsole.appendChild(elem); });            if (newOutput.length > 0) {                newConsole.className = \"invisible\";                setTimeout(() => {                    newConsole.className = \"\";                    treeids = [];                    lines.slice(j, i).forEach((item, rowIndex) => {                        if (item && item.length === 3 && item[1].length > 0) {                            item[1].split(\"&\").forEach((subitem, index, arr) => {                                setTimeout(() => {                                    if (index > 0) {                                        document.getElementById(arr[index-1]).style.color = null;                                    };                                    document.getElementById(subitem).style.color = item[2];                                    treeids.push(subitem);                                    }, index*delay/(arr.length)+rowIndex*200);                            })                        }                    });                    j = i;                    setTimeout(() => drawCycle(resolve), delay);                }, 200);            } else {                resolve();            }        };        return new Promise((resolve, reject) => { drawCycle(resolve); })};    }    let executing = false;    function demoClick(other1, other2, label, id, fullText, output, instructions, delay) {        if (executing) { return; }        executing = true;        other1_origClass = other1.className;        other2_origClass = other2.className;        other1.className += \" disabled\";        other2.className += \" disabled\";        oldConsole.textContent = \"\";        newConsole.textContent = \"\";        clickAnimate(label, id, fullText).        then(animateOutput(output, instructions, delay)).        then(() => {            other1.className = other1_origClass;            other2.className = other2_origClass;            executing = false;        });    }    const pc = document.getElementById(\"pabotContent\");    const pcOrigClass = pc.className;    const p2c = document.getElementById(\"pabot2Content\");    const p2cOrigClass = p2c.className;    const rc = document.getElementById(\"robotContent\");    const rcOrigClass = rc.className;    function robotClick() {        demoClick(pc, p2c,        \"Robot\", \"robotContent\", \"> robot suites\",        robotOutput, [2, 2, 2, 2, 4, 2, 2, 2, 4, 4,3].map(i => [i, 1]));    }    function pabotClick() {        demoClick(rc, p2c,        \"Pabot\", \"pabotContent\", \"> pabot suites\",        pabotOutput, [[1, 7], [2, 1], [5,1]]);    }    function pabot2Click() {        demoClick(rc, pc,         \"PabotTestLevel\", \"pabot2Content\", \"> pabot --testlevelsplit suites\",         pabot2Output, [[3, 4], [4, 1], [5, 1]]);    }</script></html>",
  "embeddings": []
}
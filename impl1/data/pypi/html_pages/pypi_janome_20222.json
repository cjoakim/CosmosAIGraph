{
  "libtype": "pypi",
  "libname": "janome",
  "url": "https://mocobeta.github.io/janome/en/",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /><meta content=\"Janome (\u86c7\u306e\u76ee; \u25c9) is a Japanese morphological analysis engine (or tokenizer, pos-tagger) written in pure Python including the built-in dictionary and the language model. We aim to build a library which is easy to install and provides concise, well-designed APIs for various python applications.\" name=\"description\" /><meta content=\"python, janome, pos tagger, tokenizer, morphological analysis, japanese\" name=\"keywords\" /><meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />    <title>Welcome to janome\u2019s documentation! (English) &#8212; Janome v0.4 documentation (en)</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/haiku.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/custom.css\" />    <script data-url_root=\"./\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script src=\"_static/sphinx_highlight.js\"></script>    <link rel=\"icon\" href=\"_static/bronze-25C9.png\"/>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />   </head><body>      <div class=\"header\" role=\"banner\"><h1 class=\"heading\"><a href=\"#\">          <span>Janome v0.4 documentation (en)</span></a></h1>        <h2 class=\"heading\"><span>Welcome to janome\u2019s documentation! (English)</span></h2>      </div>      <div class=\"topnav\" role=\"navigation\" aria-label=\"top navigation\">              <p>        <a class=\"uplink\" href=\"#\">Contents</a>        </p>      </div>      <div class=\"content\" role=\"main\">                  <a href=\"https://github.com/mocobeta/janome\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\"></a><section id=\"welcome-to-janome-s-documentation-english\"><h1>Welcome to janome\u2019s documentation! (English)<a class=\"headerlink\" href=\"#welcome-to-janome-s-documentation-english\" title=\"Permalink to this heading\">\u00b6</a></h1><p><a class=\"reference external\" href=\"http://mocobeta.github.io/janome/\">\u65e5\u672c\u8a9e</a></p><section id=\"what-s-janome\"><h2>What\u2019s Janome?<a class=\"headerlink\" href=\"#what-s-janome\" title=\"Permalink to this heading\">\u00b6</a></h2><a class=\"reference internal image-reference\" href=\"_images/janome_small.jpg\"><img alt=\"_images/janome_small.jpg\" class=\"align-right\" src=\"_images/janome_small.jpg\" style=\"width: 289.40000000000003px; height: 407.8px;\" /></a><p>Janome (\u86c7\u306e\u76ee; \u25c9) is a Japanese morphological analysis engine (or tokenizer, pos-tagger) written in pure Python including the built-in dictionary and the language model.</p><p>We aim to build a library which is easy to install and provides concise, well-designed APIs for various python applications.</p><p>Janome uses mecab-ipadic-2.7.0-20070801 as the built-in dictionary. Also Japanese new era \u201c\u4ee4\u548c\u201d (Reiwa) has been added to the dictionary since v0.3.8.</p></section><section id=\"source-code\"><h2>Source Code<a class=\"headerlink\" href=\"#source-code\" title=\"Permalink to this heading\">\u00b6</a></h2><p><a class=\"reference external\" href=\"https://github.com/mocobeta/janome\">https://github.com/mocobeta/janome</a></p><p>If you like janome, please star the repository! :)</p></section><section id=\"api-reference\"><h2>API reference<a class=\"headerlink\" href=\"#api-reference\" title=\"Permalink to this heading\">\u00b6</a></h2><p><a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/\">https://mocobeta.github.io/janome/api/</a></p></section><section id=\"requirements\"><h2>Requirements<a class=\"headerlink\" href=\"#requirements\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Python 3.7+ interpreter</p></section><section id=\"latest-version\"><h2>Latest version<a class=\"headerlink\" href=\"#latest-version\" title=\"Permalink to this heading\">\u00b6</a></h2><ul class=\"simple\"><li><p>0.5.0</p></li></ul></section><section id=\"install\"><h2>Install<a class=\"headerlink\" href=\"#install\" title=\"Permalink to this heading\">\u00b6</a></h2><section id=\"pypi\"><h3>PyPI<a class=\"headerlink\" href=\"#pypi\" title=\"Permalink to this heading\">\u00b6</a></h3><p><a class=\"reference external\" href=\"https://pypi.python.org/pypi/Janome\">https://pypi.python.org/pypi/Janome</a></p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>$<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>janome</pre></div></div><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>This requires 500 to 600 MB RAM for pre-compiling the dictionary data.</p></div></section></section><section id=\"usage\"><h2>Usage<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Create janome.tokenizer.Tokenizer object and call tokenize() method with the sentences you want to analyze.</p><p>The return value is a gnerator of Token objects. Token includes morphologic information such as surface form, part-of-speech. See <a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/janome.html#janome.tokenizer.Token\">reference</a> for more details.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061&#39;</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"go\">\u3059\u3082\u3082 \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u3059\u3082\u3082,\u30b9\u30e2\u30e2,\u30b9\u30e2\u30e2</span><span class=\"go\">\u3082    \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u3082,\u30e2,\u30e2</span><span class=\"go\">\u3082\u3082  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u3082\u3082,\u30e2\u30e2,\u30e2\u30e2</span><span class=\"go\">\u3082    \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u3082,\u30e2,\u30e2</span><span class=\"go\">\u3082\u3082  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u3082\u3082,\u30e2\u30e2,\u30e2\u30e2</span><span class=\"go\">\u306e    \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce</span><span class=\"go\">\u3046\u3061  \u540d\u8a5e,\u975e\u81ea\u7acb,\u526f\u8a5e\u53ef\u80fd,*,*,*,\u3046\u3061,\u30a6\u30c1,\u30a6\u30c1</span></pre></div></div><section id=\"for-windows-users\"><h3>for Windows users<a class=\"headerlink\" href=\"#for-windows-users\" title=\"Permalink to this heading\">\u00b6</a></h3><p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">decode('utf8')</span></code> if the output is garbled.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061&#39;</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">))</span></pre></div></div></section></section><section id=\"how-to-use-with-user-defined-dictionary\"><h2>How to use with user defined dictionary<a class=\"headerlink\" href=\"#how-to-use-with-user-defined-dictionary\" title=\"Permalink to this heading\">\u00b6</a></h2><section id=\"mecab-ipadic-format\"><h3>MeCab IPADIC format<a class=\"headerlink\" href=\"#mecab-ipadic-format\" title=\"Permalink to this heading\">\u00b6</a></h3><p>You can add custom entries besides the built-in dictionary at runtime by using user defined dictionary.</p><p>Default dictionary format is equal to MeCab IPADIC format. Create a CSV file as below and pass the file path and the character encoding to Tokenizer\u2019s constructor.</p><p>See the <a class=\"reference external\" href=\"http://taku910.github.io/mecab/dic.html\">MeCab document</a> for more details.</p><p>userdic.csv</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">4569</span><span class=\"p\">,</span><span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u56fa\u6709\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"n\">\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">4700</span><span class=\"p\">,</span><span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u56fa\u6709\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"n\">\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">1288</span><span class=\"p\">,</span><span class=\"mi\">4143</span><span class=\"p\">,</span><span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u56fa\u6709\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad</span></pre></div></div><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">(</span><span class=\"s2\">&quot;userdic.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">udic_enc</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf8&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u3078\u306e\u304a\u8d8a\u3057\u306f\u3001\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3\u300c\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5\u300d\u304c\u4fbf\u5229\u3067\u3059\u3002&#39;</span><span class=\"p\">):</span><span class=\"gp\">... </span>  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"go\">\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc         \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4e00\u822c,*,*,*,\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"go\">\u3078        \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3078,\u30d8,\u30a8</span><span class=\"go\">\u306e        \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce</span><span class=\"go\">\u304a\u8d8a\u3057    \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u304a\u8d8a\u3057,\u30aa\u30b3\u30b7,\u30aa\u30b3\u30b7</span><span class=\"go\">\u306f        \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef</span><span class=\"go\">\u3001        \u8a18\u53f7,\u8aad\u70b9,*,*,*,*,\u3001,\u3001,\u3001</span><span class=\"go\">\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3    \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4e00\u822c,*,*,*,\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3,\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3,\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"go\">\u300c        \u8a18\u53f7,\u62ec\u5f27\u958b,*,*,*,*,\u300c,\u300c,\u300c</span><span class=\"go\">\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5  \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4e00\u822c,*,*,*,\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad</span><span class=\"go\">\u300d        \u8a18\u53f7,\u62ec\u5f27\u9589,*,*,*,*,\u300d,\u300d,\u300d</span><span class=\"go\">\u304c        \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u304c,\u30ac,\u30ac</span><span class=\"go\">\u4fbf\u5229      \u540d\u8a5e,\u5f62\u5bb9\u52d5\u8a5e\u8a9e\u5e79,*,*,*,*,\u4fbf\u5229,\u30d9\u30f3\u30ea,\u30d9\u30f3\u30ea</span><span class=\"go\">\u3067\u3059      \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c7\u30b9,\u57fa\u672c\u5f62,\u3067\u3059,\u30c7\u30b9,\u30c7\u30b9</span><span class=\"go\">\u3002        \u8a18\u53f7,\u53e5\u70b9,*,*,*,*,\u3002,\u3002,\u3002</span></pre></div></div></section><section id=\"simplified-dictionary-format-v0-2-7\"><h3>Simplified dictionary format (v0.2.7+)<a class=\"headerlink\" href=\"#simplified-dictionary-format-v0-2-7\" title=\"Permalink to this heading\">\u00b6</a></h3><p>Janome provides alternative simplified dictionary format similar to <a class=\"reference external\" href=\"https://www.atilika.com/en/kuromoji/\">Kuromoji</a> user dictionary. This format supports surface form, part-of-speech and reading only.</p><p>To use simplified dictionary format, create a CSV file that includes \u201c&lt;surface form&gt;,&lt;part-of-speech&gt;,&lt;reading&gt;\u201d in each line (see the example below) and pass the file path and the dictionary type <code class=\"docutils literal notranslate\"><span class=\"pre\">(udic_type='simpledic')</span></code> to Tokenizer\u2019s constructor.</p><p>user_simpledic.csv</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"p\">,</span><span class=\"n\">\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"n\">\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"p\">,</span><span class=\"n\">\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"n\">\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5</span><span class=\"p\">,</span><span class=\"n\">\u30ab\u30b9\u30bf\u30e0\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad</span></pre></div></div><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">(</span><span class=\"s2\">&quot;user_simpledic.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">udic_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;simpledic&quot;</span><span class=\"p\">,</span> <span class=\"n\">udic_enc</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf8&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u3078\u306e\u304a\u8d8a\u3057\u306f\u3001\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3\u300c\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5\u300d\u304c\u4fbf \u5229\u3067\u3059\u3002&#39;</span><span class=\"p\">):</span><span class=\"gp\">... </span>  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"go\">\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc     \u30ab\u30b9\u30bf\u30e0\u540d\u8a5e,*,*,*,*,*,\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc</span><span class=\"go\">\u3078    \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3078,\u30d8,\u30a8</span><span class=\"go\">\u306e    \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce</span><span class=\"go\">\u304a\u8d8a\u3057    \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u304a\u8d8a\u3057,\u30aa\u30b3\u30b7,\u30aa\u30b3\u30b7</span><span class=\"go\">\u306f    \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef</span><span class=\"go\">\u3001    \u8a18\u53f7,\u8aad\u70b9,*,*,*,*,\u3001,\u3001,\u3001</span><span class=\"go\">\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3   \u30ab\u30b9\u30bf\u30e0\u540d\u8a5e,*,*,*,*,*,\u6771\u6b66\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3,\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3,\u30c8\u30a6\u30d6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30e9\u30a4\u30f3</span><span class=\"go\">\u300c    \u8a18\u53f7,\u62ec\u5f27\u958b,*,*,*,*,\u300c,\u300c,\u300c</span><span class=\"go\">\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5    \u30ab\u30b9\u30bf\u30e0\u540d\u8a5e,*,*,*,*,*,\u3068\u3046\u304d\u3087\u3046\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u99c5,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad,\u30c8\u30a6\u30ad\u30e7\u30a6\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u30a8\u30ad</span><span class=\"go\"> \u300d   \u8a18\u53f7,\u62ec\u5f27\u9589,*,*,*,*,\u300d,\u300d,\u300d</span><span class=\"go\">\u304c    \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u304c,\u30ac,\u30ac</span><span class=\"go\">\u4fbf\u5229    \u540d\u8a5e,\u5f62\u5bb9\u52d5\u8a5e\u8a9e\u5e79,*,*,*,*,\u4fbf\u5229,\u30d9\u30f3\u30ea,\u30d9\u30f3\u30ea</span><span class=\"go\">\u3067\u3059    \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c7\u30b9,\u57fa\u672c\u5f62,\u3067\u3059,\u30c7\u30b9,\u30c7\u30b9</span><span class=\"go\">\u3002    \u8a18\u53f7,\u53e5\u70b9,*,*,*,*,\u3002,\u3002,\u3002</span></pre></div></div></section><section id=\"pre-compiled-user-dictionary\"><h3>Pre-compiled user dictionary<a class=\"headerlink\" href=\"#pre-compiled-user-dictionary\" title=\"Permalink to this heading\">\u00b6</a></h3><p>With large user dictionary, it can take much time to convert CSV file to the binary data structure. You can compile the user dictionary in advance and use that at runtime.</p><p>For now, there is no tools for compiling user dictionary. Use <a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/janome.html#janome.dic.UserDictionary\">APIs</a> as below. <code class=\"docutils literal notranslate\"><span class=\"pre\">progress_handler</span></code> option is supported in v0.4.1 or above.</p><p>How to compile user dictionary (MeCab IPADIC format):</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.dic</span> <span class=\"kn\">import</span> <span class=\"n\">UserDictionary</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome</span> <span class=\"kn\">import</span> <span class=\"n\">sysdic</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.progress</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleProgressIndicator</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user_dict</span> <span class=\"o\">=</span> <span class=\"n\">UserDictionary</span><span class=\"p\">(</span><span class=\"s2\">&quot;userdic.csv&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;utf8&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ipadic&quot;</span><span class=\"p\">,</span> <span class=\"n\">sysdic</span><span class=\"o\">.</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">progress_handler</span><span class=\"o\">=</span><span class=\"n\">SimpleProgressIndicator</span><span class=\"p\">(</span><span class=\"n\">update_frequency</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">))</span><span class=\"go\">Reading user dictionary from CSV: 100.0% | 17149/17149</span><span class=\"go\">Running create_minimum_transducer: 100.0% | 17149/17149</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/userdic&quot;</span><span class=\"p\">)</span></pre></div></div><p>How to compile user dictionary (simplified format):</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.dic</span> <span class=\"kn\">import</span> <span class=\"n\">UserDictionary</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome</span> <span class=\"kn\">import</span> <span class=\"n\">sysdic</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.progress</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleProgressIndicator</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user_dict</span> <span class=\"o\">=</span> <span class=\"n\">UserDictionary</span><span class=\"p\">(</span><span class=\"s2\">&quot;user_simpledic.csv&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;utf8&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;simpledic&quot;</span><span class=\"p\">,</span> <span class=\"n\">sysdic</span><span class=\"o\">.</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">progress_handler</span><span class=\"o\">=</span><span class=\"n\">SimpleProgressIndicator</span><span class=\"p\">(</span><span class=\"n\">update_frequency</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">))</span><span class=\"go\">Reading user dictionary from CSV: 100.0% | 17149/17149</span><span class=\"go\">Running create_minimum_transducer: 100.0% | 17149/17149</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user_dict</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/userdic&quot;</span><span class=\"p\">)</span></pre></div></div><p>Once compiling has been successfully completed, the data is saved in <code class=\"docutils literal notranslate\"><span class=\"pre\">/tmp/userdic</span></code> directory. Pass the directory path to Tokenizer\u2019s constructor to use it.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/userdic&quot;</span><span class=\"p\">)</span></pre></div></div><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>Use same major python version at both compile time and runtime. Forward/backward dictionary data compatibility is not guaranteed.</p></div></section></section><section id=\"experimental-analyzer-framework-v0-3-4\"><h2>(experimental) Analyzer framework (v0.3.4+)<a class=\"headerlink\" href=\"#experimental-analyzer-framework-v0-3-4\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Analyzer framework is for pre- and post- processing. Analyzer framework includes following classes.</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/janome.html#janome.charfilter.CharFilter\">CharFilter</a> class performs pre-processing such as character normalization.</p></li><li><p><a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/janome.html#janome.tokenfilter.TokenFilter\">TokenFilter</a> class performs post-processing such as lowercase/uppercase conversion, token filtering by POS tags.</p></li><li><p><a class=\"reference external\" href=\"http://mocobeta.github.io/janome/api/janome.html#janome.analyzer.Analyzer\">Analyzer</a> class combines CharFilters, a Tokenizer and TokenFilters to assemble custom analysis chain.</p></li></ul><section id=\"analyzser-usage\"><h3>Analyzser usage<a class=\"headerlink\" href=\"#analyzser-usage\" title=\"Permalink to this heading\">\u00b6</a></h3><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.analyzer</span> <span class=\"kn\">import</span> <span class=\"n\">Analyzer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.charfilter</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenfilter</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;\u86c7\u306e\u76ee\u306fPure \uff30\uff59\uff54\uff48\uff4f\uff4e\u306a\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3067\u3059\u3002&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">char_filters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UnicodeNormalizeCharFilter</span><span class=\"p\">(),</span> <span class=\"n\">RegexReplaceCharFilter</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u86c7\u306e\u76ee&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;janome&#39;</span><span class=\"p\">)]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tokenizer</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">token_filters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CompoundNounFilter</span><span class=\"p\">(),</span> <span class=\"n\">POSStopFilter</span><span class=\"p\">([</span><span class=\"s1\">&#39;\u8a18\u53f7&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;\u52a9\u8a5e&#39;</span><span class=\"p\">]),</span> <span class=\"n\">LowerCaseFilter</span><span class=\"p\">()]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Analyzer</span><span class=\"p\">(</span><span class=\"n\">char_filters</span><span class=\"o\">=</span><span class=\"n\">char_filters</span><span class=\"p\">,</span> <span class=\"n\">tokenizer</span><span class=\"o\">=</span><span class=\"n\">tokenizer</span><span class=\"p\">,</span> <span class=\"n\">token_filters</span><span class=\"o\">=</span><span class=\"n\">token_filters</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"go\">janome  \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u7d44\u7e54,*,*,*,*,*,*</span><span class=\"go\">pure    \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u7d44\u7e54,*,*,*,*,*,*</span><span class=\"go\">python  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,*,*,*</span><span class=\"go\">\u306a       \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u4f53\u8a00\u63a5\u7d9a,\u3060,\u30ca,\u30ca</span><span class=\"go\">\u5f62\u614b\u7d20\u89e3\u6790\u5668  \u540d\u8a5e,\u8907\u5408,*,*,*,*,\u5f62\u614b\u7d20\u89e3\u6790\u5668,\u30b1\u30a4\u30bf\u30a4\u30bd\u30ab\u30a4\u30bb\u30ad\u30ad,\u30b1\u30a4\u30bf\u30a4\u30bd\u30ab\u30a4\u30bb\u30ad\u30ad</span><span class=\"go\">\u3067\u3059     \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c7\u30b9,\u57fa\u672c\u5f62,\u3067\u3059,\u30c7\u30b9,\u30c7\u30b9</span></pre></div></div></section><section id=\"analyzer-usage-for-word-count-v0-3-5\"><h3>Analyzer usage for word count (v0.3.5+)<a class=\"headerlink\" href=\"#analyzer-usage-for-word-count-v0-3-5\" title=\"Permalink to this heading\">\u00b6</a></h3><p>You can count word frequencies in the input text by using TokenCountFilter.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenizer</span> <span class=\"kn\">import</span> <span class=\"n\">Tokenizer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.analyzer</span> <span class=\"kn\">import</span> <span class=\"n\">Analyzer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">janome.tokenfilter</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">token_filters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">POSKeepFilter</span><span class=\"p\">([</span><span class=\"s1\">&#39;\u540d\u8a5e&#39;</span><span class=\"p\">]),</span> <span class=\"n\">TokenCountFilter</span><span class=\"p\">()]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Analyzer</span><span class=\"p\">(</span><span class=\"n\">token_filters</span><span class=\"o\">=</span><span class=\"n\">token_filters</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span><span class=\"gp\">... </span>  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">: </span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span><span class=\"gp\">...</span><span class=\"go\">\u3059\u3082\u3082: 1</span><span class=\"go\">\u3082\u3082: 2</span><span class=\"go\">\u3046\u3061: 1</span></pre></div></div><p>See API reference for other built-in CharFilters and TokenFilters. You can implement custom filters by extending CharFilter or TokenFilter.</p></section></section><section id=\"streaming-mode-v0-3-1-v0-3-10\"><h2>Streaming mode (v0.3.1 - v0.3.10)<a class=\"headerlink\" href=\"#streaming-mode-v0-3-1-v0-3-10\" title=\"Permalink to this heading\">\u00b6</a></h2><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>As of v0.4.0, janome supports streaming mode only; <code class=\"docutils literal notranslate\"><span class=\"pre\">stream</span></code> option was removed.</p></div><p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">stream</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> option is given to tokenize() method, it runs on streaming mode. On streaming mode, partial analyzed results are returned through <a class=\"reference external\" href=\"https://wiki.python.org/moin/Generators\">generator</a> interface.</p><p>Use this option when you analyze very large text data.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;very_large_text.txt&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>    <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>    <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span></pre></div></div></section><section id=\"wakati-gaki-mode-v0-3-1\"><h2>\u2018wakati-gaki\u2019 mode (v0.3.1+)<a class=\"headerlink\" href=\"#wakati-gaki-mode-v0-3-1\" title=\"Permalink to this heading\">\u00b6</a></h2><p>When \u2018wakati = True\u2019 option is given to tokenize() method, it runs on \u2018wakati-gaki\u2019 (\u2018\u5206\u304b\u3061\u66f8\u304d\u2019) mode. On wakati-gaki mode, tokenize() method returns sufrace forms only. Return type is a list of string, not list of Token.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u5206\u304b\u3061\u66f8\u304d\u30e2\u30fc\u30c9\u304c\u3064\u304d\u307e\u3057\u305f\uff01&#39;</span><span class=\"p\">,</span> <span class=\"n\">wakati</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tokens</span><span class=\"go\">[&#39;\u5206\u304b\u3061\u66f8\u304d&#39;, &#39;\u30e2\u30fc\u30c9&#39;, &#39;\u304c&#39;, &#39;\u3064\u304d&#39;, &#39;\u307e\u3057&#39;, &#39;\u305f&#39;, &#39;\uff01&#39;]</span></pre></div></div><p>If you use \u2018wakati-gaki\u2019 mode only, it is recommended to give <code class=\"docutils literal notranslate\"><span class=\"pre\">wakati</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> option to Tokenizer.__init__(). When Tokenizer object is initialized as below, extra information (detailed part of speech, reading, etc.) for tokens are not loaded from dictionary so the memory usage is reduced.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">(</span><span class=\"n\">wakati</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></pre></div></div><p>When this option is passed to Tokenizer object, tokenize() method always runs in wakati-gaki mode (<code class=\"docutils literal notranslate\"><span class=\"pre\">wakati</span> <span class=\"pre\">=</span> <span class=\"pre\">False</span></code> option is ignored.)</p><p>\u2018wakati-gaki\u2019 mode works well with streaming mode. tokenize() method returns generator of string when it is given <code class=\"docutils literal notranslate\"><span class=\"pre\">stream=True</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">wakati=True</span></code> options.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Tokenizer</span><span class=\"p\">()</span><span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">wakati</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span></pre></div></div></section><section id=\"memory-mapped-file-support-v0-3-3\"><h2>Memory-mapped file support (v0.3.3+)<a class=\"headerlink\" href=\"#memory-mapped-file-support-v0-3-3\" title=\"Permalink to this heading\">\u00b6</a></h2><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>Since v0.4.0 release, the default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">mmap</span></code> option is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> on 64bit architecture. On 32bit architecture, the default is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p></div><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">mmap=True</span></code> option is given to Tokenizer.__init__(), dictionary entries are not loaded to process space but searched through memory-mapped file.</p></section><section id=\"graphviz-file-dot-file-support-v0-3-7\"><h2>Graphviz file (DOT file) support (v0.3.7+)<a class=\"headerlink\" href=\"#graphviz-file-dot-file-support-v0-3-7\" title=\"Permalink to this heading\">\u00b6</a></h2><p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">dotfile=&lt;dotfile</span> <span class=\"pre\">output</span> <span class=\"pre\">path&gt;</span></code> option is given, Tokenizer.tokenize() method converts the lattice graph to <a class=\"reference external\" href=\"https://graphviz.gitlab.io/\">Graphviz</a> DOT file. For performance reasons, this option is ignored when running on streaming mode or analyzing very long text.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">janome</span></code> command (the details are mentioned later) has options to visualize the lattice graph easily.</p></section><section id=\"command-line-interface-linux-mac-v0-2-6-windows-v0-3-7\"><h2>Command-line interface (Linux/Mac v0.2.6+, Windows v0.3.7+)<a class=\"headerlink\" href=\"#command-line-interface-linux-mac-v0-2-6-windows-v0-3-7\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Janome has executable built-in script \u201cjanome\u201d for command-line usage.</p><p>It reads a sentence at a time from standard input and outputs the analyzed results. To see supported options, type \u201cjanome -h\u201d.</p><section id=\"linux-mac\"><h3>Linux/Mac<a class=\"headerlink\" href=\"#linux-mac\" title=\"Permalink to this heading\">\u00b6</a></h3><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>(env)$ janome\u732b\u306f\u6db2\u4f53\u3067\u3042\u308b\u732b    \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u732b,\u30cd\u30b3,\u30cd\u30b3\u306f    \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\u6db2\u4f53  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u6db2\u4f53,\u30a8\u30ad\u30bf\u30a4,\u30a8\u30ad\u30bf\u30a4\u3067    \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u9023\u7528\u5f62,\u3060,\u30c7,\u30c7\u3042\u308b  \u52a9\u52d5\u8a5e,*,*,*,\u4e94\u6bb5\u30fb\u30e9\u884c\u30a2\u30eb,\u57fa\u672c\u5f62,\u3042\u308b,\u30a2\u30eb,\u30a2\u30eb(Type Ctrl-C to quit.)</pre></div></div></section><section id=\"windows\"><h3>Windows<a class=\"headerlink\" href=\"#windows\" title=\"Permalink to this heading\">\u00b6</a></h3><p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">-e</span> <span class=\"pre\">sjis</span></code> option if the output is garbled.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">&gt;</span><span class=\"n\">janome</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"n\">sjis</span><span class=\"n\">\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba\u3067\u3082\u7c21\u5358\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</span><span class=\"n\">\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba</span>    <span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u56fa\u6709\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba</span><span class=\"p\">,</span><span class=\"n\">\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba</span><span class=\"p\">,</span><span class=\"n\">\u30a6\u30a3\u30f3\u30c9\u30a6\u30ba</span><span class=\"n\">\u3067</span>      <span class=\"n\">\u52a9\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u683c\u52a9\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u3067</span><span class=\"p\">,</span><span class=\"n\">\u30c7</span><span class=\"p\">,</span><span class=\"n\">\u30c7</span><span class=\"n\">\u3082</span>      <span class=\"n\">\u52a9\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4fc2\u52a9\u8a5e</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u3082</span><span class=\"p\">,</span><span class=\"n\">\u30e2</span><span class=\"p\">,</span><span class=\"n\">\u30e2</span><span class=\"n\">\u7c21\u5358</span>    <span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u5f62\u5bb9\u52d5\u8a5e\u8a9e\u5e79</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u7c21\u5358</span><span class=\"p\">,</span><span class=\"n\">\u30ab\u30f3\u30bf\u30f3</span><span class=\"p\">,</span><span class=\"n\">\u30ab\u30f3\u30bf\u30f3</span><span class=\"n\">\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</span>    <span class=\"n\">\u540d\u8a5e</span><span class=\"p\">,</span><span class=\"n\">\u4e00\u822c</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"n\">\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</span><span class=\"p\">,</span><span class=\"n\">\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</span><span class=\"p\">,</span><span class=\"n\">\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</span><span class=\"p\">(</span><span class=\"n\">Type</span> <span class=\"n\">Ctrl</span><span class=\"o\">-</span><span class=\"n\">Z</span> <span class=\"n\">to</span> <span class=\"n\">quit</span><span class=\"o\">.</span><span class=\"p\">)</span></pre></div></div></section><section id=\"visualizing-lattice-graph\"><h3>Visualizing lattice graph<a class=\"headerlink\" href=\"#visualizing-lattice-graph\" title=\"Permalink to this heading\">\u00b6</a></h3><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>You need Graphviz to use this functionality. Please install Graphviz from <a class=\"reference external\" href=\"https://graphviz.gitlab.io/download/\">here</a>.</p></div><p>If given <code class=\"docutils literal notranslate\"><span class=\"pre\">-g</span></code> option, janome command outputs the visualized lattice image to the current directory after analyzing the text. Default output format is PNG.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ echo &quot;\u30ab\u30ec\u30fc\u306f\u98f2\u307f\u7269&quot; | janome -g\u30ab\u30ec\u30fc \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u30ab\u30ec\u30fc,\u30ab\u30ec\u30fc,\u30ab\u30ec\u30fc\u306f   \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\u98f2\u307f\u7269 \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u98f2\u307f\u7269,\u30ce\u30df\u30e2\u30ce,\u30ce\u30df\u30e2\u30ceGraph was successfully output to lattice.gv.png</pre></div></div><p>lattice.gv.png (Click to show the full size image.)</p><a class=\"reference internal image-reference\" href=\"_images/lattice.gv.png\"><img alt=\"_images/lattice.gv.png\" src=\"_images/lattice.gv.png\" style=\"width: 384.6px; height: 346.6px;\" /></a><p>You can change the output file location by using <code class=\"docutils literal notranslate\"><span class=\"pre\">--gv-out</span></code> option. Also you can specify the output file format by <code class=\"docutils literal notranslate\"><span class=\"pre\">--gv-format</span></code> option. See <a class=\"reference external\" href=\"https://graphviz.gitlab.io/_pages/doc/info/output.html\">Graphviz documentation</a> for all supported output formats.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ echo &quot;\u30ab\u30ec\u30fc\u306f\u98f2\u307f\u7269&quot; | janome -g --gv-out /tmp/a.gv --gv-format svg...Graph was successfully output to /tmp/a.gv.svg</pre></div></div></section></section><section id=\"how-to-bundle-janome-with-an-application-by-pyinstaller-v0-3-9\"><h2>How to bundle janome with an application by PyInstaller (v0.3.9+)<a class=\"headerlink\" href=\"#how-to-bundle-janome-with-an-application-by-pyinstaller-v0-3-9\" title=\"Permalink to this heading\">\u00b6</a></h2><p>You can create (and distribute) stand-alone executables which bundle janome by <a class=\"reference external\" href=\"https://www.pyinstaller.org/\">PyInstaller</a>.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">mmap=False</span></code> option is required when initializing Tokenizer.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>(venv) $ janome --versionjanome 0.3.9(venv) $ pyinstaller -v3.4(venv) $ cat test.py# -*- utf-8from janome.tokenizer import Tokenizert = Tokenizer(mmap=False)    for token in t.tokenize(&#39;\u4ee4\u548c\u5143\u5e74&#39;):    print(token)(venv) $ pyinstaller --onefile test.py44 INFO: PyInstaller: 3.444 INFO: Python: 3.6.6...(venv) $ ls dist/test(venv) $ ./dist/test\u4ee4\u548c  \u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4e00\u822c,*,*,*,\u4ee4\u548c,\u30ec\u30a4\u30ef,\u30ec\u30a4\u30ef\u5143\u5e74  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5143\u5e74,\u30ac\u30f3\u30cd\u30f3,\u30ac\u30f3\u30cd\u30f3</pre></div></div></section><section id=\"faq\"><h2>FAQ<a class=\"headerlink\" href=\"#faq\" title=\"Permalink to this heading\">\u00b6</a></h2><ol class=\"upperalpha simple\" start=\"17\"><li><p>How is the accuracy of analysis?</p></li></ol><ol class=\"upperalpha simple\"><li><p>Janome uses MeCab IPADIC dictionary, so the accuracy is roughly same to MeCab.</p></li></ol><ol class=\"upperalpha simple\" start=\"17\"><li><p>How is the speed of analysis?</p></li></ol><ol class=\"upperalpha simple\"><li><p>Basically depends on the input length. According to my benchmark script, one sentence would take a few milliseconds to a few tens of milliseconds on commodity PCs.</p></li></ol><ol class=\"upperalpha simple\" start=\"17\"><li><p>What data structures and algorithms are used?</p></li></ol><ol class=\"upperalpha simple\"><li><p>Janome uses FST (<a class=\"reference external\" href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698\">Minimal Acyclic Subsequential Transducer</a>) for internal dictionary data structure. I implemented the automaton by referring to <a class=\"reference external\" href=\"https://lucene.apache.org/core/\">Apache Lucene</a> (written in Java) and <a class=\"reference external\" href=\"https://github.com/ikawaha/kagome\">kagome</a> (written in Go). And for analysis engine, I implemented basic viterbi algorithm by referring the book <a class=\"reference external\" href=\"http://www.amazon.co.jp/%E8%87%AA%E7%84%B6%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E3%81%AE%E5%9F%BA%E7%A4%8E-%E5%A5%A5%E6%9D%91-%E5%AD%A6/dp/4339024511\">\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u57fa\u790e</a> .</p></li></ol><ol class=\"upperalpha simple\" start=\"17\"><li><p>I found bugs. Or have requests for enhancement.</p></li></ol><ol class=\"upperalpha simple\"><li><p>Bug reports or requests (and of course, patches) are welcome. Create issues in <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/issues\">Github repository</a> or leave your comment to <a class=\"reference external\" href=\"https://gitter.im/janome-python/en\">Gitter room</a>.</p></li></ol></section><section id=\"for-contributors\"><h2>For Contributors<a class=\"headerlink\" href=\"#for-contributors\" title=\"Permalink to this heading\">\u00b6</a></h2><p>See <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/blob/master/CONTRIBUTING.md\">https://github.com/mocobeta/janome/blob/master/CONTRIBUTING.md</a></p></section><section id=\"author\"><h2>Author<a class=\"headerlink\" href=\"#author\" title=\"Permalink to this heading\">\u00b6</a></h2><p><a class=\"reference external\" href=\"https://github.com/mocobeta/mocobeta/blob/main/profile.md\">Profile</a></p></section><section id=\"license\"><h2>License<a class=\"headerlink\" href=\"#license\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Licensed under Apache License 2.0 and uses the MeCab-IPADIC dictionary/statistical model.</p><p>See <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/blob/master/LICENSE.txt\">LICENSE.txt</a> and <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/blob/master/NOTICE.txt\">NOTICE.txt</a> for license details.</p></section><section id=\"copyright\"><h2>Copyright<a class=\"headerlink\" href=\"#copyright\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Copyright(C) 2015-2023, Tomoko Uchida. All rights reserved.</p></section><section id=\"history\"><h2>History<a class=\"headerlink\" href=\"#history\" title=\"Permalink to this heading\">\u00b6</a></h2><ul class=\"simple\"><li><p>2023.07.01 janome Version 0.5.0 released <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/releases/tag/0.5.0\">[Release Note]</a></p></li><li><p>2022.02.23 janome Version 0.4.2 released <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/releases/tag/0.4.2\">[Release Note]</a></p></li><li><p>2020.09.21 janome Version 0.4.1 released</p></li><li><p>2020.08.23 janome Version 0.4.0 released</p></li><li><p>2019.11.03 janome Version 0.3.10 released</p></li><li><p>2019.05.12 janome Version 0.3.9 released</p></li><li><p>2019.04.03 janome Version 0.3.8 released</p></li><li><p>2018.12.11 janome Version 0.3.7 released</p></li><li><p>2017.12.07 janome Version 0.3.6 released</p></li><li><p>2017.08.06 janome Version 0.3.5 released</p></li><li><p>2017.07.29 janome Version 0.3.4 released</p></li><li><p>2017.07.23 janome Version 0.3.3 released</p></li><li><p>2017.07.05 janome Version 0.3.2 released</p></li><li><p>2017.07.02 janome Version 0.3.1 released</p></li><li><p>2017.06.30 janome Version 0.3.0 released</p></li><li><p>2016.05.07 janome Version 0.2.8 released</p></li><li><p>2016.03.05 janome Version 0.2.7 released</p></li><li><p>2015.10.26 janome Version 0.2.6 released</p></li><li><p>2015.05.11 janome Version 0.2.5 released</p></li><li><p>2015.05.03 janome Version 0.2.4 released</p></li><li><p>2015.05.03 janome Version 0.2.3 released</p></li><li><p>2015.04.24 janome Version 0.2.2 released</p></li><li><p>2015.04.24 janome Version 0.2.0 released</p></li><li><p>2015.04.11 janome Version 0.1.4 released</p></li><li><p>2015.04.08 janome Version 0.1.3 released</p></li></ul><p>Change details: <a class=\"reference external\" href=\"https://github.com/mocobeta/janome/blob/master/CHANGES.txt\">CHANGES</a></p><a class=\"reference external image-reference\" href=\"https://home.unicode.org/adopt-a-character/about-adopt-a-character/\"><img alt=\"Badge(FISHEYE)\" src=\"_images/bronze-25C9.png\" /></a></section></section>      </div>      <div class=\"bottomnav\" role=\"navigation\" aria-label=\"bottom navigation\">              <p>        <a class=\"uplink\" href=\"#\">Contents</a>        </p>      </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2022, Tomoko Uchida.      Created using <a href=\"https://www.sphinx-doc.org/\">Sphinx</a> 7.0.1.    </div>  </body></html>",
  "embeddings": []
}
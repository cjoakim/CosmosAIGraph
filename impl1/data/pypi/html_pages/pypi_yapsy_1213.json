{
  "libtype": "pypi",
  "libname": "yapsy",
  "url": "http://yapsy.sourceforge.net",
  "html": "<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\">  <head>    <meta charset=\"utf-8\" />    <title>Yapsy: Yet Another Plugin SYstem &#8212; Yapsy 1.12.2 documentation</title>    <link rel=\"stylesheet\" href=\"_static/classic.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />        <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>    <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>        <link rel=\"shortcut icon\" href=\"_static/yapsy-favicon.ico\"/>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"IPlugin\" href=\"IPlugin.html\" />   </head><body>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             accesskey=\"I\">index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"IPlugin.html\" title=\"IPlugin\"             accesskey=\"N\">next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">Yapsy 1.12.2 documentation</a> &#187;</li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <div class=\"section\" id=\"yapsy-yet-another-plugin-system\"><h1>Yapsy: Yet Another Plugin SYstem<a class=\"headerlink\" href=\"#yapsy-yet-another-plugin-system\" title=\"Permalink to this headline\">\u00b6</a></h1><p><em>A simple plugin system for Python applications</em></p><p>Quick links:</p><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"IPlugin.html\">IPlugin</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"PluginManager.html\">PluginManager</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"PluginInfo.html\">PluginInfo</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"Extensions.html\">Built-in Extensions</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"Advices.html\">General advices and troubleshooting</a></li></ul></div><div class=\"contents local topic\" id=\"on-this-page\"><p class=\"topic-title first\">On this page</p><ul class=\"simple\"><li><p><a class=\"reference internal\" href=\"#overview\" id=\"id2\">Overview</a></p></li><li><p><a class=\"reference internal\" href=\"#getting-started\" id=\"id3\">Getting started</a></p></li><li><p><a class=\"reference internal\" href=\"#make-it-your-own\" id=\"id4\">Make it your own</a></p><ul><li><p><a class=\"reference internal\" href=\"#more-sophisticated-plugin-classes\" id=\"id5\">More sophisticated plugin classes</a></p></li><li><p><a class=\"reference internal\" href=\"#enhance-the-plugin-manager-s-interface\" id=\"id6\">Enhance the plugin manager\u2019s interface</a></p></li><li><p><a class=\"reference internal\" href=\"#modify-plugin-descriptions-and-detections\" id=\"id7\">Modify plugin descriptions and detections</a></p></li><li><p><a class=\"reference internal\" href=\"#modify-the-way-plugins-are-loaded\" id=\"id8\">Modify the way plugins are loaded</a></p></li></ul></li><li><p><a class=\"reference internal\" href=\"#showcase-and-tutorials\" id=\"id9\">Showcase and tutorials</a></p></li><li><p><a class=\"reference internal\" href=\"#development\" id=\"id10\">Development</a></p><ul><li><p><a class=\"reference internal\" href=\"#contributing-or-forking\" id=\"id11\">Contributing or forking ?</a></p></li><li><p><a class=\"reference internal\" href=\"#license\" id=\"id12\">License</a></p></li><li><p><a class=\"reference internal\" href=\"#forge\" id=\"id13\">Forge</a></p></li><li><p><a class=\"reference internal\" href=\"#references\" id=\"id14\">References</a></p></li></ul></li><li><p><a class=\"reference internal\" href=\"#indices-and-tables\" id=\"id15\">Indices and tables</a></p></li></ul></div><span class=\"target\" id=\"module-yapsy\"></span><div class=\"section\" id=\"overview\"><h2><a class=\"toc-backref\" href=\"#id2\">Overview</a><a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Yapsy\u2019s main purpose is to offer a way to easily design a pluginsystem in Python, and motivated by the fact that many other Pythonplugin system are either too complicated for a basic use or depend ona lot of libraries. Yapsy only depends on Python\u2019s standard library.</p><p><strong>Yapsy</strong> basically defines two core classes:</p><ul class=\"simple\"><li><p>a fully functional though very simple <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginManager</span></code> class</p></li><li><p>an interface <code class=\"docutils literal notranslate\"><span class=\"pre\">IPlugin</span></code> which defines the interface of plugininstances handled by the <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginManager</span></code></p></li></ul></div><div class=\"section\" id=\"getting-started\"><h2><a class=\"toc-backref\" href=\"#id3\">Getting started</a><a class=\"headerlink\" href=\"#getting-started\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The basic classes defined by <strong>Yapsy</strong> should work \u201cas is\u201d and enableyou to load and activate your plugins. So that the following codeshould get you a fully working plugin management system:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">yapsy.PluginManager</span> <span class=\"k\">import</span> <span class=\"n\">PluginManager</span><span class=\"c1\"># Build the manager</span><span class=\"n\">simplePluginManager</span> <span class=\"o\">=</span> <span class=\"n\">PluginManager</span><span class=\"p\">()</span><span class=\"c1\"># Tell it the default place(s) where to find plugins</span><span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">setPluginPlaces</span><span class=\"p\">([</span><span class=\"s2\">&quot;path/to/myplugins&quot;</span><span class=\"p\">])</span><span class=\"c1\"># Load all plugins</span><span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">collectPlugins</span><span class=\"p\">()</span><span class=\"c1\"># Activate all loaded plugins</span><span class=\"k\">for</span> <span class=\"n\">pluginInfo</span> <span class=\"ow\">in</span> <span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">getAllPlugins</span><span class=\"p\">():</span>   <span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">activatePluginByName</span><span class=\"p\">(</span><span class=\"n\">pluginInfo</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span></pre></div></div><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">plugin_info</span></code> object (typically an instance of<code class=\"docutils literal notranslate\"><span class=\"pre\">IPlugin</span></code>) plays as <em>the entry point of eachplugin</em>. That\u2019s also where <strong>Yapsy</strong> ceases to guide you: it\u2019sup to you to define what your plugins can do and how youwant to talk to them ! Talking to your plugin will then lookvery much like the following:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Trigger &#39;some action&#39; from the loaded plugins</span><span class=\"k\">for</span> <span class=\"n\">pluginInfo</span> <span class=\"ow\">in</span> <span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">getAllPlugins</span><span class=\"p\">():</span>   <span class=\"n\">pluginInfo</span><span class=\"o\">.</span><span class=\"n\">plugin_object</span><span class=\"o\">.</span><span class=\"n\">doSomething</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span></pre></div></div></div><dl class=\"function\"><dt id=\"yapsy.NormalizePluginNameForModuleName\"><code class=\"sig-prename descclassname\">yapsy.</code><code class=\"sig-name descname\">NormalizePluginNameForModuleName</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pluginName</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#yapsy.NormalizePluginNameForModuleName\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Normalize a plugin name into a safer name for a module name.</p><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>may do a little more modifications than strictlynecessary and is not optimized for speed.</p></div></dd></dl><dl class=\"data\"><dt id=\"yapsy.PLUGIN_NAME_FORBIDEN_STRING\"><code class=\"sig-prename descclassname\">yapsy.</code><code class=\"sig-name descname\">PLUGIN_NAME_FORBIDEN_STRING</code><em class=\"property\"> = ';;'</em><a class=\"headerlink\" href=\"#yapsy.PLUGIN_NAME_FORBIDEN_STRING\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><div class=\"admonition warning\"><p class=\"admonition-title\">Warning</p><p>This string (\u2018;;\u2019 by default) is forbidden in pluginnames, and will be usable to describe lists of pluginsfor instance (see <a class=\"reference internal\" href=\"ConfigurablePluginManager.html\"><span class=\"doc\">ConfigurablePluginManager</span></a>)</p></div></dd></dl></div><div class=\"section\" id=\"make-it-your-own\"><span id=\"extend\"></span><h2><a class=\"toc-backref\" href=\"#id4\">Make it your own</a><a class=\"headerlink\" href=\"#make-it-your-own\" title=\"Permalink to this headline\">\u00b6</a></h2><p>For applications that require the plugins and their managers to bemore sophisticated, several techniques make such enhancement easy. Thefollowing sections detail the most frequent needs for extensionsand what you can do about it.</p><div class=\"section\" id=\"more-sophisticated-plugin-classes\"><h3><a class=\"toc-backref\" href=\"#id5\">More sophisticated plugin classes</a><a class=\"headerlink\" href=\"#more-sophisticated-plugin-classes\" title=\"Permalink to this headline\">\u00b6</a></h3><p>You can define a plugin class with a richer interface than<code class=\"docutils literal notranslate\"><span class=\"pre\">IPlugin</span></code>, so long as it inherits from IPlugin, it should work thesame. The only thing you need to know is that the plugin instance isaccessible via the <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginInfo</span></code> instance from its<code class=\"docutils literal notranslate\"><span class=\"pre\">PluginInfo.plugin_object</span></code>.</p><p>It is also possible to define a wider variety of plugins, by definingas much subclasses of IPlugin. But in such a case you have to informthe manager about that before collecting plugins:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Build the manager</span><span class=\"n\">simplePluginManager</span> <span class=\"o\">=</span> <span class=\"n\">PluginManager</span><span class=\"p\">()</span><span class=\"c1\"># Tell it the default place(s) where to find plugins</span><span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">setPluginPlaces</span><span class=\"p\">([</span><span class=\"s2\">&quot;path/to/myplugins&quot;</span><span class=\"p\">])</span><span class=\"c1\"># Define the various categories corresponding to the different</span><span class=\"c1\"># kinds of plugins you have defined</span><span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">setCategoriesFilter</span><span class=\"p\">({</span>   <span class=\"s2\">&quot;Playback&quot;</span> <span class=\"p\">:</span> <span class=\"n\">IPlaybackPlugin</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;SongInfo&quot;</span> <span class=\"p\">:</span> <span class=\"n\">ISongInfoPlugin</span><span class=\"p\">,</span>   <span class=\"s2\">&quot;Visualization&quot;</span> <span class=\"p\">:</span> <span class=\"n\">IVisualisation</span><span class=\"p\">,</span>   <span class=\"p\">})</span></pre></div></div><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>Communicating with the plugins belonging to a given categorymight then be achieved with some code looking like thefollowing:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Trigger &#39;some action&#39; from the &quot;Visualization&quot; plugins</span><span class=\"k\">for</span> <span class=\"n\">pluginInfo</span> <span class=\"ow\">in</span> <span class=\"n\">simplePluginManager</span><span class=\"o\">.</span><span class=\"n\">getPluginsOfCategory</span><span class=\"p\">(</span><span class=\"s2\">&quot;Visualization&quot;</span><span class=\"p\">):</span>   <span class=\"n\">pluginInfo</span><span class=\"o\">.</span><span class=\"n\">plugin_object</span><span class=\"o\">.</span><span class=\"n\">doSomething</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span></pre></div></div></div></div><div class=\"section\" id=\"enhance-the-plugin-manager-s-interface\"><h3><a class=\"toc-backref\" href=\"#id6\">Enhance the plugin manager\u2019s interface</a><a class=\"headerlink\" href=\"#enhance-the-plugin-manager-s-interface\" title=\"Permalink to this headline\">\u00b6</a></h3><p>To make the plugin manager more helpful to the other components of anapplication, you should consider decorating it.</p><p>Actually a \u201ctemplate\u201d for such decoration is provided as<a class=\"reference internal\" href=\"PluginManagerDecorator.html\"><span class=\"doc\">PluginManagerDecorator</span></a>, which must be inherited in order toimplement the right decorator for your application.</p><p>Such decorators can be chained, so that you can take advantage of the ready-made decorators such as:</p><p><a class=\"reference internal\" href=\"ConfigurablePluginManager.html\"><span class=\"doc\">ConfigurablePluginManager</span></a></p><blockquote><div><p>Implements a <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginManager</span></code> that uses a configuration file tosave the plugins to be activated by default and also grants accessto this file to the plugins.</p></div></blockquote><p><a class=\"reference internal\" href=\"AutoInstallPluginManager.html\"><span class=\"doc\">AutoInstallPluginManager</span></a></p><blockquote><div><p>Automatically copy the plugin files to the right plugin directory.</p></div></blockquote><p>A full list of pre-implemented decorators is available at <a class=\"reference internal\" href=\"Extensions.html\"><span class=\"doc\">Built-in Extensions</span></a>.</p></div><div class=\"section\" id=\"modify-plugin-descriptions-and-detections\"><h3><a class=\"toc-backref\" href=\"#id7\">Modify plugin descriptions and detections</a><a class=\"headerlink\" href=\"#modify-plugin-descriptions-and-detections\" title=\"Permalink to this headline\">\u00b6</a></h3><p>By default, plugins are described by a text file called the plugin\u201cinfo file\u201d expected to have a \u201c.yapsy-plugin\u201d extension.</p><p>You may want to use another way to describe and detect yourapplication\u2019s plugin and happily yapsy (since version 1.10) makes itpossible to provide the <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginManager</span></code> with a custom strategy forplugin detection.</p><p>See <a class=\"reference internal\" href=\"IPluginLocator.html\"><span class=\"doc\">IPluginLocator</span></a> for the required interface of suchstrategies and <a class=\"reference internal\" href=\"PluginFileLocator.html\"><span class=\"doc\">PluginFileLocator</span></a> for a working example of sucha detection strategy.</p></div><div class=\"section\" id=\"modify-the-way-plugins-are-loaded\"><h3><a class=\"toc-backref\" href=\"#id8\">Modify the way plugins are loaded</a><a class=\"headerlink\" href=\"#modify-the-way-plugins-are-loaded\" title=\"Permalink to this headline\">\u00b6</a></h3><p>To tweak the plugin loading phase it is highly advised to re-implementyour own manager class.</p><p>The nice thing is, if your new manager  inherits <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginManager</span></code>, then it will naturally fit as the start point of any decoration chain. You just have to provide an instance of this new manager to the first decorators, like in the following:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># build and configure a specific manager</span><span class=\"n\">baseManager</span> <span class=\"o\">=</span> <span class=\"n\">MyNewManager</span><span class=\"p\">()</span><span class=\"c1\"># start decorating this manager to add some more responsibilities</span><span class=\"n\">myFirstDecorator</span> <span class=\"o\">=</span> <span class=\"n\">AFirstPluginManagerDecorator</span><span class=\"p\">(</span><span class=\"n\">baseManager</span><span class=\"p\">)</span><span class=\"c1\"># add even more stuff</span><span class=\"n\">mySecondDecorator</span> <span class=\"o\">=</span> <span class=\"n\">ASecondPluginManagerDecorator</span><span class=\"p\">(</span><span class=\"n\">myFirstDecorator</span><span class=\"p\">)</span></pre></div></div><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p>Some decorators have been implemented that modify the wayplugins are loaded, this is however not the easiest way todo it and it makes it harder to build a chain of decorationthat would include these decorators.  Among those are<a class=\"reference internal\" href=\"VersionedPluginManager.html\"><span class=\"doc\">VersionedPluginManager</span></a> and<a class=\"reference internal\" href=\"FilteredPluginManager.html\"><span class=\"doc\">FilteredPluginManager</span></a></p></div></div></div><div class=\"section\" id=\"showcase-and-tutorials\"><h2><a class=\"toc-backref\" href=\"#id9\">Showcase and tutorials</a><a class=\"headerlink\" href=\"#showcase-and-tutorials\" title=\"Permalink to this headline\">\u00b6</a></h2><p><strong>Yapsy</strong> \u2018s development has been originally motivated by the <a class=\"reference external\" href=\"http://mathbench.sourceforge.net\">MathBench</a>project but it is now used in other (more advanced) projects like:</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://www.flipturn.org/peppy/\">peppy</a> : \u201can XEmacs-like editor in Python. Eventually. \u201c</p></li><li><p><a class=\"reference external\" href=\"http://trac.backslashat.org/MysteryMachine\">MysteryMachine</a> : \u201can application for writing freeform games.\u201d</p></li><li><p><a class=\"reference external\" href=\"https://github.com/ralsina/aranduka\">Aranduka</a> : \u201cA simple e-book manager and reader\u201d</p></li><li><p><a class=\"reference external\" href=\"http://gbin.github.com/err/\">err</a> : \u201ca plugin based chatbot\u201d</p></li><li><p><a class=\"reference external\" href=\"http://nikola.ralsina.com.ar/\">nikola</a> : \u201ca Static Site and Blog Generator\u201d</p></li></ul><p>Nowadays, the development is clearly motivated by such external projects and the enthusiast developpers who use the library.</p><p>If you\u2019re interested in using yapsy, feel free to look into the following links:</p><ul class=\"simple\"><li><p><a class=\"reference internal\" href=\"Advices.html\"><span class=\"doc\">General advices and troubleshooting</span></a></p></li><li><p><a class=\"reference external\" href=\"http://stackoverflow.com/questions/5333128/yapsy-minimal-example\">A minimal example on stackoverflow</a></p></li><li><p><a class=\"reference external\" href=\"http://ralsina.me/weblog/posts/BB923.html\">Making your app modular: Yapsy</a> (applied to Qt apps)</p></li><li><p><a class=\"reference external\" href=\"https://github.com/MicahCarrick/yapsy-gtk-example\">Python plugins with yapsy</a> (applied to GTK apps)</p></li></ul></div><div class=\"section\" id=\"development\"><h2><a class=\"toc-backref\" href=\"#id10\">Development</a><a class=\"headerlink\" href=\"#development\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"section\" id=\"contributing-or-forking\"><h3><a class=\"toc-backref\" href=\"#id11\">Contributing or forking ?</a><a class=\"headerlink\" href=\"#contributing-or-forking\" title=\"Permalink to this headline\">\u00b6</a></h3><p>You\u2019re always welcome if you suggest any kind of enhancements, any newdecorators or any new pluginmanager. Even more if there is some codecoming with it though this is absolutely not compulsory.</p><p>It is also really fine to <em>fork</em> the code ! In the past, some peoplefound <strong>Yapsy</strong> just good enough to be used as a \u201ccode base\u201d for theirown plugin system, which they evolved in a more or less incompatibleway with the \u201coriginal\u201d <strong>Yapsy</strong>, if you think about it, with such asmall library this is actually a clever thing to do.</p><p>In any case, please remember that just providing some feedback on whereyou\u2019re using <strong>Yapsy</strong> (original or forked) and how it is useful to you,is in itself a appreciable contribution :)</p></div><div class=\"section\" id=\"license\"><h3><a class=\"toc-backref\" href=\"#id12\">License</a><a class=\"headerlink\" href=\"#license\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The work is placed under the simplified <a class=\"reference external\" href=\"http://www.opensource.org/licenses/bsd-license.php\">BSD</a> license in order to makeit as easy as possible to be reused in other projects.</p><p>Please note that the icon is not under the same license but under the<a class=\"reference external\" href=\"http://creativecommons.org/licenses/by-sa/3.0/\">Creative Common Attribution-ShareAlike</a> license.</p></div><div class=\"section\" id=\"forge\"><h3><a class=\"toc-backref\" href=\"#id13\">Forge</a><a class=\"headerlink\" href=\"#forge\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The project is hosted by <a class=\"reference external\" href=\"http://sourceforge.net/projects/yapsy/\">Sourceforge</a> where you can access the code, documentation and a tracker to share your feedback and ask for support.</p><p><img alt=\"SourceForge.net\" src=\"http://sflogo.sourceforge.net/sflogo.php?group_id=208383&amp;type=5\" /></p><p><strong>Any suggestion and help are much welcome !</strong></p><p>Yapsy is also tested on the continous integration service <a class=\"reference external\" href=\"https://travis-ci.org/tibonihoo/yapsy\">TravisCI</a>:<img alt=\"Continuous integration tests\" src=\"https://travis-ci.org/tibonihoo/yapsy.png?branch=master\" /> <a class=\"reference external\" href=\"https://coveralls.io/r/tibonihoo/yapsy?branch=master\"><img alt=\"Code coverage from continuous integration tests.\" src=\"https://coveralls.io/repos/tibonihoo/yapsy/badge.png?branch=master\" /></a></p><p>A few alternative sites are available:</p><blockquote><div><ul><li><p>Yapsy\u2019s sources are mirrored on <a class=\"reference external\" href=\"https://github.com/tibonihoo/yapsy/\">GitHub</a>.</p></li><li><p>To use <a class=\"reference external\" href=\"http://pip.readthedocs.org/en/latest/reference/pip_install.html#vcs-support\">pip for a development install</a> you can do something like:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">&quot;git+https://github.com/tibonihoo/yapsy.git#egg=yapsy&amp;subdirectory=package&quot;</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">&quot;hg+http://hg.code.sf.net/p/yapsy/code#egg=yapsy&amp;subdirectory=package&quot;</span></pre></div></div></li><li><p>A development version of the documentation is available on <a class=\"reference external\" href=\"https://yapsy.readthedocs.org\">ReadTheDoc</a>.</p></li></ul></div></blockquote></div><div class=\"section\" id=\"references\"><h3><a class=\"toc-backref\" href=\"#id14\">References</a><a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Other Python plugin systems already existed before <strong>Yapsy</strong> and somehave appeared after that. <strong>Yapsy</strong>\u2019s creation is by no mean a sign thatthese others plugin systems sucks :) It is just the results of mebeing slighlty lazy and as I had already a good idea of how a simpleplugin system should look like, I wanted to implement my own<a class=\"footnote-reference brackets\" href=\"#older-systems\" id=\"id1\">1</a>.</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://cheeseshop.python.org/pypi/setuptools\">setuptools</a> seems to be designed to allow applications to have aplugin system.</p></li></ul><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://termie.pbwiki.com/SprinklesPy\">Sprinkles</a> seems to be also quite lightweight and simple but justmaybe too far away from the design I had in mind.</p></li></ul><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"https://pypi.python.org/pypi/PlugBoard\">PlugBoard</a> is certainly quite good also but too complex for me. It alsodepends on zope which considered what I want to do here is way toomuch.</p></li></ul><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"http://martyalchin.com/2008/jan/10/simple-plugin-framework/\">Marty Alchin\u2019s simple plugin framework</a> is a quite interestingdescription of a plugin architecture with code snippets asillustrations.</p></li></ul><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"https://pypi.python.org/pypi/stevedore\">stevedor</a> looks quite promising and actually seems to makesetuptools relevant to build plugin systems.</p></li></ul><ul class=\"simple\"><li><p>You can look up more example on a <a class=\"reference external\" href=\"http://stackoverflow.com/questions/932069/building-a-minimal-plugin-architecture-in-python\">stackoverflow\u2019s discution about minimal plugin systems in Python</a></p></li></ul><dl class=\"footnote brackets\"><dt class=\"label\" id=\"older-systems\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">1</a></span></dt><dd><p>All the more because it seems that my modestdesign ideas slightly differ from what has been done in otherlibraries.</p></dd></dl></div></div><div class=\"section\" id=\"indices-and-tables\"><h2><a class=\"toc-backref\" href=\"#id15\">Indices and tables</a><a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><p><a class=\"reference internal\" href=\"genindex.html\"><span class=\"std std-ref\">Index</span></a></p></li><li><p><a class=\"reference internal\" href=\"py-modindex.html\"><span class=\"std std-ref\">Module Index</span></a></p></li><li><p><a class=\"reference internal\" href=\"search.html\"><span class=\"std std-ref\">Search Page</span></a></p></li></ul></div></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\">            <p class=\"logo\"><a href=\"#\">              <img class=\"logo\" src=\"_static/yapsy-big.png\" alt=\"Logo\"/>            </a></p>  <h3><a href=\"#\">Table of Contents</a></h3>  <ul><li><a class=\"reference internal\" href=\"#\">Yapsy: Yet Another Plugin SYstem</a><ul><li><a class=\"reference internal\" href=\"#overview\">Overview</a></li><li><a class=\"reference internal\" href=\"#getting-started\">Getting started</a></li><li><a class=\"reference internal\" href=\"#make-it-your-own\">Make it your own</a><ul><li><a class=\"reference internal\" href=\"#more-sophisticated-plugin-classes\">More sophisticated plugin classes</a></li><li><a class=\"reference internal\" href=\"#enhance-the-plugin-manager-s-interface\">Enhance the plugin manager\u2019s interface</a></li><li><a class=\"reference internal\" href=\"#modify-plugin-descriptions-and-detections\">Modify plugin descriptions and detections</a></li><li><a class=\"reference internal\" href=\"#modify-the-way-plugins-are-loaded\">Modify the way plugins are loaded</a></li></ul></li><li><a class=\"reference internal\" href=\"#showcase-and-tutorials\">Showcase and tutorials</a></li><li><a class=\"reference internal\" href=\"#development\">Development</a><ul><li><a class=\"reference internal\" href=\"#contributing-or-forking\">Contributing or forking ?</a></li><li><a class=\"reference internal\" href=\"#license\">License</a></li><li><a class=\"reference internal\" href=\"#forge\">Forge</a></li><li><a class=\"reference internal\" href=\"#references\">References</a></li></ul></li><li><a class=\"reference internal\" href=\"#indices-and-tables\">Indices and tables</a></li></ul></li></ul>  <h4>Next topic</h4>  <p class=\"topless\"><a href=\"IPlugin.html\"                        title=\"next chapter\">IPlugin</a></p>  <div role=\"note\" aria-label=\"source link\">    <h3>This Page</h3>    <ul class=\"this-page-menu\">      <li><a href=\"_sources/index.rst.txt\"            rel=\"nofollow\">Show Source</a></li>    </ul>   </div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3 id=\"searchlabel\">Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" aria-labelledby=\"searchlabel\" />      <input type=\"submit\" value=\"Go\" />    </form>    </div></div><script type=\"text/javascript\">$('#searchbox').show(0);</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             >index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"IPlugin.html\" title=\"IPlugin\"             >next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">Yapsy 1.12.2 documentation</a> &#187;</li>       </ul>    </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2007-2018, Thibauld Nion.      Last updated on Jul 27, 2019.      Created using <a href=\"http://sphinx-doc.org/\">Sphinx</a> 2.1.2.    </div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "alive-progress",
  "url": "https://pypi.org/project/alive-progress/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>alive-progress \u00b7 PyPI</title>    <meta name=\"description\" content=\"A new kind of Progress Bar, with real-time throughput, ETA, and very cool animations!\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for alive-progress\" href=\"/rss/project/alive-progress/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/alive-progress/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/alive-progress/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"alive-progress\">    <meta property=\"og:description\" content=\"A new kind of Progress Bar, with real-time throughput, ETA, and very cool animations!\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/rsalmei/alive-progress\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:rsalmei/alive-progress+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        alive-progress 3.1.5      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install alive-progress</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/alive-progress/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2023-11-08T23:23:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 8, 2023</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/alive-progress\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">A new kind of Progress Bar, with real-time throughput, ETA, and very cool animations!</p><div data-html-include=\"/_includes/edit-project-button/alive-progress\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for alive-progress\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/rsalmei/alive-progress\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/alive-progress\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:rsalmei@gmail.com\">Rog\u00e9rio Sampaio de Almeida</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      progress,    </span>    <span class=\"package-keyword\">      bar,    </span>    <span class=\"package-keyword\">      progress-bar,    </span>    <span class=\"package-keyword\">      progressbar,    </span>    <span class=\"package-keyword\">      spinner,    </span>    <span class=\"package-keyword\">      eta,    </span>    <span class=\"package-keyword\">      monitoring,    </span>    <span class=\"package-keyword\">      python,    </span>    <span class=\"package-keyword\">      terminal,    </span>    <span class=\"package-keyword\">      multi-threaded,    </span>    <span class=\"package-keyword\">      REPL,    </span>    <span class=\"package-keyword\">      alive,    </span>    <span class=\"package-keyword\">      animated,    </span>    <span class=\"package-keyword\">      visual,    </span>    <span class=\"package-keyword\">      feedback,    </span>    <span class=\"package-keyword\">      simple,    </span>    <span class=\"package-keyword\">      live,    </span>    <span class=\"package-keyword\">      efficient,    </span>    <span class=\"package-keyword\">      monitor,    </span>    <span class=\"package-keyword\">      stats,    </span>    <span class=\"package-keyword\">      elapsed,    </span>    <span class=\"package-keyword\">      time,    </span>    <span class=\"package-keyword\">      throughput    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.7,  &lt;4  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/rsalmei/\" aria-label=\"rsalmei\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/5b348f99b1b39c946365a8e2c5b086c7efa89dae/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f63623664666661666563376162356164623962346435306233363964356266303f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for rsalmei from gravatar.com\" title=\"Avatar for rsalmei from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            rsalmei          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Environment</strong>      <ul>        <li>          <a href=\"/search/?c=Environment+%3A%3A+Console\">            Console          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Natural Language</strong>      <ul>        <li>          <a href=\"/search/?c=Natural+Language+%3A%3A+English\">            English          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for alive-progress\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <p><a href=\"https://www.buymeacoffee.com/rsalmei\" rel=nofollow><img align=right src=\"https://pypi-camo.freetls.fastly.net/c3996102087c7b40d4608838559ce1426e251251/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67\" width=217px height=51x></a><a href=\"https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&amp;no_recurring=0&amp;item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&amp;currency_code=USD\" rel=nofollow><img align=right alt=\"Donate with PayPal button\" src=\"https://pypi-camo.freetls.fastly.net/88635fcff5d2586c607ae56c8b4bf0edb8c1f357/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966\"></a></p><p><img src=\"https://pypi-camo.freetls.fastly.net/e27550cea6dcc2ed3dc559ef29976d708e3c79be/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d6c6f676f2e676966\" alt=\"alive-progress logo\"></p><h1>alive-progress</h1><p><a href=\"https://gitHub.com/rsalmei/alive-progress/graphs/commit-activity\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/1f90f684248d6d1da410cc5b864ca51769b23645/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e65642d7965732d627269676874677265656e2e737667\" alt=Maintenance></a><a href=\"https://pypi.python.org/pypi/alive-progress/\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/e879cc9f8b0969022044d2149ed2fca0c63549d5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616c6976652d70726f67726573732e737667\" alt=\"PyPI version\"></a><a href=\"https://pypi.python.org/pypi/alive-progress/\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/bcedfa1e2bd0afe59e78e763ded09ca93fdde0f4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f616c6976652d70726f67726573732e737667\" alt=\"PyPI pyversions\"></a><a href=\"https://pepy.tech/project/alive-progress\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/21d7eeff4bb7942b118f89d89e1c75cf659c3475/68747470733a2f2f7374617469632e706570792e746563682f706572736f6e616c697a65642d62616467652f616c6976652d70726f67726573733f706572696f643d6d6f6e746826756e6974733d696e7465726e6174696f6e616c5f73797374656d266c6566745f636f6c6f723d677265792672696768745f636f6c6f723d6f72616e6765266c6566745f746578743d646f776e6c6f6164732f6d6f6e7468\" alt=Downloads></a><a href=\"https://pepy.tech/project/alive-progress\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/6c2bdb316c310cc725dbe52509b97cf315ae3a28/68747470733a2f2f7374617469632e706570792e746563682f706572736f6e616c697a65642d62616467652f616c6976652d70726f67726573733f706572696f643d746f74616c26756e6974733d696e7465726e6174696f6e616c5f73797374656d266c6566745f636f6c6f723d677265792672696768745f636f6c6f723d6f72616e6765266c6566745f746578743d646f776e6c6f616473\" alt=Downloads></a><img src=\"https://pypi-camo.freetls.fastly.net/041021edee640e173497e35cad667985bf5b4e07/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73706f6e736f72732f7273616c6d6569\" alt=\"GitHub Sponsors\"></p><p>Have you ever wondered where your lengthy processing was at, and when would it finish? Do you usually hit <code>RETURN</code> several times to make sure it didn't crash, or the SSH connection didn't freeze? Have you ever thought it'd be awesome to be able to <em>pause some processing</em> without hassle, return to the Python prompt to manually fix some items, then <em>seamlessly resume</em> it? I did...</p><p>I've started this new progress bar thinking about all that, behold the <strong>alive-progress</strong>! \ud83d\ude03</p><p><img src=\"https://pypi-camo.freetls.fastly.net/d051edc09bd7745e16e82c2551590eaaf0afb21e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d64656d6f2e676966\" alt=\"alive-progress demo\"></p><p>Introducing the newest concept in progress bars for Python! <code>alive-progress</code> is in a class of its own, with an array of cool features that set it apart. Here are a few highlights:</p><ul><li>A mesmerizing <strong>live spinner</strong> that clearly shows your lengthy process did not crash and your SSH connection did not freeze, with <strong>visual feedback</strong> reacting to your processing speed.</li><li>An efficient <strong>multithreaded</strong> bar that updates itself at a fraction of the actual processing speed to keep <strong>CPU usage low</strong> and avoid terminal spamming (1,000,000 iterations per second equates to roughly 60 updates per second, and you can also calibrate this to your liking).</li><li>An <strong>ETA</strong> (expected time of arrival) feature with an intelligent <em>Exponential Smoothing Algorithm</em> that shows the time to completion, allowing you to plan your time and manage your workload more effectively.</li><li>Automatic <strong>print</strong> and <strong>logging</strong> hooks that provide seamless integration and effortless tracking, even enriching them with the current bar position when they occur.</li><li>It prints a <strong>nice receipt</strong> when the processing finishes, including the elapsed time and the observed throughput.</li><li>It detects <strong>under</strong> and <strong>overflows</strong>, enabling you to track hits, misses, or any desired count, not necessarily the actual iterations.</li><li>You can <strong>pause</strong> it! That's right, you heard it here first! No other progress bar anywhere has this feature! You can get back to the Python prompt during any processing, adjust some items, and get back into that running process as if it had never stopped! All <code>alive_bar</code> widgets are kept as they were, and the elapsed time nicely ignores the paused time!</li><li>It is <strong>highly customizable</strong>, with a smorgasbord of spinner and bar styles, as well as several ready-to-use factories to easily generate yours! You can even use the super powerful and cool <code>check()</code> tool to help you design your own animations! You can see all the generated frames and cycles exploded on screen, with several verbosity levels, even including an <em>alive</em> rendition! It's boundless creativity at your fingertips!</li></ul><hr><h2>Table of contents</h2><p>This README is always evolving, so do take a more comprehensive look from time to time... You might find great new details in other sections! \ud83d\ude0a</p><ul><li><a href=#alive-progress rel=nofollow>alive-progress</a><ul><li><a href=#table-of-contents rel=nofollow>Table of contents</a></li><li><a href=#-new-in-31-series rel=nofollow>\ud83d\udccc NEW in 3.1 series</a></li><li><a href=#using-alive-progress rel=nofollow>Using <code>alive-progress</code></a><ul><li><a href=#get-it rel=nofollow>Get it</a></li><li><a href=#try-it rel=nofollow>Try it</a></li><li><a href=#awake-it rel=nofollow>Awake it</a></li><li><a href=#master-it rel=nofollow>Master it</a></li></ul></li><li><a href=#displaying-messages rel=nofollow>Displaying messages</a></li><li><a href=#auto-iterating rel=nofollow>Auto-iterating</a></li><li><a href=#modes-of-operation rel=nofollow>Modes of operation</a><ul><li><a href=#definiteunknown-counters rel=nofollow>Definite/unknown: Counters</a></li><li><a href=#manual-percentages rel=nofollow>Manual: Percentages</a></li><li><a href=#summary-of-modes rel=nofollow>Summary of Modes</a></li><li><a href=#the-bar-handlers rel=nofollow>The <code>bar()</code> handlers</a></li></ul></li><li><a href=#styles rel=nofollow>Styles</a></li><li><a href=#configuration rel=nofollow>Configuration</a></li><li><a href=#create-your-own-animations rel=nofollow>Create your own animations</a><ul><li><a href=#intro-how-do-they-work rel=nofollow>Intro: How do they work?</a></li><li><a href=#a-spinner-compiler-really rel=nofollow>A Spinner Compiler, really?</a></li><li><a href=#spinner-factories rel=nofollow>Spinner Factories</a></li><li><a href=#bar-factories rel=nofollow>Bar Factories</a></li></ul></li><li><a href=#advanced rel=nofollow>Advanced</a><ul><li><a href=#the-pause-mechanism rel=nofollow>The Pause Mechanism</a></li><li><a href=#loop-less-use rel=nofollow>Loop-less use</a></li><li><a href=#fps-calibration rel=nofollow>FPS Calibration</a></li><li><a href=#forcing-animations-on-pycharm-jupyter-etc rel=nofollow>Forcing animations on PyCharm, Jupyter, etc.</a></li></ul></li><li><a href=#interesting-facts rel=nofollow>Interesting facts</a></li><li><a href=#to-do rel=nofollow>To do</a></li><li><a href=#python-end-of-life-notice rel=nofollow>Python End of Life notice</a><ul><li><a href=#for-new-python-27-and-35 rel=nofollow>For new Python 2.7 and 3.5</a></li><li><a href=#for-new-python-36 rel=nofollow>For new Python 3.6</a></li></ul></li><li><a href=#license rel=nofollow>License</a></li></ul></li></ul><h2>\ud83d\udccc NEW in 3.1 series</h2><p>A very cool update here! In addition to polishing things up and improving terminal support, now <code>alive-progress</code> supports resuming computations!</p><p>When processing huge datasets or things that take a long time, you might either use batches or cache partial results. Then, in case it stops and is restarted, you end up skipping all those already done items very quickly, which makes the <code>alive_bar</code> think you're processing thousands of items per second, which in turn completely ruins the ETA... But not anymore! Just tell <code>bar()</code> that you've skipped items... \ud83d\udc4f</p><p>You can use it in two ways:</p><p><strong>1.</strong> If you do know where you've stopped:</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>120000</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=n>bar</span><span class=p>(</span><span class=mi>60000</span><span class=p>,</span> <span class=n>skipped</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>60000</span><span class=p>,</span> <span class=mi>120000</span><span class=p>):</span>        <span class=c1># process item</span>        <span class=n>bar</span><span class=p>()</span></pre><p>Yep, just call <code>bar(N, skipped=True)</code> once, with the number of items.</p><p><strong>2.</strong> If you do not know or the items are scattered:</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>120000</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>120000</span><span class=p>):</span>        <span class=k>if</span> <span class=n>done</span><span class=p>(</span><span class=n>i</span><span class=p>):</span>            <span class=n>bar</span><span class=p>(</span><span class=n>skipped</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>            <span class=k>continue</span>        <span class=c1># process item</span>        <span class=n>bar</span><span class=p>()</span></pre><p>Yep, it's as simple as that! Just call <code>bar(skipped=True)</code> when an item is already done, or <code>bar()</code> as usual otherwise. You could also share a single <code>bar(skipped=?)</code> call at the end, with a bool saying whether you did skip that item or not. Cool, huh?</p><p>Also in this version:</p><ul><li>new <code>max_cols</code> config setting, the number of columns to use if not possible to fetch it, like in jupyter and other platforms which doesn't support size</li><li>fix fetching the size of the terminal when using stderr</li><li>officially supports Python 3.11</li><li>included <a href=\"https://github.com/charliermarsh/ruff\" rel=nofollow>ruff</a> linter before building</li></ul><details><summary>\ud83d\udccc NEW in 3.0 series</summary><p>Yep, I could finally get this version out! These are the new goodies:</p><ul><li>Units support! You can now label the data you're processing, like <code>B</code>, <code>bytes</code>, or even <code>\u00b0C</code>!</li><li>Automatic scaling! With support for SI (base 1000), IEC (base 1024), and even an alternate SI with base 1024, you'll be well served!</li><li>Configurable precision! When your numbers are scaled, you get to choose how many decimals they display!</li><li>Automatic stats scaling for slow throughputs! If your processing takes minutes or more, now you'll see rates per minute, per hour, and even per day! (It works within the auto-scaling system!)</li><li>Support for using <code>sys.stderr</code> and other files instead of <code>sys.stdout</code>!</li><li>Smoothed out the rate estimation with the same Exponential Smoothing Algorithm that powers the ETA, so the bar returns a more realistic ETA!</li><li>Query the currently running widgets' data, like the monitor, rate, and ETA!</li><li>New help system on configuration errors, which explains why a value was not accepted, and what were the expected ones!</li></ul><p>Highly anticipated fixes:</p><ul><li>Support for reusing logging handlers! No more <code>TypeError: unhashable type: 'types.SimpleNamespace'</code>.</li><li>Support for logging when using <code>RotatingFileHandler</code>s! Yep, seek support is here.</li><li>Fix unknown mode always ending with a warning (!)</li></ul><p>And last but not least, a more polished layout for you to enjoy your progress!<img src=\"https://pypi-camo.freetls.fastly.net/b27d1e44488ab5ea54fbbe20d1d6589b3b5827d4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c697665332e302e706e67\" alt=\"alive-progress 3.0\"></p></details><details><summary>\ud83d\udccc NEW in 2.4 series</summary><p>Now, <code>alive_bar</code> supports <em>Dual Line</em> text mode!</p><p>If you ever wanted to include longer situational messages within the bar, you probably felt squeezed into one line. You had to shrink the beautifully animated bar or, even worse, remove widgets (!) to be able to see what you needed...<br>Not anymore!! You can now make the bar <em>Dual Line</em>, and put text below it!</p><p>Yes, there's a message below the whole bar, and any other print/logging messages scroll above it!</p><pre lang=python3><span class=n>letters</span> <span class=o>=</span> <span class=p>[</span><span class=nb>chr</span><span class=p>(</span><span class=nb>ord</span><span class=p>(</span><span class=s1>'A'</span><span class=p>)</span> <span class=o>+</span> <span class=n>x</span><span class=p>)</span> <span class=k>for</span> <span class=n>x</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>26</span><span class=p>)]</span><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>26</span><span class=p>,</span> <span class=n>dual_line</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>title</span><span class=o>=</span><span class=s1>'Alphabet'</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=k>for</span> <span class=n>c</span> <span class=ow>in</span> <span class=n>letters</span><span class=p>:</span>        <span class=n>bar</span><span class=o>.</span><span class=n>text</span> <span class=o>=</span> <span class=sa>f</span><span class=s1>'-&gt; Teaching the letter: </span><span class=si>{</span><span class=n>c</span><span class=si>}</span><span class=s1>, please wait...'</span>        <span class=k>if</span> <span class=n>c</span> <span class=ow>in</span> <span class=s1>'HKWZ'</span><span class=p>:</span>            <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'fail \"</span><span class=si>{</span><span class=n>c</span><span class=si>}</span><span class=s1>\", retry later'</span><span class=p>)</span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.3</span><span class=p>)</span>        <span class=n>bar</span><span class=p>()</span><span class=n>on</span> <span class=mi>7</span><span class=p>:</span> <span class=n>fail</span> <span class=s2>\"H\"</span><span class=p>,</span> <span class=n>retry</span> <span class=n>later</span><span class=n>on</span> <span class=mi>10</span><span class=p>:</span> <span class=n>fail</span> <span class=s2>\"K\"</span><span class=p>,</span> <span class=n>retry</span> <span class=n>later</span><span class=n>Alphabet</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a</span>            <span class=o>|</span> <span class=err>\u2583\u2585\u2587</span> <span class=mi>18</span><span class=o>/</span><span class=mi>26</span> <span class=p>[</span><span class=mi>69</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mi>6</span><span class=n>s</span> <span class=p>(</span><span class=mf>3.2</span><span class=o>/</span><span class=n>s</span><span class=p>,</span> <span class=n>eta</span><span class=p>:</span> <span class=mi>3</span><span class=n>s</span><span class=p>)</span><span class=o>-&gt;</span> <span class=n>Teaching</span> <span class=n>the</span> <span class=n>letter</span><span class=p>:</span> <span class=n>S</span><span class=p>,</span> <span class=n>please</span> <span class=n>wait</span><span class=o>...</span></pre><p>There's also a new <code>finalize</code> function parameter in <code>alive_it</code> which enables you to set the title and/or text of the final receipt, and improved logging support which detects customized loggers.</p></details><details><summary>\ud83d\udccc NEW in 2.3 series</summary><p>This is all about customization; the core widgets can now be changed:</p><ul><li>send a string to the <code>monitor</code>, <code>elapsed</code>, and <code>stats</code> widgets to make them look anyway you want!</li></ul><blockquote><p>It's incredible that these strings support all Python format features, so you can e.g., <code>{percent:.1%}</code> \ud83d\ude09.</p></blockquote><p>They can be further customized when on the <strong>final receipt</strong>!</p><ul><li>new <code>monitor_end</code>, <code>elapsed_end</code>, and <code>stats_end</code>, with dynamic formats inherited from the standard ones!</li></ul><blockquote><p>If you've hidden some widgets before, just so they wouldn't appear on the receipt, now you can see them in all their running glory, and hide just the receipt ones! Or the other way around \ud83d\ude1c</p></blockquote><p>Another addition, now <code>alive-progress</code> beautifully renders its cool final receipt whenever it is stopped, even if you CTRL+C it prematurely! I don't know why I haven't thought about that before...</p><pre lang=python3><span class=n>Download</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u26a0\ufe0e</span>                     <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>45</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>45</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>4.8</span><span class=n>s</span> <span class=p>(</span><span class=mf>9.43</span><span class=o>/</span><span class=n>s</span><span class=p>)</span></pre><p>And finally, you can choose to disable CTRL+C at all! The default is the safer <code>ctrl_c=True</code>, which does make CTRL-C work as usual.<br>Disable it <code>ctrl_c=False</code>, to make your interactive <code>alive_bar</code> much smoother to use (there are no stack traces if you stop it), and/or if it is at the top-level of your program!</p><blockquote><p>Beware: If it is e.g. inside a for-loop, it will just continue to the next iteration, which may or may not be what you want...</p></blockquote><pre lang=python3><span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>10</span><span class=p>):</span>    <span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>100</span><span class=p>,</span> <span class=n>ctrl_c</span><span class=o>=</span><span class=kc>False</span><span class=p>,</span> <span class=n>title</span><span class=o>=</span><span class=sa>f</span><span class=s1>'Download </span><span class=si>{</span><span class=n>i</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>        <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>100</span><span class=p>):</span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.02</span><span class=p>)</span>            <span class=n>bar</span><span class=p>()</span><span class=n>Download</span> <span class=mi>0</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a\u26a0\ufe0e</span>                              <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>22</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>22</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.6</span><span class=n>s</span> <span class=p>(</span><span class=mf>36.40</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>1</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a\u26a0\ufe0e</span>                      <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>42</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>42</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>1.0</span><span class=n>s</span> <span class=p>(</span><span class=mf>41.43</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>2</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u258d\u26a0\ufe0e</span>                                <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>16</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>16</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.4</span><span class=n>s</span> <span class=p>(</span><span class=mf>39.29</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>3</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u258b\u26a0\ufe0e</span>                                 <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>14</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>14</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.4</span><span class=n>s</span> <span class=p>(</span><span class=mf>33.68</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>4</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e\u26a0\ufe0e</span>                         <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>33</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>33</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.8</span><span class=n>s</span> <span class=p>(</span><span class=mf>39.48</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>5</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e\u26a0\ufe0e</span>                               <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>18</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>18</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.5</span><span class=n>s</span> <span class=p>(</span><span class=mf>37.69</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>6</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u258e\u26a0\ufe0e</span>                                 <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>13</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>13</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.3</span><span class=n>s</span> <span class=p>(</span><span class=mf>37.28</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>7</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u26a0\ufe0e</span>                           <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>30</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>30</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.8</span><span class=n>s</span> <span class=p>(</span><span class=mf>38.43</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=n>Download</span> <span class=mi>8</span> <span class=o>|</span><span class=err>\u2588\u2588\u2588\u2588\u2588\u2588\u26a0\ufe0e</span>                                 <span class=o>|</span> <span class=p>(</span><span class=err>!</span><span class=p>)</span> <span class=mi>15</span><span class=o>/</span><span class=mi>100</span> <span class=p>[</span><span class=mi>15</span><span class=o>%</span><span class=p>]</span> <span class=ow>in</span> <span class=mf>0.4</span><span class=n>s</span> <span class=p>(</span><span class=mf>36.26</span><span class=o>/</span><span class=n>s</span><span class=p>)</span><span class=o>...</span></pre></details><details><summary>\ud83d\udccc NEW in 2.2 series</summary><p>Some major new features, often requested, have finally landed!</p><ul><li>bar title can be dynamically set, changed, or even removed after being displayed</li><li>new custom fps system, which enables very slow refresh rates (to let it run on those k8s for long periods)</li><li>the final receipt can be totally hidden (great for special effects, like using the cool spinners standalone)</li><li>new support for <code>click.echo()</code> printing</li><li>terminal columns detection is safer for exotic environments</li><li>requires Python 3.7+</li></ul></details><details><summary>\ud83d\udccc NEW in 2.1 series</summary><p>YES! Now <code>alive-progress</code> has support for Jupyter Notebooks and also includes a <em>Disabled</em> state! Both were highly sought after, and have finally landed!<br>And better, I've implemented an auto-detection mechanism for jupyter notebooks, so it just works, out of the box, without any changes in your code!!</p><p>See for yourself:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/40deb51af0124c0db7dded3c5679a6267d9bca0a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d6a7570797465722e676966\" alt=\"alive-progress demo\"></p><blockquote><p>It seems to work very well, but at this moment, it should be considered <strong>experimental</strong>.<br>There were instances in which some visual glitches have appeared, like two <code>alive_bar</code> refreshes being concatenated together instead of over one another... And it's something I think I can't possibly work around: it seems Jupyter sometimes refresh the canvas at odd times, which makes it lose some data. Please let me know on the issues if something funnier arises.</p></blockquote></details><details><summary>\ud83d\udccc NEW in 2.0 series</summary><p>This is a major breakthrough in <code>alive-progress</code>!<br>I took 1 year developing it, and I'm very proud of what I've accomplished \\o/</p><ul><li>now, there's complete support for Emojis \ud83e\udd29 and exotic Unicode chars in general, which required MAJOR refactoring deep within the project, giving rise to what I called \"<strong>Cell Architecture</strong>\" =&gt; now, all internal components use and generate streams of cells instead of characters, and correctly interpret grapheme clusters \u2014 those so-called wide chars, which are encoded with a variable number of chars, but always take two cells on screen!! This has enabled us to render complex multi-chars symbols as if they were one, thus making them work on any spinners, bars, texts, borders and backgrounds, even when fractured!!! Pretty advanced stuff \ud83e\udd13</li><li>new super cool spinner compiler and runner, which generates complete animations ahead of time, and plays these ready-to-go animations seamlessly, with no overhead at all! \ud83d\ude80</li><li>the spinner compiler also includes advanced extra commands to generate and modify animations, like reshape, replace, transpose, or randomize the animation cycles!</li><li>new powerful and polished <code>.check()</code> tools that compile and beautifully render all frames from all animation cycles of spinners and bars! they can even include complete frame data, internal codepoints, and even their animations! \ud83d\udc4f</li><li>bars engine revamp, with invisible fills, advanced support for multi-char tips (which gradually enter and leave the bar), borders, tips and errors of any length, and underflow errors that can leap into the border if they can't fit!</li><li>spinners engine revamp, with standardized factory signatures, improved performance, new types, and new features: smoother bouncing spinners (with an additional frame at the edges), optimized scrolling of text messages (which go slower and pause for a moment at the edges), new alongside and sequential spinners, nicer effect in alongside spinners (which use weighted spreading over the available space), smoother animation in scrolling spinners (when the input is longer than the available space)</li><li>new builtin spinners, bars, and themes, which make use of the new animation features</li><li>new showtime that displays themes and is dynamic =&gt; it does not scroll the screen when it can't fit vertically or horizontally, and can even filter for patterns!</li><li>improved support for logging into files, which gets enriched as the print hook is!</li><li>several new configuration options for customizing appearance, including support for disabling any <code>alive-progress</code> widgets!</li><li>includes a new iterator adapter, <code>alive_it</code>, that accepts an iterable and calls <code>bar()</code> for you!</li><li>requires Python 3.6+ (and officially supports Python 3.9 and 3.10)</li></ul><blockquote><p>Since this is a major version change, direct backward compatibility is not guaranteed. If something does not work at first, just check the new imports and functions' signatures, and you should be good to go. All previous features should still work here! \ud83d\udc4d</p></blockquote></details><hr><h2>Using <code>alive-progress</code></h2><h3>Get it</h3><p>Just install with pip:</p><pre lang=sh>\u276f<span class=w> </span>pip<span class=w> </span>install<span class=w> </span>alive-progress</pre><h3>Try it</h3><p>If you're wondering what styles are builtin, it's <code>showtime</code>! ;)</p><pre lang=python3><span class=kn>from</span> <span class=nn>alive_progress.styles</span> <span class=kn>import</span> <span class=n>showtime</span><span class=n>showtime</span><span class=p>()</span></pre><blockquote><p>Note: Please disregard the path in the animated gif below, the correct one is above. These long gifs are very time-consuming to generate, so I can't make another on every single change. Thanks for your understanding.</p></blockquote><p><img src=\"https://pypi-camo.freetls.fastly.net/7832c0b5f097f7410830ba8868aa4b93f26be47b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f73686f7774696d652d7370696e6e6572732e676966\" alt=\"alive-progress spinners\"></p><p>I've made these styles just to try all the animation factories I've created, but I think some of them ended up very, very cool! Use them at will, and mix them to your heart's content!</p><p>Do you want to see actual <code>alive-progress</code> bars gloriously running in your system before trying them yourself?</p><pre lang=sh>\u276f<span class=w> </span>python<span class=w> </span>-m<span class=w> </span>alive_progress.tools.demo</pre><p><img src=\"https://pypi-camo.freetls.fastly.net/5d1eb05c120654f5e4b603bd890685a506d48cd5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d64656d6f2d746f6f6c2e706e67\" alt=\"alive-progress demo-tool\"></p><h3>Awake it</h3><p>Cool, huh?? Now enter an <code>ipython</code> REPL and try this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>alive_progress</span> <span class=kn>import</span> <span class=n>alive_bar</span><span class=kn>import</span> <span class=nn>time</span><span class=k>for</span> <span class=n>x</span> <span class=ow>in</span> <span class=mi>1000</span><span class=p>,</span> <span class=mi>1500</span><span class=p>,</span> <span class=mi>700</span><span class=p>,</span> <span class=mi>0</span><span class=p>:</span>   <span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=n>x</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>       <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1000</span><span class=p>):</span>           <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>.005</span><span class=p>)</span>           <span class=n>bar</span><span class=p>()</span></pre><p>You'll see something like this, with cool animations throughout the process \ud83d\ude1c:</p><pre><code>|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [100%] in 5.8s (171.62/s)|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b\u26a0\ufe0e            | (!) 1000/1500 [67%] in 5.8s (172.62/s)|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2717\ufe0e (!) 1000/700 [143%] in 5.8s (172.06/s)|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000 in 5.8s (172.45/s)</code></pre><p>Nice, huh? Loved it? I knew you would, thank you \ud83d\ude0a.</p><p>To actually use it, just wrap your normal loop in an <code>alive_bar</code> context manager like this:</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=n>total</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>  <span class=c1># declare your expected total</span>    <span class=k>for</span> <span class=n>item</span> <span class=ow>in</span> <span class=n>items</span><span class=p>:</span>         <span class=c1># &lt;&lt;-- your original loop</span>        <span class=nb>print</span><span class=p>(</span><span class=n>item</span><span class=p>)</span>            <span class=c1># process each item</span>        <span class=n>bar</span><span class=p>()</span>                  <span class=c1># call `bar()` at the end</span></pre><p>And it's alive! \ud83d\udc4f</p><p>So, in short: retrieve the items as always, enter the <code>alive_bar</code> context manager with the number of items, and then iterate/process those items, calling <code>bar()</code> at the end! It's that simple! :)</p><h3>Master it</h3><ul><li><code>items</code> can be any iterable, like for example, a queryset;</li><li>the first argument of the <code>alive_bar</code> is the expected total, like <code>qs.count()</code> for querysets, <code>len(items)</code> for iterables with length, or even a static number;</li><li>the call <code>bar()</code> is what makes the bar go forward \u2014 you usually call it in every iteration, just after finishing an item;</li><li>if you call <code>bar()</code> too much (or too few at the end), the bar will graphically render that deviation from the expected <code>total</code>, making it very easy to notice overflows and underflows;</li><li>to retrieve the current bar count or percentage, call <code>bar.current</code>.</li></ul><blockquote><p>You can get creative! Since the bar only goes forward when you call <code>bar()</code>, it is <strong>independent of the loop</strong>! So you can use it to monitor anything you want, like pending transactions, broken items, etc., or even call it more than once in the same iteration! So, in the end, you'll get to know how many of those \"special\" events there were, including their percentage relative to the total!</p></blockquote><h2>Displaying messages</h2><p>While inside an <code>alive_bar</code> context, you can effortlessly display messages tightly integrated with the current progress bar being displayed! It won't break in any way and will even enrich your message!</p><ul><li>the cool <code>bar.text('message')</code> and <code>bar.text = 'message'</code> set a situational message right within the bar, where you can display something about the current item or the phase the processing is in;</li><li>the (\ud83d\udccc new) dynamic title, which can be set right at the start, but also be changed anytime with <code>bar.title('Title')</code> and <code>bar.title = 'Title'</code> \u2014 mix with <code>title_length</code> to keep the bar from changing its length;</li><li>the usual Python <code>print()</code> statement, where <code>alive_bar</code> nicely cleans up the line, prints your message alongside the current bar position at the time, and continues the bar right below it;</li><li>the standard Python <code>logging</code> framework, including file outputs, is also enriched exactly like the previous one;</li><li>if you're using click CLI lib, you can even use <code>click.echo()</code> to print styled text.</li></ul><p>Awesome right? And all of these work just the same in a terminal or in a Jupyter notebook!</p><p><img src=\"https://pypi-camo.freetls.fastly.net/cead536b6afdb55fa2770491cbe34c1048ce0229/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f7072696e742d686f6f6b2e676966\" alt=\"alive-progress printing messages\"></p><h2>Auto-iterating</h2><p>You now have a quicker way to monitor anything! Here, the items are automatically tracked for you!<br>Behold the <code>alive_it</code> =&gt; the <code>alive_bar</code> iterator adapter!</p><p>Simply wrap your items with it, and loop over them as usual!<br>The bar will just work; it's that simple!</p><pre lang=python3><span class=kn>from</span> <span class=nn>alive_progress</span> <span class=kn>import</span> <span class=n>alive_it</span><span class=k>for</span> <span class=n>item</span> <span class=ow>in</span> <span class=n>alive_it</span><span class=p>(</span><span class=n>items</span><span class=p>):</span>   <span class=c1># &lt;&lt;-- wrapped items</span>    <span class=nb>print</span><span class=p>(</span><span class=n>item</span><span class=p>)</span>                <span class=c1># process each item</span></pre><p>HOW COOL IS THAT?! \ud83d\ude1c</p><p>All <code>alive_bar</code> parameters apply but <code>total</code>, which is smarter (if not supplied, it will be auto-inferred from your data using <code>len</code> or <code>length_hint</code>), and <code>manual</code> that does not make sense here.</p><p>Note there isn't any <code>bar</code> handle at all in there. But what if you do want it, e.g. to set text messages or retrieve the current progress?<br>You can interact with the internal <code>alive_bar</code> by just assigning <code>alive_it</code> to a variable like this:</p><pre lang=python3><span class=n>bar</span> <span class=o>=</span> <span class=n>alive_it</span><span class=p>(</span><span class=n>items</span><span class=p>)</span>          <span class=c1># &lt;&lt;-- bar with wrapped items</span><span class=k>for</span> <span class=n>item</span> <span class=ow>in</span> <span class=n>bar</span><span class=p>:</span>               <span class=c1># &lt;&lt;-- iterate on bar</span>    <span class=nb>print</span><span class=p>(</span><span class=n>item</span><span class=p>)</span>                <span class=c1># process each item</span>    <span class=n>bar</span><span class=o>.</span><span class=n>text</span><span class=p>(</span><span class=sa>f</span><span class=s1>'ok: </span><span class=si>{</span><span class=n>item</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span>    <span class=c1># WOW, it works!</span></pre><p>Note that this is a slightly special <code>bar</code>, which does not support <code>bar()</code>, since the iterator adapter tracks items automatically for you. Also, it supports <code>finalize</code>, which enables you to set the title and/or text of the final receipt:</p><pre lang=python3><span class=n>alive_it</span><span class=p>(</span><span class=n>items</span><span class=p>,</span> <span class=n>finalize</span><span class=o>=</span><span class=k>lambda</span> <span class=n>bar</span><span class=p>:</span> <span class=n>bar</span><span class=o>.</span><span class=n>text</span><span class=p>(</span><span class=s1>'Success!'</span><span class=p>))</span><span class=o>...</span></pre><blockquote><p>In a nutshell:</p><ul><li>full use is always <code>with alive_bar() as bar</code>, where you iterate and call <code>bar()</code> whenever you want;</li><li>quick adapter use is <code>for item in alive_it(items)</code>, where items are automatically tracked;</li><li>full adapter use is <code>bar = alive_it(items)</code>, where in addition to items being automatically tracked, you get a special iterable <code>bar</code> able to customize the inner <code>alive_progress</code> however you want.</li></ul></blockquote><h2>Modes of operation</h2><h3>Definite/unknown: Counters</h3><p>Actually, the <code>total</code> argument is optional. If you do provide it, the bar enters in <strong>definite mode</strong>, the one used for well-bounded tasks. This mode has all the widgets <code>alive-progress</code> has to offer: progress, count, throughput, and ETA.</p><p>If you don't, the bar enters in <strong>unknown mode</strong>, the one used for unbounded tasks. In this mode, the whole progress bar is animated, as it's not possible to determine the progress, and therefore the ETA. But you still get the count and throughput widgets as usual.<br>The cool spinner is still present here alongside the progress bar, both running their animations concurrently and independently of each other, rendering a unique show in your terminal! \ud83d\ude1c</p><p>Both definite and unknown modes use internally a <strong>counter</strong> to maintain progress. This is the source value which all widgets are derived from.</p><h3>Manual: Percentages</h3><p>On the other hand, the <strong>manual mode</strong> uses internally a <strong>percentage</strong> to maintain progress. This enables you to get complete control of the bar position! It's usually used to monitor processes that only feed you the percentage of completion, or to generate some kind of special effects.</p><p>To use it, just include a <code>manual=True</code> argument into <code>alive_bar</code> (or <code>config_handler</code>), and you get to send any percentage to the <code>bar()</code> handler! For example, to set it to 15%, just call <code>bar(0.15)</code> \u2014 which is 15 / 100.</p><p>You can also use <code>total</code> here! If you do provide it, <code>alive-progress</code> will infer an internal <em>counter</em> by itself, and thus will be able to offer you the same count, throughput, and ETA widgets!<br>If you don't, you'll at least get rough versions of the throughput and ETA widgets. The throughput will use \"%/s\" (percent per second), and the ETA will be till 1.0 (100%). Both are very inaccurate but better than nothing.</p><p>You can call <code>bar</code> in manual mode as frequently as you want! The refresh rate will still be asynchronously computed as usual, according to the current progress and the elapsed time, so you won't ever spam the terminal with more updates than it can handle.</p><h3>Summary of Modes</h3><p>When <code>total</code> is provided all is cool:</p><table><thead><tr><th align=center>mode</th><th align=center>counter</th><th align=center>percentage</th><th align=center>throughput</th><th align=center>ETA</th><th align=center>over/underflow</th></tr></thead><tbody><tr><td align=center>definite</td><td align=center>\u2705 (user tick)</td><td align=center>\u2705 (inferred)</td><td align=center>\u2705</td><td align=center>\u2705</td><td align=center>\u2705</td></tr><tr><td align=center>manual</td><td align=center>\u2705 (inferred)</td><td align=center>\u2705 (user set)</td><td align=center>\u2705</td><td align=center>\u2705</td><td align=center>\u2705</td></tr></tbody></table><p>When it isn't, some compromises have to be made:</p><table><thead><tr><th align=center>mode</th><th align=center>counter</th><th align=center>percentage</th><th align=center>throughput</th><th align=center>ETA</th><th align=center>over/underflow</th></tr></thead><tbody><tr><td align=center>unknown</td><td align=center>\u2705 (user tick)</td><td align=center>\u274c</td><td align=center>\u2705</td><td align=center>\u274c</td><td align=center>\u274c</td></tr><tr><td align=center>manual</td><td align=center>\u274c</td><td align=center>\u2705 (user set)</td><td align=center>\u26a0\ufe0f (simpler)</td><td align=center>\u26a0\ufe0f (rough)</td><td align=center>\u2705</td></tr></tbody></table><p>But actually it's quite simple, you do not need to think about which mode you should use:<br>Just always send the <code>total</code> if you have it, and use <code>manual</code> if you need it!<br>It will just work the best it can! \ud83d\udc4f \\o/</p><h3>The <code>bar()</code> handlers</h3><p>The <code>bar()</code> handlers support either relative or absolute semantics, depending on the mode:</p><ul><li><em>definite</em> and <em>unknown</em> modes use <strong>relative positioning</strong>, so you can just call <code>bar()</code> to increment the counter by one, or send any other positive increment like <code>bar(5)</code> to increment by those at once;</li><li><em>manual</em> modes use <strong>absolute positioning</strong>, so you can just call <code>bar(0.35)</code> to instantly put the bar in 35% position \u2014 this argument is mandatory here!</li></ul><blockquote><p>The manual modes enable you to get super creative! Since you can set the bar instantly to whatever position you want, you could:</p><ul><li>make it go backwards \u2014 perhaps to graphically display the timeout of something;</li><li>create special effects \u2014 perhaps to act as a real-time gauge of some sort.</li></ul></blockquote><p>In any case, to retrieve the current count/percentage, just call: <code>bar.current</code>:</p><ul><li>in <em>definite</em> and <em>unknown</em> modes, this provides an <strong>integer</strong> \u2014 the actual internal counter;</li><li>in <em>manual</em> modes, this provides a <strong>float</strong> in the interval [0, 1] \u2014 the last percentage set.</li></ul><p>Last but not least, the <code>bar()</code> handler of the <strong>definite</strong> mode has a unique ability: skipping items for an accurate ETA! Just call <code>bar(skipped=False)</code> or <code>bar(skipped=True)</code> to use it. When skipped is True, that item(s) are ignored when computing the rate, and thus not ruining the ETA.</p><hr><p>Maintaining an open source project is hard and time-consuming, and I've put much \u2764\ufe0f and effort into this.</p><p>If you've appreciated my work, you can back me up with a donation! Thank you \ud83d\ude0a</p><p><a href=\"https://www.buymeacoffee.com/rsalmei\" rel=nofollow><img align=right src=\"https://pypi-camo.freetls.fastly.net/c3996102087c7b40d4608838559ce1426e251251/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67\" width=217px height=51x></a><a href=\"https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&amp;no_recurring=0&amp;item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&amp;currency_code=USD\" rel=nofollow><img align=right alt=\"Donate with PayPal button\" src=\"https://pypi-camo.freetls.fastly.net/88635fcff5d2586c607ae56c8b4bf0edb8c1f357/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966\"></a></p><hr><h2>Styles</h2><p>The <code>showtime</code> exhibit has an optional argument to choose which show to present, <code>Show.SPINNERS</code> (default), <code>Show.BARS</code> or <code>Show.THEMES</code>, do take a look at them! ;)</p><pre lang=python3><span class=kn>from</span> <span class=nn>alive_progress.styles</span> <span class=kn>import</span> <span class=n>showtime</span><span class=p>,</span> <span class=n>Show</span></pre><blockquote><p>Note: Please disregard the path in the animated gif below, the correct one is above. These long gifs are very time-consuming to generate, so I can't make another on every single change. Thanks for your understanding.</p></blockquote><p><img src=\"https://pypi-camo.freetls.fastly.net/9de10ea9fdd8c947c1ba75e9e24c2b243941f750/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f73686f7774696d652d626172732e676966\" alt=\"alive-progress bars\"></p><p>And the themes one (\ud83d\udccc new in 2.0):</p><p><img src=\"https://pypi-camo.freetls.fastly.net/555725d062dfc50554a1e209cd36ff3ca9b27c01/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f73686f7774696d652d7468656d65732e676966\" alt=\"alive-progress themes\"></p><p>The <code>showtime</code> exhibit also accepts some customization options:</p><ul><li><strong>fps</strong>: the frames per second rate refresh rate, default is 15;</li><li><strong>length</strong>: the length of the bars, default is 40;</li><li><strong>pattern</strong>: a filter to choose which ones to display.</li></ul><p>For example to get a marine show, you can <code>showtime(pattern='boat|fish|crab')</code>:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/9e06d184cf6402ac7ea3eefbc9a34315af787576/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f73686f7774696d652d6d6172696e652d7370696e6e6572732e676966\" alt=\"alive-progress filtered spinners\"></p><blockquote><p>You can also access these shows with the shorthands <code>show_bars()</code>, <code>show_spinners()</code>, and <code>show_themes()</code>!</p></blockquote><blockquote><p>There's also a small utility called <code>print_chars()</code>, to help find that cool character to put in your customized spinners and bars, or to determine if your terminal does support Unicode characters.</p></blockquote><h2>Configuration</h2><p>There are several options to customize both appearance and behavior!<br>All of them can be set both directly in the <code>alive_bar</code> or globally in the <code>config_handler</code>!</p><p>These are the options - default values in brackets:</p><ul><li><code>title</code>: an optional, always visible bar title</li><li><code>length</code>: [<code>40</code>] the number of cols to render the animated progress bar</li><li><code>max_cols</code>: [<code>80</code>] the maximum cols to use if not possible to fetch it, like in jupyter</li><li><code>spinner</code>: the spinner style to be rendered next to the bar<br>   \u21b3 accepts a predefined spinner name, a custom spinner factory, or None</li><li><code>bar</code>: the bar style to be rendered in known modes<br>   \u21b3 accepts a predefined bar name, a custom bar factory, or None</li><li><code>unknown</code>: the bar style to be rendered in the unknown mode<br>   \u21b3 accepts a predefined spinner name, or a custom spinner factory (cannot be None)</li><li><code>theme</code>: [<code>'smooth'</code>] a set of matching spinner, bar, and unknown<br>   \u21b3 accepts a predefined theme name</li><li><code>force_tty</code>: [<code>None</code>] forces animations to be on, off, or according to the tty (more details <a href=#forcing-animations-on-pycharm-jupyter-etc rel=nofollow>here</a>)<br>   \u21b3 None -&gt; auto select, according to the terminal/Jupyter<br>   \u21b3 True -&gt; unconditionally enables animations, but still auto-detects Jupyter Notebooks<br>   \u21b3 False -&gt; unconditionally disables animations, keeping only the final receipt</li><li><code>file</code>: [<code>sys.stdout</code>] the file object to use: <code>sys.stdout</code>, <code>sys.stderr</code>, or a similar <code>TextIOWrapper</code></li><li><code>disable</code>: [<code>False</code>] if True, completely disables all output, do not install hooks</li><li><code>manual</code>: [<code>False</code>] set to manually control the bar position</li><li><code>enrich_print</code>: [<code>True</code>] enriches print() and logging messages with the bar position</li><li><code>receipt</code>: [<code>True</code>] prints the nice final receipt, disables if False</li><li><code>receipt_text</code>: [<code>False</code>] set to repeat the last text message in the final receipt</li><li><code>monitor</code> (bool|str): [<code>True</code>] configures the monitor widget <code>152/200 [76%]</code><br>   \u21b3 send a string with <code>{count}</code>, <code>{total}</code> and <code>{percent}</code> to customize it</li><li><code>elapsed</code> (bool|str): [<code>True</code>] configures the elapsed time widget <code>in 12s</code><br>   \u21b3 send a string with <code>{elapsed}</code> to customize it</li><li><code>stats</code> (bool|str): [<code>True</code>] configures the stats widget <code>(123.4/s, eta: 12s)</code><br>   \u21b3 send a string with <code>{rate}</code> and <code>{eta}</code> to customize it</li><li><code>monitor_end</code> (bool|str): [<code>True</code>] configures the monitor widget within final receipt<br>   \u21b3 same as monitor, the default format is dynamic, it inherits <code>monitor</code>'s one</li><li><code>elapsed_end</code> (bool|str): [<code>True</code>] configures the elapsed time widget within final receipt<br>   \u21b3 same as elapsed, the default format is dynamic, it inherits <code>elapsed</code>'s one</li><li><code>stats_end</code> (bool|str): [<code>True</code>] configures the stats widget within final receipt<br>   \u21b3 send a string with <code>{rate}</code> to customize it (no relation to stats)</li><li><code>title_length</code>: [<code>0</code>] fixes the length of titles, or 0 for unlimited<br>   \u21b3 title will be truncated if longer, and a cool ellipsis \"\u2026\" will appear at the end</li><li><code>spinner_length</code>: [<code>0</code>] forces the spinner length, or <code>0</code> for its natural one</li><li><code>refresh_secs</code>: [<code>0</code>] forces the refresh period to this, <code>0</code> is the reactive visual feedback</li><li><code>ctrl_c</code>: [<code>True</code>] if False, disables CTRL+C (captures it)</li><li><code>dual_line</code>: [<code>False</code>] if True, places the text below the bar</li><li><code>unit</code>: any text that labels your entities</li><li><code>scale</code>: the scaling to apply to units: <code>None</code>, <code>SI</code>, <code>IEC</code>, or <code>SI2</code><br>   \u21b3 supports aliases: <code>False</code> or <code>''</code> -&gt; <code>None</code>, <code>True</code> -&gt; <code>SI</code>, <code>10</code> or <code>'10'</code> -&gt; <code>SI</code>, <code>2</code> or <code>'2'</code> -&gt; <code>IEC</code></li><li><code>precision</code>: [<code>1</code>] how many decimals do display when scaling</li></ul><p>And there's also one that can only be set locally in an <code>alive_bar</code> context:</p><ul><li><code>calibrate</code>: maximum theoretical throughput to calibrate the animation speed (more details <a href=#fps-calibration rel=nofollow>here</a>)</li></ul><p>To set them locally, just send them as keyword arguments to <code>alive_bar</code>:</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=n>total</span><span class=p>,</span> <span class=n>title</span><span class=o>=</span><span class=s1>'Processing'</span><span class=p>,</span> <span class=n>length</span><span class=o>=</span><span class=mi>20</span><span class=p>,</span> <span class=n>bar</span><span class=o>=</span><span class=s1>'halloween'</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=o>...</span></pre><p>To use them globally, send them to <code>config_handler</code>, and any <code>alive_bar</code> created after that will include those options! And you can mix and match them, local options always have precedence over global ones:</p><pre lang=python3><span class=kn>from</span> <span class=nn>alive_progress</span> <span class=kn>import</span> <span class=n>config_handler</span><span class=n>config_handler</span><span class=o>.</span><span class=n>set_global</span><span class=p>(</span><span class=n>length</span><span class=o>=</span><span class=mi>20</span><span class=p>,</span> <span class=n>spinner</span><span class=o>=</span><span class=s1>'wait'</span><span class=p>)</span><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=n>total</span><span class=p>,</span> <span class=n>bar</span><span class=o>=</span><span class=s1>'blocks'</span><span class=p>,</span> <span class=n>spinner</span><span class=o>=</span><span class=s1>'twirls'</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=c1># the length is 20, the bar is 'blocks' and the spinner is 'twirls'.</span>    <span class=o>...</span></pre><h2>Create your own animations</h2><p>Yes, you can assemble your own spinners! And it's easy!<br>I've created a plethora of special effects, so you can just mix and match them any way you want! There are frames, scrolling, bouncing, sequential, alongside, and delayed spinners! Get creative! \ud83d\ude0d</p><h3>Intro: How do they work?</h3><p>The spinners' animations are engineered by very advanced generator expressions, deep within several layers of meta factories, factories and generators \ud83e\udd2f!</p><ul><li>the meta factory (public interface) receives the styling parameters from you, the user, and processes/stores them inside a closure to create the actual factory =&gt; this is the object you'll send to both <code>alive_bar</code> and <code>config_handler</code>;</li><li>internally it still receives other operating parameters (like for instance the rendition length), to assemble the actual generator expression of the animation cycles of some effect, within yet another closure;</li><li>this, for each cycle, assembles another generator expression for the animation frames of the same effect;</li><li>these generators together finally produce the streams of cycles and frames of the cool animations we see on the screen! Wow! \ud83d\ude1c\ud83d\udc4f</li></ul><p>These generators are capable of multiple different animation cycles according to the spinner behavior, e.g. a bouncing spinner can run one cycle to smoothly bring a subject into the scene, then repeatedly reposition it until the other side, then make it smoothly disappear off the scene =&gt; and this is all only one cycle! Then it can be followed by another cycle to make it all again but backwards!And bouncing spinners also accept <em>different</em> and <em>alternating</em> patterns in both the right and left directions, which makes them generate the cartesian product of all the combinations, possibly producing dozens of different cycles until they start repeating them!! \ud83e\udd2f</p><p>And there's more, I think one of the most impressive achievements I got in this animation system (besides the spinner compiler itself)... They only yield more animation frames until the current cycle is not exhausted, then <strong>they halt themselves</strong>! Yep, the next cycle does not start just yet! This behavior creates natural breaks in exactly the correct spots, where the animations are not disrupted, so I can smoothly link with whatever other animation I want!!<br>This has all kinds of cool implications: the cycles can have different frame counts, different screen lengths, they do not need to be synchronized, they can create long different sequences by themselves, they can cooperate to play cycles in sequence or alongside, and I can amaze you displaying several totally distinct animations at the same time without any interferences whatsoever!</p><blockquote><p>It's almost like they were... <em>alive</em>!! \ud83d\ude04<br>==&gt; Yes, that's where this project's name came from! \ud83d\ude09</p></blockquote><h3>A Spinner Compiler, really?</h3><p>Now, these generators of cycles and frames are fully consumed ahead of time by the <strong>Spinner Compiler</strong>! This is a very cool new processor that I made inside the <em>Cell Architecture</em> effort, to make all these animations work even in the presence of wide chars or complex grapheme clusters! It was very hard to make these clusters  gradually enter and exit frames, smoothly, while keeping them from breaking the Unicode encoding and especially maintain their original lengths in all frames! Yes, several chars in sequence can represent another completely different symbol, so they cannot ever be split! They have to enter and exit the frame always together, all at once, or the grapheme won't show up at all (an Emoji for instance)!! Enter the <strong>Spinner Compiler</strong>......</p><p>This has made possible some incredible things!! Since this Compiler generates the whole spinner frame data beforehand:</p><ul><li>the grapheme fixes can be applied only once;</li><li>the animations do not need to be calculated again!<br>So, I can just collect all that <em>ready to play</em> animations and be done with it, <strong>no runtime overhead</strong> at all!! \ud83d\udc4f</li></ul><p>Also, with the complete frame data compiled and persisted, I could create several commands to <strong>refactor</strong> that data, like changing shapes, replacing chars, adding visual pauses (frame repetitions), generating bouncing effects on-demand over any content, and even transposing cycles with frames!!</p><p>But how can you see these effects? Does the effect you created look good? Or is it not working as you thought? YES, now you can see all generated cycles and frames analytically, in a very beautiful rendition!!<br>I love what I've achieved here \ud83d\ude0a, it's probably THE most beautiful tool I've ever created... Behold the <code>check</code> tool!!</p><p><img src=\"https://pypi-camo.freetls.fastly.net/33c51a5df8a3e511703e925e46e973789cd5411c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d7370696e6e65722d636865636b2e706e67\" alt=\"alive-progress check tool\"></p><p>It's awesome if I say so myself, isn't it? And a very complex piece of software I'm proud of, <a href=\"alive_progress/animations/spinner_compiler.py\" rel=nofollow>take a look at its code</a> if you'd like.</p><p>And the <code>check</code> tool is much more powerful! For instance, you can see the codepoints of the frames!!! And maybe have a glimpse of why this version was so, so very hard and complex to make...</p><p><img src=\"https://pypi-camo.freetls.fastly.net/465b814d592a0de74772ba4210b5650821ce28bb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d7370696e6e65722d636865636b2d636f6465706f696e74732e706e67\" alt=\"alive-progress check tool\"></p><p>In red, you see the grapheme clusters, that occupy one or two \"logical positions\", regardless of their actual sizes... These are the \"Cells\" of the new <em>Cell Architecture</em>...<br>Look how awesome an Emoji Flag is represented:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/aa3a976b7b5d429b3f365f2feb0683b6a20236a4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d7370696e6e65722d636865636b2d636f6465706f696e74732d666c61672e706e67\" alt=\"alive-progress check tool\"></p><p>The flag seems to move so smoothly because it uses \"half-characters\"! Since it is a wide char, <code>alive-progress</code> knows it will be rendered with \"two visible chars\", and the animations consider this, but compose with spaces, which occupy only one. When one uses mixed backgrounds, the situation is much more complex...</p><h3>Spinner Factories</h3><p>The types of factories I've created are:</p><ul><li><code>frames</code>: draws any sequence of characters at will, that will be played frame by frame in sequence;</li><li><code>scrolling</code>: generates a smooth flow from one side to the other, hiding behind or wrapping upon invisible borders \u2014 allows using subjects one at a time, generating several cycles of distinct characters;</li><li><code>bouncing</code>: similar to <code>scrolling</code>, but makes the animations bounce back to the start, hiding behind or immediately bouncing upon invisible borders;</li><li><code>sequential</code> get a handful of factories and play them one after the other sequentially! allows to intermix them or not;</li><li><code>alongside</code> get a handful of factories and play them alongside simultaneously, why choose when you can have them all?! allows to choose the pivot of the animation;</li><li><code>delayed</code>: get any other factory and copy it multiple times, increasingly skipping some frames on each one! very cool effects are made here!</li></ul><p>For more details please look at their docstrings, which are very complete.</p><h3>Bar Factories</h3><p>Customizing bars is nowhere near that involved. Let's say they are \"immediate\", passive objects. They do not support animations, i.e. they will always generate the same rendition given the same parameters. Remember spinners are infinite generators, capable of generating long and complex sequences.</p><p>Well, bars also have a meta factory, use closures to store the styling parameters, and receive additional operating parameters, but then the actual factory can't generate any content by itself. It still needs an extra parameter, a floating-point number between 0 and 1, which is the percentage to render itself.</p><blockquote><p><code>alive_bar</code> calculates this percentage automatically based on the counter and total, but you can send it yourself when in the <code>manual</code> mode!</p></blockquote><p>Bars also do not have a Bar Compiler, but they <strong>do provide the check tool</strong>!! \ud83c\udf89</p><p><img src=\"https://pypi-camo.freetls.fastly.net/44904d23540721e3232846cc8a13528eacceebc9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d6261722d636865636b2e706e67\" alt=\"alive-progress check tool\"></p><p>You can even mix and match wide chars and normal chars just like in spinners! (and everything keeps perfectly aligned \ud83d\ude05)</p><p><img src=\"https://pypi-camo.freetls.fastly.net/41fcbed3f5f839122e8b2f34f1b0b7b2ed19b6bf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d6261722d636865636b2d6d69782e706e67\" alt=\"alive-progress check tool\"></p><blockquote><p>Use the check tools to your heart's content!! They have even more goodies awaiting you, even real-time animations!</p></blockquote><blockquote><p>Create the wildest and coolest animations you can and send them to me!<br>I'm thinking about creating some kind of <code>contrib</code> package, with user-contributed spinners and bars!</p></blockquote><p>Wow, if you've read everything till here, you should now have a sound knowledge about using <code>alive-progress</code>! \ud83d\udc4f<br>But brace yourself because there is even more, exciting stuff lies ahead!</p><hr><p>Maintaining an open source project is hard and time-consuming, and I've put much \u2764\ufe0f and effort into this.</p><p>If you've appreciated my work, you can back me up with a donation! Thank you \ud83d\ude0a</p><p><a href=\"https://www.buymeacoffee.com/rsalmei\" rel=nofollow><img align=right src=\"https://pypi-camo.freetls.fastly.net/c3996102087c7b40d4608838559ce1426e251251/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67\" width=217px height=51x></a><a href=\"https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&amp;no_recurring=0&amp;item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&amp;currency_code=USD\" rel=nofollow><img align=right alt=\"Donate with PayPal button\" src=\"https://pypi-camo.freetls.fastly.net/88635fcff5d2586c607ae56c8b4bf0edb8c1f357/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966\"></a></p><hr><h2>Advanced</h2><h3>The Pause Mechanism</h3><p>Oh, you want to pause it altogether, I hear? This is an amazing novel concept, not found anywhere AFAIK.<br>With this you get to act on some items <strong>manually</strong>, at will, right in the middle of an ongoing processing!!<br>YES, you can return to the prompt and fix, change, submit things, and the bar will just \"remember\" where it was...</p><p>Suppose you need to reconcile payment transactions (been there, done that). You need to iterate over thousands of them, detect somehow the faulty ones, and fix them. This fix is not simple nor deterministic, you need to study each one to understand what to do. They could be missing a recipient, or have the wrong amount, or not be synced with the server, etc., it's hard to even imagine all possibilities.</p><p>Typically, you would have to let the detection process run until completion, appending to a list each inconsistency it finds and waiting, potentially a long time, until you can finally start fixing them... You could of course mitigate that by processing in chunks, or printing them and acting via another shell, etc., but those have their own shortcomings... \ud83d\ude13<br>Now, there's a better way! Simply pause the actual detection process for a while! Then you just have to wait till the next fault is found, and act in near real-time!</p><p>To use the pause mechanism you just have to write a function, so the code can <code>yield</code> the items you want to interact with. You most probably already use one in your code, but in the <code>ipython</code> shell or another REPL you probably don't. So just wrap your debug code in a function, then enter within a <code>bar.pause()</code> context!!</p><pre lang=python3><span class=k>def</span> <span class=nf>reconcile_transactions</span><span class=p>():</span>    <span class=n>qs</span> <span class=o>=</span> <span class=n>Transaction</span><span class=o>.</span><span class=n>objects</span><span class=o>.</span><span class=n>filter</span><span class=p>()</span>  <span class=c1># django example, or in sqlalchemy: session.query(Transaction).filter()</span>    <span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=n>qs</span><span class=o>.</span><span class=n>count</span><span class=p>())</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>        <span class=k>for</span> <span class=n>transaction</span> <span class=ow>in</span> <span class=n>qs</span><span class=p>:</span>            <span class=k>if</span> <span class=n>faulty</span><span class=p>(</span><span class=n>transaction</span><span class=p>):</span>                <span class=k>with</span> <span class=n>bar</span><span class=o>.</span><span class=n>pause</span><span class=p>():</span>                    <span class=k>yield</span> <span class=n>transaction</span>            <span class=n>bar</span><span class=p>()</span></pre><p>That's it! It's that simple! \\o/<br>Now run <code>gen = reconcile_transactions()</code> to instantiate the generator, and whenever you want the next faulty transaction, just call <code>next(gen, None)</code>! I love it...<br>The <code>alive-progress</code> bar will start and run as usual, but as soon as any inconsistency is found, the bar will pause itself, turning off the refresh thread and remembering its exact state, and yield the transaction to you directly on the prompt! It's almost magic! \ud83d\ude03</p><pre lang=text>In [11]: gen = reconcile_transactions()In [12]: next(gen, None)|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   | 105/200 [52%] in 5s (18.8/s, eta: 4s)Out[12]: Transaction&lt;#123&gt;</pre><p>You can then inspect the transaction with the usual <code>_</code> shortcut of <code>ipython</code> (or just directly assign it with <code>t = next(gen, None)</code>), and you're all set to fix it!<br>When you're done, just reactivate the bar with the same <code>next</code> call as before!! The bar reappears, turns everything back on, and continues <strong>like it had never stopped</strong>!! Ok, it is magic \ud83d\ude1c</p><pre lang=text>In [21]: next(gen, None)|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   | \u2581\u2583\u2585 106/200 [52%] in 5s (18.8/s, eta: 4s)</pre><p>Rinse and repeat till the final receipt appears, and there'll be no faulty transactions anymore. \ud83d\ude04</p><h3>Loop-less use</h3><p>So, you need to monitor a fixed operation, without any loops, right?<br>It'll work for sure! Here is a naive example (we'll do better in a moment):</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>4</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=n>corpus</span> <span class=o>=</span> <span class=n>read_file</span><span class=p>(</span><span class=n>file</span><span class=p>)</span>    <span class=n>bar</span><span class=p>()</span>  <span class=c1># file was read, tokenizing</span>    <span class=n>tokens</span> <span class=o>=</span> <span class=n>tokenize</span><span class=p>(</span><span class=n>corpus</span><span class=p>)</span>    <span class=n>bar</span><span class=p>()</span>  <span class=c1># tokens generated, processing</span>    <span class=n>data</span> <span class=o>=</span> <span class=n>process</span><span class=p>(</span><span class=n>tokens</span><span class=p>)</span>    <span class=n>bar</span><span class=p>()</span>  <span class=c1># process finished, sending response</span>    <span class=n>resp</span> <span class=o>=</span> <span class=n>send</span><span class=p>(</span><span class=n>data</span><span class=p>)</span>    <span class=n>bar</span><span class=p>()</span>  <span class=c1># we're done! four bar calls with `total=4`</span></pre><p>It's naive because it assumes all steps take the same amount of time, but actually, each one may take a very different time to complete. Think <code>read_file</code> and <code>tokenize</code> may be extremely fast, which makes the percentage skyrocket to 50%, then stopping for a long time in the <code>process</code> step... You get the point, it can ruin the user experience and create a very misleading ETA.</p><p>To improve upon that you need to distribute the steps' percentages accordingly! Since you told <code>alive_bar</code> there were four steps, when the first one was completed it understood 1/4 or 25% of the whole processing was complete... Thus, you need to measure how long your steps actually take and use the <strong>manual mode</strong> to increase the bar percentage by the right amount at each step!</p><p>You can use my other open source project <a href=\"https://github.com/rsalmei/about-time\" rel=nofollow>about-time</a> to easily measure these durations! Just try to simulate with some representative inputs, to get better results. Something like:</p><pre lang=python3><span class=kn>from</span> <span class=nn>about_time</span> <span class=kn>import</span> <span class=n>about_time</span><span class=k>with</span> <span class=n>about_time</span><span class=p>()</span> <span class=k>as</span> <span class=n>t_total</span><span class=p>:</span>          <span class=c1># this about_time will measure the whole time of the block.</span>    <span class=k>with</span> <span class=n>about_time</span><span class=p>()</span> <span class=k>as</span> <span class=n>t1</span>            <span class=c1># the other four will get the relative timings within the whole.</span>        <span class=n>corpus</span> <span class=o>=</span> <span class=n>read_file</span><span class=p>(</span><span class=n>file</span><span class=p>)</span>       <span class=c1># `about_time` supports several calling conventions, including one-liners.</span>    <span class=k>with</span> <span class=n>about_time</span><span class=p>()</span> <span class=k>as</span> <span class=n>t2</span>            <span class=c1># see its documentation for more details.</span>        <span class=n>tokens</span> <span class=o>=</span> <span class=n>tokenize</span><span class=p>(</span><span class=n>corpus</span><span class=p>)</span>    <span class=k>with</span> <span class=n>about_time</span><span class=p>()</span> <span class=k>as</span> <span class=n>t3</span>        <span class=n>data</span> <span class=o>=</span> <span class=n>process</span><span class=p>(</span><span class=n>tokens</span><span class=p>)</span>    <span class=k>with</span> <span class=n>about_time</span><span class=p>()</span> <span class=k>as</span> <span class=n>t4</span>        <span class=n>resp</span> <span class=o>=</span> <span class=n>send</span><span class=p>(</span><span class=n>data</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'percentage1 = </span><span class=si>{</span><span class=n>t1</span><span class=o>.</span><span class=n>duration</span><span class=w> </span><span class=o>/</span><span class=w> </span><span class=n>t_total</span><span class=o>.</span><span class=n>duration</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'percentage2 = </span><span class=si>{</span><span class=n>t2</span><span class=o>.</span><span class=n>duration</span><span class=w> </span><span class=o>/</span><span class=w> </span><span class=n>t_total</span><span class=o>.</span><span class=n>duration</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'percentage3 = </span><span class=si>{</span><span class=n>t3</span><span class=o>.</span><span class=n>duration</span><span class=w> </span><span class=o>/</span><span class=w> </span><span class=n>t_total</span><span class=o>.</span><span class=n>duration</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s1>'percentage4 = </span><span class=si>{</span><span class=n>t4</span><span class=o>.</span><span class=n>duration</span><span class=w> </span><span class=o>/</span><span class=w> </span><span class=n>t_total</span><span class=o>.</span><span class=n>duration</span><span class=si>}</span><span class=s1>'</span><span class=p>)</span></pre><p>There you go! Now you know the relative timings of all the steps, and can use them to improve your original code! Just get the cumulative timings and put them within a manual mode <code>alive_bar</code>!</p><p>For example, if the timings you found were 10%, 30%, 20%, and 40%, you'd use 0.1, 0.4, 0.6, and 1.0 (the last one should always be 1.0):</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>4</span><span class=p>,</span> <span class=n>manual</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=n>corpus</span> <span class=o>=</span> <span class=n>read_big_file</span><span class=p>()</span>    <span class=n>bar</span><span class=p>(</span><span class=mf>0.1</span><span class=p>)</span>                           <span class=c1># 10%</span>    <span class=n>tokens</span> <span class=o>=</span> <span class=n>tokenize</span><span class=p>(</span><span class=n>corpus</span><span class=p>)</span>    <span class=n>bar</span><span class=p>(</span><span class=mf>0.4</span><span class=p>)</span>                           <span class=c1># 30% + 10% from previous steps</span>    <span class=n>data</span> <span class=o>=</span> <span class=n>process</span><span class=p>(</span><span class=n>tokens</span><span class=p>)</span>    <span class=n>bar</span><span class=p>(</span><span class=mf>0.6</span><span class=p>)</span>                           <span class=c1># 20% + 40% from previous steps</span>    <span class=n>resp</span> <span class=o>=</span> <span class=n>send</span><span class=p>(</span><span class=n>data</span><span class=p>)</span>    <span class=n>bar</span><span class=p>(</span><span class=mf>1.</span><span class=p>)</span>                            <span class=c1># always 1. in the last step</span></pre><p>That's it! The user experience and ETA should be greatly improved now.</p><h3>FPS Calibration</h3><p>So, you want to calibrate the engine?</p><p>The <code>alive-progress</code> bars have cool visual feedback of the current throughput, so you can actually <strong>see</strong> how fast your processing is, as the spinner runs faster or slower with it.<br>For this to happen, I've put together and implemented a few fps curves to empirically find which one gave the best feel of speed:</p><p align=center><img alt=\"alive-progress fps curves\" src=\"https://pypi-camo.freetls.fastly.net/5c8cc2cd517a611f852a157656a015633bd06e6e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d6261725f6670732e706e67\" width=80% height=80%></p><p align=center>(interactive version [here](https://www.desmos.com/calculator/ema05elsux))</p><p>The graph shows the logarithmic (red), parabolic (blue) and linear (green) curves, these are the ones I started with. It was not an easy task, I've made dozens of tests, and never found one that really inspired that feel of speed I was looking for. The best one seemed to be the logarithmic one, but it reacted poorly with small numbers.I know I could make it work with a few twists for those small numbers, so I experimented a lot and adjusted the logarithmic curve (dotted orange) until I finally found the behavior I expected! It is the one that seemed to provide the best all-around perceived speed changes throughout the whole spectrum from a few to billions...That is the curve I've settled with, and it's the one used in all modes and conditions. In the future and if someone would find it useful, that curve could be configurable.</p><p>Well, the default <code>alive-progress</code> calibration is <strong>1,000,000</strong> in bounded modes, i.e., it takes 1 million iterations per second for the bar to refresh itself at 60 frames per second. In the manual unbounded mode, it is <strong>1.0</strong> (100%). Both enable a vast operating range and generally work quite well.</p><p>For example, take a look at the effect these very different calibrations have, running the very same code at the very same speed! Notice the feel the spinner passes to the user, is this processing going slow or going fast? And remember that isn't only the spinner refreshing but the whole line, complete with the bar rendition and all widgets, so everything gets smoother or sluggish:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/d8d2f0f23ec05c0db918d401cc886b7df3531bbb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f616c6976652d63616c6962726174696f6e2e676966\" alt=\"alive-progress calibration\"></p><blockquote><p>So, if your processing hardly gets to 20 items per second, and you think <code>alive-progress</code> is rendering sluggish, you could increase that sense of speed by calibrating it to let's say <code>40</code>, and it will be running waaaay faster... It is better to always leave some headroom and calibrate it to something between 50% and 100% more, and then tweak it from there to find the one you like the most! :)</p></blockquote><h3>Forcing animations on PyCharm, Jupyter, etc.</h3><p>Do these astonishing <code>alive-progress</code> animations refuse to display?</p><p>PyCharm is awesome, I love it! But I'll never understand why they've disabled emulating a terminal by default... If you do use PyCharm's output console, please enable this on all your Run Configurations:</p><p align=center><img alt=\"alive-progress in pycharm\" src=\"https://pypi-camo.freetls.fastly.net/0b7f91b027064477a108487bfc0e313408814093/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7273616c6d65692f616c6976652d70726f67726573732f6d61696e2f696d672f7079636861726d2d7465726d696e616c2e706e67\"></p><blockquote><p>I even recommend you go into <code>File</code> &gt; <code>New Projects Setup</code> &gt; <code>Run Configuration Templates</code>, select <code>Python</code>, and also enable it there, so any new ones you create will already have this set.</p></blockquote><p>In addition to that, some terminals report themselves as \"non-interactive\", like when running out of a real terminal (PyCharm and Jupyter for example), in shell pipelines (<code>cat file.txt | python program.py</code>), or in background processes (not connected to a tty).</p><p>When <code>alive-progress</code> finds itself in a non-interactive terminal, it automatically disables all kinds of animations, printing only the final receipt. This is made in order to avoid both messing up the pipeline output and spamming your log file with thousands of <code>alive-progress</code> refreshes.</p><p>So, when you know it's safe, you can force them to see <code>alive-progress</code> in all its glory! Here is the <code>force_tty</code> argument:</p><pre lang=python3><span class=k>with</span> <span class=n>alive_bar</span><span class=p>(</span><span class=mi>1000</span><span class=p>,</span> <span class=n>force_tty</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span> <span class=k>as</span> <span class=n>bar</span><span class=p>:</span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1000</span><span class=p>):</span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>.01</span><span class=p>)</span>        <span class=n>bar</span><span class=p>()</span></pre><p>The values accepted are:</p><ul><li><code>force_tty=True</code> -&gt; always enables animations, and auto-detects Jupyter Notebooks!</li><li><code>force_tty=False</code> -&gt; always disables animations, keeping only the final receipt</li><li><code>force_tty=None</code> (default) -&gt; auto detect, according to the terminal's tty state</li></ul><p>You can also set it system-wide using <code>config_handler</code>, so you don't need to pass it manually anymore.</p><blockquote><p>Do note that PyCharm's console and Jupyter notebooks are heavily instrumented and thus have much more overhead, so the outcome may not be as fluid as you would expect. On top of that, Jupyter notebooks do not support ANSI Escape Codes, so I had to develop some workarounds to emulate functions like \"clear the line\" and \"clear from cursor\"... To see the fluid and smooth <code>alive_bar</code> animations as I intended, always prefer a full-fledged terminal.</p></blockquote><h2>Interesting facts</h2><ul><li>This whole project was implemented in functional style;</li><li>It uses extensively (and very creatively) Python <em>Closures</em> and <em>Generators</em>, e.g. all <a href=\"https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/spinners.py#L10\" rel=nofollow>spinners</a> are made with cool <em>Generator Expressions</em>! Besides it, there are other cool examples like the <a href=\"https://github.com/rsalmei/alive-progress/blob/main/alive_progress/styles/exhibit.py#L42\" rel=nofollow>exhibit</a> module, and the core <a href=\"https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/utils.py#L10-L17\" rel=nofollow>spinner player</a>/<a href=\"https://github.com/rsalmei/alive-progress/blob/main/alive_progress/animations/spinner_compiler.py#L233\" rel=nofollow>spinner runner</a> generators; \ud83d\ude1c</li><li>Until 2.0, <code>alive-progress</code> hadn't had any dependency. Now it has two: one is <a href=\"https://github.com/rsalmei/about-time\" rel=nofollow>about-time</a> (another very cool project of mine if I say so myself), to track the spinner compilation times and generate its human-friendly renditions. The other is <a href=\"https://github.com/alvinlindstam/grapheme\" rel=nofollow>grapheme</a>, to detect grapheme cluster breaks (I've opened an <a href=\"https://github.com/alvinlindstam/grapheme/issues/13\" rel=nofollow>issue</a> there asking about the future and correctness of it, and the author guarantees he intends to update the project on every new Unicode version);</li><li>Also, until 2.0 <code>alive-progress</code> hadn't had a single Python class! Now it has a few tiny ones for very specific reasons (change callables, iterator adapter, and some descriptors for the widgets).<br>Everything else is a function, which generates other functions internally with some state on the parent, i.e. <em>Closures</em>. I've used them to create spinner factories, bar factories, the global configuration, the system hooks, the spinner compiler (which is also a big <em>Function Decorator</em>), even <code>alive_bar</code> itself is a function! And in the latter mostly, I dynamically plug several other functions into the main one (Python functions have a <code>__dict__</code> just like classes do). \ud83d\ude1d</li></ul><h2>To do</h2><ul><li>enable multiple simultaneous bars for nested or multiple activities (the most requested, but very complex)</li><li>reset a running bar context, i.e. run in unknown mode while \"quantifying\" then switch to definite mode</li><li>dynamic bar width rendition, which notices terminal size changes and shrink or expand the bar as needed (currently <code>alive_bar</code> does notice terminal size changes, but just truncates the line accordingly)</li><li>improve test coverage, currently at <del>77</del>89% branch coverage (but it's very hard since it's multithreaded, full of stateful closures, and includes system print hooks)</li><li>create a <code>contrib</code> system somehow, to allow a simple way to share cool spinners and bars from users</li><li>support colors in spinners and bars (it's very hard, since color codes alter string sizes, which makes it tricky to synchronize animations, besides correctly slicing, reversing, and iterating fragments of strings while <em>also maintaining color codes</em> is very, very complex)<ul><li>update here: this may be much simpler now with the new <em>Cell Architecture</em>!</li></ul></li><li>any other ideas are welcome!</li></ul><details><summary>Noteworthy features already done \u2705</summary><ul><li>resuming computations support with <code>skipped</code> items</li><li>help system on configuration errors</li><li>readable widgets to extract information</li><li>exponential smoothing algorithm for the rate</li><li>support for using <code>stderr</code> and other files instead of <code>stdout</code></li><li>units with automatic scaling</li><li>dual-line mode</li><li>customize final receipt widgets</li><li>customize widgets rendition like <code>monitor</code>, <code>elapsed</code>, <code>stats</code></li><li>bar title can be dynamically set, changed or removed</li><li>exponential smoothing algorithm for the ETA</li><li>jupyter notebook support, which works the same as in the terminal, animations and everything</li><li>create an unknown mode for bars (without a known total and eta)</li><li>implement a pausing mechanism</li><li>change spinner styles</li><li>change bar styles</li><li>include a global configuration system</li><li>create customizable generators for scrolling, bouncing, delayed, and compound spinners</li><li>create an exhibition for spinners and bars, to see them all in motion</li><li>include theme support in configuration</li><li>soft wrapping support</li><li>hiding cursor support</li><li>Python logging support</li><li>exponential smoothing of ETA time series</li><li>create an exhibition for themes</li></ul></details><details><summary>Changelog highlights</summary><p><br>Complete <a href=\"https://github.com/rsalmei/alive-progress/blob/main/CHANGELOG.md\" rel=nofollow>here</a>.</p><ul><li>3.1.4: support spaces at the start and end of titles and units</li><li>3.1.3: better error handling of invalid <code>alive_it</code> calls, detect nested uses of alive_progress and throw a clearer error message</li><li>3.1.2: fix some exotic ANSI Escape Codes not being printed (OSC)</li><li>3.1.1: support for printing ANSI Escape Codes without extra newlines, typing annotations in <code>alive_it</code></li><li>3.1.0: new resuming computations support with <code>skipped</code> items, new <code>max_cols</code> config setting for jupyter, fix fetching the size of the terminal when using stderr, officially supports Python 3.11</li><li>3.0.1: fix for logging streams that extend StreamHandler but doesn't allow changing streams</li><li>3.0.0: units support with automatic and configurable scaling and precision, automatic stats scaling for slow throughputs, support for using <code>sys.stderr</code> and other files instead of <code>sys.stdout</code>, smoothed out the rate estimation, more queries into the currently running widgets' data, help system in configuration errors</li><li>2.4.1: fix a crash when dual-line and disabled are set</li><li>2.4.0: support dual line text mode; finalize function parameter in alive_it; improve logging support, detecting customized ones</li><li>2.3.1: introduce ctrl_c config param; print the final receipt even when interrupted</li><li>2.3.0: customizable <code>monitor</code>, <code>elapsed</code>, and <code>stats</code> core widgets, new <code>monitor_end</code>, <code>elapsed_end</code>, and <code>stats_end</code> core widgets, better support for CTRL+C, which makes <code>alive_bar</code> stop prematurely</li><li>2.2.0: bar title can be dynamically set, changed or removed; customizable refresh rates; final receipt can be hidden; <code>click.echo()</code> support; faster performance; safer detection of terminal columns; <code>bar.current</code> acts like a property; remove Python 3.6</li><li>2.1.0: Jupyter notebook support (experimental), Jupyter auto-detection, disable feature and configuration</li><li>2.0.0: new system-wide Cell Architecture with grapheme clusters support; super cool spinner compiler and runner; <code>.check()</code> tools in both spinners and bars; bars and spinners engines revamp; new animation modes in alongside and sequential spinners; new builtin spinners, bars, and themes; dynamic showtime with themes, scroll protection and filter patterns; improved logging for files; several new configuration options for customizing appearance; new iterator adapter <code>alive_it</code>; uses <code>time.perf_counter()</code> high-resolution clock; requires Python 3.6+ (and officially supports Python 3.9 and 3.10)</li><li>1.6.2: new <code>bar.current()</code> method; newlines get printed on vanilla Python REPL; the bar is truncated to 80 chars on Windows</li><li>1.6.1: fix logging support for Python 3.6 and lower; support logging for file; support for wide Unicode chars, which use 2 columns but have length 1</li><li>1.6.0: soft wrapping support; hiding cursor support; Python logging support; exponential smoothing of ETA time series; proper bar title, always visible; enhanced times representation; new <code>bar.text()</code> method, to set situational messages at any time, without incrementing position (deprecates 'text' parameter in <code>bar()</code>); performance optimizations</li><li>1.5.1: fix compatibility with Python 2.7 (should be the last one, version 2 is in the works, with Python 3 support only)</li><li>1.5.0: standard_bar accepts a <code>background</code> parameter instead of <code>blank</code>, which accepts arbitrarily sized strings and remains fixed in the background, simulating a bar going \"over it\"</li><li>1.4.4: restructure internal packages; 100% branch coverage of all animations systems, i.e., bars and spinners</li><li>1.4.3: protect configuration system against other errors (length='a' for example); first automated tests, 100% branch coverage of configuration system</li><li>1.4.2: sanitize text input, keeping \\n from entering and replicating bar on the screen</li><li>1.4.1: include license file in the source distribution</li><li>1.4.0: print() enrichment can now be disabled (locally and globally), exhibits now have a real-time fps indicator, new exhibit functions <code>show_spinners</code> and <code>show_bars</code>, new utility <code>print_chars</code>, <code>show_bars</code> gain some advanced demonstrations (try it again!)</li><li>1.3.3: further improve stream compatibility with isatty</li><li>1.3.2: beautifully finalize bar in case of unexpected errors</li><li>1.3.1: fix a subtle race condition that could leave artifacts if ended very fast, flush print buffer when position changes or bar terminates, keep the total argument from unexpected types</li><li>1.3.0: new fps calibration system, support force_tty and manual options in global configuration, multiple increment support in bar handler</li><li>1.2.0: filled blanks bar styles, clean underflow representation of filled blanks</li><li>1.1.1: optional percentage in manual mode</li><li>1.1.0: new manual mode</li><li>1.0.1: pycharm console support with force_tty, improve compatibility with Python stdio streams</li><li>1.0.0: first public release, already very complete and mature</li></ul></details><h2>Python End of Life notice</h2><p><code>alive_progress</code> will always try to keep up with Python, so starting from version 2.0, I'll drop support for all Python versions which enter EoL. See their schedule <a href=\"https://endoflife.date/python\" rel=nofollow>here</a>.</p><p>But don't worry if you can't migrate just yet: <code>alive_progress</code> versions are perennial, so just keep using the one that works for you and you're good.<br>I just strongly recommend setting older <code>alive_progress</code> packages in a requirements.txt file with the following formats. These will always fetch the latest build releases previous to a given version, so, if I ever release bug fixes, you'll get them too.</p><h3>For new Python 2.7 and 3.5</h3><pre lang=sh>\u276f<span class=w> </span>pip<span class=w> </span>install<span class=w> </span>-U<span class=w> </span><span class=s2>\"alive_progress&lt;2\"</span></pre><h3>For new Python 3.6</h3><pre lang=sh>\u276f<span class=w> </span>pip<span class=w> </span>install<span class=w> </span>-U<span class=w> </span><span class=s2>\"alive_progress&lt;2.2\"</span></pre><h2>License</h2><p>This software is licensed under the MIT License. See the LICENSE file in the top distribution directory for the full license text.</p><hr><p>Maintaining an open source project is hard and time-consuming, and I've put much \u2764\ufe0f and effort into this.</p><p>If you've appreciated my work, you can back me up with a donation! Thank you \ud83d\ude0a</p><p><a href=\"https://www.buymeacoffee.com/rsalmei\" rel=nofollow><img align=right src=\"https://pypi-camo.freetls.fastly.net/c3996102087c7b40d4608838559ce1426e251251/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67\" width=217px height=51x></a><a href=\"https://www.paypal.com/donate?business=6SWSHEB5ZNS5N&amp;no_recurring=0&amp;item_name=I%27m+the+author+of+alive-progress%2C+clearly+and+about-time.+Thank+you+for+appreciating+my+work%21&amp;currency_code=USD\" rel=nofollow><img align=right alt=\"Donate with PayPal button\" src=\"https://pypi-camo.freetls.fastly.net/88635fcff5d2586c607ae56c8b4bf0edb8c1f357/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966\"></a></p><hr>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/rsalmei/alive-progress\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/alive-progress\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:rsalmei@gmail.com\">Rog\u00e9rio Sampaio de Almeida</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      progress,    </span>    <span class=\"package-keyword\">      bar,    </span>    <span class=\"package-keyword\">      progress-bar,    </span>    <span class=\"package-keyword\">      progressbar,    </span>    <span class=\"package-keyword\">      spinner,    </span>    <span class=\"package-keyword\">      eta,    </span>    <span class=\"package-keyword\">      monitoring,    </span>    <span class=\"package-keyword\">      python,    </span>    <span class=\"package-keyword\">      terminal,    </span>    <span class=\"package-keyword\">      multi-threaded,    </span>    <span class=\"package-keyword\">      REPL,    </span>    <span class=\"package-keyword\">      alive,    </span>    <span class=\"package-keyword\">      animated,    </span>    <span class=\"package-keyword\">      visual,    </span>    <span class=\"package-keyword\">      feedback,    </span>    <span class=\"package-keyword\">      simple,    </span>    <span class=\"package-keyword\">      live,    </span>    <span class=\"package-keyword\">      efficient,    </span>    <span class=\"package-keyword\">      monitor,    </span>    <span class=\"package-keyword\">      stats,    </span>    <span class=\"package-keyword\">      elapsed,    </span>    <span class=\"package-keyword\">      time,    </span>    <span class=\"package-keyword\">      throughput    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.7,  &lt;4  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/rsalmei/\" aria-label=\"rsalmei\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/5b348f99b1b39c946365a8e2c5b086c7efa89dae/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f63623664666661666563376162356164623962346435306233363964356266303f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for rsalmei from gravatar.com\" title=\"Avatar for rsalmei from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            rsalmei          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Environment</strong>      <ul>        <li>          <a href=\"/search/?c=Environment+%3A%3A+Console\">            Console          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Natural Language</strong>      <ul>        <li>          <a href=\"/search/?c=Natural+Language+%3A%3A+English\">            English          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/alive-progress/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.5/\">                <p class=\"release__version\">                  3.1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-11-08T23:23:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 8, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.4/\">                <p class=\"release__version\">                  3.1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-06-01T01:16:22+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 1, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.3/\">                <p class=\"release__version\">                  3.1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-05-26T03:45:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 26, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.2/\">                <p class=\"release__version\">                  3.1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-05-09T01:09:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 9, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.1/\">                <p class=\"release__version\">                  3.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-04-08T04:48:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 8, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.1.0/\">                <p class=\"release__version\">                  3.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-03-24T02:51:26+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 24, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.0.1/\">                <p class=\"release__version\">                  3.0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-01-01T22:01:58+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 1, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/3.0.0/\">                <p class=\"release__version\">                  3.0.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-12-22T05:24:05+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 22, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.4.1/\">                <p class=\"release__version\">                  2.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-04-01T19:56:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 1, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.4.0/\">                <p class=\"release__version\">                  2.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-22T04:51:06+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 22, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.3.1/\">                <p class=\"release__version\">                  2.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-02-11T05:28:33+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 11, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.3.0/\">                <p class=\"release__version\">                  2.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-02-08T02:18:33+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 8, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.2.0/\">                <p class=\"release__version\">                  2.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-02-02T05:59:18+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 2, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.1.0/\">                <p class=\"release__version\">                  2.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-10-19T01:28:57+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 19, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/2.0.0/\">                <p class=\"release__version\">                  2.0.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-26T23:30:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 26, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.6.2/\">                <p class=\"release__version\">                  1.6.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-08T01:37:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 8, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.6.1/\">                <p class=\"release__version\">                  1.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-11T22:50:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 11, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.6.0/\">                <p class=\"release__version\">                  1.6.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-10T00:28:09+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 10, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.5.1/\">                <p class=\"release__version\">                  1.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-05-04T20:26:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 4, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.5.0/\">                <p class=\"release__version\">                  1.5.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-05-03T01:49:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 3, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.4.4/\">                <p class=\"release__version\">                  1.4.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-18T06:18:27+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 18, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.4.3/\">                <p class=\"release__version\">                  1.4.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-14T20:50:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 14, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.4.2/\">                <p class=\"release__version\">                  1.4.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-13T20:10:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 13, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.4.1/\">                <p class=\"release__version\">                  1.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-07T04:07:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 7, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.4.0/\">                <p class=\"release__version\">                  1.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-06T00:36:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 6, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.3.3/\">                <p class=\"release__version\">                  1.3.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-01-26T06:15:30+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 26, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.3.2/\">                <p class=\"release__version\">                  1.3.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-01-26T05:41:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 26, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.3.1/\">                <p class=\"release__version\">                  1.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-01-26T03:23:42+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 26, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.3.0/\">                <p class=\"release__version\">                  1.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-09-17T05:45:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 17, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.2.0/\">                <p class=\"release__version\">                  1.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-24T06:02:53+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 24, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.1.1/\">                <p class=\"release__version\">                  1.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-21T03:03:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 21, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.1.0/\">                <p class=\"release__version\">                  1.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-17T04:17:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 17, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.0.1/\">                <p class=\"release__version\">                  1.0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-09T04:44:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 9, 2019</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/alive-progress/1.0/\">                <p class=\"release__version\">                  1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-05T06:01:35+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 5, 2019</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/6a/cf/de25c4f6123c3b3eb5acc87144d3e017df25b32c16806b14572a259939ac/alive-progress-3.1.5.tar.gz\">          alive-progress-3.1.5.tar.gz        </a>        (111.9 kB        <a href=\"#copy-hash-modal-cb806fda-cd33-4875-87fd-e35218954b38\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2023-11-08T23:23:54+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 8, 2023</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distribution            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/d5/81/91e164705bdf4e2774cea59f566a41ab25f3c87affd716516fc8b03a4039/alive_progress-3.1.5-py3-none-any.whl\">          alive_progress-3.1.5-py3-none-any.whl        </a>        (76.0 kB        <a href=\"#copy-hash-modal-09e0beba-da2c-4145-b509-abe706c13774\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2023-11-08T23:23:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 8, 2023</time>          <code>py3</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-cb806fda-cd33-4875-87fd-e35218954b38\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for alive-progress-3.1.5.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for alive-progress-3.1.5.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">42e399a66c8150dc507602dff7b7953f105ef11faf97ddaa6d27b1cbf45c4c98</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">95d6c90b946f68a2e0cef661090f9f50</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">6acfde25c4f6123c3b3eb5acc87144d3e017df25b32c16806b14572a259939ac</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-09e0beba-da2c-4145-b509-abe706c13774\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for alive_progress-3.1.5-py3-none-any.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for alive_progress-3.1.5-py3-none-any.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">347220c1858e3abe137fa0746895668c04df09c5261a13dc03f05795e8a29be5</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">d4cfb66f33162e38c90f96e00d59f4db</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">d58191e164705bdf4e2774cea59f566a41ab25f3c87affd716516fc8b03a4039</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
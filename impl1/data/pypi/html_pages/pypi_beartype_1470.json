{
  "libtype": "pypi",
  "libname": "beartype",
  "url": "https://beartype.readthedocs.io",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" /><meta content=\"Beartype is an open-source pure-Python PEP-compliant constant-time runtime type-checker emphasizing efficiency and portability.\" lang=\"en\" name=\"description\" xml:lang=\"en\" />    <title>The Typing Tree &#8212; beartype 0.17.3 documentation</title>      <link href=\"_static/css/theme.css\" rel=\"stylesheet\">  <link href=\"_static/css/index.ff1ffe594081f20da1ef19478df9384b.css\" rel=\"stylesheet\">      <link rel=\"stylesheet\"    href=\"_static/vendor/fontawesome/5.13.0/css/all.min.css\">  <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin    href=\"_static/vendor/fontawesome/5.13.0/webfonts/fa-solid-900.woff2\">  <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin    href=\"_static/vendor/fontawesome/5.13.0/webfonts/fa-brands-400.woff2\">                  <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/css/blank.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />      <link rel=\"preload\" as=\"script\" href=\"_static/js/index.be7d3bbb2ef33a8344ce.js\">    <script data-url_root=\"#\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/jquery.js\"></script>    <script src=\"_static/underscore.js\"></script>    <script src=\"_static/_sphinx_javascript_frameworks_compat.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script src=\"_static/sphinx_highlight.js\"></script>    <script async=\"async\" src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"index\" title=\"Index\" href=\"genindex/\" />    <link rel=\"search\" title=\"Search\" href=\"search/\" />    <link rel=\"next\" title=\"Install\" href=\"install/\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />    <meta name=\"docsearch:language\" content=\"en\">        <!-- Google Analytics -->      <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/doc/src/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"beartype\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"pydata_sphinx_theme\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head>  <body data-spy=\"scroll\" data-target=\"#bd-toc-nav\" data-offset=\"80\">        <div class=\"container-fluid\" id=\"banner\"></div>        <nav class=\"navbar navbar-light navbar-expand-lg bg-light fixed-top bd-navbar\" id=\"navbar-main\"><div class=\"container-xl\">  <div id=\"navbar-start\">        <a class=\"navbar-brand\" href=\"#\">  <img src=\"_static/https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg\" class=\"logo\" alt=\"logo\"></a>      </div>  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-collapsible\" aria-controls=\"navbar-collapsible\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">    <span class=\"navbar-toggler-icon\"></span>  </button>    <div id=\"navbar-collapsible\" class=\"col-lg-9 collapse navbar-collapse\">    <div id=\"navbar-center\" class=\"mr-auto\">            <div class=\"navbar-center-item\">        <ul id=\"navbar-main-elements\" class=\"navbar-nav\">    <li class=\"toctree-l1 current active nav-item\"> <a class=\"current reference internal nav-link\" href=\"#\">  Bearpedia </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"install/\">  Install </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"tldr/\">  tl;dr </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"eli5/\">  ELI5 </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"api/\">  API </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"faq/\">  FAQ </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"pep/\">  BigData\u2122 </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"code/\">  Code </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"math/\">  Math </a></li><li class=\"toctree-l1 nav-item\"> <a class=\"reference internal nav-link\" href=\"moar/\">  Moar </a></li>    </ul>      </div>          </div>    <div id=\"navbar-end\">            <div class=\"navbar-end-item\">        <ul id=\"navbar-icon-links\" class=\"navbar-nav\" aria-label=\"Icon Links\">        <li class=\"nav-item\">          <a class=\"nav-link\" href=\"https://github.com/beartype/beartype\" rel=\"noopener\" target=\"_blank\" title=\"GitHub\">            <span><i class=\"fab fa-github-square\"></i></span>            <label class=\"sr-only\">GitHub</label>          </a>        </li>        <li class=\"nav-item\">          <a class=\"nav-link\" href=\"https://pypi.org/project/beartype\" rel=\"noopener\" target=\"_blank\" title=\"PyPI\">            <span><i class=\"fab fa-python\"></i></span>            <label class=\"sr-only\">PyPI</label>          </a>        </li>        <li class=\"nav-item\">          <a class=\"nav-link\" href=\"https://anaconda.org/conda-forge/beartype\" rel=\"noopener\" target=\"_blank\" title=\"Anaconda\">            <span><i class=\"far fa-circle\"></i></span>            <label class=\"sr-only\">Anaconda</label>          </a>        </li>        <li class=\"nav-item\">          <a class=\"nav-link\" href=\"https://libraries.io/pypi/beartype\" rel=\"noopener\" target=\"_blank\" title=\"Libraries.io\">            <span><i class=\"fas fa-chart-area\"></i></span>            <label class=\"sr-only\">Libraries.io</label>          </a>        </li>        <li class=\"nav-item\">          <a class=\"nav-link\" href=\"https://readthedocs.org/projects/beartype\" rel=\"noopener\" target=\"_blank\" title=\"ReadTheDocs\">            <span><i class=\"fas fa-book\"></i></span>            <label class=\"sr-only\">ReadTheDocs</label>          </a>        </li>      </ul>      </div>          </div>  </div></div>    </nav>        <div class=\"container-xl\">      <div class=\"row\">                                  <!-- Only show if we have sidebars configured, else just a small margin  -->            <div class=\"col-12 col-md-3 bd-sidebar\"><form class=\"bd-search d-flex align-items-center\" action=\"search/\" method=\"get\">  <i class=\"icon fas fa-search\"></i>  <input type=\"search\" class=\"form-control\" name=\"q\" id=\"search-input\" placeholder=\"Search the docs ...\" aria-label=\"Search the docs ...\" autocomplete=\"off\" ></form><!--------------------( LICENSE                                  )------------------Copyright (c) 2014-2024 Beartype authors.See \"LICENSE\" for further details.------------------( SYNOPSIS                                 )------------------PyData Sphinx theme-specific empty left sidebar template kludge.------------------( DESCRIPTION                              )------------------This template forces this theme to populate the left sidebar with headingsdefined by the global \":toctree:\" directive in our root \"index.rst\" document.For unknown reasons, this theme omits these headings by default and thus onlyuselessly displays a blank left sidebar.------------------( SEE ALSO                                 )------------------* Pull request (PR) by @choldgraf that resolved this in the exact same way as  below, which theme maintainers sadly closed without merging:  https://github.com/pydata/pydata-sphinx-theme/pull/536* Commentary by @kinow summarizing @choldgraf's changeset for use in downstream  projects such as this, which the template below is more-or-less shamelessly  copy-pasted from:  https://github.com/pydata/pydata-sphinx-theme/issues/90#issuecomment-1181250562* Open issue discussing this boilerplate pablum. Naturally, nothing was done:  https://github.com/pydata/pydata-sphinx-theme/issues/221  Fascinatingly, from the same issue:  * Theme load @jorisvandenbossche claims this is desirable behaviour, because:    \"That is because for the root index.html, this TOC is actually already    shown, but in the header. This theme basically tries to look at the global    toctree of the full sphinx site, and the puts the first level in the top    header bar, and the second (+ potentially third) level in the left sidebar.\"    Of course, when only the first level exists, the left sidebar is empty. Ugh!  * @holoviews lead @maximlt leverages the exact same template on the official    Holoviews site, but hilariously admits that he forgot how he did it:    \"I would actually like to replicate that on each one of our sites, the    problem is that I really have no clue how the TOC ended up being displayed    in the sidebar on this site\"--><!-- FIXME: Submit a new upstream issue with this theme requesting official     support for enabling this functionality via a new theme-specific option in     \"copy.py\". Basically *ALL* downstream projects using this theme currently     appear to copy-paste this template into their Sphinx trees.--><nav class=\"bd-links d-none d-md-block\" id=\"bd-docs-nav\" aria-label=\"Main navigation\">  <div class=\"bd-toc-item active\">    <p class=\"caption\" role=\"heading\"> <span class=\"caption-text\">  Bear with Us </span></p><ul class=\"current nav bd-sidenav\"> <li class=\"toctree-l1 current active\">  <a class=\"current reference internal\" href=\"#\">   Bearpedia  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"install/\">   Install  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"tldr/\">   tl;dr  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"eli5/\">   ELI5  </a> </li> <li class=\"toctree-l1 has-children\">  <a class=\"reference internal\" href=\"api/\">   API  </a>  <input class=\"toctree-checkbox\" id=\"toctree-checkbox-1\" name=\"toctree-checkbox-1\" type=\"checkbox\"/>  <label for=\"toctree-checkbox-1\">   <i class=\"fas fa-chevron-down\">   </i>  </label>  <ul>   <li class=\"toctree-l2\">    <a class=\"reference internal\" href=\"api_claw/\">     Beartype Import Hooks    </a>   </li>   <li class=\"toctree-l2\">    <a class=\"reference internal\" href=\"api_decor/\">     Beartype Decorator    </a>   </li>   <li class=\"toctree-l2\">    <a class=\"reference internal\" href=\"api_vale/\">     Beartype Validators    </a>   </li>   <li class=\"toctree-l2\">    <a class=\"reference internal\" href=\"api_door/\">     Beartype Introspectors    </a>   </li>   <li class=\"toctree-l2\">    <a class=\"reference internal\" href=\"api_roar/\">     Beartype Errors    </a>   </li>  </ul> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"faq/\">   FAQ  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"pep/\">   BigData\u2122  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"code/\">   Code  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"math/\">   Math  </a> </li> <li class=\"toctree-l1\">  <a class=\"reference internal\" href=\"moar/\">   Moar  </a> </li></ul>  </div><!--                         show_nav_level=theme_show_nav_level|int,--></nav><div  id=\"ethical-ad-placement\"  class=\"flat\"  data-ea-publisher=\"readthedocs\"  data-ea-type=\"readthedocs-sidebar\"  data-ea-manual=\"true\"></div>            </div>                                          <div class=\"d-none d-xl-block col-xl-2 bd-toc\">                                        <div class=\"toc-item\">                <div class=\"tocsection onthispage pt-5 pb-3\">    <i class=\"fas fa-list\"></i> On this page</div><nav id=\"bd-toc-nav\">    <ul class=\"visible nav section-nav flex-column\"> <li class=\"toc-h1 nav-item toc-entry\">  <a class=\"reference internal nav-link\" href=\"#\">   The Typing Tree  </a> </li> <li class=\"toc-h1 nav-item toc-entry\">  <a class=\"reference internal nav-link\" href=\"#license\">   License  </a> </li> <li class=\"toc-h1 nav-item toc-entry\">  <a class=\"reference internal nav-link\" href=\"#funding\">   Funding  </a> </li> <li class=\"toc-h1 nav-item toc-entry\">  <a class=\"reference internal nav-link\" href=\"#contributors\">   Contributors  </a> </li> <li class=\"toc-h1 nav-item toc-entry\">  <a class=\"reference internal nav-link\" href=\"#history\">   History  </a> </li></ul></nav>              </div>                            <div class=\"toc-item\">                <div class=\"tocsection editthispage\">    <a href=\"https://github.com/beartype/beartype/edit/main/doc/src/index.rst\">        <i class=\"fas fa-pencil-alt\"></i> Edit this page    </a></div>              </div>                                    </div>                                                              <main class=\"col-12 col-md-9 col-xl-7 py-md-5 pl-md-5 pr-md-4 bd-content\" role=\"main\">                            <div>                  <div class=\"admonition tip\"><p class=\"admonition-title\">Tip</p><p><a class=\"reference external\" href=\"https://github.com/sponsors/leycec\">Feed the bear! The bear is rooting around in your refuse pile</a>. You feel sadness.</p></div><p><a class=\"reference external\" href=\"https://github.com/beartype/beartype\"><img alt=\"beartype \u2014[ the bare-metal type-checker ]\u2014\" src=\"https://raw.githubusercontent.com/beartype/beartype-assets/main/banner/logo.png\" /></a></p><p><a class=\"reference external\" href=\"https://codecov.io/gh/beartype/beartype\"><img alt=\"beartype test coverage status\" src=\"https://codecov.io/gh/beartype/beartype/branch/main/graph/badge.svg?token=E6F4YSY9ZQ\" /></a> <a class=\"reference external\" href=\"https://github.com/beartype/beartype/actions?workflow=test\"><img alt=\"beartype continuous integration (CI) status\" src=\"https://github.com/beartype/beartype/workflows/test/badge.svg\" /></a> <a class=\"reference external\" href=\"https://beartype.readthedocs.io/en/latest/?badge=latest\"><img alt=\"beartype Read The Docs (RTD) status\" src=\"https://readthedocs.org/projects/beartype/badge/?version=latest\" /></a></p><p><strong>Beartype</strong> is an <a class=\"reference external\" href=\"https://github.com/beartype/beartype/blob/main/LICENSE\">open-source</a> <a class=\"reference internal\" href=\"faq/#faq-pure\"><span class=\"std std-ref\">pure-Python</span></a> <a class=\"reference internal\" href=\"pep/#pep-pep\"><span class=\"std std-ref\">PEP-compliant</span></a> <a class=\"reference internal\" href=\"faq/#faq-realtime\"><span class=\"std std-ref\">near-real-time</span></a><a class=\"reference internal\" href=\"faq/#faq-hybrid\"><span class=\"std std-ref\">hybrid runtime-static</span></a> <a class=\"reference internal\" href=\"faq/#faq-third\"><span class=\"std std-ref\">third-generation</span></a><a class=\"reference internal\" href=\"eli5/#eli5-eli5\"><span class=\"std std-ref\">type-checker</span></a> emphasizing efficiency, usability,unsubstantiated jargon we just made up, and thrilling puns.</p><p>Beartype enforces <a class=\"reference internal\" href=\"eli5/#eli5-typing\"><span class=\"std std-ref\">type hints</span></a> across your entire app in<a class=\"reference internal\" href=\"api_claw/#api-claw-api-claw\"><span class=\"std std-ref\">two lines of runtime code with no runtime overhead</span></a>.If seeing is believing, prepare to do both those things.</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Install beartype.</span>$<span class=\"w\"> </span>pip3<span class=\"w\"> </span>install<span class=\"w\"> </span>beartype<span class=\"c1\"># Edit the &quot;{your_package}.__init__&quot; submodule with your favourite IDE.</span>$<span class=\"w\"> </span>vim<span class=\"w\"> </span><span class=\"o\">{</span>your_package<span class=\"o\">}</span>/__init__.py<span class=\"w\">      </span><span class=\"c1\"># &lt;-- so, i see that you too vim</span></pre></div></div><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># At the very top of your &quot;{your_package}.__init__&quot; submodule:</span><span class=\"kn\">from</span> <span class=\"nn\">beartype.claw</span> <span class=\"kn\">import</span> <span class=\"n\">beartype_this_package</span>  <span class=\"c1\"># &lt;-- boilerplate for victory</span><span class=\"n\">beartype_this_package</span><span class=\"p\">()</span>                          <span class=\"c1\"># &lt;-- yay! your team just won</span></pre></div></div><p>Beartype now implicitly type-checks <em>all</em> annotated classes, callables, andvariable assignments across <em>all</em> submodules of your package. Congrats. This dayall bugs die.</p><p>But why stop at the burning tires in only <em>your</em> code? Your app depends on asprawling ghetto of other packages, modules, and services. How riddled withinfectious diseases is <em>that</em> code? You\u2019re about to find out.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># ....................{ BIG BEAR                        }....................</span><span class=\"c1\"># Warn about type hint violations in *OTHER* packages outside your control;</span><span class=\"c1\"># only raise exceptions from violations in your package under your control.</span><span class=\"c1\"># Again, at the very top of your &quot;{your_package}.__init__&quot; submodule:</span><span class=\"kn\">from</span> <span class=\"nn\">beartype</span> <span class=\"kn\">import</span> <span class=\"n\">BeartypeConf</span>                              <span class=\"c1\"># &lt;-- this isn&#39;t your fault</span><span class=\"kn\">from</span> <span class=\"nn\">beartype.claw</span> <span class=\"kn\">import</span> <span class=\"n\">beartype_all</span><span class=\"p\">,</span> <span class=\"n\">beartype_this_package</span>  <span class=\"c1\"># &lt;-- you didn&#39;t sign up for this</span><span class=\"n\">beartype_this_package</span><span class=\"p\">()</span>                                        <span class=\"c1\"># &lt;-- raise exceptions in your code</span><span class=\"n\">beartype_all</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">=</span><span class=\"n\">BeartypeConf</span><span class=\"p\">(</span><span class=\"n\">violation_type</span><span class=\"o\">=</span><span class=\"ne\">UserWarning</span><span class=\"p\">))</span>    <span class=\"c1\"># &lt;-- emit warnings from other code</span></pre></div></div><p>Beartype now implicitly type-checks <em>all</em> annotated classes, callables, andvariable assignments across <em>all</em> submodules of <em>all</em> packages. When <strong>your</strong>package violates type safety, beartype raises an exception. When any <strong>other</strong>package violates type safety, beartype just emits a warning. The triumphalfanfare you hear is probably your userbase cheering. This is how the QA was won.</p><p>Beartype also publishes a <a class=\"reference internal\" href=\"api/#api-api\"><span class=\"std std-ref\">plethora of APIs for fine-grained control overtype-checking</span></a>. For those who are about to QA, beartype salutes you.Would you like to know more?</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># So let&#39;s do this.</span>$<span class=\"w\"> </span>python3</pre></div></div><div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># ....................{ RAISE THE PAW                   }....................</span><span class=\"go\"># Manually enforce type hints across individual classes and callables.</span><span class=\"go\"># Do this only if you want a(nother) repetitive stress injury.</span><span class=\"go\"># Import the @beartype decorator.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">beartype</span> <span class=\"kn\">import</span> <span class=\"n\">beartype</span>      <span class=\"c1\"># &lt;-- eponymous import; it&#39;s eponymous</span><span class=\"go\"># Annotate @beartype-decorated classes and callables with type hints.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@beartype</span>                          <span class=\"c1\"># &lt;-- you too will believe in magic</span><span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">quote_wiggum</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u201c</span><span class=\"si\">{}</span><span class=\"s1\">\u201d</span><span class=\"se\">\\n\\t</span><span class=\"s1\">\u2014 Police Chief Wiggum&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span><span class=\"go\"># Call those callables with valid parameters.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">quote_wiggum</span><span class=\"p\">([</span><span class=\"s2\">&quot;Okay, folks. Show&#39;s over!&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot; Nothing to see here. Show&#39;s\u2026&quot;</span><span class=\"p\">,])</span><span class=\"go\">\u201cOkay, folks. Show&#39;s over!</span><span class=\"go\"> Nothing to see here. Show&#39;s\u2026\u201d</span><span class=\"go\">   \u2014 Police Chief Wiggum</span><span class=\"go\"># Call those callables with invalid parameters.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">quote_wiggum</span><span class=\"p\">([</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Oh, my God! A horrible plane crash!&quot;</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Hey, everybody! Get a load of this flaming wreckage!&quot;</span><span class=\"p\">,])</span><span class=\"gt\">Traceback (most recent call last):</span>  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>  File <span class=\"nb\">&quot;&lt;string&gt;&quot;</span>, line <span class=\"m\">30</span>, in <span class=\"n\">quote_wiggum</span>  File <span class=\"nb\">&quot;/home/springfield/beartype/lib/python3.9/site-packages/beartype/_decor/_code/_pep/_error/errormain.py&quot;</span>, line <span class=\"m\">220</span>, in <span class=\"n\">get_beartype_violation</span><span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"n\">exception_cls</span><span class=\"p\">(</span><span class=\"gr\">beartype.roar.BeartypeCallHintParamViolation</span>: <span class=\"n\">@beartyped</span><span class=\"x\">quote_wiggum() parameter lines=[b&#39;Oh, my God! A horrible plane</span><span class=\"x\">crash!&#39;, b&#39;Hey, everybody! Get a load of thi...&#39;] violates type hint</span><span class=\"x\">list[str], as list item 0 value b&#39;Oh, my God! A horrible plane crash!&#39;</span><span class=\"x\">not str.</span><span class=\"x\"># ....................{ MAKE IT SO                      }....................</span><span class=\"x\"># Squash bugs by refining type hints with @beartype validators.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">beartype.vale</span> <span class=\"kn\">import</span> <span class=\"n\">Is</span>  <span class=\"c1\"># &lt;---- validator factory</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Annotated</span>  <span class=\"c1\"># &lt;---------------- if Python \u2265 3.9.0</span><span class=\"go\"># &gt;&gt;&gt; from typing_extensions import Annotated   # &lt;-- if Python &lt; 3.9.0</span><span class=\"go\"># Validators are type hints constrained by lambda functions.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ListOfStrings</span> <span class=\"o\">=</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>  <span class=\"c1\"># &lt;----- type hint matching non-empty list of strings</span><span class=\"gp\">... </span>    <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>  <span class=\"c1\"># &lt;----------------- type hint matching possibly empty list of strings</span><span class=\"gp\">... </span>    <span class=\"n\">Is</span><span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)]</span>  <span class=\"c1\"># &lt;-- lambda matching non-empty object</span><span class=\"gp\">... </span><span class=\"p\">]</span><span class=\"go\"># Annotate @beartype-decorated callables with validators.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@beartype</span><span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">quote_wiggum_safer</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">:</span> <span class=\"n\">ListOfStrings</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span><span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;\u201c</span><span class=\"si\">{}</span><span class=\"s1\">\u201d</span><span class=\"se\">\\n\\t</span><span class=\"s1\">\u2014 Police Chief Wiggum&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span><span class=\"go\"># Call those callables with invalid parameters.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">quote_wiggum_safer</span><span class=\"p\">([])</span><span class=\"go\">beartype.roar.BeartypeCallHintParamViolation: @beartyped</span><span class=\"go\">quote_wiggum_safer() parameter lines=[] violates type hint</span><span class=\"go\">typing.Annotated[list[str], Is[lambda lst: bool(lst)]], as value []</span><span class=\"go\">violates validator Is[lambda lst: bool(lst)].</span><span class=\"go\"># ....................{ AT ANY TIME                     }....................</span><span class=\"go\"># Type-check anything against any type hint \u2013 anywhere at anytime.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">beartype.door</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"gp\">... </span>    <span class=\"n\">is_bearable</span><span class=\"p\">,</span>  <span class=\"c1\"># &lt;-------- like &quot;isinstance(...)&quot;</span><span class=\"gp\">... </span>    <span class=\"n\">die_if_unbearable</span><span class=\"p\">,</span>  <span class=\"c1\"># &lt;-- like &quot;assert isinstance(...)&quot;</span><span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_bearable</span><span class=\"p\">([</span><span class=\"s1\">&#39;The&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;goggles&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;do&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nothing.&#39;</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">die_if_unbearable</span><span class=\"p\">([</span><span class=\"mh\">0xCAFEBEEF</span><span class=\"p\">,</span> <span class=\"mh\">0x8BADF00D</span><span class=\"p\">],</span> <span class=\"n\">ListOfStrings</span><span class=\"p\">)</span><span class=\"go\">beartype.roar.BeartypeDoorHintViolation: Object [3405692655, 2343432205]</span><span class=\"go\">violates type hint typing.Annotated[list[str], Is[lambda lst: bool(lst)]],</span><span class=\"go\">as list index 0 item 3405692655 not instance of str.</span><span class=\"go\"># ....................{ GO TO PLAID                     }....................</span><span class=\"go\"># Type-check anything in around 1\u00b5s (one millionth of a second) \u2013 including</span><span class=\"go\"># this list of one million 2-tuples of NumPy arrays.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">beartype.door</span> <span class=\"kn\">import</span> <span class=\"n\">is_bearable</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">numpy</span> <span class=\"kn\">import</span> <span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">)]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"n\">is_bearable</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"p\">]])</span><span class=\"go\">    CPU times: user 31 \u00b5s, sys: 2 \u00b5s, total: 33 \u00b5s</span><span class=\"go\">    Wall time: 36.7 \u00b5s</span><span class=\"go\">True</span></pre></div></div><p>Beartype brings <a class=\"reference external\" href=\"https://www.rust-lang.org\">Rust</a>- and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C%2B%2B\">C++</a>-inspired <a class=\"reference external\" href=\"https://boats.gitlab.io/blog/post/zero-cost-abstractions\">zero-cost abstractions</a> into the lawless world of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Type_system\">dynamically-typed</a> Python by<a class=\"reference internal\" href=\"eli5/#eli5-eli5\"><span class=\"std std-ref\">enforcing type safety at the granular level of functions and methods</span></a> against <a class=\"reference internal\" href=\"pep/#pep-pep\"><span class=\"std std-ref\">type hints standardized by the Python community</span></a> in <span class=\"math notranslate nohighlight\">\\(O(1)\\)</span> <a class=\"reference internal\" href=\"math/#math-time\"><span class=\"std std-ref\">non-amortized worst-case time with negligibleconstant factors</span></a>. If the prior sentence was unreadable jargon, see<a class=\"reference internal\" href=\"faq/#faq-faq\"><span class=\"std std-ref\">our friendly and approachable FAQ for a human-readable synopsis</span></a>.</p><p>Beartype is <a class=\"reference external\" href=\"https://github.com/beartype/beartype/tree/main/beartype\">portably implemented</a> in <a class=\"reference external\" href=\"https://www.python.org\">Python 3</a>, <a class=\"reference external\" href=\"https://github.com/beartype/beartype/actions?workflow=tests\">continuously stress-tested</a> via <a class=\"reference external\" href=\"https://github.com/features/actions\">GitHubActions</a> <strong>\u00d7</strong> <a class=\"reference external\" href=\"https://tox.readthedocs.io\">tox</a> <strong>\u00d7</strong> <a class=\"reference external\" href=\"https://docs.pytest.org\">pytest</a> <strong>\u00d7</strong> <a class=\"reference external\" href=\"https://about.codecov.io\">Codecov</a>, and <a class=\"reference external\" href=\"https://github.com/beartype/beartype/blob/main/LICENSE\">permissivelydistributed</a> under the <a class=\"reference external\" href=\"https://opensource.org/licenses/MIT\">MIT license</a>. Beartype has <em>no</em>runtime dependencies, <a class=\"reference external\" href=\"https://docs.pytest.org\">only one test-time dependency</a>, and <a class=\"reference external\" href=\"https://www.sphinx-doc.org\">onlyone documentation-time dependency</a>. Beartype supports <a class=\"reference external\" href=\"https://devguide.python.org/#status-of-python-branches\">all activelydeveloped Python versions</a>, <a class=\"reference internal\" href=\"install/#install\"><span class=\"std std-ref\">all Python package managers</span></a>, and <a class=\"reference internal\" href=\"install/#install\"><span class=\"std std-ref\">multiple platform-specific package managers</span></a>.</p><section id=\"the-typing-tree\"><h1>The Typing Tree<a class=\"headerlink\" href=\"#the-typing-tree\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Welcome to the <strong>Bearpedia</strong> \u2013 your one-stop Encyclopedia Beartanica for allthings &#64;beartype. It\u2019s \u201c<a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html\">typing</a> or bust!\u201d as you\u2026</p><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Bear with Us</span></p><ul class=\"current\"><li class=\"toctree-l1 current\"><a class=\"current reference internal\" href=\"#\">Bearpedia</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"install/\">Install</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"install/#platform\">Platform</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"install/#macos\">macOS</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"install/#arch-linux\">Arch Linux</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"install/#gentoo-linux\">Gentoo Linux</a></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"install/#badge\">Badge</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tldr/\">tl;dr</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"eli5/\">ELI5</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"eli5/#comparison\">Comparison</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#versus-static-type-checkers\">\u2026versus Static Type-checkers</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#versus-runtime-type-checkers\">\u2026versus Runtime Type-checkers</a></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"eli5/#quickstart\">Quickstart</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#standard-hints\">Standard Hints</a><ul><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"eli5/#toy-example\">Toy Example</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"eli5/#industrial-example\">Industrial Example</a></li></ul></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"eli5/#tutorial\">Tutorial</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#builtin-types\">Builtin Types</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#arbitrary-types\">Arbitrary Types</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#unions-of-types\">Unions of Types</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"eli5/#optional-types\">Optional Types</a></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"eli5/#would-you-like-to-know-more\">Would You Like to Know More?</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/\">API</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#the-left-paw-path\">The Left-Paw Path</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"faq/\">FAQ</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#what-is-beartype\">What is beartype?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#what-is-typeguard\">What is typeguard?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#when-should-i-use-beartype\">When should I use beartype?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#does-beartype-do-any-bad-stuff\">Does beartype do any bad stuff?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#does-beartype-actually-do-anything\">Does beartype actually do anything?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#how-much-does-all-this-really-cost\">How much does all this <em>really</em> cost?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#beartype-just-does-random-stuff-really\">Beartype just does random stuff? Really?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#what-does-pure-python-mean\">What does \u201cpure-Python\u201d mean?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#what-does-near-real-time-even-mean-are-you-just-making-stuff-up\">What does \u201cnear-real-time\u201d even mean? Are you just making stuff up?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#what-does-hybrid-runtime-static-mean-pretty-sure-you-made-that-up-too\">What does \u201chybrid runtime-static\u201d mean? Pretty sure you made that up, too.</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#third-generation-type-checker-doesn-t-mean-anything-does-it\">\u201cThird-generation type-checker\u201d doesn\u2019t mean anything, does it?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#how-do-i-type-check\">How do I type-check\u2026</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#boto3-types\">\u2026Boto3 types?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#jax-arrays\">\u2026JAX arrays?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#numpy-arrays\">\u2026NumPy arrays?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#pytorch-tensors\">\u2026PyTorch tensors?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#mock-types\">\u2026mock types?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#pandas-data-frames\">\u2026pandas data frames?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#the-current-class\">\u2026the current class?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#under-vscode\">\u2026under VSCode?</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"faq/#under-insert-ide-name-here\">\u2026under [insert-IDE-name-here]?</a></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#how-do-i-only-type-check-while-running-my-test-suite\">How do I *ONLY* type-check while running my test suite?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#how-do-i-not-type-check-something\">How do I *NOT* type-check something?</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"faq/#why-is-leycec-s-poorly-insulated-cottage-in-the-canadian-wilderness-so-cold\">Why is &#64;leycec\u2019s poorly insulated cottage in the Canadian wilderness so cold?</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pep/\">BigData\u2122</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"code/\">Code</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"code/#beartype-code-generation-it-s-all-for-you\">Beartype Code Generation: It\u2019s All for You</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"code/#identity-decoration\">Identity Decoration</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"code/#unconditional-identity-decoration\">Unconditional Identity Decoration</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"code/#shallow-identity-decoration\">Shallow Identity Decoration</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"code/#deep-identity-decoration\">Deep Identity Decoration</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"code/#constant-decoration\">Constant Decoration</a><ul><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"code/#constant-builtin-type-decoration\">Constant Builtin Type Decoration</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"code/#constant-non-builtin-type-decoration\">Constant Non-Builtin Type Decoration</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"code/#constant-shallow-sequence-decoration\">Constant Shallow Sequence Decoration</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"code/#constant-deep-sequence-decoration\">Constant Deep Sequence Decoration</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"code/#constant-nested-deep-sequence-decoration\">Constant Nested Deep Sequence Decoration</a></li></ul></li></ul></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"code/#beartype-dev-handbook-it-s-handy\">Beartype Dev Handbook: It\u2019s Handy</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"code/#dev-workflow\">Dev Workflow</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"code/#moar-depth\">Moar Depth</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"code/#moar-compliance\">Moar Compliance</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"math/\">Math</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math/#beartype-timings\">Beartype Timings</a><ul><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"math/#timings-overview\">Timings Overview</a></li><li class=\"toctree-l3\"><a class=\"reference internal\" href=\"math/#timings-lower-bound\">Timings Lower Bound</a><ul><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"math/#formulaic-formulas-they-re-back-in-fashion\">Formulaic Formulas: They\u2019re Back in Fashion</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"math/#function-call-overhead-the-new-glass-ceiling\">Function Call Overhead: The New Glass Ceiling</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"math/#holy-balls-of-flaming-dumpster-fires\">Holy Balls of Flaming Dumpster Fires</a></li><li class=\"toctree-l4\"><a class=\"reference internal\" href=\"math/#but-but-that-s-not-good-enough\">But, But\u2026 That\u2019s Not Good Enough!</a></li></ul></li></ul></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"math/#nobody-expects-the-linearithmic-time\">Nobody Expects the Linearithmic Time</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"moar/\">Moar</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"moar/#runtime-type-checkers\">Runtime Type Checkers</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"moar/#runtime-data-validators\">Runtime Data Validators</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"moar/#static-type-checkers\">Static Type Checkers</a></li></ul></li></ul></div><p><em>Let\u2019s type this.</em></p></section><section id=\"license\"><h1>License<a class=\"headerlink\" href=\"#license\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Beartype is <a class=\"reference external\" href=\"https://github.com/beartype/beartype/blob/main/LICENSE\">open-source software released</a> under the<a class=\"reference external\" href=\"https://opensource.org/licenses/MIT\">permissive MIT license</a>.</p></section><section id=\"funding\"><h1>Funding<a class=\"headerlink\" href=\"#funding\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Beartype is financed as a <a class=\"reference external\" href=\"https://github.com/sponsors/leycec\">purely volunteer open-source project via GitHubSponsors</a>, to whom our burgeoning community is eternallyindebted. Without your generosity, runtime type-checking would be a shadow ofits current hulking bulk. We genuflect before your selfless charity, everyone!</p><p>Prior official funding sources (<em>yes, they once existed</em>) include:</p><ol class=\"arabic simple\"><li><p>A <a class=\"reference external\" href=\"https://www.alleninstitute.org/what-we-do/frontiers-group/news-press/press-resources/press-releases/paul-g-allen-frontiers-group-announces-allen-discovery-center-tufts-university\">Paul Allen Discovery Center award</a> from the <a class=\"reference external\" href=\"https://www.alleninstitute.org/what-we-do/frontiers-group\">Paul G. Allen FrontiersGroup</a> under the administrative purview of the <a class=\"reference external\" href=\"http://www.alleninstitute.org/what-we-do/frontiers-group/discovery-centers/allen-discovery-center-tufts-university\">Paul Allen DiscoveryCenter</a> at <a class=\"reference external\" href=\"https://www.tufts.edu\">Tufts University</a> over the period 2015\u20142018 preceding theuntimely death of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Paul_Allen\">Microsoft co-founder Paul Allen</a>, duringwhich beartype was maintained as the private <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;type_check</span></code> decorator in the<a class=\"reference external\" href=\"https://github.com/betsee/betse\">Bioelectric Tissue Simulation Engine (BETSE)</a>. <sup>Phew!</sup></p></li></ol></section><section id=\"contributors\"><h1>Contributors<a class=\"headerlink\" href=\"#contributors\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Beartype is the work product of volunteer enthusiasm, excess caffeine, andsleepless Wednesday evenings. These brave GitHubbers hurtled <a class=\"reference external\" href=\"https://github.com/beartype/beartype/pulls\">the pull request(PR) gauntlet</a> so that you wouldn\u2019t have to:</p><p><a class=\"reference external\" href=\"https://github.com/beartype/beartype/graphs/contributors\"><img alt=\"Beartype contributors\" src=\"https://contrib.rocks/image?repo=beartype/beartype\" /></a></p><p>It\u2019s a heavy weight they bear. Applaud them as they buckle under the load!</p></section><section id=\"history\"><h1>History<a class=\"headerlink\" href=\"#history\" title=\"Permalink to this heading\">\u00b6</a></h1><p><a class=\"reference external\" href=\"https://github.com/beartype/beartype/stargazers\"><img alt=\"Beartype stargazers\" src=\"https://star-history.com/#beartype/beartype&amp;Date\" /></a></p></section>              </div>                                          <!-- Previous / next buttons --><div class='prev-next-area'>    <a class='right-next' id=\"next-link\" href=\"install/\" title=\"next page\">    <div class=\"prev-next-info\">        <p class=\"prev-next-subtitle\">next</p>        <p class=\"prev-next-title\">Install</p>    </div>    <i class=\"fas fa-angle-right\"></i>    </a></div>                        </main>                </div>    </div>    <script src=\"_static/js/index.be7d3bbb2ef33a8344ce.js\"></script><footer class=\"footer mt-5 mt-md-0\">  <div class=\"container\">        <div class=\"footer-item\">      <p class=\"copyright\">    &copy; Copyright 2014-2024 Beartype authors.<br></p>    </div>        <div class=\"footer-item\">      <p class=\"sphinx-version\">Created using <a href=\"http://sphinx-doc.org/\">Sphinx</a> 5.3.0.<br></p>    </div>      </div></footer>  </body></html>",
  "embeddings": []
}
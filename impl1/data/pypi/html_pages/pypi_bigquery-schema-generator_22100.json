{
  "libtype": "pypi",
  "libname": "bigquery-schema-generator",
  "url": "https://pypi.org/project/bigquery-schema-generator/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>bigquery-schema-generator \u00b7 PyPI</title>    <meta name=\"description\" content=\"BigQuery schema generator from JSON or CSV data\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for bigquery-schema-generator\" href=\"/rss/project/bigquery-schema-generator/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/bigquery-schema-generator/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/bigquery-schema-generator/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"bigquery-schema-generator\">    <meta property=\"og:description\" content=\"BigQuery schema generator from JSON or CSV data\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/bxparks/bigquery-schema-generator\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:bxparks/bigquery-schema-generator+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        bigquery-schema-generator 1.6.1      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install bigquery-schema-generator</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/bigquery-schema-generator/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2024-01-13T00:03:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 13, 2024</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/bigquery-schema-generator\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">BigQuery schema generator from JSON or CSV data</p><div data-html-include=\"/_includes/edit-project-button/bigquery-schema-generator\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for bigquery-schema-generator\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bxparks/bigquery-schema-generator\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/bigquery-schema-generator\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache 2.0</p>    <p><strong>Author:</strong> <a href=\"mailto:brian@xparks.net\">Brian T. Park</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.6  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/bxparks/\" aria-label=\"bxparks\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/7a22056dc946692a7dcb79e50e89becbffffb411/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f63623861363830333535303535333234343830316265363466326133623263323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for bxparks from gravatar.com\" title=\"Avatar for bxparks from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            bxparks          </span>        </a>      </span></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for bigquery-schema-generator\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <h1>BigQuery Schema Generator</h1><p><a href=\"https://github.com/bxparks/bigquery-schema-generator/actions/workflows/pythonpackage.yml\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/877e074413038dcc8a8cf7fd91fa639ede5b625b/68747470733a2f2f6769746875622e636f6d2f62787061726b732f62696771756572792d736368656d612d67656e657261746f722f616374696f6e732f776f726b666c6f77732f707974686f6e7061636b6167652e796d6c2f62616467652e737667\" alt=\"BigQuery Schema Generator CI\"></a></p><p>This script generates the BigQuery schema from the newline-delimited datarecords on the STDIN. The records can be in JSON format or CSV format. TheBigQuery data importer (<code>bq load</code>) uses only the<a href=\"https://cloud.google.com/bigquery/docs/schema-detect\" rel=nofollow>first 500 records</a>when the schema auto-detection feature is enabled. In contrast, this script usesall data records to generate the schema.</p><p>Usage:</p><pre><code>$ generate-schema &lt; file.data.json &gt; file.schema.json$ generate-schema --input_format csv &lt; file.data.csv &gt; file.schema.json</code></pre><p><strong>Version</strong>: 1.6.1 (2024-01-12)</p><p><strong>Changelog</strong>: <a href=CHANGELOG.md rel=nofollow>CHANGELOG.md</a></p><h2>Table of Contents</h2><ul><li><a href=#Background rel=nofollow>Background</a></li><li><a href=#Installation rel=nofollow>Installation</a><ul><li><a href=#UbuntuLinux rel=nofollow>Ubuntu Linux</a></li><li><a href=#MacOS rel=nofollow>MacOS</a><ul><li><a href=#MacOS12 rel=nofollow>MacOS 12 (Monterey)</a></li><li><a href=#MacOS11 rel=nofollow>MacOS 11 (Big Sur)</a></li><li><a href=#MacOS1014 rel=nofollow>MacOS 10.14 (Mojave)</a></li></ul></li></ul></li><li><a href=#Usage rel=nofollow>Usage</a><ul><li><a href=#CommandLine rel=nofollow>Command Line</a></li><li><a href=#SchemaOutput rel=nofollow>Schema Output</a></li><li><a href=#FlagOptions rel=nofollow>Command Line Flag Options</a><ul><li><a href=#Help rel=nofollow>Help (<code>--help</code>)</a></li><li><a href=#InputFormat rel=nofollow>Input Format (<code>--input_format</code>)</a></li><li><a href=#KeepNulls rel=nofollow>Keep Nulls (<code>--keep_nulls</code>)</a></li><li><a href=#QuotedValuesAreStrings rel=nofollow>Quoted Values Are Strings(<code>--quoted_values_are_strings</code>)</a></li><li><a href=#InferMode rel=nofollow>Infer Mode (<code>--infer_mode</code>)</a></li><li><a href=#DebuggingInterval rel=nofollow>Debugging Interval (<code>--debugging_interval</code>)</a></li><li><a href=#DebuggingMap rel=nofollow>Debugging Map (<code>--debugging_map</code>)</a></li><li><a href=#SanitizedNames rel=nofollow>Sanitize Names (<code>--sanitize_names</code>)</a></li><li><a href=#IgnoreInvalidLines rel=nofollow>Ignore Invalid Lines (<code>--ignore_invalid_lines</code>)</a></li><li><a href=#ExistingSchemaPath rel=nofollow>Existing Schema Path (<code>--existing_schema_path</code>)</a></li><li><a href=#PreserveInputSortOrder rel=nofollow>Preserve Input Sort Order(<code>--preserve_input_sort_order</code>)</a></li></ul></li><li><a href=#UsingAsLibrary rel=nofollow>Using as a Library</a><ul><li><a href=#SchemaGeneratorRun rel=nofollow><code>SchemaGenerator.run()</code></a></li><li><a href=#SchemaGeneratorDeduceSchemaFromFile rel=nofollow><code>SchemaGenerator.deduce_schema()</code> fromFile</a></li><li><a href=#SchemaGeneratorDeduceSchemaFromDict rel=nofollow><code>SchemaGenerator.deduce_schema()</code> fromDict</a></li><li><a href=#SchemaGeneratorDeduceSchemaFromCsvDictReader rel=nofollow><code>SchemaGenerator.deduce_schema()</code> fromDictReader</a></li></ul></li></ul></li><li><a href=#SchemaTypes rel=nofollow>Schema Types</a><ul><li><a href=#SupportedTypes rel=nofollow>Supported Types</a></li><li><a href=#TypeInference rel=nofollow>Type Inference</a></li></ul></li><li><a href=#Examples rel=nofollow>Examples</a></li><li><a href=#Benchmarks rel=nofollow>Benchmarks</a></li><li><a href=#SystemRequirements rel=nofollow>System Requirements</a></li><li><a href=#License rel=nofollow>License</a></li><li><a href=#Feedback rel=nofollow>Feedback and Support</a></li><li><a href=#Authors rel=nofollow>Authors</a></li></ul><p><a rel=nofollow></a></p><h2>Background</h2><p>Data can be imported into <a href=\"https://cloud.google.com/bigquery/\" rel=nofollow>BigQuery</a> usingthe <a href=\"https://cloud.google.com/bigquery/bq-command-line-tool\" rel=nofollow>bq</a> command linetool. It accepts a number of data formats including CSV or newline-delimitedJSON. The data can be loaded into an existing table or a new table can becreated during the loading process. The structure of the table is defined byits <a href=\"https://cloud.google.com/bigquery/docs/schemas\" rel=nofollow>schema</a>. The table'sschema can be defined manually or the schema can be<a href=\"https://cloud.google.com/bigquery/docs/schema-detect#auto-detect\" rel=nofollow>auto-detected</a>.</p><p>When the auto-detect feature is used, the BigQuery data importer examines onlythe <a href=\"https://cloud.google.com/bigquery/docs/schema-detect\" rel=nofollow>first 500 records</a>of the input data. In many cases, this is sufficientbecause the data records were dumped from another database and the exact schemaof the source table was known. However, for data extracted from a service(e.g. using a REST API) the record fields could have been organically addedat later dates. In this case, the first 500 records do not contain fields whichare present in later records. The <strong>bq load</strong> auto-detection fails and the datafails to load.</p><p>The <strong>bq load</strong> tool does not support the ability to process the entire datasetto determine a more accurate schema. This script fills in that gap. Itprocesses the entire dataset given in the STDIN and outputs the BigQuery schemain JSON format on the STDOUT. This schema file can be fed back into the <strong>bqload</strong> tool to create a table that is more compatible with the data fields inthe input dataset.</p><p><a rel=nofollow></a></p><h2>Installation</h2><p><strong>Prerequisite</strong>: You need have Python 3.6 or higher.</p><p>Install from <a href=\"https://pypi.python.org/pypi\" rel=nofollow>PyPI</a> repository using <code>pip3</code>. Thereare too many ways to install packages in Python. The following are in orderhighest to lowest recommendation:</p><ol><li>If you are using a virtual environment (such as<a href=\"https://docs.python.org/3/library/venv.html\" rel=nofollow>venv</a>), then use:</li></ol><pre><code>$ pip3 install bigquery_schema_generator</code></pre><ol start=2><li>If you aren't using a virtual environment you can install intoyour local Python directory:</li></ol><pre><code>$ pip3 install --user bigquery_schema_generator</code></pre><ol start=3><li>If you want to install the package for your entire system globally, use</li></ol><pre><code>$ sudo -H pip3 install bigquery_schema_generator</code></pre><p>but realize that you will be running code from PyPI as <code>root</code> so this hassecurity implications.</p><p>Sometimes, your Python environment gets into a complete mess and the <code>pip3</code>command won't work. Try typing <code>python3 -m pip</code> instead.</p><p>A successful install should print out something like the following (the versionnumber may be different):</p><pre><code>Collecting bigquery-schema-generatorInstalling collected packages: bigquery-schema-generatorSuccessfully installed bigquery-schema-generator-1.1</code></pre><p>The shell script <code>generate-schema</code> will be installed somewhere in your system,depending on how your Python environment is configured. See below forsome notes for Ubuntu Linux and MacOS.</p><p><a rel=nofollow></a></p><h3>Ubuntu Linux (18.04, 20.04, 22.04)</h3><p>After running <code>pip3 install bigquery_schema_generator</code>, the <code>generate-schema</code>script may be installed in one the following locations:</p><ul><li><code>/usr/bin/generate-schema</code></li><li><code>/usr/local/bin/generate-schema</code></li><li><code>$HOME/.local/bin/generate-schema</code></li><li><code>$HOME/.virtualenvs/{your_virtual_env}/bin/generate-schema</code></li></ul><p><a rel=nofollow></a></p><h3>MacOS</h3><p>I don't have any Macs which are able to run the latest macOS, and I don't usethem much for software development these days, but here are some notes on olderversions of macOS in case they help.</p><p><a rel=nofollow></a></p><h4>MacOS 12 (Monterey)</h4><p>Python 2 or 3 is not installed by default on Monterey. If you try to run<code>python3</code> on the command line, a dialog box asks you to install the<a href=\"https://developer.apple.com/support/xcode/\" rel=nofollow>Xcode</a> development package. Itapparently takes over an hour at 10 MB/s.</p><p>You can instead install Python 3 using<a href=\"https://docs.brew.sh/Homebrew-and-Python\" rel=nofollow>Homebrew</a>, by installing <code>brew</code>, andtyping <code>$ brew install python</code>. Currently, it downloads Python 3.10 in about 1-2minutes and installs the <code>python3</code> and <code>pip3</code> binaries into<code>/usr/local/bin/python3</code> and <code>/usr/local/bin/pip3</code>. Using <code>brew</code> seems to beeasiest option, so let's assume that Python 3 was installed through that.</p><p>If you run:</p><pre><code>$ pip3 install bigquery_schema_generator</code></pre><p>the package will be installed at <code>/usr/local/lib/python3.10/site-packages/</code>, andthe <code>generate-schema</code> script will be installed at<code>/usr/local/bin/generate-schema</code>.</p><p>If you use the <code>--user</code> flag:</p><pre><code>$ pip3 install --user bigquery_schema_generator</code></pre><p>the package will be installed at<code>$HOME/Library/Python/3.10/lib/python/site-packages/</code>, and the <code>generate-schema</code>script will be installed at <code>$HOME/Library/Python/3.10/bin/generate-schema</code>.</p><p>You may need to add the <code>$HOME/Library/Python/3.10/bin</code> directory to your<code>$PATH</code> variable in your <code>$HOME/.bashrc</code> file.</p><p><a rel=nofollow></a></p><h4>MacOS 11 (Big Sur)</h4><p>Python 2.7.16 is installed by default on Big Sur as <code>/usr/bin/python</code>. If youtry to run <code>python3</code> on the command line, a dialog box asks you to installthe <a href=\"https://developer.apple.com/support/xcode/\" rel=nofollow>Xcode</a> development package willbe installed, which I think installs Python 3.8 as <code>/usr/bin/python3</code> (I can'tremember, it was installed a long time ago.)</p><p>You can instead install Python 3 using<a href=\"https://docs.brew.sh/Homebrew-and-Python\" rel=nofollow>Homebrew</a>, by installing <code>brew</code>, andtyping <code>$ brew install python</code>. Currently, it downloads Python 3.10 in about 1-2minutes and installs the <code>python3</code> and <code>pip3</code> binaries into<code>/usr/local/bin/python3</code> and <code>/usr/local/bin/pip3</code>. Using <code>brew</code> seems to beeasiest option, so let's assume that Python 3 was installed through that.</p><p>If you run:</p><pre><code>$ pip3 install bigquery_schema_generator</code></pre><p>the package will be installed at <code>/usr/local/lib/python3.10/site-packages/</code>, andthe <code>generate-schema</code> script will be installed at<code>/usr/local/bin/generate-schema</code>.</p><p>If you use the <code>--user</code> flag:</p><pre><code>$ pip3 install --user bigquery_schema_generator</code></pre><p>the package will be installed at<code>$HOME/Library/Python/3.10/lib/python/site-packages/</code>, and the <code>generate-schema</code>script will be installed at <code>$HOME/Library/Python/3.10/bin/generate-schema</code>.</p><p>You may need to add the <code>$HOME/Library/Python/3.10/bin</code> directory to your<code>$PATH</code> variable in your <code>$HOME/.bashrc</code> file.</p><p><a rel=nofollow></a></p><h4>MacOS 10.14 (Mojave)</h4><p>This MacOS version comes with Python 2.7 only. To install Python 3, you caninstall using:</p><p>1)) Downloading the <a href=\"https://www.python.org/downloads/macos/\" rel=nofollow>macos installer directly fromPython.org</a>.</p><p>The python3 binary will be located at <code>/usr/local/bin/python3</code>, and the<code>/usr/local/bin/pip3</code> is a symlink to<code>/Library/Frameworks/Python.framework/Versions/3.6/bin/pip3</code>.</p><p>So running</p><pre><code>$ pip3 install --user bigquery_schema_generator</code></pre><p>will install <code>generate-schema</code> at<code>/Library/Frameworks/Python.framework/Versions/3.6/bin/generate-schema</code>.</p><p>The Python installer updates <code>$HOME/.bash_profile</code> to add<code>/Library/Frameworks/Python.framework/Versions/3.6/bin</code> to the <code>$PATH</code>environment variable. So you should be able to run the <code>generate-schema</code>command without typing in the full path.</p><p>2)) Using <a href=\"https://docs.brew.sh/Homebrew-and-Python\" rel=nofollow>Homebrew</a>.</p><p>In this environment, the <code>generate-schema</code> script will probably be installed in<code>/usr/local/bin</code> but I'm not completely certain.</p><p><a rel=nofollow></a></p><h2>Usage</h2><p><a rel=nofollow></a></p><h3>Command Line</h3><p>The <code>generate_schema.py</code> script accepts a newline-delimited JSON orCSV data file on the STDIN. JSON input format has been tested extensively.CSV input format was added more recently (in v0.4) using the <code>--input_format csv</code> flag. The support is not as robust as JSON file. For example, CSV formatsupports only the comma-separator, and does not support the pipe (<code>|</code>) or tab(<code>\\t</code>) character.</p><p><strong>Side Note</strong>: The <code>input_format</code> parameter now supports (v1.6.0) the<code>csvdictreader</code> option which allows using the<a href=\"https://docs.python.org/3/library/csv.html\" rel=nofollow>csv.DictReader</a> class that can becustomized to handle different delimiters such as tabs. But this requirescreating a custom Python script using <code>bigquery_schema_generator</code> as a library.See <a href=#SchemaGeneratorDeduceSchemaFromCsvDictReader rel=nofollow>SchemaGenerator.deduce_schema() fromcsv.DictReader</a> section below. Itis probably possible to enable this functionality through the command linescript, but it was not obvious how to expose the various options of<code>csv.DictReader</code> through the command line flags. I didn't spend any time on thisproblem because this is not a feature that I use personally.)</p><p>Unlike <code>bq load</code>, the <code>generate_schema.py</code> script reads every record in theinput data file to deduce the table's schema. It prints the JSON formattedschema file on the STDOUT.</p><p>There are at least 3 ways to run this script:</p><p><strong>1) Shell script</strong></p><p>If you installed using <code>pip3</code>, then it should have installed a small helperscript named <code>generate-schema</code> in your local <code>./bin</code> directory of your currentenvironment (depending on whether you are using a virtual environment).</p><pre><code>$ generate-schema &lt; file.data.json &gt; file.schema.json</code></pre><p><strong>2) Python module</strong></p><p>You can invoke the module directly using:</p><pre><code>$ python3 -m bigquery_schema_generator.generate_schema &lt; file.data.json &gt; file.schema.json</code></pre><p>This is essentially what the <code>generate-schema</code> command does.</p><p><strong>3) Python script</strong></p><p>If you retrieved this code from its<a href=\"https://github.com/bxparks/bigquery-schema-generator\" rel=nofollow>GitHub repository</a>,then you can invoke the Python script directly:</p><pre><code>$ ./generate_schema.py &lt; file.data.json &gt; file.schema.json</code></pre><p><a rel=nofollow></a></p><h3>Using the Schema Output</h3><p>The resulting schema file can be given to the <strong>bq load</strong> command using the<code>--schema</code> flag:</p><pre><code>$ bq load --source_format NEWLINE_DELIMITED_JSON \\    --ignore_unknown_values \\    --schema file.schema.json \\    mydataset.mytable \\    file.data.json</code></pre><p>where <code>mydataset.mytable</code> is the target table in BigQuery.</p><p>For debugging purposes, here is the equivalent <code>bq load</code> command using schemaautodetection:</p><pre><code>$ bq load --source_format NEWLINE_DELIMITED_JSON \\    --autodetect \\    mydataset.mytable \\    file.data.json</code></pre><p>If the input file is in CSV format, the first line will be the header line whichenumerates the names of the columns. But this header line must be skipped whenimporting the file into the BigQuery table. We accomplish this using<code>--skip_leading_rows</code> flag:</p><pre><code>$ bq load --source_format CSV \\    --schema file.schema.json \\    --skip_leading_rows 1 \\    mydataset.mytable \\    file.data.csv</code></pre><p>Here is the equivalent <code>bq load</code> command for CSV files using autodetection:</p><pre><code>$ bq load --source_format CSV \\    --autodetect \\    mydataset.mytable \\    file.data.csv</code></pre><p>A useful flag for <code>bq load</code>, particularly for JSON files,  is<code>--ignore_unknown_values</code>, which causes <code>bq load</code> to ignore fields in the inputdata which are not defined in the schema. When <code>generate_schema.py</code> detects aninconsistency in the definition of a particular field in the input data, itremoves the field from the schema definition. Without the<code>--ignore_unknown_values</code>, the <code>bq load</code> fails when the inconsistent data recordis read.</p><p>Another useful flag during development and debugging is <code>--replace</code> whichreplaces any existing BigQuery table.</p><p>After the BigQuery table is loaded, the schema can be retrieved using:</p><pre><code>$ bq show --schema mydataset.mytable | python3 -m json.tool</code></pre><p>(The <code>python -m json.tool</code> command will pretty-print the JSON formatted schemafile. An alternative is the <a href=\"https://stedolan.github.io/jq/\" rel=nofollow>jq command</a>.)The resulting schema file should be identical to <code>file.schema.json</code>.</p><p><a rel=nofollow></a></p><h3>Command Line Flag Options</h3><p>The <code>generate_schema.py</code> script supports a handful of command line flagsas shown by the <code>--help</code> flag below.</p><p><a rel=nofollow></a></p><h4>Help (<code>--help</code>)</h4><p>Print the built-in help strings:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--helpusage:<span class=w> </span>generate-schema<span class=w> </span><span class=o>[</span>-h<span class=o>]</span><span class=w> </span><span class=o>[</span>--input_format<span class=w> </span>INPUT_FORMAT<span class=o>]</span><span class=w> </span><span class=o>[</span>--keep_nulls<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--quoted_values_are_strings<span class=o>]</span><span class=w> </span><span class=o>[</span>--infer_mode<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--debugging_interval<span class=w> </span>DEBUGGING_INTERVAL<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--debugging_map<span class=o>]</span><span class=w> </span><span class=o>[</span>--sanitize_names<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--ignore_invalid_lines<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--existing_schema_path<span class=w> </span>EXISTING_SCHEMA_PATH<span class=o>]</span><span class=w>                       </span><span class=o>[</span>--preserve_input_sort_order<span class=o>]</span>Generate<span class=w> </span>BigQuery<span class=w> </span>schema<span class=w> </span>from<span class=w> </span>JSON<span class=w> </span>or<span class=w> </span>CSV<span class=w> </span>file.optional<span class=w> </span>arguments:<span class=w>  </span>-h,<span class=w> </span>--help<span class=w>            </span>show<span class=w> </span>this<span class=w> </span><span class=nb>help</span><span class=w> </span>message<span class=w> </span>and<span class=w> </span><span class=nb>exit</span><span class=w>  </span>--input_format<span class=w> </span>INPUT_FORMAT<span class=w>                        </span>Specify<span class=w> </span>an<span class=w> </span>alternative<span class=w> </span>input<span class=w> </span>format<span class=w> </span><span class=o>(</span><span class=s1>'csv'</span>,<span class=w> </span><span class=s1>'json'</span>,<span class=w>                        </span><span class=s1>'dict'</span><span class=o>)</span><span class=w>  </span>--keep_nulls<span class=w>          </span>Print<span class=w> </span>the<span class=w> </span>schema<span class=w> </span><span class=k>for</span><span class=w> </span>null<span class=w> </span>values,<span class=w> </span>empty<span class=w> </span>arrays<span class=w> </span>or<span class=w>                        </span>empty<span class=w> </span>records<span class=w>  </span>--quoted_values_are_strings<span class=w>                        </span>Quoted<span class=w> </span>values<span class=w> </span>should<span class=w> </span>be<span class=w> </span>interpreted<span class=w> </span>as<span class=w> </span>strings<span class=w>  </span>--infer_mode<span class=w>          </span>Determine<span class=w> </span><span class=k>if</span><span class=w> </span>mode<span class=w> </span>can<span class=w> </span>be<span class=w> </span><span class=s1>'NULLABLE'</span><span class=w> </span>or<span class=w> </span><span class=s1>'REQUIRED'</span><span class=w>  </span>--debugging_interval<span class=w> </span>DEBUGGING_INTERVAL<span class=w>                        </span>Number<span class=w> </span>of<span class=w> </span>lines<span class=w> </span>between<span class=w> </span>heartbeat<span class=w> </span>debugging<span class=w> </span>messages<span class=w>  </span>--debugging_map<span class=w>       </span>Print<span class=w> </span>the<span class=w> </span>metadata<span class=w> </span>schema_map<span class=w> </span>instead<span class=w> </span>of<span class=w> </span>the<span class=w> </span>schema<span class=w>  </span>--sanitize_names<span class=w>      </span>Forces<span class=w> </span>schema<span class=w> </span>name<span class=w> </span>to<span class=w> </span>comply<span class=w> </span>with<span class=w> </span>BigQuery<span class=w> </span>naming<span class=w>                        </span>standard<span class=w>  </span>--ignore_invalid_lines<span class=w>                        </span>Ignore<span class=w> </span>lines<span class=w> </span>that<span class=w> </span>cannot<span class=w> </span>be<span class=w> </span>parsed<span class=w> </span>instead<span class=w> </span>of<span class=w> </span>stopping<span class=w>  </span>--existing_schema_path<span class=w> </span>EXISTING_SCHEMA_PATH<span class=w>                        </span>File<span class=w> </span>that<span class=w> </span>contains<span class=w> </span>the<span class=w> </span>existing<span class=w> </span>BigQuery<span class=w> </span>schema<span class=w> </span><span class=k>for</span><span class=w> </span>a<span class=w>                        </span>table.<span class=w> </span>This<span class=w> </span>can<span class=w> </span>be<span class=w> </span>fetched<span class=w> </span>with:<span class=w> </span><span class=sb>`</span>bq<span class=w> </span>show<span class=w> </span>--schema<span class=w>                        </span>&lt;project_id&gt;:&lt;dataset&gt;:&lt;table_name&gt;<span class=w>  </span>--preserve_input_sort_order<span class=w>                        </span>Preserve<span class=w> </span>the<span class=w> </span>original<span class=w> </span>ordering<span class=w> </span>of<span class=w> </span>columns<span class=w> </span>from<span class=w> </span>input<span class=w>                        </span>instead<span class=w> </span>of<span class=w> </span>sorting<span class=w> </span>alphabetically.<span class=w> </span>This<span class=w> </span>only<span class=w> </span>impacts<span class=w>                        </span><span class=sb>`</span>input_format<span class=sb>`</span><span class=w> </span>of<span class=w> </span>json<span class=w> </span>or<span class=w> </span>dict</pre><p><a rel=nofollow></a></p><h4>Input Format (<code>--input_format</code>)</h4><p>Specifies the format of the input file as a string. It must be one of <code>json</code>(default), <code>csv</code>, or <code>dict</code>:</p><ul><li><code>json</code><ul><li>a \"file-like\" object containing newline-delimited JSON</li></ul></li><li><code>csv</code><ul><li>a \"file-like\" object containing newline-delimited CSV</li></ul></li><li><code>dict</code><ul><li>a <code>list</code> of Python <code>dict</code> objects corresponding to list ofnewline-delimited JSON, in other words <code>List[Dict[str, Any]]</code></li><li>applies only if <code>SchemaGenerator</code> is used as a library through the<code>run()</code> or <code>deduce_schema()</code> method</li><li>useful if the input data (usually JSON) has already been read into memoryand parsed from newline-delimited JSON into native Python dict objects.</li></ul></li></ul><p>If <code>csv</code> file is specified, the <code>--keep_nulls</code> flag is automatically activated.This is required because CSV columns are defined positionally, so the schemafile must contain all the columns specified by the CSV file, in the sameorder, even if the column contains an empty value for every record.</p><p>See <a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/26\" rel=nofollow>Issue #26</a>for implementation details.</p><p><a rel=nofollow></a></p><h4>Keep Nulls (<code>--keep_nulls</code>)</h4><p>Normally when the input data file contains a field which has a null, emptyarray or empty record as its value, the field is suppressed in the schema file.This flag enables this field to be included in the schema file.</p><p>In other words, using a data file containing just nulls and empty values:</p><pre lang=bash>$<span class=w> </span>generate_schema<span class=o>{</span><span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span>null,<span class=w> </span><span class=s2>\"a\"</span>:<span class=w> </span><span class=o>[]</span>,<span class=w> </span><span class=s2>\"m\"</span>:<span class=w> </span><span class=o>{}</span><span class=w> </span><span class=o>}</span>^DINFO:root:Processed<span class=w> </span><span class=m>1</span><span class=w> </span>lines<span class=o>[]</span></pre><p>With the <code>keep_nulls</code> flag, we get:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--keep_nulls<span class=o>{</span><span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span>null,<span class=w> </span><span class=s2>\"a\"</span>:<span class=w> </span><span class=o>[]</span>,<span class=w> </span><span class=s2>\"m\"</span>:<span class=w> </span><span class=o>{}</span><span class=w> </span><span class=o>}</span>^DINFO:root:Processed<span class=w> </span><span class=m>1</span><span class=w> </span>lines<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"REPEATED\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"a\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"fields\"</span>:<span class=w> </span><span class=o>[</span><span class=w>      </span><span class=o>{</span><span class=w>        </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>        </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span>,<span class=w>        </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"__unknown__\"</span><span class=w>      </span><span class=o>}</span><span class=w>    </span><span class=o>]</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"RECORD\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"d\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"s\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p><a rel=nofollow></a></p><h4>Quoted Values Are Strings (<code>--quoted_values_are_strings</code>)</h4><p>By default, quoted values are inspected to determine if they can be interpretedas <code>DATE</code>, <code>TIME</code>, <code>TIMESTAMP</code>, <code>BOOLEAN</code>, <code>INTEGER</code> or <code>FLOAT</code>. This isconsistent with the algorithm used by <code>bq load</code>. However, for the <code>BOOLEAN</code>,<code>INTEGER</code>, or <code>FLOAT</code> types, it is sometimes more useful to interpret those asnormal strings instead. This flag disables type inference for <code>BOOLEAN</code>,<code>INTEGER</code> and <code>FLOAT</code> types inside quoted strings.</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=o>{</span><span class=w> </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"1\"</span><span class=w> </span><span class=o>}</span>^D<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"name\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span>$<span class=w> </span>generate-schema<span class=w> </span>--quoted_values_are_strings<span class=o>{</span><span class=w> </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"1\"</span><span class=w> </span><span class=o>}</span>^D<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"name\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p><a rel=nofollow></a></p><h4>Infer Mode (<code>--infer_mode</code>)</h4><p>Set the schema <code>mode</code> of a field to <code>REQUIRED</code> instead of the default<code>NULLABLE</code> if the field contains a non-null or non-empty value for every datarecord in the input file. This option is available only for CSV(<code>--input_format csv</code>) files. It is theoretically possible to implement thisfeature for JSON files, but too difficult to implement in practice becausefields are often completely missing from a given JSON record (instead ofexplicitly being defined to be <code>null</code>).</p><p>In addition to the above, this option, when used in conjunction with<code>--existing_schema_map</code>, will allow fields to be relaxed from REQUIRED toNULLABLE if they were REQUIRED in the existing schema and NULL rows are found inthe new data we are inferring a schema from. In this case it can be used witheither input_format, CSV or JSON.</p><p>See <a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/28\" rel=nofollow>Issue #28</a>for implementation details.</p><p><a rel=nofollow></a></p><h4>Debugging Interval (<code>--debugging_interval</code>)</h4><p>By default, the <code>generate_schema.py</code> script prints a short progress messageevery 1000 lines of input data. This interval can be changed using the<code>--debugging_interval</code> flag.</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--debugging_interval<span class=w> </span><span class=m>50</span><span class=w> </span>&lt;<span class=w> </span>file.data.json<span class=w> </span>&gt;<span class=w> </span>file.schema.json</pre><p><a rel=nofollow></a></p><h4>Debugging Map (<code>--debugging_map</code>)</h4><p>Instead of printing out the BigQuery schema, the <code>--debugging_map</code> prints outthe bookkeeping metadata map which is used internally to keep track of thevarious fields and their types that were inferred using the data file. Thisflag is intended to be used for debugging.</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--debugging_map<span class=w> </span>&lt;<span class=w> </span>file.data.json<span class=w> </span>&gt;<span class=w> </span>file.schema.json</pre><p><a rel=nofollow></a></p><h4>Sanitize Names (<code>--sanitize_names</code>)</h4><p>BigQuery column names are <a href=\"https://cloud.google.com/bigquery/docs/schemas#column_names\" rel=nofollow>restricted to certain characters andlength</a>:</p><ul><li>it must contain only letters (a-z, A-Z), numbers (0-9), or underscores</li><li>it must start with a letter or underscore</li><li>the maximum length is 128 characters</li><li>column names are case-insensitive</li></ul><p>For CSV files, the <code>bq load</code> command seems to automatically convert invalidcolumn names into valid column names. This flag attempts to perform some of thesame transformations, to avoid having to scan through the input data twice togenerate the schema file. The transformations are:</p><ul><li>any character outside of ASCII letters, numbers and underscore(<code>[a-zA-Z0-9_]</code>) are converted to an underscore. For example <code>go&amp;2#there!</code> isconverted to <code>go_2_there_</code>;</li><li>names longer than 128 characters are truncated to 128.</li></ul><p>My recollection is that the <code>bq load</code> command does <em>not</em> normalize the JSON keynames. Instead it prints an error message. So the <code>--sanitize_names</code> flag isuseful mostly for CSV files. For JSON files, you'll have to do a second passthrough the data files to cleanup the column names anyway. See<a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/14\" rel=nofollow>Issue #14</a> and<a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/33\" rel=nofollow>Issue #33</a>.</p><p><a rel=nofollow></a></p><h4>Ignore Invalid Lines (<code>--ignore_invalid_lines</code>)</h4><p>By default, if an error is encountered on a particular line, processing stopsimmediately with an exception. This flag causes invalid lines to be ignored andprocessing continues. A list of all errors and their line numbers will beprinted on the STDERR after processing the entire file.</p><p>This flag is currently most useful for JSON files, to ignore lines which do notparse correctly as a JSON object.</p><p>This flag is probably not useful for CSV files. CSV files are processed by the<code>DictReader</code> class which performs its own line processing internally, includingextracting the column names from the first line of the file. If the <code>DictReader</code>does throw an exception on a given line, we would not be able to catch it andcontinue processing. Fortunately, CSV files are fairly robust, and the schemadeduction logic will handle any missing or extra columns gracefully.</p><p>Fixes<a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/49\" rel=nofollow>Issue #49</a>.</p><p><a rel=nofollow></a></p><h4>Existing Schema Path (<code>--existing_schema_path</code>)</h4><p>There are cases where we would like to start from an existing BigQuery tableschema rather than starting from scratch with a new batch of data we would liketo load. In this case we can specify the path to a local file on disk that isour existing bigquery table schema. This can be generated via the following <code>bq show --schema</code> command:</p><pre lang=bash>bq<span class=w> </span>show<span class=w> </span>--schema<span class=w> </span>&lt;PROJECT_ID&gt;:&lt;DATASET_NAME&gt;.&lt;TABLE_NAME&gt;<span class=w> </span>&gt;<span class=w> </span>existing_table_schema.json</pre><p>We can then run generate-schema with the additional option</p><pre lang=bash>--existing_schema_path<span class=w> </span>existing_table_schema.json</pre><p>There is some subtle interaction between the <code>--existing_schema_path</code> and fieldswhich are marked with a <code>mode</code> of <code>REQUIRED</code> in the existing schema. If the newdata contains a <code>null</code> value (either in a CSV or JSON data file), it is notclear if the schema should be changed to <code>mode=NULLABLE</code> or whether the new datashould be ignored and the schema should remain <code>mode=REQUIRED</code>. The choice isdetermined by overloading the <code>--infer_mode</code> flag:</p><ul><li>If <code>--infer_mode</code> is given, the new schema will be allowed to revert back to<code>NULLABLE</code>.</li><li>If <code>--infer_mode</code> is not given, the offending new record will be ignoredand the new schema will remain <code>REQUIRED</code>.</li></ul><p>See discussion in<a href=\"https://github.com/bxparks/bigquery-schema-generator/pull/57\" rel=nofollow>PR #57</a> formore details.</p><p><a rel=nofollow></a></p><h4>Preserve Input Sort Order (<code>--preserve_input_sort_order</code>)</h4><p>By default, the order of columns in the BQ schema file is sortedlexicographically, which matched the original behavior of <code>bq load --autodetect</code>. If the <code>--preserve_input_sort_order</code> flag is given, the columnsin the resulting schema file is not sorted, but preserves the order ofappearance in the input JSON data. For example, the following JSON data withthe <code>--preserve_input_sort_order</code> flag will produce:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--preserve_input_sort_order<span class=o>{</span><span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span><span class=s2>\"string\"</span>,<span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>3</span>,<span class=w> </span><span class=s2>\"x\"</span>:<span class=w> </span><span class=m>3</span>.2,<span class=w> </span><span class=s2>\"b\"</span>:<span class=w> </span><span class=nb>true</span><span class=w> </span><span class=o>}</span>^D<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"s\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"i\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"x\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"FLOAT\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"b\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"BOOLEAN\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p>It is possible that each JSON record line contains only a partial subset of thetotal possible columns in the data set. The order of the columns in the BQschema will then be the order that each column was first <em>seen</em> by thescript:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--preserve_input_sort_order<span class=o>{</span><span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span><span class=s2>\"string\"</span>,<span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>3</span><span class=w> </span><span class=o>}</span><span class=o>{</span><span class=w> </span><span class=s2>\"x\"</span>:<span class=w> </span><span class=m>3</span>.2,<span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span><span class=s2>\"string\"</span>,<span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>3</span><span class=w> </span><span class=o>}</span><span class=o>{</span><span class=w> </span><span class=s2>\"b\"</span>:<span class=w> </span>true,<span class=w> </span><span class=s2>\"x\"</span>:<span class=w> </span><span class=m>3</span>.2,<span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span><span class=s2>\"string\"</span>,<span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>3</span><span class=w> </span><span class=o>}</span>^D<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"s\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"i\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"x\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"FLOAT\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"b\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"BOOLEAN\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p><strong>Note</strong>: In Python 3.6 (the earliest version of Python supported by thisproject), the order of keys in a <code>dict</code> was the insertion-order, but thisordering was an implementation detail, and not guaranteed. In Python 3.7, thatordering was made permanent. So the <code>--preserve_input_sort_order</code> flag<strong>should</strong> work in Python 3.6 but is not guaranteed.</p><p>See discussion in<a href=\"https://github.com/bxparks/bigquery-schema-generator/pull/75\" rel=nofollow>PR #75</a> formore details.</p><p><a rel=nofollow></a></p><h3>Using As a Library</h3><p>The <code>SchemaGenerator</code> class can be used programmatically as a library from alarger Python application.</p><p><a rel=nofollow></a></p><h4><code>SchemaGenerator.run()</code></h4><p>The <code>bigquery_schema_generator</code> module can be used as a library by an externalPython client code by creating an instance of <code>SchemaGenerator</code> and calling the<code>run(input, output)</code> method:</p><pre lang=python3><span class=kn>from</span> <span class=nn>bigquery_schema_generator.generate_schema</span> <span class=kn>import</span> <span class=n>SchemaGenerator</span><span class=n>generator</span> <span class=o>=</span> <span class=n>SchemaGenerator</span><span class=p>(</span>    <span class=n>input_format</span><span class=o>=</span><span class=n>input_format</span><span class=p>,</span>    <span class=n>infer_mode</span><span class=o>=</span><span class=n>infer_mode</span><span class=p>,</span>    <span class=n>keep_nulls</span><span class=o>=</span><span class=n>keep_nulls</span><span class=p>,</span>    <span class=n>quoted_values_are_strings</span><span class=o>=</span><span class=n>quoted_values_are_strings</span><span class=p>,</span>    <span class=n>debugging_interval</span><span class=o>=</span><span class=n>debugging_interval</span><span class=p>,</span>    <span class=n>debugging_map</span><span class=o>=</span><span class=n>debugging_map</span><span class=p>,</span>    <span class=n>sanitize_names</span><span class=o>=</span><span class=n>sanitize_names</span><span class=p>,</span>    <span class=n>ignore_invalid_lines</span><span class=o>=</span><span class=n>ignore_invalid_lines</span><span class=p>,</span>    <span class=n>preserve_input_sort_order</span><span class=o>=</span><span class=n>preserve_input_sort_order</span><span class=p>,</span><span class=p>)</span><span class=n>FILENAME</span> <span class=o>=</span> <span class=s2>\"...\"</span><span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=n>FILENAME</span><span class=p>)</span> <span class=k>as</span> <span class=n>input_file</span><span class=p>:</span>    <span class=n>generator</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>input_file</span><span class=o>=</span><span class=n>input_file</span><span class=p>,</span> <span class=n>output_file</span><span class=o>=</span><span class=n>output_file</span><span class=p>)</span></pre><p>The <code>input_format</code> is one of <code>json</code>, <code>csv</code>, and <code>dict</code> as described in the<a href=#InputFormat rel=nofollow>Input Format</a> section above. The <code>input_file</code> must match theformat given by this parameter.</p><p>See <a href=\"examples/generatorrun.py\" rel=nofollow>generatorrun.py</a> for an example.</p><p><a rel=nofollow></a></p><h4><code>SchemaGenerator.deduce_schema()</code> from File</h4><p>If you need to process the generated schema programmatically, create an instanceof <code>SchemaGenerator</code> using the appropriate <code>input_format</code> option, use the<code>deduce_schema()</code> method to read in the file, then postprocess the resulting<code>schema_map</code> and <code>error_log</code> data structures.</p><p>The following reads in a JSON file (see <a href=\"examples/jsoneader.py\" rel=nofollow>jsoneader.py</a>):</p><pre lang=python3><span class=kn>import</span> <span class=nn>json</span><span class=kn>import</span> <span class=nn>logging</span><span class=kn>import</span> <span class=nn>sys</span><span class=kn>from</span> <span class=nn>bigquery_schema_generator.generate_schema</span> <span class=kn>import</span> <span class=n>SchemaGenerator</span><span class=n>FILENAME</span> <span class=o>=</span> <span class=s2>\"jsonfile.json\"</span><span class=n>generator</span> <span class=o>=</span> <span class=n>SchemaGenerator</span><span class=p>(</span>    <span class=n>input_format</span><span class=o>=</span><span class=s1>'json'</span><span class=p>,</span>    <span class=n>quoted_values_are_strings</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span><span class=p>)</span><span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=n>FILENAME</span><span class=p>)</span> <span class=k>as</span> <span class=n>file</span><span class=p>:</span>    <span class=n>schema_map</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span><span class=n>file</span><span class=p>)</span><span class=k>for</span> <span class=n>error</span> <span class=ow>in</span> <span class=n>errors</span><span class=p>:</span>    <span class=n>logging</span><span class=o>.</span><span class=n>info</span><span class=p>(</span><span class=s2>\"Problem on line </span><span class=si>%s</span><span class=s2>: </span><span class=si>%s</span><span class=s2>\"</span><span class=p>,</span> <span class=n>error</span><span class=p>[</span><span class=s1>'line_number'</span><span class=p>],</span> <span class=n>error</span><span class=p>[</span><span class=s1>'msg'</span><span class=p>])</span><span class=n>schema</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>flatten_schema</span><span class=p>(</span><span class=n>schema_map</span><span class=p>)</span><span class=n>json</span><span class=o>.</span><span class=n>dump</span><span class=p>(</span><span class=n>schema</span><span class=p>,</span> <span class=n>sys</span><span class=o>.</span><span class=n>stdout</span><span class=p>,</span> <span class=n>indent</span><span class=o>=</span><span class=mi>2</span><span class=p>)</span><span class=nb>print</span><span class=p>()</span></pre><p>The following reads a CSV file (see <a href=\"examples/csvreader.py\" rel=nofollow>csvreader.py</a>):</p><pre lang=python3><span class=o>...</span><span class=p>(</span><span class=n>same</span> <span class=k>as</span> <span class=n>above</span><span class=p>)</span><span class=o>...</span><span class=n>generator</span> <span class=o>=</span> <span class=n>SchemaGenerator</span><span class=p>(</span>    <span class=n>input_format</span><span class=o>=</span><span class=s1>'csv'</span><span class=p>,</span>    <span class=n>infer_mode</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>    <span class=n>quoted_values_are_strings</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>    <span class=n>sanitize_names</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span><span class=p>)</span><span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=n>FILENAME</span><span class=p>)</span> <span class=k>as</span> <span class=n>file</span><span class=p>:</span>    <span class=n>schema_map</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span><span class=n>file</span><span class=p>)</span><span class=o>...</span><span class=p>(</span><span class=n>same</span> <span class=k>as</span> <span class=n>above</span><span class=p>)</span><span class=o>...</span></pre><p>The <code>deduce_schema()</code> also supports starting from an existing <code>schema_map</code>instead of starting from scratch. This is the internal version of the<code>--existing_schema_path</code> functionality.</p><pre lang=python3><span class=n>schema_map1</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span><span class=n>input_data</span><span class=o>=</span><span class=n>data1</span><span class=p>)</span><span class=n>schema_map2</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span>    <span class=n>input_data</span><span class=o>=</span><span class=n>data1</span><span class=p>,</span> <span class=n>schema_map</span><span class=o>=</span><span class=n>schema_map1</span><span class=p>)</span></pre><p>The <code>input_data</code> must match the <code>input_format</code> given in the constructor. Theformat is described in the <a href=#InputFormat rel=nofollow>Input Format</a> section above.</p><p><a rel=nofollow></a></p><h4><code>SchemaGenerator.deduce_schema()</code> from Iterable of Dict</h4><p>If the JSON data set has already been read into memory into an array or iterableof Python <code>dict</code> objects, the <code>SchemaGenerator</code> can process that too using the<code>input_format='dict'</code> option. Here is an example from<a href=\"examples/dictreader.py\" rel=nofollow>dictreader.py</a>:</p><pre lang=Python><span class=kn>import</span> <span class=nn>json</span><span class=kn>import</span> <span class=nn>logging</span><span class=kn>import</span> <span class=nn>sys</span><span class=kn>from</span> <span class=nn>bigquery_schema_generator.generate_schema</span> <span class=kn>import</span> <span class=n>SchemaGenerator</span><span class=n>generator</span> <span class=o>=</span> <span class=n>SchemaGenerator</span><span class=p>(</span><span class=n>input_format</span><span class=o>=</span><span class=s1>'dict'</span><span class=p>)</span><span class=n>input_data</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>{</span>        <span class=s1>'s'</span><span class=p>:</span> <span class=s1>'string'</span><span class=p>,</span>        <span class=s1>'b'</span><span class=p>:</span> <span class=kc>True</span><span class=p>,</span>    <span class=p>},</span>    <span class=p>{</span>        <span class=s1>'d'</span><span class=p>:</span> <span class=s1>'2021-08-18'</span><span class=p>,</span>        <span class=s1>'x'</span><span class=p>:</span> <span class=mf>3.1</span>    <span class=p>},</span><span class=p>]</span><span class=n>schema_map</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span><span class=n>input_data</span><span class=p>)</span><span class=n>schema</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>flatten_schema</span><span class=p>(</span><span class=n>schema_map</span><span class=p>)</span><span class=n>json</span><span class=o>.</span><span class=n>dump</span><span class=p>(</span><span class=n>schema</span><span class=p>,</span> <span class=n>sys</span><span class=o>.</span><span class=n>stdout</span><span class=p>,</span> <span class=n>indent</span><span class=o>=</span><span class=mi>2</span><span class=p>)</span><span class=nb>print</span><span class=p>()</span></pre><p><strong>Note</strong>: The <code>input_format='dict'</code> option supports any <code>input_data</code> objectwhich acts like an iterable of <code>dict</code>. The data does not have to be loaded intomemory.</p><p><a rel=nofollow></a></p><h4><code>SchemaGenerator.deduce_schema()</code> from csv.DictReader</h4><p>The <code>input_format='csvdictreader'</code> option is similar to <code>input_format='dict'</code>but sort of acts like <code>input_format='csv'</code>. It supports any object that behaveslike an iterable of <code>dict</code>, but it is intended to be used with the<a href=\"https://docs.python.org/3/library/csv.html\" rel=nofollow>csv.DictReader</a> object.</p><p>The difference between <code>'dict'</code> and <code>'csvdictreader'</code> is the assumption madeabout the shape of the data. The <code>'csvdictreader'</code> option assumes that the datais tabular like a CSV file, with every row usually containing an entry for everycolumn. The <code>'dict'</code> option does not make that assumption, and the data can bemore hierarchical with some rows containing partial sets of columns.</p><p>This semantic difference means that <code>'csvdictreader'</code> supports options whichapply to <code>'csv'</code> files. In particular, the <code>infer_mode=True</code> option can be usedto determine if the <code>mode</code> field can be <code>REQUIRED</code> instead of <code>NULLABLE</code> if thescript finds that all columns are defined in every row.</p><p>Here is an example from <a href=\"examples/tsvreader.py\" rel=nofollow>tsvreader.py</a> which reads atab-separate file (TSV):</p><pre lang=python3><span class=kn>import</span> <span class=nn>csv</span><span class=kn>import</span> <span class=nn>json</span><span class=kn>import</span> <span class=nn>sys</span><span class=kn>from</span> <span class=nn>bigquery_schema_generator.generate_schema</span> <span class=kn>import</span> <span class=n>SchemaGenerator</span><span class=n>FILENAME</span> <span class=o>=</span> <span class=s2>\"tsvfile.tsv\"</span><span class=n>generator</span> <span class=o>=</span> <span class=n>SchemaGenerator</span><span class=p>(</span><span class=n>input_format</span><span class=o>=</span><span class=s1>'dict'</span><span class=p>)</span><span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=n>FILENAME</span><span class=p>)</span> <span class=k>as</span> <span class=n>file</span><span class=p>:</span>    <span class=n>reader</span> <span class=o>=</span> <span class=n>csv</span><span class=o>.</span><span class=n>DictReader</span><span class=p>(</span><span class=n>file</span><span class=p>,</span> <span class=n>delimiter</span><span class=o>=</span><span class=s1>'</span><span class=se>\\t</span><span class=s1>'</span><span class=p>)</span>    <span class=n>schema_map</span><span class=p>,</span> <span class=n>errors</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>deduce_schema</span><span class=p>(</span><span class=n>reader</span><span class=p>)</span><span class=n>schema</span> <span class=o>=</span> <span class=n>generator</span><span class=o>.</span><span class=n>flatten_schema</span><span class=p>(</span><span class=n>schema_map</span><span class=p>)</span><span class=n>json</span><span class=o>.</span><span class=n>dump</span><span class=p>(</span><span class=n>schema</span><span class=p>,</span> <span class=n>sys</span><span class=o>.</span><span class=n>stdout</span><span class=p>,</span> <span class=n>indent</span><span class=o>=</span><span class=mi>2</span><span class=p>)</span><span class=nb>print</span><span class=p>()</span></pre><p><a rel=nofollow></a></p><h2>Schema Types</h2><p><a rel=nofollow></a></p><h3>Supported Types</h3><p>The <code>bq show --schema</code> command produces a JSON schema file that uses theolder <a href=\"https://cloud.google.com/bigquery/data-types\" rel=nofollow>Legacy SQL date types</a>.For compatibility, <strong>generate-schema</strong> script will also generate a schema fileusing the legacy data types.</p><p>The supported types are:</p><ul><li><code>BOOLEAN</code></li><li><code>INTEGER</code></li><li><code>FLOAT</code></li><li><code>STRING</code></li><li><code>TIMESTAMP</code></li><li><code>DATE</code></li><li><code>TIME</code></li><li><code>RECORD</code></li></ul><p>The <code>generate-schema</code> script supports both <code>NULLABLE</code> and <code>REPEATED</code> modes ofall of the above types.</p><p>The supported format of <code>TIMESTAMP</code> is as close as practical to the<a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#timestamp-type\" rel=nofollow>bq load format</a>:</p><pre><code>YYYY-[M]M-[D]D[( |T)[H]H:[M]M:[S]S[.DDDDDD]][time zone]</code></pre><p>which appears to be an extension of the<a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=nofollow>ISO 8601 format</a>.The difference from <code>bq load</code> is that the <code>[time zone]</code> component can be only</p><ul><li><code>Z</code></li><li><code>UTC</code> (same as <code>Z</code>)</li><li><code>(+|-)H[H][:M[M]]</code></li></ul><p>Note that BigQuery supports up to 6 decimal places after the integer 'second'component. <code>generate-schema</code> follows the same restriction for compatibility. Ifyour input file contains more than 6 decimal places, you need to write a datacleansing filter to fix this.</p><p>The suffix <code>UTC</code> is not standard ISO 8601 nor<a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#time-zones\" rel=nofollow>documented by Google</a>but the <code>UTC</code> suffix is used by <code>bq extract</code> and the web interface. (See<a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/19\" rel=nofollow>Issue 19</a>.)</p><p>Timezone names from the <a href=\"http://www.iana.org/time-zones\" rel=nofollow>tz database</a> (e.g.\"America/Los_Angeles\") are <em>not</em> supported by <code>generate-schema</code>.</p><p>The following types are <em>not</em> supported at all:</p><ul><li><code>BYTES</code></li><li><code>DATETIME</code> (unable to distinguish from <code>TIMESTAMP</code>)</li></ul><p><a rel=nofollow></a></p><h3>Type Inference Rules</h3><p>The <code>generate-schema</code> script attempts to emulate the various type conversion andcompatibility rules implemented by <strong>bq load</strong>:</p><ul><li><code>INTEGER</code> can upgrade to <code>FLOAT</code><ul><li>if a field in an early record is an <code>INTEGER</code>, but a subsequent recordshows this field to have a <code>FLOAT</code> value, the type of the field will beupgraded to a <code>FLOAT</code></li><li>the reverse does not happen, once a field is a <code>FLOAT</code>, it will remain a<code>FLOAT</code></li></ul></li><li>conflicting <code>TIME</code>, <code>DATE</code>, <code>TIMESTAMP</code> types upgrades to <code>STRING</code><ul><li>if a field is determined to have one type of \"time\" in one record, thensubsequently a different \"time\" type, then the field will be assigned a<code>STRING</code> type</li></ul></li><li><code>NULLABLE RECORD</code> can upgrade to a <code>REPEATED RECORD</code><ul><li>a field may be defined as <code>RECORD</code> (aka \"Struct\") type with <code>{ ... }</code></li><li>if the field is subsequently read as an array with a <code>[{ ... }]</code>, thefield is upgraded to a <code>REPEATED RECORD</code></li></ul></li><li>a primitive type (<code>FLOAT</code>, <code>INTEGER</code>, <code>STRING</code>) cannot upgrade to a <code>REPEATED</code>primitive type<ul><li>there's no technical reason why this cannot be allowed, but <strong>bq load</strong>does not support it, so we follow its behavior</li></ul></li><li>a <code>DATETIME</code> field is always inferred to be a <code>TIMESTAMP</code><ul><li>the format of these two fields is identical (in the absence of timezone)</li><li>we follow the same logic as <strong>bq load</strong> and always infer these as<code>TIMESTAMP</code></li></ul></li><li><code>BOOLEAN</code>, <code>INTEGER</code>, and <code>FLOAT</code> can appear inside quoted strings<ul><li>In other words, <code>\"true\"</code> (or <code>\"True\"</code> or <code>\"false\"</code>, etc) is considered aBOOLEAN type, <code>\"1\"</code> is considered an INTEGER type, and <code>\"2.1\"</code> isconsidered a FLOAT type. Luigi Mori (jtschichold@) added additional logicto replicate the type conversion logic used by <code>bq load</code> for thesestrings.</li><li>This type inference inside quoted strings can be disabled using the<code>--quoted_values_are_strings</code> flag</li><li>(See <a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/22\" rel=nofollow>Issue #22</a> for more details.)</li></ul></li><li><code>INTEGER</code> values overflowing a 64-bit signed integer upgrade to <code>FLOAT</code><ul><li>integers greater than <code>2^63-1</code> (9223372036854775807)</li><li>integers less than <code>-2^63</code> (-9223372036854775808)</li><li>(See <a href=\"https://github.com/bxparks/bigquery-schema-generator/issues/18\" rel=nofollow>Issue #18</a> for more details)</li></ul></li></ul><p><a rel=nofollow></a></p><h2>Examples</h2><p>Here is an example of a single JSON data record on the STDIN (the <code>^D</code> belowmeans typing Control-D, which indicates \"end of file\" under Linux and MacOS):</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=o>{</span><span class=w> </span><span class=s2>\"s\"</span>:<span class=w> </span><span class=s2>\"string\"</span>,<span class=w> </span><span class=s2>\"b\"</span>:<span class=w> </span>true,<span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>1</span>,<span class=w> </span><span class=s2>\"x\"</span>:<span class=w> </span><span class=m>3</span>.1,<span class=w> </span><span class=s2>\"t\"</span>:<span class=w> </span><span class=s2>\"2017-05-22T17:10:00-07:00\"</span><span class=w> </span><span class=o>}</span>^DINFO:root:Processed<span class=w> </span><span class=m>1</span><span class=w> </span>lines<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"b\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"BOOLEAN\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"i\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"s\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"t\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"TIMESTAMP\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"x\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"FLOAT\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p>In most cases, the data file will be stored in a file:</p><pre lang=bash>$<span class=w> </span>cat<span class=w> </span>&gt;<span class=w> </span>file.data.json<span class=o>{</span><span class=w> </span><span class=s2>\"a\"</span>:<span class=w> </span><span class=o>[</span><span class=m>1</span>,<span class=w> </span><span class=m>2</span><span class=o>]</span><span class=w> </span><span class=o>}</span><span class=o>{</span><span class=w> </span><span class=s2>\"i\"</span>:<span class=w> </span><span class=m>3</span><span class=w> </span><span class=o>}</span>^D$<span class=w> </span>generate-schema<span class=w> </span>&lt;<span class=w> </span>file.data.json<span class=w> </span>&gt;<span class=w> </span>file.schema.jsonINFO:root:Processed<span class=w> </span><span class=m>2</span><span class=w> </span>lines$<span class=w> </span>cat<span class=w> </span>file.schema.json<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"REPEATED\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"a\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"i\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p>Here is the schema generated from a CSV input file. The first line is the headercontaining the names of the columns, and the schema lists the columns in thesame order as the header:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--input_format<span class=w> </span>csve,b,c,d,a<span class=m>1</span>,x,true,,2.0<span class=m>2</span>,x,,,4<span class=m>3</span>,,,,^DINFO:root:Processed<span class=w> </span><span class=m>3</span><span class=w> </span>lines<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"e\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"b\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"c\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"BOOLEAN\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"d\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"a\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"FLOAT\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p>Here is an example of the schema generated with the <code>--infer_mode</code> flag:</p><pre lang=bash>$<span class=w> </span>generate-schema<span class=w> </span>--input_format<span class=w> </span>csv<span class=w> </span>--infer_modename,surname,ageJohnMichael,,Maria,Smith,30Joanna,Anders,21^DINFO:root:Processed<span class=w> </span><span class=m>4</span><span class=w> </span>lines<span class=o>[</span><span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"REQUIRED\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"name\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"surname\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"STRING\"</span><span class=w>  </span><span class=o>}</span>,<span class=w>  </span><span class=o>{</span><span class=w>    </span><span class=s2>\"mode\"</span>:<span class=w> </span><span class=s2>\"NULLABLE\"</span>,<span class=w>    </span><span class=s2>\"name\"</span>:<span class=w> </span><span class=s2>\"age\"</span>,<span class=w>    </span><span class=s2>\"type\"</span>:<span class=w> </span><span class=s2>\"INTEGER\"</span><span class=w>  </span><span class=o>}</span><span class=o>]</span></pre><p><a rel=nofollow></a></p><h2>Benchmarks</h2><p>I wrote the <code>bigquery_schema_generator/anonymize.py</code> script to create ananonymized data file <code>tests/testdata/anon1.data.json.gz</code>:</p><pre lang=bash>$<span class=w> </span>./bigquery_schema_generator/anonymize.py<span class=w> </span>&lt;<span class=w> </span>original.data.json<span class=w> </span><span class=se>\\</span><span class=w>    </span>&gt;<span class=w> </span>anon1.data.json$<span class=w> </span>gzip<span class=w> </span>anon1.data.json</pre><p>This data file is 290MB (5.6MB compressed) with 103080 data records.</p><p>Generating the schema using</p><pre lang=bash>$<span class=w> </span>bigquery_schema_generator/generate_schema.py<span class=w> </span>&lt;<span class=w> </span>anon1.data.json<span class=w> </span><span class=se>\\</span><span class=w>    </span>&gt;<span class=w> </span>anon1.schema.json</pre><p>took 67s on a Dell Precision M4700 laptop with an Intel Core i7-3840QM CPU @2.80GHz, 32GB of RAM, Ubuntu Linux 18.04, Python 3.6.7.</p><p><a rel=nofollow></a></p><h2>System Requirements</h2><p>This project was initially developed on Ubuntu 17.04 using Python 3.5.3, but itnow requires Python 3.6 or higher, I think mostly due to the use of f-strings.</p><p>I have tested it on:</p><ul><li>Ubuntu 22.04, Python 3.10.6</li><li>Ubuntu 20.04, Python 3.8.5</li><li>Ubuntu 18.04, Python 3.7.7</li><li>Ubuntu 18.04, Python 3.6.7</li><li>Ubuntu 17.10, Python 3.6.3</li><li>MacOS 12.6.2 (Monterey), Python 3.10.9</li><li>MacOS 11.7.2 (Big Sur), Python 3.10.9</li><li>MacOS 11.7.2 (Big Sur), Python 3.8.9</li><li>MacOS 10.14.2 (Mojave), Python 3.6.4</li><li>MacOS 10.13.2 (High Sierra), Python 3.6.4</li></ul><p>The GitHub Actions continuous integration pipeline validates on Python 3.7,3.8, 3.9, and 3.10.</p><p>The unit tests are invoked with <code>$ make tests</code> target, and depends only on thebuilt-in Python <code>unittest</code> package.</p><p>The coding style check is invoked using <code>$ make flake8</code> and depends on the<code>flake8</code> package. It can be installed using <code>$ pip3 install --user flake8</code>.</p><p><a rel=nofollow></a></p><h2>License</h2><p>Apache License 2.0</p><p><a rel=nofollow></a></p><h2>Feedback and Support</h2><p>If you have any questions, comments, or feature requests for this library,please use the <a href=\"https://github.com/bxparks/bigquery-schema-generator/discussions\" rel=nofollow>GitHubDiscussions</a>for this project. If you have bug reports, please file a ticket in <a href=\"https://github.com/bxparks/bigquery-schema-generator/issues\" rel=nofollow>GitHubIssues</a>. Featurerequests should go into Discussions first because they often have alternativesolutions which are useful to remain visible, instead of disappearing from thedefault view of the Issue tracker after the ticket is closed.</p><p>Please refrain from emailing me directly unless the content is sensitive. Theproblem with email is that I cannot reference the email conversation when otherpeople ask similar questions later.</p><p><a rel=nofollow></a></p><h2>Authors</h2><ul><li>Created by Brian T. Park (<a href=mailto:brian@xparks.net rel=nofollow>brian@xparks.net</a>).</li><li>Type inference inside quoted strings by Luigi Mori (jtschichold@).</li><li>Flag to disable type inference inside quoted strings by Daniel Ecer(de-code@).</li><li>Support for CSV files and detection of <code>REQUIRED</code> fields by Sandor Korotkevics(korotkevics@).</li><li>Better support for using <code>bigquery_schema_generator</code> as a library from anexternal Python code by StefanoG_ITA (StefanoGITA@).</li><li>Sanitizing of column names to valid BigQuery characters and length by JonWarghed (jonwarghed@).</li><li>Bug fix in <code>--sanitize_names</code> by Riccardo M. Cefala (riccardomc@).</li><li>Print full path of nested JSON elements in error messages, by Austin Brogle(abroglesc@).</li><li>Allow an existing schema file to be specified using <code>--existing_schema_path</code>,by Austin Brogle (abroglesc@) and Bozo Dragojevic (bozzzzo@).</li><li>Allow <code>SchemaGenerator.deduce_schema()</code> to accept a list of native Python<code>dict</code> objects, by Zigfrid Zvezdin (ZiggerZZ@).</li><li>Make the column order in the BQ schema file match the order of appearance inthe JSON data file using the <code>--preserve_input_sort_order</code> flag. By KevinDeggelman (kdeggelman@).</li></ul>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bxparks/bigquery-schema-generator\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/bigquery-schema-generator\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache 2.0</p>    <p><strong>Author:</strong> <a href=\"mailto:brian@xparks.net\">Brian T. Park</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.6  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/bxparks/\" aria-label=\"bxparks\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/7a22056dc946692a7dcb79e50e89becbffffb411/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f63623861363830333535303535333234343830316265363466326133623263323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for bxparks from gravatar.com\" title=\"Avatar for bxparks from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            bxparks          </span>        </a>      </span></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/bigquery-schema-generator/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.6.1/\">                <p class=\"release__version\">                  1.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-01-13T00:03:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 13, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.5.1/\">                <p class=\"release__version\">                  1.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-12-04T16:11:54+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 4, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.5/\">                <p class=\"release__version\">                  1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-11-14T16:32:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 14, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.4.1/\">                <p class=\"release__version\">                  1.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-23T16:53:22+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 23, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.4/\">                <p class=\"release__version\">                  1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-10T05:28:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 10, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.3/\">                <p class=\"release__version\">                  1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-05T18:54:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 5, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.2/\">                <p class=\"release__version\">                  1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-10-28T03:49:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 28, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.1/\">                <p class=\"release__version\">                  1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-07-10T14:38:31+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 10, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/1.0/\">                <p class=\"release__version\">                  1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-04T19:35:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 4, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.5.1/\">                <p class=\"release__version\">                  0.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-06-17T15:06:05+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 17, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.5/\">                <p class=\"release__version\">                  0.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-06-06T18:23:33+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 6, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.4/\">                <p class=\"release__version\">                  0.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-03-06T19:00:31+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 6, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.3.2/\">                <p class=\"release__version\">                  0.3.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-02-24T22:55:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 24, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.3.1/\">                <p class=\"release__version\">                  0.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-01-18T17:39:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 18, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.3/\">                <p class=\"release__version\">                  0.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-12-17T19:07:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 17, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.2.1/\">                <p class=\"release__version\">                  0.2.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-07-18T20:51:30+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 18, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.2.0/\">                <p class=\"release__version\">                  0.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-02-10T21:33:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 10, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.6/\">                <p class=\"release__version\">                  0.1.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-26T16:42:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.5/\">                <p class=\"release__version\">                  0.1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-26T07:10:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.4/\">                <p class=\"release__version\">                  0.1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-23T21:21:24+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 23, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.3/\">                <p class=\"release__version\">                  0.1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-23T20:59:07+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 23, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.2/\">                <p class=\"release__version\">                  0.1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-04T22:34:23+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 4, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1.1/\">                <p class=\"release__version\">                  0.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-03T22:39:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 3, 2018</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/bigquery-schema-generator/0.1/\">                <p class=\"release__version\">                  0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-02T21:23:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 2, 2018</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/58/46/213a5d5a459cd239cfb793bc2172e95828a6746f667dd27500ac0d5b74e7/bigquery-schema-generator-1.6.1.tar.gz\">          bigquery-schema-generator-1.6.1.tar.gz        </a>        (55.7 kB        <a href=\"#copy-hash-modal-b2f3c48d-a251-4f89-92fa-f8ba2a123496\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-01-13T00:03:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 13, 2024</time>          <code>source</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-b2f3c48d-a251-4f89-92fa-f8ba2a123496\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for bigquery-schema-generator-1.6.1.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for bigquery-schema-generator-1.6.1.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">7d94ae2fa6938e58e5c696adc79ab3cdf918fce5c9cebf2533f92903ee7331c3</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">df485d78d38b96c88007ba9b58cf64cf</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">5846213a5d5a459cd239cfb793bc2172e95828a6746f667dd27500ac0d5b74e7</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
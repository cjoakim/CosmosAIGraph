{
  "libtype": "pypi",
  "libname": "azure-monitor-opentelemetry-exporter",
  "url": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter",
  "html": "{\"payload\":{\"allShortcutsEnabled\":false,\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter\",\"repo\":{\"id\":4127088,\"defaultBranch\":\"main\",\"name\":\"azure-sdk-for-python\",\"ownerLogin\":\"Azure\",\"currentUserCanPush\":false,\"isFork\":false,\"isEmpty\":false,\"createdAt\":\"2012-04-24T16:46:12.000Z\",\"ownerAvatar\":\"https://avatars.githubusercontent.com/u/6844498?v=4\",\"public\":true,\"private\":false,\"isOrgOwned\":true},\"currentUser\":null,\"refInfo\":{\"name\":\"main\",\"listCacheKey\":\"v0:1709669873.0\",\"canEdit\":false,\"refType\":\"branch\",\"currentOid\":\"293d480d3ce7e9fe233976a8c5c6c565c5c68665\"},\"tree\":{\"items\":[{\"name\":\"azure\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/azure\",\"contentType\":\"directory\"},{\"name\":\"samples\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/samples\",\"contentType\":\"directory\"},{\"name\":\"swagger\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/swagger\",\"contentType\":\"directory\"},{\"name\":\"tests\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/tests\",\"contentType\":\"directory\"},{\"name\":\"CHANGELOG.md\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/CHANGELOG.md\",\"contentType\":\"file\"},{\"name\":\"LICENSE\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/LICENSE\",\"contentType\":\"file\"},{\"name\":\"MANIFEST.in\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/MANIFEST.in\",\"contentType\":\"file\"},{\"name\":\"README.md\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/README.md\",\"contentType\":\"file\"},{\"name\":\"dev_requirements.txt\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/dev_requirements.txt\",\"contentType\":\"file\"},{\"name\":\"mypy.ini\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/mypy.ini\",\"contentType\":\"file\"},{\"name\":\"pyproject.toml\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/pyproject.toml\",\"contentType\":\"file\"},{\"name\":\"sdk_packaging.toml\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/sdk_packaging.toml\",\"contentType\":\"file\"},{\"name\":\"setup.cfg\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/setup.cfg\",\"contentType\":\"file\"},{\"name\":\"setup.py\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter/setup.py\",\"contentType\":\"file\"}],\"templateDirectorySuggestionUrl\":null,\"readme\":{\"displayName\":\"README.md\",\"richText\":\"<article class=\\\"markdown-body entry-content container-lg\\\" itemprop=\\\"text\\\"><div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h1 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Microsoft OpenTelemetry exporter for Azure Monitor</h1><a id=\\\"user-content-microsoft-opentelemetry-exporter-for-azure-monitor\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Microsoft OpenTelemetry exporter for Azure Monitor\\\" href=\\\"#microsoft-opentelemetry-exporter-for-azure-monitor\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The exporter for Azure Monitor allows Python applications to export data from the OpenTelemetry SDK to Azure Monitor. The exporter is intended for users who require advanced configuration or has more complicated telemetry needs that require all of distributed tracing, logging and metrics. If you have simpler configuration requirements, we recommend using the <a href=\\\"https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-enable?tabs=python\\\" rel=\\\"nofollow\\\">Azure Monitor OpenTelemetry Distro</a> instead for a simpler one-line setup.</p>\\n<p dir=\\\"auto\\\">Prior to using this SDK, please read and understand <a href=\\\"https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-overview?tabs=python\\\" rel=\\\"nofollow\\\">Data Collection Basics</a>, especially the section on <a href=\\\"https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-overview?tabs=python#telemetry-types\\\" rel=\\\"nofollow\\\">telemetry types</a>. OpenTelemetry terminology differs from Application Insights terminology so it is important to understand the way the telemetry types map to each other.</p>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter\\\">Source code</a> | <a href=\\\"https://pypi.org/project/azure-monitor-opentelemetry-exporter/\\\" rel=\\\"nofollow\\\">Package (PyPi)</a> | <a href=\\\"https://azure.github.io/azure-sdk-for-python/monitor.html#azure-monitor-opentelemetry-exporter\\\" rel=\\\"nofollow\\\">API reference documentation</a> | <a href=\\\"https://docs.microsoft.com/azure/azure-monitor/overview\\\" rel=\\\"nofollow\\\">Product documentation</a> | <a href=\\\"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples\\\">Samples</a> | <a href=\\\"https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/CHANGELOG.md\\\">Changelog</a></p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Getting started</h2><a id=\\\"user-content-getting-started\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Getting started\\\" href=\\\"#getting-started\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Install the package</h3><a id=\\\"user-content-install-the-package\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Install the package\\\" href=\\\"#install-the-package\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Install the Microsoft OpenTelemetry exporter for Azure Monitor with <a href=\\\"https://pypi.org/project/pip/\\\" rel=\\\"nofollow\\\">pip</a>:</p>\\n<div class=\\\"highlight highlight-source-shell notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"pip install azure-monitor-opentelemetry-exporter --pre\\\"><pre>pip install azure-monitor-opentelemetry-exporter --pre</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Prerequisites</h3><a id=\\\"user-content-prerequisites\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Prerequisites\\\" href=\\\"#prerequisites\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">To use this package, you must have:</p>\\n<ul dir=\\\"auto\\\">\\n<li>Azure subscription - <a href=\\\"https://azure.microsoft.com/free/\\\" rel=\\\"nofollow\\\">Create a free account</a></li>\\n<li>Azure Monitor - <a href=\\\"https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview#how-do-i-use-application-insights\\\" rel=\\\"nofollow\\\">How to use application insights</a></li>\\n<li>OpenTelemetry SDK - <a href=\\\"https://github.com/open-telemetry/opentelemetry-python\\\">OpenTelemetry SDK for Python</a></li>\\n<li>Python 3.8 or later - <a href=\\\"https://www.python.org/downloads/\\\" rel=\\\"nofollow\\\">Install Python</a></li>\\n</ul>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Instantiate the client</h3><a id=\\\"user-content-instantiate-the-client\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Instantiate the client\\\" href=\\\"#instantiate-the-client\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Interaction with Azure monitor exporter starts with an instance of the <code>AzureMonitorTraceExporter</code> class for distributed tracing, <code>AzureMonitorLogExporter</code> for logging and <code>AzureMonitorMetricExporter</code> for metrics. You will need a <strong>connection_string</strong> to instantiate the object.\\nPlease find the samples linked below for demonstration as to how to construct the exporter using a connection string.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Logging (experimental)</h4><a id=\\\"user-content-logging-experimental\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Logging (experimental)\\\" href=\\\"#logging-experimental\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">NOTE: The logging signal for the <code>AzureMonitorLogExporter</code> is currently in an EXPERIMENTAL state. Possible breaking changes may ensue in the future.</p>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\nexporter = AzureMonitorLogExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Metrics</h4><a id=\\\"user-content-metrics\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Metrics\\\" href=\\\"#metrics\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\\nexporter = AzureMonitorMetricExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Tracing</h4><a id=\\\"user-content-tracing\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Tracing\\\" href=\\\"#tracing\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\\nexporter = AzureMonitorTraceExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)</pre></div>\\n<p dir=\\\"auto\\\">You can also instantiate the exporter directly via the constructor. In this case, the connection string will be automatically populated from the <code>APPLICATIONINSIGHTS_CONNECTION_STRING</code> environment variable.</p>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\nexporter = AzureMonitorLogExporter()\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>()</pre></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\\nexporter = AzureMonitorMetricExporter()\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>()</pre></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"from azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\\nexporter = AzureMonitorTraceExporter()\\\"><pre><span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>()</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Key concepts</h2><a id=\\\"user-content-key-concepts\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Key concepts\\\" href=\\\"#key-concepts\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Some of the key concepts for the Azure monitor exporter include:</p>\\n<ul dir=\\\"auto\\\">\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry.io/\\\" rel=\\\"nofollow\\\">OpenTelemetry</a>: OpenTelemetry is a set of libraries used to collect and export telemetry data (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries\\\">Instrumentation</a>: The ability to call the OpenTelemetry API directly by any application is facilitated by instrumentation. A library that enables OpenTelemetry observability for another library is called an instrumentation Library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#log-signal\\\">Log</a>: Log refers to capturing of logging, exception and events.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LogRecord\\\" rel=\\\"nofollow\\\">LogRecord</a>: Represents a log record emitted from a supported logging library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.Logger\\\" rel=\\\"nofollow\\\">Logger</a>: Converts a <code>LogRecord</code> into a readable <code>LogData</code>, and will be pushed through the SDK to be exported.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LoggerProvider\\\" rel=\\\"nofollow\\\">Logger Provider</a>: Provides a <code>Logger</code> for the given instrumentation library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LogRecordProcessor\\\" rel=\\\"nofollow\\\">LogRecordProcessor</a>: Interface to hook the log record emitting action.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LoggingHandler\\\" rel=\\\"nofollow\\\">LoggingHandler</a>: A handler class which writes logging records in OpenTelemetry format from the standard Python <code>logging</code> library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/logs/_exporter.py\\\">AzureMonitorLogExporter</a>: This is the class that is initialized to send logging related telemetry to Azure Monitor.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#metric-signal\\\">Metric</a>: <code>Metric</code> refers to recording raw measurements with predefined aggregation and sets of attributes for a period in time.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#measurement\\\">Measurement</a>: Represents a data point recorded at a point in time.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#instrument\\\">Instrument</a>: Instruments are used to report <code>Measurement</code>s.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#meter\\\">Meter</a>: The <code>Meter</code> is responsible for creating <code>Instruments</code>.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#meterprovider\\\">Meter Provider</a>: Provides a <code>Meter</code> for the given instrumentation library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#metricreader\\\">Metric Reader</a>: An SDK implementation object that provides the common configurable aspects of the OpenTelemetry Metrics SDK such as collection, flushing and shutdown.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/metrics/_exporter.py\\\">AzureMonitorMetricExporter</a>: This is the class that is initialized to send metric related telemetry to Azure Monitor.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#tracing-signal\\\">Trace</a>: Trace refers to distributed tracing. A distributed trace is a set of events, triggered as a result of a single logical operation, consolidated across various components of an application. In particular, a Trace can be thought of as a directed acyclic graph (DAG) of Spans, where the edges between Spans are defined as parent/child relationship.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.Span\\\" rel=\\\"nofollow\\\">Span</a>: Represents a single operation within a <code>Trace</code>. Can be nested to form a trace tree. Each trace contains a root span, which typically describes the entire operation and, optionally, one ore more sub-spans for its sub-operations.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.Tracer\\\" rel=\\\"nofollow\\\">Tracer</a>: Responsible for creating <code>Span</code>s.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.TracerProvider\\\" rel=\\\"nofollow\\\">Tracer Provider</a>: Provides a <code>Tracer</code> for use by the given instrumentation library.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/_modules/opentelemetry/sdk/trace.html?highlight=SpanProcessor#\\\" rel=\\\"nofollow\\\">Span Processor</a>: A span processor allows hooks for SDK's <code>Span</code> start and end method invocations. Follow the link for more information.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/trace/_exporter.py\\\">AzureMonitorTraceExporter</a>: This is the class that is initialized to send tracing related telemetry to Azure Monitor.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\\\">Sampling</a>: Sampling is a mechanism to control the noise and overhead introduced by OpenTelemetry by reducing the number of samples of traces collected and sent to the backend.</p>\\n</li>\\n<li>\\n<p dir=\\\"auto\\\">ApplicationInsightsSampler: Application Insights specific sampler used for consistent sampling across Application Insights SDKs and OpenTelemetry-based SDKs sending data to Application Insights. This sampler MUST be used whenever <code>AzureMonitorTraceExporter</code> is used.</p>\\n</li>\\n</ul>\\n<p dir=\\\"auto\\\">For more information about these resources, see <a href=\\\"https://docs.microsoft.com/azure/azure-monitor/overview\\\" rel=\\\"nofollow\\\">What is Azure Monitor?</a>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Configuration</h2><a id=\\\"user-content-configuration\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Configuration\\\" href=\\\"#configuration\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">All configuration options can be passed through the constructors of exporters through <code>kwargs</code>. Below is a list of configurable options.</p>\\n<ul dir=\\\"auto\\\">\\n<li><code>connection_string</code>: The connection string used for your Application Insights resource.</li>\\n<li><code>disable_offline_storage</code>: Boolean value to determine whether to disable storing failed telemetry records for retry. Defaults to <code>False</code>.</li>\\n<li><code>storage_directory</code>: Storage directory in which to store retry files. Defaults to <code>&lt;tempfile.gettempdir()&gt;/Microsoft/AzureMonitor/opentelemetry-python-&lt;your-instrumentation-key&gt;</code>.</li>\\n<li><code>credential</code>: Token credential, such as ManagedIdentityCredential or ClientSecretCredential, used for <a href=\\\"https://learn.microsoft.com/azure/azure-monitor/app/azure-ad-authentication?tabs=python\\\" rel=\\\"nofollow\\\">Azure Active Directory (AAD) authentication</a>. Defaults to None. See <a href=\\\"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples\\\">samples</a> for examples.</li>\\n</ul>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Examples</h2><a id=\\\"user-content-examples\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Examples\\\" href=\\\"#examples\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Logging (experimental)</h3><a id=\\\"user-content-logging-experimental-1\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Logging (experimental)\\\" href=\\\"#logging-experimental-1\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">NOTE: The logging signal for the <code>AzureMonitorLogExporter</code> is currently in an EXPERIMENTAL state. Possible breaking changes may ensue in the future.</p>\\n<p dir=\\\"auto\\\">The following sections provide several code snippets covering some of the most common tasks, including:</p>\\n<ul dir=\\\"auto\\\">\\n<li><a href=\\\"#export-hello-world-log\\\">Exporting a log record</a></li>\\n<li><a href=\\\"#export-correlated-log\\\">Exporting correlated log record</a></li>\\n<li><a href=\\\"#export-custom-properties-log\\\">Exporting log record with custom properties</a></li>\\n<li><a href=\\\"#export-exceptions-log\\\">Exporting an exceptions log record</a></li>\\n</ul>\\n<p dir=\\\"auto\\\">Review the <a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html\\\" rel=\\\"nofollow\\\">OpenTelemetry Logging SDK</a> to learn how to use OpenTelemetry components to collect logs.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Export Hello World Log</h4><a id=\\\"user-content-export-hello-world-log\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Export Hello World Log\\\" href=\\\"#export-hello-world-log\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application using Opentelemetry logging sdk. Logging calls to the standard Python\\nlogging library are tracked and telemetry is exported to application insights with the AzureMonitorLogExporter.\\n&quot;&quot;&quot;\\nimport os\\nimport logging\\n\\nfrom opentelemetry._logs import set_logger_provider\\nfrom opentelemetry.sdk._logs import (\\n    LoggerProvider,\\n    LoggingHandler,\\n)\\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\n\\nlogger_provider = LoggerProvider()\\nset_logger_provider(logger_provider)\\n\\nexporter = AzureMonitorLogExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\n\\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\\nhandler = LoggingHandler()\\n\\n# Attach LoggingHandler to root logger\\nlogging.getLogger().addHandler(handler)\\nlogging.getLogger().setLevel(logging.NOTSET)\\n\\nlogger = logging.getLogger(__name__)\\n\\nlogger.warning(&quot;Hello World!&quot;)\\n\\n# Telemetry records are flushed automatically upon application exit\\n# If you would like to flush records manually yourself, you can call force_flush()\\nlogger_provider.force_flush()\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application using Opentelemetry logging sdk. Logging calls to the standard Python</span>\\n<span class=\\\"pl-s\\\">logging library are tracked and telemetry is exported to application insights with the AzureMonitorLogExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">logging</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">set_logger_provider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-v\\\">LoggerProvider</span>,\\n    <span class=\\\"pl-v\\\">LoggingHandler</span>,\\n)\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n\\n<span class=\\\"pl-s1\\\">logger_provider</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggerProvider</span>()\\n<span class=\\\"pl-en\\\">set_logger_provider</span>(<span class=\\\"pl-s1\\\">logger_provider</span>)\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n\\n<span class=\\\"pl-s1\\\">logger_provider</span>.<span class=\\\"pl-en\\\">add_log_record_processor</span>(<span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>))\\n<span class=\\\"pl-s1\\\">handler</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggingHandler</span>()\\n\\n<span class=\\\"pl-c\\\"># Attach LoggingHandler to root logger</span>\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">addHandler</span>(<span class=\\\"pl-s1\\\">handler</span>)\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">setLevel</span>(<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-v\\\">NOTSET</span>)\\n\\n<span class=\\\"pl-s1\\\">logger</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">warning</span>(<span class=\\\"pl-s\\\">\\\"Hello World!\\\"</span>)\\n\\n<span class=\\\"pl-c\\\"># Telemetry records are flushed automatically upon application exit</span>\\n<span class=\\\"pl-c\\\"># If you would like to flush records manually yourself, you can call force_flush()</span>\\n<span class=\\\"pl-s1\\\">logger_provider</span>.<span class=\\\"pl-en\\\">force_flush</span>()</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Export Correlated Log</h4><a id=\\\"user-content-export-correlated-log\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Export Correlated Log\\\" href=\\\"#export-correlated-log\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example showing how to include context correlation information in logging telemetry.\\n&quot;&quot;&quot;\\nimport os\\nimport logging\\n\\nfrom opentelemetry import trace\\nfrom opentelemetry._logs import set_logger_provider\\nfrom opentelemetry.sdk._logs import (\\n    LoggerProvider,\\n    LoggingHandler,\\n)\\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\\nfrom opentelemetry.sdk.trace import TracerProvider\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\n\\ntrace.set_tracer_provider(TracerProvider())\\ntracer = trace.get_tracer(__name__)\\nlogger_provider = LoggerProvider()\\nset_logger_provider(logger_provider)\\n\\nexporter = AzureMonitorLogExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\n\\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\\nhandler = LoggingHandler()\\n\\n# Attach LoggingHandler to root logger\\nlogging.getLogger().addHandler(handler)\\nlogging.getLogger().setLevel(logging.NOTSET)\\n\\nlogger = logging.getLogger(__name__)\\n\\nlogger.info(&quot;INFO: Outside of span&quot;)\\nwith tracer.start_as_current_span(&quot;foo&quot;):\\n    logger.warning(&quot;WARNING: Inside of span&quot;)\\nlogger.error(&quot;ERROR: After span&quot;)\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example showing how to include context correlation information in logging telemetry.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">logging</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">trace</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">set_logger_provider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-v\\\">LoggerProvider</span>,\\n    <span class=\\\"pl-v\\\">LoggingHandler</span>,\\n)\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">TracerProvider</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">set_tracer_provider</span>(<span class=\\\"pl-v\\\">TracerProvider</span>())\\n<span class=\\\"pl-s1\\\">tracer</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n<span class=\\\"pl-s1\\\">logger_provider</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggerProvider</span>()\\n<span class=\\\"pl-en\\\">set_logger_provider</span>(<span class=\\\"pl-s1\\\">logger_provider</span>)\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n\\n<span class=\\\"pl-s1\\\">logger_provider</span>.<span class=\\\"pl-en\\\">add_log_record_processor</span>(<span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>))\\n<span class=\\\"pl-s1\\\">handler</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggingHandler</span>()\\n\\n<span class=\\\"pl-c\\\"># Attach LoggingHandler to root logger</span>\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">addHandler</span>(<span class=\\\"pl-s1\\\">handler</span>)\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">setLevel</span>(<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-v\\\">NOTSET</span>)\\n\\n<span class=\\\"pl-s1\\\">logger</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">info</span>(<span class=\\\"pl-s\\\">\\\"INFO: Outside of span\\\"</span>)\\n<span class=\\\"pl-k\\\">with</span> <span class=\\\"pl-s1\\\">tracer</span>.<span class=\\\"pl-en\\\">start_as_current_span</span>(<span class=\\\"pl-s\\\">\\\"foo\\\"</span>):\\n    <span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">warning</span>(<span class=\\\"pl-s\\\">\\\"WARNING: Inside of span\\\"</span>)\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">error</span>(<span class=\\\"pl-s\\\">\\\"ERROR: After span\\\"</span>)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Export Custom Properties Log</h4><a id=\\\"user-content-export-custom-properties-log\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Export Custom Properties Log\\\" href=\\\"#export-custom-properties-log\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example showing how to add custom properties to logging telemetry.\\n&quot;&quot;&quot;\\nimport os\\nimport logging\\n\\nfrom opentelemetry._logs import set_logger_provider\\nfrom opentelemetry.sdk._logs import (\\n    LoggerProvider,\\n    LoggingHandler,\\n)\\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\n\\nlogger_provider = LoggerProvider()\\nset_logger_provider(logger_provider)\\n\\nexporter = AzureMonitorLogExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\n\\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\\nhandler = LoggingHandler()\\n\\n# Attach LoggingHandler to root logger\\nlogging.getLogger().addHandler(handler)\\nlogging.getLogger().setLevel(logging.NOTSET)\\n\\nlogger = logging.getLogger(__name__)\\n\\n# Custom properties\\nlogger.debug(&quot;DEBUG: Debug with properties&quot;, extra={&quot;debug&quot;: &quot;true&quot;})\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example showing how to add custom properties to logging telemetry.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">logging</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">set_logger_provider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-v\\\">LoggerProvider</span>,\\n    <span class=\\\"pl-v\\\">LoggingHandler</span>,\\n)\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n\\n<span class=\\\"pl-s1\\\">logger_provider</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggerProvider</span>()\\n<span class=\\\"pl-en\\\">set_logger_provider</span>(<span class=\\\"pl-s1\\\">logger_provider</span>)\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n\\n<span class=\\\"pl-s1\\\">logger_provider</span>.<span class=\\\"pl-en\\\">add_log_record_processor</span>(<span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>))\\n<span class=\\\"pl-s1\\\">handler</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggingHandler</span>()\\n\\n<span class=\\\"pl-c\\\"># Attach LoggingHandler to root logger</span>\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">addHandler</span>(<span class=\\\"pl-s1\\\">handler</span>)\\n<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>().<span class=\\\"pl-en\\\">setLevel</span>(<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-v\\\">NOTSET</span>)\\n\\n<span class=\\\"pl-s1\\\">logger</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n\\n<span class=\\\"pl-c\\\"># Custom properties</span>\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">debug</span>(<span class=\\\"pl-s\\\">\\\"DEBUG: Debug with properties\\\"</span>, <span class=\\\"pl-s1\\\">extra</span><span class=\\\"pl-c1\\\">=</span>{<span class=\\\"pl-s\\\">\\\"debug\\\"</span>: <span class=\\\"pl-s\\\">\\\"true\\\"</span>})</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Export Exceptions Log</h4><a id=\\\"user-content-export-exceptions-log\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Export Exceptions Log\\\" href=\\\"#export-exceptions-log\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example showing how to export exception telemetry using the AzureMonitorLogExporter.\\n&quot;&quot;&quot;\\nimport os\\nimport logging\\n\\nfrom opentelemetry._logs import (\\n    get_logger_provider,\\n    set_logger_provider,\\n)\\nfrom opentelemetry.sdk._logs import (\\n    LoggerProvider,\\n    LoggingHandler,\\n)\\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\\n\\nset_logger_provider(LoggerProvider())\\nexporter = AzureMonitorLogExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nget_logger_provider().add_log_record_processor(BatchLogRecordProcessor(exporter))\\n\\n# Attach LoggingHandler to namespaced logger\\nhandler = LoggingHandler()\\nlogger = logging.getLogger(__name__)\\nlogger.addHandler(handler)\\nlogger.setLevel(logging.NOTSET)\\n\\n# The following code will generate two pieces of exception telemetry\\n# that are identical in nature\\ntry:\\n    val = 1 / 0\\n    print(val)\\nexcept ZeroDivisionError:\\n    logger.exception(&quot;Error: Division by zero&quot;)\\n\\ntry:\\n    val = 1 / 0\\n    print(val)\\nexcept ZeroDivisionError:\\n    logger.error(&quot;Error: Division by zero&quot;, stack_info=True, exc_info=True)\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example showing how to export exception telemetry using the AzureMonitorLogExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">logging</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-s1\\\">get_logger_provider</span>,\\n    <span class=\\\"pl-s1\\\">set_logger_provider</span>,\\n)\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-v\\\">LoggerProvider</span>,\\n    <span class=\\\"pl-v\\\">LoggingHandler</span>,\\n)\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">_logs</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>\\n\\n<span class=\\\"pl-en\\\">set_logger_provider</span>(<span class=\\\"pl-v\\\">LoggerProvider</span>())\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorLogExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-en\\\">get_logger_provider</span>().<span class=\\\"pl-en\\\">add_log_record_processor</span>(<span class=\\\"pl-v\\\">BatchLogRecordProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>))\\n\\n<span class=\\\"pl-c\\\"># Attach LoggingHandler to namespaced logger</span>\\n<span class=\\\"pl-s1\\\">handler</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">LoggingHandler</span>()\\n<span class=\\\"pl-s1\\\">logger</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-en\\\">getLogger</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">addHandler</span>(<span class=\\\"pl-s1\\\">handler</span>)\\n<span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">setLevel</span>(<span class=\\\"pl-s1\\\">logging</span>.<span class=\\\"pl-v\\\">NOTSET</span>)\\n\\n<span class=\\\"pl-c\\\"># The following code will generate two pieces of exception telemetry</span>\\n<span class=\\\"pl-c\\\"># that are identical in nature</span>\\n<span class=\\\"pl-k\\\">try</span>:\\n    <span class=\\\"pl-s1\\\">val</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-c1\\\">1</span> <span class=\\\"pl-c1\\\">/</span> <span class=\\\"pl-c1\\\">0</span>\\n    <span class=\\\"pl-en\\\">print</span>(<span class=\\\"pl-s1\\\">val</span>)\\n<span class=\\\"pl-k\\\">except</span> <span class=\\\"pl-v\\\">ZeroDivisionError</span>:\\n    <span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">exception</span>(<span class=\\\"pl-s\\\">\\\"Error: Division by zero\\\"</span>)\\n\\n<span class=\\\"pl-k\\\">try</span>:\\n    <span class=\\\"pl-s1\\\">val</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-c1\\\">1</span> <span class=\\\"pl-c1\\\">/</span> <span class=\\\"pl-c1\\\">0</span>\\n    <span class=\\\"pl-en\\\">print</span>(<span class=\\\"pl-s1\\\">val</span>)\\n<span class=\\\"pl-k\\\">except</span> <span class=\\\"pl-v\\\">ZeroDivisionError</span>:\\n    <span class=\\\"pl-s1\\\">logger</span>.<span class=\\\"pl-en\\\">error</span>(<span class=\\\"pl-s\\\">\\\"Error: Division by zero\\\"</span>, <span class=\\\"pl-s1\\\">stack_info</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-c1\\\">True</span>, <span class=\\\"pl-s1\\\">exc_info</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-c1\\\">True</span>)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Metrics</h3><a id=\\\"user-content-metrics-1\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Metrics\\\" href=\\\"#metrics-1\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The following sections provide several code snippets covering some of the most common tasks, including:</p>\\n<ul dir=\\\"auto\\\">\\n<li><a href=\\\"#metric-instrument-usage\\\">Using different metric instruments</a></li>\\n<li><a href=\\\"#metric-custom-views\\\">Customizing outputted metrics with views</a></li>\\n<li><a href=\\\"#metric-record-attributes\\\">Recording instruments with attributes</a></li>\\n</ul>\\n<p dir=\\\"auto\\\">Review the <a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/metrics.html\\\" rel=\\\"nofollow\\\">OpenTelemetry Metrics SDK</a> to learn how to use OpenTelemetry components to collect metrics.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Metric instrument usage</h4><a id=\\\"user-content-metric-instrument-usage\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Metric instrument usage\\\" href=\\\"#metric-instrument-usage\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application using all instruments in the OpenTelemetry SDK. Metrics created\\nand recorded using the sdk are tracked and telemetry is exported to application insights with the\\nAzureMonitorMetricsExporter.\\n&quot;&quot;&quot;\\nimport os\\nfrom typing import Iterable\\n\\nfrom opentelemetry import metrics\\nfrom opentelemetry.metrics import CallbackOptions, Observation\\nfrom opentelemetry.sdk.metrics import MeterProvider\\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\\n\\nexporter = AzureMonitorMetricExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\\n\\n# Create a namespaced meter\\nmeter = metrics.get_meter_provider().get_meter(&quot;sample&quot;)\\n\\n# Callback functions for observable instruments\\ndef observable_counter_func(options: CallbackOptions) -&gt; Iterable[Observation]:\\n    yield Observation(1, {})\\n\\n\\ndef observable_up_down_counter_func(\\n    options: CallbackOptions,\\n) -&gt; Iterable[Observation]:\\n    yield Observation(-10, {})\\n\\n\\ndef observable_gauge_func(options: CallbackOptions) -&gt; Iterable[Observation]:\\n    yield Observation(9, {})\\n\\n# Counter\\ncounter = meter.create_counter(&quot;counter&quot;)\\ncounter.add(1)\\n\\n# Async Counter\\nobservable_counter = meter.create_observable_counter(\\n    &quot;observable_counter&quot;, [observable_counter_func]\\n)\\n\\n# UpDownCounter\\nup_down_counter = meter.create_up_down_counter(&quot;up_down_counter&quot;)\\nup_down_counter.add(1)\\nup_down_counter.add(-5)\\n\\n# Async UpDownCounter\\nobservable_up_down_counter = meter.create_observable_up_down_counter(\\n    &quot;observable_up_down_counter&quot;, [observable_up_down_counter_func]\\n)\\n\\n# Histogram\\nhistogram = meter.create_histogram(&quot;histogram&quot;)\\nhistogram.record(99.9)\\n\\n# Async Gauge\\ngauge = meter.create_observable_gauge(&quot;gauge&quot;, [observable_gauge_func])\\n\\n# Upon application exit, one last collection is made and telemetry records are\\n# flushed automatically. # If you would like to flush records manually yourself,\\n# you can call force_flush()\\nmeter_provider.force_flush()\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application using all instruments in the OpenTelemetry SDK. Metrics created</span>\\n<span class=\\\"pl-s\\\">and recorded using the sdk are tracked and telemetry is exported to application insights with the</span>\\n<span class=\\\"pl-s\\\">AzureMonitorMetricsExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">typing</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">Iterable</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">metrics</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">metrics</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">CallbackOptions</span>, <span class=\\\"pl-v\\\">Observation</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">MeterProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-s1\\\">reader</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>(<span class=\\\"pl-s1\\\">exporter</span>, <span class=\\\"pl-s1\\\">export_interval_millis</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-c1\\\">5000</span>)\\n<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">set_meter_provider</span>(<span class=\\\"pl-v\\\">MeterProvider</span>(<span class=\\\"pl-s1\\\">metric_readers</span><span class=\\\"pl-c1\\\">=</span>[<span class=\\\"pl-s1\\\">reader</span>]))\\n\\n<span class=\\\"pl-c\\\"># Create a namespaced meter</span>\\n<span class=\\\"pl-s1\\\">meter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">get_meter_provider</span>().<span class=\\\"pl-en\\\">get_meter</span>(<span class=\\\"pl-s\\\">\\\"sample\\\"</span>)\\n\\n<span class=\\\"pl-c\\\"># Callback functions for observable instruments</span>\\n<span class=\\\"pl-k\\\">def</span> <span class=\\\"pl-en\\\">observable_counter_func</span>(<span class=\\\"pl-s1\\\">options</span>: <span class=\\\"pl-v\\\">CallbackOptions</span>) <span class=\\\"pl-c1\\\">-&gt;</span> <span class=\\\"pl-v\\\">Iterable</span>[<span class=\\\"pl-v\\\">Observation</span>]:\\n    <span class=\\\"pl-k\\\">yield</span> <span class=\\\"pl-v\\\">Observation</span>(<span class=\\\"pl-c1\\\">1</span>, {})\\n\\n\\n<span class=\\\"pl-k\\\">def</span> <span class=\\\"pl-en\\\">observable_up_down_counter_func</span>(\\n    <span class=\\\"pl-s1\\\">options</span>: <span class=\\\"pl-v\\\">CallbackOptions</span>,\\n) <span class=\\\"pl-c1\\\">-&gt;</span> <span class=\\\"pl-v\\\">Iterable</span>[<span class=\\\"pl-v\\\">Observation</span>]:\\n    <span class=\\\"pl-k\\\">yield</span> <span class=\\\"pl-v\\\">Observation</span>(<span class=\\\"pl-c1\\\">-</span><span class=\\\"pl-c1\\\">10</span>, {})\\n\\n\\n<span class=\\\"pl-k\\\">def</span> <span class=\\\"pl-en\\\">observable_gauge_func</span>(<span class=\\\"pl-s1\\\">options</span>: <span class=\\\"pl-v\\\">CallbackOptions</span>) <span class=\\\"pl-c1\\\">-&gt;</span> <span class=\\\"pl-v\\\">Iterable</span>[<span class=\\\"pl-v\\\">Observation</span>]:\\n    <span class=\\\"pl-k\\\">yield</span> <span class=\\\"pl-v\\\">Observation</span>(<span class=\\\"pl-c1\\\">9</span>, {})\\n\\n<span class=\\\"pl-c\\\"># Counter</span>\\n<span class=\\\"pl-s1\\\">counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_counter</span>(<span class=\\\"pl-s\\\">\\\"counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">counter</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">1</span>)\\n\\n<span class=\\\"pl-c\\\"># Async Counter</span>\\n<span class=\\\"pl-s1\\\">observable_counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_observable_counter</span>(\\n    <span class=\\\"pl-s\\\">\\\"observable_counter\\\"</span>, [<span class=\\\"pl-s1\\\">observable_counter_func</span>]\\n)\\n\\n<span class=\\\"pl-c\\\"># UpDownCounter</span>\\n<span class=\\\"pl-s1\\\">up_down_counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_up_down_counter</span>(<span class=\\\"pl-s\\\">\\\"up_down_counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">up_down_counter</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">1</span>)\\n<span class=\\\"pl-s1\\\">up_down_counter</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">-</span><span class=\\\"pl-c1\\\">5</span>)\\n\\n<span class=\\\"pl-c\\\"># Async UpDownCounter</span>\\n<span class=\\\"pl-s1\\\">observable_up_down_counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_observable_up_down_counter</span>(\\n    <span class=\\\"pl-s\\\">\\\"observable_up_down_counter\\\"</span>, [<span class=\\\"pl-s1\\\">observable_up_down_counter_func</span>]\\n)\\n\\n<span class=\\\"pl-c\\\"># Histogram</span>\\n<span class=\\\"pl-s1\\\">histogram</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_histogram</span>(<span class=\\\"pl-s\\\">\\\"histogram\\\"</span>)\\n<span class=\\\"pl-s1\\\">histogram</span>.<span class=\\\"pl-en\\\">record</span>(<span class=\\\"pl-c1\\\">99.9</span>)\\n\\n<span class=\\\"pl-c\\\"># Async Gauge</span>\\n<span class=\\\"pl-s1\\\">gauge</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_observable_gauge</span>(<span class=\\\"pl-s\\\">\\\"gauge\\\"</span>, [<span class=\\\"pl-s1\\\">observable_gauge_func</span>])\\n\\n<span class=\\\"pl-c\\\"># Upon application exit, one last collection is made and telemetry records are</span>\\n<span class=\\\"pl-c\\\"># flushed automatically. # If you would like to flush records manually yourself,</span>\\n<span class=\\\"pl-c\\\"># you can call force_flush()</span>\\n<span class=\\\"pl-s1\\\">meter_provider</span>.<span class=\\\"pl-en\\\">force_flush</span>()</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Metric custom views</h4><a id=\\\"user-content-metric-custom-views\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Metric custom views\\\" href=\\\"#metric-custom-views\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nThis example shows how to customize the metrics that are output by the SDK using Views. Metrics created\\nand recorded using the sdk are tracked and telemetry is exported to application insights with the\\nAzureMonitorMetricsExporter.\\n&quot;&quot;&quot;\\nimport os\\n\\nfrom opentelemetry import metrics\\nfrom opentelemetry.sdk.metrics import Counter, MeterProvider\\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\\nfrom opentelemetry.sdk.metrics.view import View\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\\n\\nexporter = AzureMonitorMetricExporter.from_connection_string(\\n    os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\n# Create a view matching the counter instrument `my.counter`\\n# and configure the new name `my.counter.total` for the result metrics stream\\nchange_metric_name_view = View(\\n    instrument_type=Counter,\\n    instrument_name=&quot;my.counter&quot;,\\n    name=&quot;my.counter.total&quot;,\\n)\\n\\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\\nprovider = MeterProvider(\\n    metric_readers=[\\n        reader,\\n    ],\\n    views=[\\n        change_metric_name_view,\\n    ],\\n)\\nmetrics.set_meter_provider(provider)\\n\\nmeter = metrics.get_meter_provider().get_meter(&quot;view-name-change&quot;)\\nmy_counter = meter.create_counter(&quot;my.counter&quot;)\\nmy_counter.add(100)\\n\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">This example shows how to customize the metrics that are output by the SDK using Views. Metrics created</span>\\n<span class=\\\"pl-s\\\">and recorded using the sdk are tracked and telemetry is exported to application insights with the</span>\\n<span class=\\\"pl-s\\\">AzureMonitorMetricsExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">metrics</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">Counter</span>, <span class=\\\"pl-v\\\">MeterProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-s1\\\">view</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">View</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>.<span class=\\\"pl-en\\\">from_connection_string</span>(\\n    <span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-c\\\"># Create a view matching the counter instrument `my.counter`</span>\\n<span class=\\\"pl-c\\\"># and configure the new name `my.counter.total` for the result metrics stream</span>\\n<span class=\\\"pl-s1\\\">change_metric_name_view</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">View</span>(\\n    <span class=\\\"pl-s1\\\">instrument_type</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-v\\\">Counter</span>,\\n    <span class=\\\"pl-s1\\\">instrument_name</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s\\\">\\\"my.counter\\\"</span>,\\n    <span class=\\\"pl-s1\\\">name</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s\\\">\\\"my.counter.total\\\"</span>,\\n)\\n\\n<span class=\\\"pl-s1\\\">reader</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>(<span class=\\\"pl-s1\\\">exporter</span>, <span class=\\\"pl-s1\\\">export_interval_millis</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-c1\\\">5000</span>)\\n<span class=\\\"pl-s1\\\">provider</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">MeterProvider</span>(\\n    <span class=\\\"pl-s1\\\">metric_readers</span><span class=\\\"pl-c1\\\">=</span>[\\n        <span class=\\\"pl-s1\\\">reader</span>,\\n    ],\\n    <span class=\\\"pl-s1\\\">views</span><span class=\\\"pl-c1\\\">=</span>[\\n        <span class=\\\"pl-s1\\\">change_metric_name_view</span>,\\n    ],\\n)\\n<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">set_meter_provider</span>(<span class=\\\"pl-s1\\\">provider</span>)\\n\\n<span class=\\\"pl-s1\\\">meter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">get_meter_provider</span>().<span class=\\\"pl-en\\\">get_meter</span>(<span class=\\\"pl-s\\\">\\\"view-name-change\\\"</span>)\\n<span class=\\\"pl-s1\\\">my_counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_counter</span>(<span class=\\\"pl-s\\\">\\\"my.counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">my_counter</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">100</span>)</pre></div>\\n<p dir=\\\"auto\\\">More examples with the metrics <code>Views</code> SDK can be found <a href=\\\"https://github.com/open-telemetry/opentelemetry-python/tree/main/docs/examples/metrics/views\\\">here</a>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Metric record attributes</h4><a id=\\\"user-content-metric-record-attributes\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Metric record attributes\\\" href=\\\"#metric-record-attributes\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application using different attributes with instruments in the OpenTelemetry SDK.\\nMetrics created and recorded using the sdk are tracked and telemetry is exported to application insights\\nwith the AzureMonitorMetricsExporter.\\n&quot;&quot;&quot;\\nimport os\\n\\nfrom opentelemetry import metrics\\nfrom opentelemetry.sdk.metrics import MeterProvider\\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\\n\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\\n\\nexporter = AzureMonitorMetricExporter.from_connection_string(\\n    os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\\n\\nattribute_set1 = {\\n    &quot;key1&quot;: &quot;val1&quot;\\n}\\nattribute_set2 = {\\n    &quot;key2&quot;: &quot;val2&quot;\\n}\\nlarge_attribute_set = {}\\nfor i in range(20):\\n    key = &quot;key{}&quot;.format(i)\\n    val = &quot;val{}&quot;.format(i)\\n    large_attribute_set[key] = val\\n\\nmeter = metrics.get_meter_provider().get_meter(&quot;sample&quot;)\\n\\n# Counter\\ncounter = meter.create_counter(&quot;attr1_counter&quot;)\\ncounter.add(1, attribute_set1)\\n\\n# Counter2\\ncounter2 = meter.create_counter(&quot;attr2_counter&quot;)\\ncounter2.add(10, attribute_set1)\\ncounter2.add(30, attribute_set2)\\n\\n# Counter3\\ncounter3 = meter.create_counter(&quot;large_attr_counter&quot;)\\ncounter3.add(100, attribute_set1)\\ncounter3.add(200, large_attribute_set)\\n\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application using different attributes with instruments in the OpenTelemetry SDK.</span>\\n<span class=\\\"pl-s\\\">Metrics created and recorded using the sdk are tracked and telemetry is exported to application insights</span>\\n<span class=\\\"pl-s\\\">with the AzureMonitorMetricsExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">metrics</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">MeterProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>\\n\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>\\n\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorMetricExporter</span>.<span class=\\\"pl-en\\\">from_connection_string</span>(\\n    <span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-s1\\\">reader</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">PeriodicExportingMetricReader</span>(<span class=\\\"pl-s1\\\">exporter</span>, <span class=\\\"pl-s1\\\">export_interval_millis</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-c1\\\">5000</span>)\\n<span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">set_meter_provider</span>(<span class=\\\"pl-v\\\">MeterProvider</span>(<span class=\\\"pl-s1\\\">metric_readers</span><span class=\\\"pl-c1\\\">=</span>[<span class=\\\"pl-s1\\\">reader</span>]))\\n\\n<span class=\\\"pl-s1\\\">attribute_set1</span> <span class=\\\"pl-c1\\\">=</span> {\\n    <span class=\\\"pl-s\\\">\\\"key1\\\"</span>: <span class=\\\"pl-s\\\">\\\"val1\\\"</span>\\n}\\n<span class=\\\"pl-s1\\\">attribute_set2</span> <span class=\\\"pl-c1\\\">=</span> {\\n    <span class=\\\"pl-s\\\">\\\"key2\\\"</span>: <span class=\\\"pl-s\\\">\\\"val2\\\"</span>\\n}\\n<span class=\\\"pl-s1\\\">large_attribute_set</span> <span class=\\\"pl-c1\\\">=</span> {}\\n<span class=\\\"pl-k\\\">for</span> <span class=\\\"pl-s1\\\">i</span> <span class=\\\"pl-c1\\\">in</span> <span class=\\\"pl-en\\\">range</span>(<span class=\\\"pl-c1\\\">20</span>):\\n    <span class=\\\"pl-s1\\\">key</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s\\\">\\\"key{}\\\"</span>.<span class=\\\"pl-en\\\">format</span>(<span class=\\\"pl-s1\\\">i</span>)\\n    <span class=\\\"pl-s1\\\">val</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s\\\">\\\"val{}\\\"</span>.<span class=\\\"pl-en\\\">format</span>(<span class=\\\"pl-s1\\\">i</span>)\\n    <span class=\\\"pl-s1\\\">large_attribute_set</span>[<span class=\\\"pl-s1\\\">key</span>] <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">val</span>\\n\\n<span class=\\\"pl-s1\\\">meter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">metrics</span>.<span class=\\\"pl-en\\\">get_meter_provider</span>().<span class=\\\"pl-en\\\">get_meter</span>(<span class=\\\"pl-s\\\">\\\"sample\\\"</span>)\\n\\n<span class=\\\"pl-c\\\"># Counter</span>\\n<span class=\\\"pl-s1\\\">counter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_counter</span>(<span class=\\\"pl-s\\\">\\\"attr1_counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">counter</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">1</span>, <span class=\\\"pl-s1\\\">attribute_set1</span>)\\n\\n<span class=\\\"pl-c\\\"># Counter2</span>\\n<span class=\\\"pl-s1\\\">counter2</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_counter</span>(<span class=\\\"pl-s\\\">\\\"attr2_counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">counter2</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">10</span>, <span class=\\\"pl-s1\\\">attribute_set1</span>)\\n<span class=\\\"pl-s1\\\">counter2</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">30</span>, <span class=\\\"pl-s1\\\">attribute_set2</span>)\\n\\n<span class=\\\"pl-c\\\"># Counter3</span>\\n<span class=\\\"pl-s1\\\">counter3</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">meter</span>.<span class=\\\"pl-en\\\">create_counter</span>(<span class=\\\"pl-s\\\">\\\"large_attr_counter\\\"</span>)\\n<span class=\\\"pl-s1\\\">counter3</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">100</span>, <span class=\\\"pl-s1\\\">attribute_set1</span>)\\n<span class=\\\"pl-s1\\\">counter3</span>.<span class=\\\"pl-en\\\">add</span>(<span class=\\\"pl-c1\\\">200</span>, <span class=\\\"pl-s1\\\">large_attribute_set</span>)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Tracing</h3><a id=\\\"user-content-tracing-1\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Tracing\\\" href=\\\"#tracing-1\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The following sections provide several code snippets covering some of the most common tasks, including:</p>\\n<ul dir=\\\"auto\\\">\\n<li><a href=\\\"#export-hello-world-trace\\\">Exporting a custom span</a></li>\\n<li><a href=\\\"#instrumentation-with-requests-library\\\">Using an instrumentation to track a library</a></li>\\n<li><a href=\\\"#enabling-sampling\\\">Enabling sampling to limit the amount of telemetry sent</a></li>\\n</ul>\\n<p dir=\\\"auto\\\">Review the <a href=\\\"https://opentelemetry-python.readthedocs.io/en/stable/sdk/trace.html\\\" rel=\\\"nofollow\\\">OpenTelemetry Tracing SDK</a> to learn how to use OpenTelemetry components to collect logs.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Export Hello World Trace</h4><a id=\\\"user-content-export-hello-world-trace\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Export Hello World Trace\\\" href=\\\"#export-hello-world-trace\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application using Opentelemetry tracing api and sdk. Custom dependencies are\\ntracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\\n&quot;&quot;&quot;\\nimport os\\nfrom opentelemetry import trace\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\\n\\ntracer_provider = TracerProvider()\\ntrace.set_tracer_provider(tracer_provider)\\ntracer = trace.get_tracer(__name__)\\n# This is the exporter that sends data to Application Insights\\nexporter = AzureMonitorTraceExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nspan_processor = BatchSpanProcessor(exporter)\\ntrace.get_tracer_provider().add_span_processor(span_processor)\\n\\nwith tracer.start_as_current_span(&quot;hello&quot;):\\n    print(&quot;Hello, World!&quot;)\\n\\n# Telemetry records are flushed automatically upon application exit\\n# If you would like to flush records manually yourself, you can call force_flush()\\ntracer_provider.force_flush()\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application using Opentelemetry tracing api and sdk. Custom dependencies are</span>\\n<span class=\\\"pl-s\\\">tracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">trace</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">TracerProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>\\n\\n<span class=\\\"pl-s1\\\">tracer_provider</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">TracerProvider</span>()\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">set_tracer_provider</span>(<span class=\\\"pl-s1\\\">tracer_provider</span>)\\n<span class=\\\"pl-s1\\\">tracer</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n<span class=\\\"pl-c\\\"># This is the exporter that sends data to Application Insights</span>\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-s1\\\">span_processor</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>)\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer_provider</span>().<span class=\\\"pl-en\\\">add_span_processor</span>(<span class=\\\"pl-s1\\\">span_processor</span>)\\n\\n<span class=\\\"pl-k\\\">with</span> <span class=\\\"pl-s1\\\">tracer</span>.<span class=\\\"pl-en\\\">start_as_current_span</span>(<span class=\\\"pl-s\\\">\\\"hello\\\"</span>):\\n    <span class=\\\"pl-en\\\">print</span>(<span class=\\\"pl-s\\\">\\\"Hello, World!\\\"</span>)\\n\\n<span class=\\\"pl-c\\\"># Telemetry records are flushed automatically upon application exit</span>\\n<span class=\\\"pl-c\\\"># If you would like to flush records manually yourself, you can call force_flush()</span>\\n<span class=\\\"pl-s1\\\">tracer_provider</span>.<span class=\\\"pl-en\\\">force_flush</span>()</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Instrumentation with requests library</h4><a id=\\\"user-content-instrumentation-with-requests-library\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Instrumentation with requests library\\\" href=\\\"#instrumentation-with-requests-library\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">OpenTelemetry also supports several instrumentations which allows to instrument with third party libraries.</p>\\n<p dir=\\\"auto\\\">For a list of instrumentations available in OpenTelemetry, visit the contrib <a href=\\\"https://opentelemetry-python-contrib.readthedocs.io/en/latest/\\\" rel=\\\"nofollow\\\">documentation</a>.</p>\\n<p dir=\\\"auto\\\">This example shows how to instrument with the <a href=\\\"https://pypi.org/project/requests/\\\" rel=\\\"nofollow\\\">requests</a> library.</p>\\n<ul dir=\\\"auto\\\">\\n<li>Install the requests instrumentation package using pip install opentelemetry-instrumentation-requests.</li>\\n</ul>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application instrumented with the OpenTelemetry requests instrumentation.\\nCalls made with the requests library will be automatically tracked and telemetry is exported to \\napplication insights with the AzureMonitorTraceExporter.\\nSee more info on the requests instrumentation here:\\nhttps://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-requests\\n&quot;&quot;&quot;\\nimport os\\nimport requests\\nfrom opentelemetry import trace\\nfrom opentelemetry.instrumentation.requests import RequestsInstrumentor\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\\n\\n# This line causes your calls made with the requests library to be tracked.\\nRequestsInstrumentor().instrument()\\n\\ntrace.set_tracer_provider(TracerProvider())\\ntracer = trace.get_tracer(__name__)\\nexporter = AzureMonitorTraceExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nspan_processor = BatchSpanProcessor(exporter)\\ntrace.get_tracer_provider().add_span_processor(span_processor)\\n\\n# This request will be traced\\nresponse = requests.get(url=&quot;https://azure.microsoft.com/&quot;)\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application instrumented with the OpenTelemetry requests instrumentation.</span>\\n<span class=\\\"pl-s\\\">Calls made with the requests library will be automatically tracked and telemetry is exported to </span>\\n<span class=\\\"pl-s\\\">application insights with the AzureMonitorTraceExporter.</span>\\n<span class=\\\"pl-s\\\">See more info on the requests instrumentation here:</span>\\n<span class=\\\"pl-s\\\">https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-requests</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">requests</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">trace</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">instrumentation</span>.<span class=\\\"pl-s1\\\">requests</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">RequestsInstrumentor</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">TracerProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>\\n\\n<span class=\\\"pl-c\\\"># This line causes your calls made with the requests library to be tracked.</span>\\n<span class=\\\"pl-v\\\">RequestsInstrumentor</span>().<span class=\\\"pl-en\\\">instrument</span>()\\n\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">set_tracer_provider</span>(<span class=\\\"pl-v\\\">TracerProvider</span>())\\n<span class=\\\"pl-s1\\\">tracer</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-s1\\\">span_processor</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>)\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer_provider</span>().<span class=\\\"pl-en\\\">add_span_processor</span>(<span class=\\\"pl-s1\\\">span_processor</span>)\\n\\n<span class=\\\"pl-c\\\"># This request will be traced</span>\\n<span class=\\\"pl-s1\\\">response</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">requests</span>.<span class=\\\"pl-en\\\">get</span>(<span class=\\\"pl-s1\\\">url</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s\\\">\\\"https://azure.microsoft.com/\\\"</span>)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h4 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Enabling sampling</h4><a id=\\\"user-content-enabling-sampling\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Enabling sampling\\\" href=\\\"#enabling-sampling\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">You can enable sampling to limit the amount of telemetry records you receive. In order to enable correct sampling in Application Insights, use the <code>ApplicationInsightsSampler</code> as shown below.</p>\\n<div class=\\\"highlight highlight-source-python notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"&quot;&quot;&quot;\\nAn example to show an application using the ApplicationInsightsSampler to enable sampling for your telemetry.\\nSpecify a sampling rate for the sampler to limit the amount of telemetry records you receive. Custom dependencies\\n are tracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\\n&quot;&quot;&quot;\\nimport os\\nfrom opentelemetry import trace\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\\nfrom azure.monitor.opentelemetry.exporter import (\\n    ApplicationInsightsSampler,\\n    AzureMonitorTraceExporter,\\n)\\n\\n# Sampler expects a sample rate of between 0 and 1 inclusive\\n# A rate of 0.75 means approximately 75% of your telemetry will be sent\\nsampler = ApplicationInsightsSampler(0.75)\\ntrace.set_tracer_provider(TracerProvider(sampler=sampler))\\ntracer = trace.get_tracer(__name__)\\nexporter = AzureMonitorTraceExporter(\\n    connection_string=os.environ[&quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;]\\n)\\nspan_processor = BatchSpanProcessor(exporter)\\ntrace.get_tracer_provider().add_span_processor(span_processor)\\n\\nfor i in range(100):\\n    # Approximately 25% of these spans should be sampled out\\n    with tracer.start_as_current_span(&quot;hello&quot;):\\n        print(&quot;Hello, World!&quot;)\\\"><pre><span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-s\\\">An example to show an application using the ApplicationInsightsSampler to enable sampling for your telemetry.</span>\\n<span class=\\\"pl-s\\\">Specify a sampling rate for the sampler to limit the amount of telemetry records you receive. Custom dependencies</span>\\n<span class=\\\"pl-s\\\"> are tracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.</span>\\n<span class=\\\"pl-s\\\">\\\"\\\"\\\"</span>\\n<span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">os</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-s1\\\">trace</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">TracerProvider</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">sdk</span>.<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-s1\\\">export</span> <span class=\\\"pl-k\\\">import</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>\\n<span class=\\\"pl-k\\\">from</span> <span class=\\\"pl-s1\\\">azure</span>.<span class=\\\"pl-s1\\\">monitor</span>.<span class=\\\"pl-s1\\\">opentelemetry</span>.<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-k\\\">import</span> (\\n    <span class=\\\"pl-v\\\">ApplicationInsightsSampler</span>,\\n    <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>,\\n)\\n\\n<span class=\\\"pl-c\\\"># Sampler expects a sample rate of between 0 and 1 inclusive</span>\\n<span class=\\\"pl-c\\\"># A rate of 0.75 means approximately 75% of your telemetry will be sent</span>\\n<span class=\\\"pl-s1\\\">sampler</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">ApplicationInsightsSampler</span>(<span class=\\\"pl-c1\\\">0.75</span>)\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">set_tracer_provider</span>(<span class=\\\"pl-v\\\">TracerProvider</span>(<span class=\\\"pl-s1\\\">sampler</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">sampler</span>))\\n<span class=\\\"pl-s1\\\">tracer</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer</span>(<span class=\\\"pl-s1\\\">__name__</span>)\\n<span class=\\\"pl-s1\\\">exporter</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">AzureMonitorTraceExporter</span>(\\n    <span class=\\\"pl-s1\\\">connection_string</span><span class=\\\"pl-c1\\\">=</span><span class=\\\"pl-s1\\\">os</span>.<span class=\\\"pl-s1\\\">environ</span>[<span class=\\\"pl-s\\\">\\\"APPLICATIONINSIGHTS_CONNECTION_STRING\\\"</span>]\\n)\\n<span class=\\\"pl-s1\\\">span_processor</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-v\\\">BatchSpanProcessor</span>(<span class=\\\"pl-s1\\\">exporter</span>)\\n<span class=\\\"pl-s1\\\">trace</span>.<span class=\\\"pl-en\\\">get_tracer_provider</span>().<span class=\\\"pl-en\\\">add_span_processor</span>(<span class=\\\"pl-s1\\\">span_processor</span>)\\n\\n<span class=\\\"pl-k\\\">for</span> <span class=\\\"pl-s1\\\">i</span> <span class=\\\"pl-c1\\\">in</span> <span class=\\\"pl-en\\\">range</span>(<span class=\\\"pl-c1\\\">100</span>):\\n    <span class=\\\"pl-c\\\"># Approximately 25% of these spans should be sampled out</span>\\n    <span class=\\\"pl-k\\\">with</span> <span class=\\\"pl-s1\\\">tracer</span>.<span class=\\\"pl-en\\\">start_as_current_span</span>(<span class=\\\"pl-s\\\">\\\"hello\\\"</span>):\\n        <span class=\\\"pl-en\\\">print</span>(<span class=\\\"pl-s\\\">\\\"Hello, World!\\\"</span>)</pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Flush/shutdown behavior</h2><a id=\\\"user-content-flushshutdown-behavior\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Flush/shutdown behavior\\\" href=\\\"#flushshutdown-behavior\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">For all applications set up with OpenTelemetry SDK and Azure Monitor exporters, telemetry is flushed automatically upon application exit. Note that this does not include when application ends abruptly or crashes due to uncaught exception.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Troubleshooting</h2><a id=\\\"user-content-troubleshooting\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Troubleshooting\\\" href=\\\"#troubleshooting\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The exporter raises exceptions defined in <a href=\\\"https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#azure-core-library-exceptions\\\">Azure Core</a>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Next steps</h2><a id=\\\"user-content-next-steps\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Next steps\\\" href=\\\"#next-steps\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">More sample code</h3><a id=\\\"user-content-more-sample-code\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: More sample code\\\" href=\\\"#more-sample-code\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Please find further examples in the <a href=\\\"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples\\\">samples</a> directory demonstrating common scenarios.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Additional documentation</h3><a id=\\\"user-content-additional-documentation\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Additional documentation\\\" href=\\\"#additional-documentation\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">For more extensive documentation on the Azure Monitor service, see the <a href=\\\"https://docs.microsoft.com/azure/azure-monitor/overview\\\" rel=\\\"nofollow\\\">Azure Monitor documentation</a> on docs.microsoft.com.</p>\\n<p dir=\\\"auto\\\">For detailed overview of OpenTelemetry, visit their <a href=\\\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md\\\">overview</a> page.</p>\\n<p dir=\\\"auto\\\">For the official OpenTelemetry Python documentation and how to enable other telemetry scenarios, visit the official OpenTelemetry <a href=\\\"https://opentelemetry.io/docs/instrumentation/python/\\\" rel=\\\"nofollow\\\">website</a>.</p>\\n<p dir=\\\"auto\\\">For more information on the Azure Monitor OpenTelemetry Distro, which is a bundle of useful, pre-assembled components (one of them being this current package) that enable telemetry scenarios with Azure Monitor, visit the <a href=\\\"https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry\\\">README</a>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Contributing</h2><a id=\\\"user-content-contributing\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Contributing\\\" href=\\\"#contributing\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">This project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit <a href=\\\"https://cla.microsoft.com\\\" rel=\\\"nofollow\\\">https://cla.microsoft.com</a>.</p>\\n<p dir=\\\"auto\\\">When you submit a pull request, a CLA-bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.</p>\\n<p dir=\\\"auto\\\">This project has adopted the <a href=\\\"https://opensource.microsoft.com/codeofconduct/\\\" rel=\\\"nofollow\\\">Microsoft Open Source Code of Conduct</a>.\\nFor more information see the <a href=\\\"https://opensource.microsoft.com/codeofconduct/faq/\\\" rel=\\\"nofollow\\\">Code of Conduct FAQ</a> or\\ncontact <a href=\\\"mailto:opencode@microsoft.com\\\">opencode@microsoft.com</a> with any additional questions or comments.</p>\\n\\n</article>\",\"errorMessage\":null,\"headerInfo\":{\"toc\":[{\"level\":1,\"text\":\"Microsoft OpenTelemetry exporter for Azure Monitor\",\"anchor\":\"microsoft-opentelemetry-exporter-for-azure-monitor\",\"htmlText\":\"Microsoft OpenTelemetry exporter for Azure Monitor\"},{\"level\":2,\"text\":\"Getting started\",\"anchor\":\"getting-started\",\"htmlText\":\"Getting started\"},{\"level\":3,\"text\":\"Install the package\",\"anchor\":\"install-the-package\",\"htmlText\":\"Install the package\"},{\"level\":3,\"text\":\"Prerequisites\",\"anchor\":\"prerequisites\",\"htmlText\":\"Prerequisites\"},{\"level\":3,\"text\":\"Instantiate the client\",\"anchor\":\"instantiate-the-client\",\"htmlText\":\"Instantiate the client\"},{\"level\":4,\"text\":\"Logging (experimental)\",\"anchor\":\"logging-experimental\",\"htmlText\":\"Logging (experimental)\"},{\"level\":4,\"text\":\"Metrics\",\"anchor\":\"metrics\",\"htmlText\":\"Metrics\"},{\"level\":4,\"text\":\"Tracing\",\"anchor\":\"tracing\",\"htmlText\":\"Tracing\"},{\"level\":2,\"text\":\"Key concepts\",\"anchor\":\"key-concepts\",\"htmlText\":\"Key concepts\"},{\"level\":2,\"text\":\"Configuration\",\"anchor\":\"configuration\",\"htmlText\":\"Configuration\"},{\"level\":2,\"text\":\"Examples\",\"anchor\":\"examples\",\"htmlText\":\"Examples\"},{\"level\":3,\"text\":\"Logging (experimental)\",\"anchor\":\"logging-experimental-1\",\"htmlText\":\"Logging (experimental)\"},{\"level\":4,\"text\":\"Export Hello World Log\",\"anchor\":\"export-hello-world-log\",\"htmlText\":\"Export Hello World Log\"},{\"level\":4,\"text\":\"Export Correlated Log\",\"anchor\":\"export-correlated-log\",\"htmlText\":\"Export Correlated Log\"},{\"level\":4,\"text\":\"Export Custom Properties Log\",\"anchor\":\"export-custom-properties-log\",\"htmlText\":\"Export Custom Properties Log\"},{\"level\":4,\"text\":\"Export Exceptions Log\",\"anchor\":\"export-exceptions-log\",\"htmlText\":\"Export Exceptions Log\"},{\"level\":3,\"text\":\"Metrics\",\"anchor\":\"metrics-1\",\"htmlText\":\"Metrics\"},{\"level\":4,\"text\":\"Metric instrument usage\",\"anchor\":\"metric-instrument-usage\",\"htmlText\":\"Metric instrument usage\"},{\"level\":4,\"text\":\"Metric custom views\",\"anchor\":\"metric-custom-views\",\"htmlText\":\"Metric custom views\"},{\"level\":4,\"text\":\"Metric record attributes\",\"anchor\":\"metric-record-attributes\",\"htmlText\":\"Metric record attributes\"},{\"level\":3,\"text\":\"Tracing\",\"anchor\":\"tracing-1\",\"htmlText\":\"Tracing\"},{\"level\":4,\"text\":\"Export Hello World Trace\",\"anchor\":\"export-hello-world-trace\",\"htmlText\":\"Export Hello World Trace\"},{\"level\":4,\"text\":\"Instrumentation with requests library\",\"anchor\":\"instrumentation-with-requests-library\",\"htmlText\":\"Instrumentation with requests library\"},{\"level\":4,\"text\":\"Enabling sampling\",\"anchor\":\"enabling-sampling\",\"htmlText\":\"Enabling sampling\"},{\"level\":2,\"text\":\"Flush/shutdown behavior\",\"anchor\":\"flushshutdown-behavior\",\"htmlText\":\"Flush/shutdown behavior\"},{\"level\":2,\"text\":\"Troubleshooting\",\"anchor\":\"troubleshooting\",\"htmlText\":\"Troubleshooting\"},{\"level\":2,\"text\":\"Next steps\",\"anchor\":\"next-steps\",\"htmlText\":\"Next steps\"},{\"level\":3,\"text\":\"More sample code\",\"anchor\":\"more-sample-code\",\"htmlText\":\"More sample code\"},{\"level\":3,\"text\":\"Additional documentation\",\"anchor\":\"additional-documentation\",\"htmlText\":\"Additional documentation\"},{\"level\":2,\"text\":\"Contributing\",\"anchor\":\"contributing\",\"htmlText\":\"Contributing\"}],\"siteNavLoginPath\":\"/login?return_to=https%3A%2F%2Fgithub.com%2Fazure%2Fazure-sdk-for-python%2Ftree%2Fmain%2Fsdk%2Fmonitor%2Fazure-monitor-opentelemetry-exporter\"}},\"totalCount\":14,\"showBranchInfobar\":false},\"fileTree\":{\"sdk/monitor\":{\"items\":[{\"name\":\"azure-mgmt-monitor\",\"path\":\"sdk/monitor/azure-mgmt-monitor\",\"contentType\":\"directory\"},{\"name\":\"azure-monitor-ingestion\",\"path\":\"sdk/monitor/azure-monitor-ingestion\",\"contentType\":\"directory\"},{\"name\":\"azure-monitor-opentelemetry-exporter\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry-exporter\",\"contentType\":\"directory\"},{\"name\":\"azure-monitor-opentelemetry\",\"path\":\"sdk/monitor/azure-monitor-opentelemetry\",\"contentType\":\"directory\"},{\"name\":\"azure-monitor-query\",\"path\":\"sdk/monitor/azure-monitor-query\",\"contentType\":\"directory\"},{\"name\":\"azure-monitor\",\"path\":\"sdk/monitor/azure-monitor\",\"contentType\":\"directory\"},{\"name\":\"ci.yml\",\"path\":\"sdk/monitor/ci.yml\",\"contentType\":\"file\"},{\"name\":\"test-resources-post.ps1\",\"path\":\"sdk/monitor/test-resources-post.ps1\",\"contentType\":\"file\"},{\"name\":\"test-resources.bicep\",\"path\":\"sdk/monitor/test-resources.bicep\",\"contentType\":\"file\"},{\"name\":\"tests.yml\",\"path\":\"sdk/monitor/tests.yml\",\"contentType\":\"file\"}],\"totalCount\":10},\"sdk\":{\"items\":[{\"name\":\"advisor\",\"path\":\"sdk/advisor\",\"contentType\":\"directory\"},{\"name\":\"agrifood\",\"path\":\"sdk/agrifood\",\"contentType\":\"directory\"},{\"name\":\"ai\",\"path\":\"sdk/ai\",\"contentType\":\"directory\"},{\"name\":\"aks\",\"path\":\"sdk/aks\",\"contentType\":\"directory\"},{\"name\":\"alertsmanagement\",\"path\":\"sdk/alertsmanagement\",\"contentType\":\"directory\"},{\"name\":\"anomalydetector\",\"path\":\"sdk/anomalydetector\",\"contentType\":\"directory\"},{\"name\":\"apicenter\",\"path\":\"sdk/apicenter\",\"contentType\":\"directory\"},{\"name\":\"apimanagement\",\"path\":\"sdk/apimanagement\",\"contentType\":\"directory\"},{\"name\":\"app\",\"path\":\"sdk/app\",\"contentType\":\"directory\"},{\"name\":\"appcomplianceautomation\",\"path\":\"sdk/appcomplianceautomation\",\"contentType\":\"directory\"},{\"name\":\"appconfiguration\",\"path\":\"sdk/appconfiguration\",\"contentType\":\"directory\"},{\"name\":\"appcontainers\",\"path\":\"sdk/appcontainers\",\"contentType\":\"directory\"},{\"name\":\"applicationinsights\",\"path\":\"sdk/applicationinsights\",\"contentType\":\"directory\"},{\"name\":\"appplatform\",\"path\":\"sdk/appplatform\",\"contentType\":\"directory\"},{\"name\":\"appservice\",\"path\":\"sdk/appservice\",\"contentType\":\"directory\"},{\"name\":\"astro\",\"path\":\"sdk/astro\",\"contentType\":\"directory\"},{\"name\":\"attestation\",\"path\":\"sdk/attestation\",\"contentType\":\"directory\"},{\"name\":\"authorization\",\"path\":\"sdk/authorization\",\"contentType\":\"directory\"},{\"name\":\"automanage\",\"path\":\"sdk/automanage\",\"contentType\":\"directory\"},{\"name\":\"automation\",\"path\":\"sdk/automation\",\"contentType\":\"directory\"},{\"name\":\"azurearcdata\",\"path\":\"sdk/azurearcdata\",\"contentType\":\"directory\"},{\"name\":\"azurelargeinstance\",\"path\":\"sdk/azurelargeinstance\",\"contentType\":\"directory\"},{\"name\":\"azurestack\",\"path\":\"sdk/azurestack\",\"contentType\":\"directory\"},{\"name\":\"azurestackhci\",\"path\":\"sdk/azurestackhci\",\"contentType\":\"directory\"},{\"name\":\"baremetalinfrastructure\",\"path\":\"sdk/baremetalinfrastructure\",\"contentType\":\"directory\"},{\"name\":\"batch\",\"path\":\"sdk/batch\",\"contentType\":\"directory\"},{\"name\":\"batchai\",\"path\":\"sdk/batchai\",\"contentType\":\"directory\"},{\"name\":\"billing\",\"path\":\"sdk/billing\",\"contentType\":\"directory\"},{\"name\":\"billingbenefits\",\"path\":\"sdk/billingbenefits\",\"contentType\":\"directory\"},{\"name\":\"botservice\",\"path\":\"sdk/botservice\",\"contentType\":\"directory\"},{\"name\":\"cdn\",\"path\":\"sdk/cdn\",\"contentType\":\"directory\"},{\"name\":\"changeanalysis\",\"path\":\"sdk/changeanalysis\",\"contentType\":\"directory\"},{\"name\":\"chaos\",\"path\":\"sdk/chaos\",\"contentType\":\"directory\"},{\"name\":\"cognitivelanguage\",\"path\":\"sdk/cognitivelanguage\",\"contentType\":\"directory\"},{\"name\":\"cognitiveservices\",\"path\":\"sdk/cognitiveservices\",\"contentType\":\"directory\"},{\"name\":\"commerce\",\"path\":\"sdk/commerce\",\"contentType\":\"directory\"},{\"name\":\"communication\",\"path\":\"sdk/communication\",\"contentType\":\"directory\"},{\"name\":\"compute\",\"path\":\"sdk/compute\",\"contentType\":\"directory\"},{\"name\":\"confidentialledger\",\"path\":\"sdk/confidentialledger\",\"contentType\":\"directory\"},{\"name\":\"confluent\",\"path\":\"sdk/confluent\",\"contentType\":\"directory\"},{\"name\":\"connectedvmware\",\"path\":\"sdk/connectedvmware\",\"contentType\":\"directory\"},{\"name\":\"consumption\",\"path\":\"sdk/consumption\",\"contentType\":\"directory\"},{\"name\":\"containerinstance\",\"path\":\"sdk/containerinstance\",\"contentType\":\"directory\"},{\"name\":\"containerregistry\",\"path\":\"sdk/containerregistry\",\"contentType\":\"directory\"},{\"name\":\"containerservice\",\"path\":\"sdk/containerservice\",\"contentType\":\"directory\"},{\"name\":\"contentsafety\",\"path\":\"sdk/contentsafety\",\"contentType\":\"directory\"},{\"name\":\"core\",\"path\":\"sdk/core\",\"contentType\":\"directory\"},{\"name\":\"cosmos\",\"path\":\"sdk/cosmos\",\"contentType\":\"directory\"},{\"name\":\"cosmosdbforpostgresql\",\"path\":\"sdk/cosmosdbforpostgresql\",\"contentType\":\"directory\"},{\"name\":\"costmanagement\",\"path\":\"sdk/costmanagement\",\"contentType\":\"directory\"},{\"name\":\"customproviders\",\"path\":\"sdk/customproviders\",\"contentType\":\"directory\"},{\"name\":\"dashboard\",\"path\":\"sdk/dashboard\",\"contentType\":\"directory\"},{\"name\":\"databox\",\"path\":\"sdk/databox\",\"contentType\":\"directory\"},{\"name\":\"databoxedge\",\"path\":\"sdk/databoxedge\",\"contentType\":\"directory\"},{\"name\":\"databricks\",\"path\":\"sdk/databricks\",\"contentType\":\"directory\"},{\"name\":\"datadog\",\"path\":\"sdk/datadog\",\"contentType\":\"directory\"},{\"name\":\"datafactory\",\"path\":\"sdk/datafactory\",\"contentType\":\"directory\"},{\"name\":\"datalake\",\"path\":\"sdk/datalake\",\"contentType\":\"directory\"},{\"name\":\"datamigration\",\"path\":\"sdk/datamigration\",\"contentType\":\"directory\"},{\"name\":\"dataprotection\",\"path\":\"sdk/dataprotection\",\"contentType\":\"directory\"},{\"name\":\"datashare\",\"path\":\"sdk/datashare\",\"contentType\":\"directory\"},{\"name\":\"defendereasm\",\"path\":\"sdk/defendereasm\",\"contentType\":\"directory\"},{\"name\":\"deploymentmanager\",\"path\":\"sdk/deploymentmanager\",\"contentType\":\"directory\"},{\"name\":\"desktopvirtualization\",\"path\":\"sdk/desktopvirtualization\",\"contentType\":\"directory\"},{\"name\":\"devcenter\",\"path\":\"sdk/devcenter\",\"contentType\":\"directory\"},{\"name\":\"devhub\",\"path\":\"sdk/devhub\",\"contentType\":\"directory\"},{\"name\":\"deviceupdate\",\"path\":\"sdk/deviceupdate\",\"contentType\":\"directory\"},{\"name\":\"devtestlabs\",\"path\":\"sdk/devtestlabs\",\"contentType\":\"directory\"},{\"name\":\"digitaltwins\",\"path\":\"sdk/digitaltwins\",\"contentType\":\"directory\"},{\"name\":\"dnsresolver\",\"path\":\"sdk/dnsresolver\",\"contentType\":\"directory\"},{\"name\":\"documentintelligence\",\"path\":\"sdk/documentintelligence\",\"contentType\":\"directory\"},{\"name\":\"dynatrace\",\"path\":\"sdk/dynatrace\",\"contentType\":\"directory\"},{\"name\":\"easm\",\"path\":\"sdk/easm\",\"contentType\":\"directory\"},{\"name\":\"edgegateway\",\"path\":\"sdk/edgegateway\",\"contentType\":\"directory\"},{\"name\":\"edgeorder\",\"path\":\"sdk/edgeorder\",\"contentType\":\"directory\"},{\"name\":\"education\",\"path\":\"sdk/education\",\"contentType\":\"directory\"},{\"name\":\"elastic\",\"path\":\"sdk/elastic\",\"contentType\":\"directory\"},{\"name\":\"elasticsan\",\"path\":\"sdk/elasticsan\",\"contentType\":\"directory\"},{\"name\":\"eventgrid\",\"path\":\"sdk/eventgrid\",\"contentType\":\"directory\"},{\"name\":\"eventhub\",\"path\":\"sdk/eventhub\",\"contentType\":\"directory\"},{\"name\":\"extendedlocation\",\"path\":\"sdk/extendedlocation\",\"contentType\":\"directory\"},{\"name\":\"fluidrelay\",\"path\":\"sdk/fluidrelay\",\"contentType\":\"directory\"},{\"name\":\"formrecognizer\",\"path\":\"sdk/formrecognizer\",\"contentType\":\"directory\"},{\"name\":\"graphrbac\",\"path\":\"sdk/graphrbac\",\"contentType\":\"directory\"},{\"name\":\"graphservices\",\"path\":\"sdk/graphservices\",\"contentType\":\"directory\"},{\"name\":\"hanaonazure\",\"path\":\"sdk/hanaonazure\",\"contentType\":\"directory\"},{\"name\":\"hardwaresecuritymodules\",\"path\":\"sdk/hardwaresecuritymodules\",\"contentType\":\"directory\"},{\"name\":\"hdinsight\",\"path\":\"sdk/hdinsight\",\"contentType\":\"directory\"},{\"name\":\"healthbot\",\"path\":\"sdk/healthbot\",\"contentType\":\"directory\"},{\"name\":\"healthcareapis\",\"path\":\"sdk/healthcareapis\",\"contentType\":\"directory\"},{\"name\":\"healthinsights\",\"path\":\"sdk/healthinsights\",\"contentType\":\"directory\"},{\"name\":\"hybridcompute\",\"path\":\"sdk/hybridcompute\",\"contentType\":\"directory\"},{\"name\":\"hybridconnectivity\",\"path\":\"sdk/hybridconnectivity\",\"contentType\":\"directory\"},{\"name\":\"hybridcontainerservice\",\"path\":\"sdk/hybridcontainerservice\",\"contentType\":\"directory\"},{\"name\":\"hybridkubernetes\",\"path\":\"sdk/hybridkubernetes\",\"contentType\":\"directory\"},{\"name\":\"hybridnetwork\",\"path\":\"sdk/hybridnetwork\",\"contentType\":\"directory\"},{\"name\":\"identity\",\"path\":\"sdk/identity\",\"contentType\":\"directory\"},{\"name\":\"iotfirmwaredefense\",\"path\":\"sdk/iotfirmwaredefense\",\"contentType\":\"directory\"},{\"name\":\"iothub\",\"path\":\"sdk/iothub\",\"contentType\":\"directory\"},{\"name\":\"keyvault\",\"path\":\"sdk/keyvault\",\"contentType\":\"directory\"},{\"name\":\"kubernetesconfiguration\",\"path\":\"sdk/kubernetesconfiguration\",\"contentType\":\"directory\"},{\"name\":\"kusto\",\"path\":\"sdk/kusto\",\"contentType\":\"directory\"},{\"name\":\"labservices\",\"path\":\"sdk/labservices\",\"contentType\":\"directory\"},{\"name\":\"loadtesting\",\"path\":\"sdk/loadtesting\",\"contentType\":\"directory\"},{\"name\":\"loganalytics\",\"path\":\"sdk/loganalytics\",\"contentType\":\"directory\"},{\"name\":\"logic\",\"path\":\"sdk/logic\",\"contentType\":\"directory\"},{\"name\":\"logz\",\"path\":\"sdk/logz\",\"contentType\":\"directory\"},{\"name\":\"machinelearning\",\"path\":\"sdk/machinelearning\",\"contentType\":\"directory\"},{\"name\":\"maintenance\",\"path\":\"sdk/maintenance\",\"contentType\":\"directory\"},{\"name\":\"managedapplications\",\"path\":\"sdk/managedapplications\",\"contentType\":\"directory\"},{\"name\":\"managednetworkfabric\",\"path\":\"sdk/managednetworkfabric\",\"contentType\":\"directory\"},{\"name\":\"managedservices\",\"path\":\"sdk/managedservices\",\"contentType\":\"directory\"},{\"name\":\"managementgroups\",\"path\":\"sdk/managementgroups\",\"contentType\":\"directory\"},{\"name\":\"managementpartner\",\"path\":\"sdk/managementpartner\",\"contentType\":\"directory\"},{\"name\":\"maps\",\"path\":\"sdk/maps\",\"contentType\":\"directory\"},{\"name\":\"marketplaceordering\",\"path\":\"sdk/marketplaceordering\",\"contentType\":\"directory\"},{\"name\":\"media\",\"path\":\"sdk/media\",\"contentType\":\"directory\"},{\"name\":\"metricsadvisor\",\"path\":\"sdk/metricsadvisor\",\"contentType\":\"directory\"},{\"name\":\"mixedreality\",\"path\":\"sdk/mixedreality\",\"contentType\":\"directory\"},{\"name\":\"ml\",\"path\":\"sdk/ml\",\"contentType\":\"directory\"},{\"name\":\"mobilenetwork\",\"path\":\"sdk/mobilenetwork\",\"contentType\":\"directory\"},{\"name\":\"modelsrepository\",\"path\":\"sdk/modelsrepository\",\"contentType\":\"directory\"},{\"name\":\"monitor\",\"path\":\"sdk/monitor\",\"contentType\":\"directory\"},{\"name\":\"netapp\",\"path\":\"sdk/netapp\",\"contentType\":\"directory\"},{\"name\":\"network\",\"path\":\"sdk/network\",\"contentType\":\"directory\"},{\"name\":\"networkanalytics\",\"path\":\"sdk/networkanalytics\",\"contentType\":\"directory\"},{\"name\":\"networkcloud\",\"path\":\"sdk/networkcloud\",\"contentType\":\"directory\"},{\"name\":\"networkfunction\",\"path\":\"sdk/networkfunction\",\"contentType\":\"directory\"},{\"name\":\"newrelicobservability\",\"path\":\"sdk/newrelicobservability\",\"contentType\":\"directory\"},{\"name\":\"nginx\",\"path\":\"sdk/nginx\",\"contentType\":\"directory\"},{\"name\":\"notificationhubs\",\"path\":\"sdk/notificationhubs\",\"contentType\":\"directory\"},{\"name\":\"nspkg\",\"path\":\"sdk/nspkg\",\"contentType\":\"directory\"},{\"name\":\"oep\",\"path\":\"sdk/oep\",\"contentType\":\"directory\"},{\"name\":\"openai\",\"path\":\"sdk/openai\",\"contentType\":\"directory\"},{\"name\":\"operationsmanagement\",\"path\":\"sdk/operationsmanagement\",\"contentType\":\"directory\"},{\"name\":\"orbital\",\"path\":\"sdk/orbital\",\"contentType\":\"directory\"},{\"name\":\"paloaltonetworks\",\"path\":\"sdk/paloaltonetworks\",\"contentType\":\"directory\"},{\"name\":\"peering\",\"path\":\"sdk/peering\",\"contentType\":\"directory\"},{\"name\":\"personalizer\",\"path\":\"sdk/personalizer\",\"contentType\":\"directory\"},{\"name\":\"playwrighttesting\",\"path\":\"sdk/playwrighttesting\",\"contentType\":\"directory\"},{\"name\":\"policyinsights\",\"path\":\"sdk/policyinsights\",\"contentType\":\"directory\"},{\"name\":\"portal\",\"path\":\"sdk/portal\",\"contentType\":\"directory\"},{\"name\":\"powerbidedicated\",\"path\":\"sdk/powerbidedicated\",\"contentType\":\"directory\"},{\"name\":\"powerbiembedded\",\"path\":\"sdk/powerbiembedded\",\"contentType\":\"directory\"},{\"name\":\"purview\",\"path\":\"sdk/purview\",\"contentType\":\"directory\"},{\"name\":\"quantum\",\"path\":\"sdk/quantum\",\"contentType\":\"directory\"},{\"name\":\"qumulo\",\"path\":\"sdk/qumulo\",\"contentType\":\"directory\"},{\"name\":\"quota\",\"path\":\"sdk/quota\",\"contentType\":\"directory\"},{\"name\":\"rdbms\",\"path\":\"sdk/rdbms\",\"contentType\":\"directory\"},{\"name\":\"recoveryservices\",\"path\":\"sdk/recoveryservices\",\"contentType\":\"directory\"},{\"name\":\"recoveryservicesdatareplication\",\"path\":\"sdk/recoveryservicesdatareplication\",\"contentType\":\"directory\"},{\"name\":\"redhatopenshift\",\"path\":\"sdk/redhatopenshift\",\"contentType\":\"directory\"},{\"name\":\"redis\",\"path\":\"sdk/redis\",\"contentType\":\"directory\"},{\"name\":\"redisenterprise\",\"path\":\"sdk/redisenterprise\",\"contentType\":\"directory\"},{\"name\":\"regionmove\",\"path\":\"sdk/regionmove\",\"contentType\":\"directory\"},{\"name\":\"relay\",\"path\":\"sdk/relay\",\"contentType\":\"directory\"},{\"name\":\"remoterendering\",\"path\":\"sdk/remoterendering\",\"contentType\":\"directory\"},{\"name\":\"reservations\",\"path\":\"sdk/reservations\",\"contentType\":\"directory\"},{\"name\":\"resourceconnector\",\"path\":\"sdk/resourceconnector\",\"contentType\":\"directory\"},{\"name\":\"resourcehealth\",\"path\":\"sdk/resourcehealth\",\"contentType\":\"directory\"},{\"name\":\"resourcemover\",\"path\":\"sdk/resourcemover\",\"contentType\":\"directory\"},{\"name\":\"resources\",\"path\":\"sdk/resources\",\"contentType\":\"directory\"},{\"name\":\"scheduler\",\"path\":\"sdk/scheduler\",\"contentType\":\"directory\"},{\"name\":\"schemaregistry\",\"path\":\"sdk/schemaregistry\",\"contentType\":\"directory\"},{\"name\":\"scvmm\",\"path\":\"sdk/scvmm\",\"contentType\":\"directory\"},{\"name\":\"search\",\"path\":\"sdk/search\",\"contentType\":\"directory\"},{\"name\":\"security\",\"path\":\"sdk/security\",\"contentType\":\"directory\"},{\"name\":\"securitydevops\",\"path\":\"sdk/securitydevops\",\"contentType\":\"directory\"},{\"name\":\"securityinsight\",\"path\":\"sdk/securityinsight\",\"contentType\":\"directory\"},{\"name\":\"selfhelp\",\"path\":\"sdk/selfhelp\",\"contentType\":\"directory\"},{\"name\":\"serialconsole\",\"path\":\"sdk/serialconsole\",\"contentType\":\"directory\"},{\"name\":\"servermanager\",\"path\":\"sdk/servermanager\",\"contentType\":\"directory\"},{\"name\":\"servicebus\",\"path\":\"sdk/servicebus\",\"contentType\":\"directory\"},{\"name\":\"servicefabric\",\"path\":\"sdk/servicefabric\",\"contentType\":\"directory\"},{\"name\":\"servicefabricmanagedclusters\",\"path\":\"sdk/servicefabricmanagedclusters\",\"contentType\":\"directory\"},{\"name\":\"servicelinker\",\"path\":\"sdk/servicelinker\",\"contentType\":\"directory\"},{\"name\":\"servicenetworking\",\"path\":\"sdk/servicenetworking\",\"contentType\":\"directory\"},{\"name\":\"signalr\",\"path\":\"sdk/signalr\",\"contentType\":\"directory\"},{\"name\":\"sphere\",\"path\":\"sdk/sphere\",\"contentType\":\"directory\"},{\"name\":\"springappdiscovery\",\"path\":\"sdk/springappdiscovery\",\"contentType\":\"directory\"},{\"name\":\"sql\",\"path\":\"sdk/sql\",\"contentType\":\"directory\"},{\"name\":\"storage\",\"path\":\"sdk/storage\",\"contentType\":\"directory\"},{\"name\":\"storagemover\",\"path\":\"sdk/storagemover\",\"contentType\":\"directory\"},{\"name\":\"storagepool\",\"path\":\"sdk/storagepool\",\"contentType\":\"directory\"},{\"name\":\"streamanalytics\",\"path\":\"sdk/streamanalytics\",\"contentType\":\"directory\"},{\"name\":\"subscription\",\"path\":\"sdk/subscription\",\"contentType\":\"directory\"},{\"name\":\"support\",\"path\":\"sdk/support\",\"contentType\":\"directory\"},{\"name\":\"synapse\",\"path\":\"sdk/synapse\",\"contentType\":\"directory\"},{\"name\":\"tables\",\"path\":\"sdk/tables\",\"contentType\":\"directory\"},{\"name\":\"template\",\"path\":\"sdk/template\",\"contentType\":\"directory\"},{\"name\":\"testbase\",\"path\":\"sdk/testbase\",\"contentType\":\"directory\"},{\"name\":\"textanalytics\",\"path\":\"sdk/textanalytics\",\"contentType\":\"directory\"},{\"name\":\"timeseriesinsights\",\"path\":\"sdk/timeseriesinsights\",\"contentType\":\"directory\"},{\"name\":\"trafficmanager\",\"path\":\"sdk/trafficmanager\",\"contentType\":\"directory\"},{\"name\":\"translation\",\"path\":\"sdk/translation\",\"contentType\":\"directory\"},{\"name\":\"videoanalyzer\",\"path\":\"sdk/videoanalyzer\",\"contentType\":\"directory\"},{\"name\":\"vision\",\"path\":\"sdk/vision\",\"contentType\":\"directory\"},{\"name\":\"voiceservices\",\"path\":\"sdk/voiceservices\",\"contentType\":\"directory\"},{\"name\":\"webpubsub\",\"path\":\"sdk/webpubsub\",\"contentType\":\"directory\"},{\"name\":\"workloadmonitor\",\"path\":\"sdk/workloadmonitor\",\"contentType\":\"directory\"},{\"name\":\"workloads\",\"path\":\"sdk/workloads\",\"contentType\":\"directory\"},{\"name\":\"conftest.py\",\"path\":\"sdk/conftest.py\",\"contentType\":\"file\"}],\"totalCount\":202},\"\":{\"items\":[{\"name\":\".devcontainer\",\"path\":\".devcontainer\",\"contentType\":\"directory\"},{\"name\":\".github\",\"path\":\".github\",\"contentType\":\"directory\"},{\"name\":\".vscode\",\"path\":\".vscode\",\"contentType\":\"directory\"},{\"name\":\"common\",\"path\":\"common\",\"contentType\":\"directory\"},{\"name\":\"conda\",\"path\":\"conda\",\"contentType\":\"directory\"},{\"name\":\"doc\",\"path\":\"doc\",\"contentType\":\"directory\"},{\"name\":\"eng\",\"path\":\"eng\",\"contentType\":\"directory\"},{\"name\":\"scripts\",\"path\":\"scripts\",\"contentType\":\"directory\"},{\"name\":\"sdk\",\"path\":\"sdk\",\"contentType\":\"directory\"},{\"name\":\"tools\",\"path\":\"tools\",\"contentType\":\"directory\"},{\"name\":\".coveragerc\",\"path\":\".coveragerc\",\"contentType\":\"file\"},{\"name\":\".gitattributes\",\"path\":\".gitattributes\",\"contentType\":\"file\"},{\"name\":\".gitignore\",\"path\":\".gitignore\",\"contentType\":\"file\"},{\"name\":\".sscignore\",\"path\":\".sscignore\",\"contentType\":\"file\"},{\"name\":\"CODE_OF_CONDUCT.md\",\"path\":\"CODE_OF_CONDUCT.md\",\"contentType\":\"file\"},{\"name\":\"CONTRIBUTING.md\",\"path\":\"CONTRIBUTING.md\",\"contentType\":\"file\"},{\"name\":\"LICENSE\",\"path\":\"LICENSE\",\"contentType\":\"file\"},{\"name\":\"NOTICE.txt\",\"path\":\"NOTICE.txt\",\"contentType\":\"file\"},{\"name\":\"README.md\",\"path\":\"README.md\",\"contentType\":\"file\"},{\"name\":\"README.rst\",\"path\":\"README.rst\",\"contentType\":\"file\"},{\"name\":\"SECURITY.md\",\"path\":\"SECURITY.md\",\"contentType\":\"file\"},{\"name\":\"SUPPORT.md\",\"path\":\"SUPPORT.md\",\"contentType\":\"file\"},{\"name\":\"ci_template.yml\",\"path\":\"ci_template.yml\",\"contentType\":\"file\"},{\"name\":\"pylintrc\",\"path\":\"pylintrc\",\"contentType\":\"file\"},{\"name\":\"pyrightconfig.json\",\"path\":\"pyrightconfig.json\",\"contentType\":\"file\"},{\"name\":\"ruff.toml\",\"path\":\"ruff.toml\",\"contentType\":\"file\"},{\"name\":\"setup.cfg\",\"path\":\"setup.cfg\",\"contentType\":\"file\"},{\"name\":\"setup.py\",\"path\":\"setup.py\",\"contentType\":\"file\"},{\"name\":\"shared_requirements.txt\",\"path\":\"shared_requirements.txt\",\"contentType\":\"file\"},{\"name\":\"swagger_to_sdk_config.json\",\"path\":\"swagger_to_sdk_config.json\",\"contentType\":\"file\"},{\"name\":\"swagger_to_sdk_config_autorest.json\",\"path\":\"swagger_to_sdk_config_autorest.json\",\"contentType\":\"file\"},{\"name\":\"swagger_to_sdk_config_dpg.json\",\"path\":\"swagger_to_sdk_config_dpg.json\",\"contentType\":\"file\"}],\"totalCount\":32}},\"fileTreeProcessingTime\":23.083074,\"foldersToFetch\":[],\"treeExpanded\":true,\"symbolsExpanded\":false,\"csrf_tokens\":{\"/azure/azure-sdk-for-python/branches\":{\"post\":\"sBM281cZ4XYiDsxtXvAW7fXDsI3UWbJOdo_33CBVQVlN4YCK72NekJmIR4RWq_q96poMU1XX_GWFGWy0f4mVgA\"},\"/Azure/azure-sdk-for-python/branches/fetch_and_merge/main\":{\"post\":\"CXdD6nfOphSGRNVJgZBoaxVkVr0gBfdE3fp-BfJytA38eW1GbEKOgN00Hs24sYaT-9L7x0DuYQQGYHe_8SWRnQ\"},\"/Azure/azure-sdk-for-python/branches/fetch_and_merge/main?discard_changes=true\":{\"post\":\"4oQtvPZ5zTT5Eqo4KhT5KC76a1t0cpg4-BgHsEP2PYcXigMQ7fXloKJiYbwTNRfQwEzGIRSZDngjgg4KQKEYFw\"}}},\"title\":\"azure-sdk-for-python/sdk/monitor/azure-monitor-opentelemetry-exporter at main \u00b7 Azure/azure-sdk-for-python\"}",
  "embeddings": []
}